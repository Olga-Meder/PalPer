
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800c944  0800c944  0001c944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca28  0800ca28  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca28  0800ca28  0001ca28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca30  0800ca30  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca30  0800ca30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ca38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0e4  200000ec  0800cb24  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b1d0  0800cb24  0002b1d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8e0  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d18  00000000  00000000  0003f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00043718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  00045050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9f4  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5f4  00000000  00000000  0007320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001138b5  00000000  00000000  00090800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a40b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e54  00000000  00000000  001a4108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c92c 	.word	0x0800c92c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	0800c92c 	.word	0x0800c92c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AudioPlay_Error_CallBack>:
//16.congaLov -> sektor 31
//17.clave -> sektor 32
//18.congaHigh -> sektor 33

void AudioPlay_Error_CallBack(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 8000578:	f000 fc8a 	bl	8000e90 <Error_Handler>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <AudioPlay_TransferComplete_CallBack>:
static uint16_t *pAudioSample;

static uint32_t RozmiarSekcji = 65536;

void AudioPlay_TransferComplete_CallBack()
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN PV */


uint32_t PomiarADC;
volatile uint8_t adc;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800059a:	f003 ff3d 	bl	8004418 <HAL_ADC_GetValue>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x20>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000110 	.word	0x20000110
 80005b0:	200003b4 	.word	0x200003b4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f003 f87d 	bl	80036b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f953 	bl	8000868 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005c2:	f000 f9a5 	bl	8000910 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fb93 	bl	8000cf0 <MX_GPIO_Init>
  MX_LCD_Init();
 80005ca:	f000 fa85 	bl	8000ad8 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80005ce:	f000 fabd 	bl	8000b4c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005d2:	f000 fae1 	bl	8000b98 <MX_RTC_Init>
  MX_I2C1_Init();
 80005d6:	f000 fa3f 	bl	8000a58 <MX_I2C1_Init>
  MX_DMA_Init();
 80005da:	f000 fb6b 	bl	8000cb4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005de:	f000 fb39 	bl	8000c54 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80005e2:	f000 fb01 	bl	8000be8 <MX_SAI1_Init>
  MX_ADC1_Init();
 80005e6:	f000 f9c1 	bl	800096c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 80005ea:	f001 ff93 	bl	8002514 <BSP_LCD_GLASS_Init>
  HAL_ADC_Start_IT(&hadc1);
 80005ee:	4893      	ldr	r0, [pc, #588]	; (800083c <main+0x288>)
 80005f0:	f003 fde0 	bl	80041b4 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_HIGH);
 80005f4:	2296      	movs	r2, #150	; 0x96
 80005f6:	2101      	movs	r1, #1
 80005f8:	4891      	ldr	r0, [pc, #580]	; (8000840 <main+0x28c>)
 80005fa:	f001 fff3 	bl	80025e4 <BSP_LCD_GLASS_ScrollSentence>

  static QSPI_Info pQSPI_Info;
  uint8_t status;
  status = BSP_QSPI_Init();
 80005fe:	f002 fe2f 	bl	8003260 <BSP_QSPI_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if (status == QSPI_OK) {
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10e      	bne.n	800062a <main+0x76>
	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 800060c:	4b8d      	ldr	r3, [pc, #564]	; (8000844 <main+0x290>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8000612:	4b8c      	ldr	r3, [pc, #560]	; (8000844 <main+0x290>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8000618:	4b8a      	ldr	r3, [pc, #552]	; (8000844 <main+0x290>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 800061e:	4b89      	ldr	r3, [pc, #548]	; (8000844 <main+0x290>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8000624:	4b87      	ldr	r3, [pc, #540]	; (8000844 <main+0x290>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  }

  if(BSP_AUDIO_OUT_Init(2,  // Słuchawki
 800062a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800062e:	2150      	movs	r1, #80	; 0x50
 8000630:	2002      	movs	r0, #2
 8000632:	f001 fd6d 	bl	8002110 <BSP_AUDIO_OUT_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <main+0x8c>
                        80, // %głośności
                        44100) != 0)  // częstotliwość
  {
		  Error_Handler();
 800063c:	f000 fc28 	bl	8000e90 <Error_Handler>
  }

  BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000640:	4a81      	ldr	r2, [pc, #516]	; (8000848 <main+0x294>)
 8000642:	2100      	movs	r1, #0
 8000644:	4881      	ldr	r0, [pc, #516]	; (800084c <main+0x298>)
 8000646:	f001 fe25 	bl	8002294 <BSP_AUDIO_OUT_RegisterCallbacks>
              	  	  	  	  	  NULL,
                                  AudioPlay_TransferComplete_CallBack);

  if(BSP_AUDIO_OUT_SetVolume(80) != 0)
 800064a:	2050      	movs	r0, #80	; 0x50
 800064c:	f001 fe0a 	bl	8002264 <BSP_AUDIO_OUT_SetVolume>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0xa6>
  {
	  Error_Handler();
 8000656:	f000 fc1b 	bl	8000e90 <Error_Handler>
  }

  int flag2 = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  HAL_ADC_Start(&hadc1);
 8000662:	4876      	ldr	r0, [pc, #472]	; (800083c <main+0x288>)
 8000664:	f003 fc14 	bl	8003e90 <HAL_ADC_Start>
  char buff[6];
  sprintf(buff,"SEK %i",1);
 8000668:	463b      	mov	r3, r7
 800066a:	2201      	movs	r2, #1
 800066c:	4978      	ldr	r1, [pc, #480]	; (8000850 <main+0x29c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f00b fcee 	bl	800c050 <siprintf>
  BSP_LCD_GLASS_DisplayString(buff);
 8000674:	463b      	mov	r3, r7
 8000676:	4618      	mov	r0, r3
 8000678:	f001 ff86 	bl	8002588 <BSP_LCD_GLASS_DisplayString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin) && flag2)
 800067c:	2101      	movs	r1, #1
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f005 fcb7 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d016      	beq.n	80006ba <main+0x106>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d013      	beq.n	80006ba <main+0x106>
	  {
		  count++;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	3301      	adds	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
		  flag2 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
		  count = count % 4;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	60bb      	str	r3, [r7, #8]
		  sprintf(buff,"SEK %i",count+1);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	463b      	mov	r3, r7
 80006aa:	4969      	ldr	r1, [pc, #420]	; (8000850 <main+0x29c>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f00b fccf 	bl	800c050 <siprintf>
		  BSP_LCD_GLASS_DisplayString(buff);
 80006b2:	463b      	mov	r3, r7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ff67 	bl	8002588 <BSP_LCD_GLASS_DisplayString>
	  }
	  if(!(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin)))
 80006ba:	2101      	movs	r1, #1
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f005 fc98 	bl	8005ff4 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <main+0x11a>
	  {
		  flag2 = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
	  }

	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80006ce:	210a      	movs	r1, #10
 80006d0:	485a      	ldr	r0, [pc, #360]	; (800083c <main+0x288>)
 80006d2:	f003 fc97 	bl	8004004 <HAL_ADC_PollForConversion>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1cf      	bne.n	800067c <main+0xc8>
	  {
		  PomiarADC = HAL_ADC_GetValue(&hadc1);
 80006dc:	4857      	ldr	r0, [pc, #348]	; (800083c <main+0x288>)
 80006de:	f003 fe9b 	bl	8004418 <HAL_ADC_GetValue>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a5b      	ldr	r2, [pc, #364]	; (8000854 <main+0x2a0>)
 80006e6:	6013      	str	r3, [r2, #0]
		  //SEKTOR 1
		  if(PomiarADC == 7 || PomiarADC == 15 || PomiarADC == 31)
 80006e8:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <main+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	d007      	beq.n	8000700 <main+0x14c>
 80006f0:	4b58      	ldr	r3, [pc, #352]	; (8000854 <main+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d003      	beq.n	8000700 <main+0x14c>
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <main+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b1f      	cmp	r3, #31
 80006fe:	d121      	bne.n	8000744 <main+0x190>
		  {

			  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 8000700:	4b55      	ldr	r3, [pc, #340]	; (8000858 <main+0x2a4>)
 8000702:	f245 6238 	movw	r2, #22072	; 0x5638
 8000706:	601a      	str	r2, [r3, #0]
			  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (tab[count][0])));
 8000708:	4a54      	ldr	r2, [pc, #336]	; (800085c <main+0x2a8>)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b52      	ldr	r3, [pc, #328]	; (8000860 <main+0x2ac>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000720:	461a      	mov	r2, r3
 8000722:	4b50      	ldr	r3, [pc, #320]	; (8000864 <main+0x2b0>)
 8000724:	601a      	str	r2, [r3, #0]
			  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 8000726:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <main+0x2b0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a4b      	ldr	r2, [pc, #300]	; (8000858 <main+0x2a4>)
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fd37 	bl	80021a4 <BSP_AUDIO_OUT_Play>
			  HAL_Delay(150);
 8000736:	2096      	movs	r0, #150	; 0x96
 8000738:	f003 f83a 	bl	80037b0 <HAL_Delay>
			  BSP_AUDIO_OUT_Stop(2);
 800073c:	2002      	movs	r0, #2
 800073e:	f001 fd6b 	bl	8002218 <BSP_AUDIO_OUT_Stop>
 8000742:	e077      	b.n	8000834 <main+0x280>
		  }
		  //SEKTOR 2
		  else if(PomiarADC == 63)
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <main+0x2a0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b3f      	cmp	r3, #63	; 0x3f
 800074a:	d122      	bne.n	8000792 <main+0x1de>
		  {
			  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <main+0x2a4>)
 800074e:	f245 6238 	movw	r2, #22072	; 0x5638
 8000752:	601a      	str	r2, [r3, #0]
			  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (tab[count][1])));
 8000754:	4a41      	ldr	r2, [pc, #260]	; (800085c <main+0x2a8>)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	4413      	add	r3, r2
 800075c:	3304      	adds	r3, #4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <main+0x2ac>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	fb02 f303 	mul.w	r3, r2, r3
 800076a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800076e:	461a      	mov	r2, r3
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <main+0x2b0>)
 8000772:	601a      	str	r2, [r3, #0]
			  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 8000774:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <main+0x2b0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a37      	ldr	r2, [pc, #220]	; (8000858 <main+0x2a4>)
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fd10 	bl	80021a4 <BSP_AUDIO_OUT_Play>
			  HAL_Delay(150);
 8000784:	2096      	movs	r0, #150	; 0x96
 8000786:	f003 f813 	bl	80037b0 <HAL_Delay>
			  BSP_AUDIO_OUT_Stop(2);
 800078a:	2002      	movs	r0, #2
 800078c:	f001 fd44 	bl	8002218 <BSP_AUDIO_OUT_Stop>
 8000790:	e050      	b.n	8000834 <main+0x280>
		  }
		  //SEKTOR 3
		  else if(PomiarADC == 192)
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <main+0x2a0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2bc0      	cmp	r3, #192	; 0xc0
 8000798:	d122      	bne.n	80007e0 <main+0x22c>
		  {
			  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <main+0x2a4>)
 800079c:	f245 6238 	movw	r2, #22072	; 0x5638
 80007a0:	601a      	str	r2, [r3, #0]
			  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (tab[count][2])));  //congalow
 80007a2:	4a2e      	ldr	r2, [pc, #184]	; (800085c <main+0x2a8>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	4413      	add	r3, r2
 80007aa:	3308      	adds	r3, #8
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <main+0x2ac>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	fb02 f303 	mul.w	r3, r2, r3
 80007b8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80007bc:	461a      	mov	r2, r3
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <main+0x2b0>)
 80007c0:	601a      	str	r2, [r3, #0]
			  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <main+0x2b0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <main+0x2a4>)
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fce9 	bl	80021a4 <BSP_AUDIO_OUT_Play>
			  HAL_Delay(150);
 80007d2:	2096      	movs	r0, #150	; 0x96
 80007d4:	f002 ffec 	bl	80037b0 <HAL_Delay>
			  BSP_AUDIO_OUT_Stop(2);
 80007d8:	2002      	movs	r0, #2
 80007da:	f001 fd1d 	bl	8002218 <BSP_AUDIO_OUT_Stop>
 80007de:	e029      	b.n	8000834 <main+0x280>
		  }
		  //SEKTOR 4
		  else if(PomiarADC == 224 || PomiarADC == 240)
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <main+0x2a0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2be0      	cmp	r3, #224	; 0xe0
 80007e6:	d003      	beq.n	80007f0 <main+0x23c>
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <main+0x2a0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2bf0      	cmp	r3, #240	; 0xf0
 80007ee:	d121      	bne.n	8000834 <main+0x280>
		  {
			  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <main+0x2a4>)
 80007f2:	f245 6238 	movw	r2, #22072	; 0x5638
 80007f6:	601a      	str	r2, [r3, #0]
			  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (tab[count][3])));
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <main+0x2a8>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	330c      	adds	r3, #12
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <main+0x2ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000812:	461a      	mov	r2, r3
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <main+0x2b0>)
 8000816:	601a      	str	r2, [r3, #0]
			  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <main+0x2b0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <main+0x2a4>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fcbe 	bl	80021a4 <BSP_AUDIO_OUT_Play>
			  HAL_Delay(150);
 8000828:	2096      	movs	r0, #150	; 0x96
 800082a:	f002 ffc1 	bl	80037b0 <HAL_Delay>
			  BSP_AUDIO_OUT_Stop(2);
 800082e:	2002      	movs	r0, #2
 8000830:	f001 fcf2 	bl	8002218 <BSP_AUDIO_OUT_Stop>

		  }
		  HAL_ADC_Start(&hadc1);
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <main+0x288>)
 8000836:	f003 fb2b 	bl	8003e90 <HAL_ADC_Start>
	  if(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin) && flag2)
 800083a:	e71f      	b.n	800067c <main+0xc8>
 800083c:	20000110 	.word	0x20000110
 8000840:	0800c944 	.word	0x0800c944
 8000844:	200003b8 	.word	0x200003b8
 8000848:	08000581 	.word	0x08000581
 800084c:	08000575 	.word	0x08000575
 8000850:	0800c95c 	.word	0x0800c95c
 8000854:	200003b4 	.word	0x200003b4
 8000858:	20000108 	.word	0x20000108
 800085c:	20000000 	.word	0x20000000
 8000860:	20000040 	.word	0x20000040
 8000864:	2000010c 	.word	0x2000010c

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	; 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00b fbe2 	bl	800c040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f006 fbf3 	bl	8007078 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000898:	f000 fafa 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800089c:	230a      	movs	r3, #10
 800089e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2310      	movs	r3, #16
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ba:	230a      	movs	r3, #10
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 f928 	bl	8007b24 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008da:	f000 fad9 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fcfc 	bl	80082f4 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000902:	f000 fac5 	bl	8000e90 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3758      	adds	r7, #88	; 0x58
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0a2      	sub	sp, #136	; 0x88
 8000914:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2288      	movs	r2, #136	; 0x88
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00b fb8f 	bl	800c040 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000922:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000926:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000928:	2300      	movs	r3, #0
 800092a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000930:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800093a:	230a      	movs	r3, #10
 800093c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093e:	2307      	movs	r3, #7
 8000940:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <PeriphCommonClock_Config+0x58>)
 800094c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f007 fed5 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800095c:	f000 fa98 	bl	8000e90 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3788      	adds	r7, #136	; 0x88
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	01010000 	.word	0x01010000

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <MX_ADC1_Init+0xe4>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_ADC1_Init+0xe0>)
 800099c:	2210      	movs	r2, #16
 800099e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009f0:	f003 f8f8 	bl	8003be4 <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009fa:	f000 fa49 	bl	8000e90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000a0a:	f004 fbeb 	bl	80051e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a14:	f000 fa3c 	bl	8000e90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_ADC1_Init+0xe8>)
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000a20:	2305      	movs	r3, #5
 8000a22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a24:	237f      	movs	r3, #127	; 0x7f
 8000a26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000a36:	f003 ff2b 	bl	8004890 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a40:	f000 fa26 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000110 	.word	0x20000110
 8000a50:	50040000 	.word	0x50040000
 8000a54:	21800100 	.word	0x21800100

08000a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <MX_I2C1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x7c>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a94:	f005 fade 	bl	8006054 <HAL_I2C_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9e:	f000 f9f7 	bl	8000e90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <MX_I2C1_Init+0x74>)
 8000aa6:	f006 f875 	bl	8006b94 <HAL_I2CEx_ConfigAnalogFilter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab0:	f000 f9ee 	bl	8000e90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_I2C1_Init+0x74>)
 8000ab8:	f006 f8b7 	bl	8006c2a <HAL_I2CEx_ConfigDigitalFilter>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 f9e5 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000174 	.word	0x20000174
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	10909cec 	.word	0x10909cec

08000ad8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <MX_LCD_Init+0x70>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000aea:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000aee:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b08:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b12:	2240      	movs	r2, #64	; 0x40
 8000b14:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_LCD_Init+0x6c>)
 8000b32:	f006 f8c7 	bl	8006cc4 <HAL_LCD_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 8000b3c:	f000 f9a8 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001c0 	.word	0x200001c0
 8000b48:	40002400 	.word	0x40002400

08000b4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <MX_QUADSPI_Init+0x48>)
 8000b54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b6a:	2218      	movs	r2, #24
 8000b6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_QUADSPI_Init+0x44>)
 8000b7c:	f006 faf2 	bl	8007164 <HAL_QSPI_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b86:	f000 f983 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001fc 	.word	0x200001fc
 8000b94:	a0001000 	.word	0xa0001000

08000b98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_RTC_Init+0x48>)
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <MX_RTC_Init+0x4c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_RTC_Init+0x48>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_RTC_Init+0x48>)
 8000baa:	227f      	movs	r2, #127	; 0x7f
 8000bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_RTC_Init+0x48>)
 8000bce:	f009 f9a1 	bl	8009f14 <HAL_RTC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000bd8:	f000 f95a 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000240 	.word	0x20000240
 8000be4:	40002800 	.word	0x40002800

08000be8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_SAI1_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c12:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000c16:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000c30:	2302      	movs	r3, #2
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_SAI1_Init+0x64>)
 8000c38:	f009 fa7e 	bl	800a138 <HAL_SAI_InitProtocol>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000c42:	f000 f925 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000264 	.word	0x20000264
 8000c50:	40015404 	.word	0x40015404

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_USART3_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c98:	f00a f943 	bl	800af22 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 f8f5 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000330 	.word	0x20000330
 8000cb0:	40004800 	.word	0x40004800

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_DMA_Init+0x38>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2038      	movs	r0, #56	; 0x38
 8000cd8:	f004 fc33 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000cdc:	2038      	movs	r0, #56	; 0x38
 8000cde:	f004 fc4c 	bl	800557a <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a5e      	ldr	r2, [pc, #376]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b59      	ldr	r3, [pc, #356]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a52      	ldr	r2, [pc, #328]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a4c      	ldr	r2, [pc, #304]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <MX_GPIO_Init+0x194>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	483b      	ldr	r0, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x198>)
 8000d9c:	f005 f942 	bl	8006024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2102      	movs	r1, #2
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f005 f93c 	bl	8006024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f005 f936 	bl	8006024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4833      	ldr	r0, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x19c>)
 8000dbe:	f005 f931 	bl	8006024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x198>)
 8000dca:	f005 f92b 	bl	8006024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_GPIO_Init+0x198>)
 8000de6:	f004 fe67 	bl	8005ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|DIGITIZER_IN_Y2_Pin;
 8000dea:	2305      	movs	r3, #5
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f004 fe5a 	bl	8005ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f004 fe4b 	bl	8005ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000e22:	2320      	movs	r3, #32
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f004 fe3c 	bl	8005ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000e40:	2304      	movs	r3, #4
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_GPIO_Init+0x19c>)
 8000e58:	f004 fe2e 	bl	8005ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0x198>)
 8000e76:	f004 fe1f 	bl	8005ab8 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48001000 	.word	0x48001000
 8000e8c:	48000400 	.word	0x48000400

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_MspInit+0x88>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000f36:	2308      	movs	r3, #8
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f004 fdb4 	bl	8005ab8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2012      	movs	r0, #18
 8000f56:	f004 faf4 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f5a:	2012      	movs	r0, #18
 8000f5c:	f004 fb0d 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	50040000 	.word	0x50040000
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ac      	sub	sp, #176	; 0xb0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2288      	movs	r2, #136	; 0x88
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f855 	bl	800c040 <memset>
  if(hi2c->Instance==I2C1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a21      	ldr	r2, [pc, #132]	; (8001020 <HAL_I2C_MspInit+0xb0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d13a      	bne.n	8001016 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fba7 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fb8:	f7ff ff6a 	bl	8000e90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fec:	2304      	movs	r3, #4
 8000fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <HAL_I2C_MspInit+0xb8>)
 8000ffa:	f004 fd5d 	bl	8005ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6593      	str	r3, [r2, #88]	; 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_I2C_MspInit+0xb4>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	37b0      	adds	r7, #176	; 0xb0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40005400 	.word	0x40005400
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_I2C_MspDeInit+0x38>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_I2C_MspDeInit+0x3c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <HAL_I2C_MspDeInit+0x3c>)
 8001044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_I2C_MspDeInit+0x40>)
 800104e:	f004 fedd 	bl	8005e0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_I2C_MspDeInit+0x40>)
 8001056:	f004 fed9 	bl	8005e0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40005400 	.word	0x40005400
 8001068:	40021000 	.word	0x40021000
 800106c:	48000400 	.word	0x48000400

08001070 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ae      	sub	sp, #184	; 0xb8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2288      	movs	r2, #136	; 0x88
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00a ffd5 	bl	800c040 <memset>
  if(hlcd->Instance==LCD)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_LCD_MspInit+0x188>)
 800109c:	4293      	cmp	r3, r2
 800109e:	f040 80a6 	bne.w	80011ee <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fb23 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 80010c0:	f7ff fee6 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6593      	str	r3, [r2, #88]	; 0x58
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010dc:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a46      	ldr	r2, [pc, #280]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	4a40      	ldr	r2, [pc, #256]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a3a      	ldr	r2, [pc, #232]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b35      	ldr	r3, [pc, #212]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	4a34      	ldr	r2, [pc, #208]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <HAL_LCD_MspInit+0x18c>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 800113c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001156:	230b      	movs	r3, #11
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001160:	4619      	mov	r1, r3
 8001162:	4827      	ldr	r0, [pc, #156]	; (8001200 <HAL_LCD_MspInit+0x190>)
 8001164:	f004 fca8 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8001168:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001182:	230b      	movs	r3, #11
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f004 fc91 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8001196:	f24f 2333 	movw	r3, #62003	; 0xf233
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80011b0:	230b      	movs	r3, #11
 80011b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <HAL_LCD_MspInit+0x194>)
 80011be:	f004 fc7b 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80011c2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80011dc:	230b      	movs	r3, #11
 80011de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <HAL_LCD_MspInit+0x198>)
 80011ea:	f004 fc65 	bl	8005ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	37b8      	adds	r7, #184	; 0xb8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40002400 	.word	0x40002400
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000800 	.word	0x48000800
 8001204:	48000400 	.word	0x48000400
 8001208:	48000c00 	.word	0x48000c00

0800120c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_QSPI_MspInit+0x7c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d128      	bne.n	8001280 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_QSPI_MspInit+0x80>)
 8001230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001232:	4a16      	ldr	r2, [pc, #88]	; (800128c <HAL_QSPI_MspInit+0x80>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6513      	str	r3, [r2, #80]	; 0x50
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_QSPI_MspInit+0x80>)
 800123c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_QSPI_MspInit+0x80>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_QSPI_MspInit+0x80>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_QSPI_MspInit+0x80>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 800125e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001262:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001270:	230a      	movs	r3, #10
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_QSPI_MspInit+0x84>)
 800127c:	f004 fc1c 	bl	8005ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	a0001000 	.word	0xa0001000
 800128c:	40021000 	.word	0x40021000
 8001290:	48001000 	.word	0x48001000

08001294 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_QSPI_MspDeInit+0x30>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10a      	bne.n	80012bc <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_QSPI_MspDeInit+0x34>)
 80012a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_QSPI_MspDeInit+0x34>)
 80012ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b0:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 80012b2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_QSPI_MspDeInit+0x38>)
 80012b8:	f004 fda8 	bl	8005e0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	a0001000 	.word	0xa0001000
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48001000 	.word	0x48001000

080012d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a4      	sub	sp, #144	; 0x90
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2288      	movs	r2, #136	; 0x88
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00a fead 	bl	800c040 <memset>
  if(hrtc->Instance==RTC)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_RTC_MspInit+0x5c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d118      	bne.n	8001322 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4618      	mov	r0, r3
 8001304:	f007 f9fc 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800130e:	f7ff fdbf 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_RTC_MspInit+0x60>)
 8001314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_RTC_MspInit+0x60>)
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3790      	adds	r7, #144	; 0x90
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40002800 	.word	0x40002800
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ac      	sub	sp, #176	; 0xb0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2288      	movs	r2, #136	; 0x88
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f00a fe73 	bl	800c040 <memset>
  if(huart->Instance==USART3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <HAL_UART_MspInit+0xc0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d143      	bne.n	80013ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001364:	2304      	movs	r3, #4
 8001366:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4618      	mov	r0, r3
 8001372:	f007 f9c5 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff fd88 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138a:	6593      	str	r3, [r2, #88]	; 0x58
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0xc4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ca:	2307      	movs	r3, #7
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <HAL_UART_MspInit+0xc8>)
 80013d8:	f004 fb6e 	bl	8005ab8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2027      	movs	r0, #39	; 0x27
 80013e2:	f004 f8ae 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013e6:	2027      	movs	r0, #39	; 0x27
 80013e8:	f004 f8c7 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	37b0      	adds	r7, #176	; 0xb0
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004800 	.word	0x40004800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000400 	.word	0x48000400

08001400 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_SAI_MspInit+0xd8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d15d      	bne.n	80014ce <HAL_SAI_MspInit+0xce>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_SAI_MspInit+0xdc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d113      	bne.n	8001442 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_SAI_MspInit+0xe0>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <HAL_SAI_MspInit+0xe0>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6613      	str	r3, [r2, #96]	; 0x60
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_SAI_MspInit+0xe0>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	204a      	movs	r0, #74	; 0x4a
 8001438:	f004 f883 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800143c:	204a      	movs	r0, #74	; 0x4a
 800143e:	f004 f89c 	bl	800557a <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_SAI_MspInit+0xdc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_SAI_MspInit+0xdc>)
 800144a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800144c:	2374      	movs	r3, #116	; 0x74
 800144e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800145c:	230d      	movs	r3, #13
 800145e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <HAL_SAI_MspInit+0xe4>)
 8001468:	f004 fb26 	bl	8005ab8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_SAI_MspInit+0xec>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 800147a:	2210      	movs	r2, #16
 800147c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 800149c:	2220      	movs	r2, #32
 800149e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80014a6:	4810      	ldr	r0, [pc, #64]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014a8:	f004 f890 	bl	80055cc <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 80014b2:	f7ff fced 	bl	8000e90 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014ba:	671a      	str	r2, [r3, #112]	; 0x70
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_SAI_MspInit+0xe8>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 80014ce:	bf00      	nop
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40015404 	.word	0x40015404
 80014dc:	200003cc 	.word	0x200003cc
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48001000 	.word	0x48001000
 80014e8:	200002e8 	.word	0x200002e8
 80014ec:	40020408 	.word	0x40020408

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f002 f918 	bl	8003770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <ADC1_2_IRQHandler+0x10>)
 800154a:	f002 ff73 	bl	8004434 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000110 	.word	0x20000110

08001558 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <USART3_IRQHandler+0x10>)
 800155e:	f009 fd2f 	bl	800afc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000330 	.word	0x20000330

0800156c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA2_Channel1_IRQHandler+0x10>)
 8001572:	f004 f9c2 	bl	80058fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002e8 	.word	0x200002e8

08001580 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <SAI1_IRQHandler+0x10>)
 8001586:	f009 f8e5 	bl	800a754 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000264 	.word	0x20000264

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f00a fd12 	bl	800bfec <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20018000 	.word	0x20018000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	200003d0 	.word	0x200003d0
 80015fc:	2000b1d0 	.word	0x2000b1d0

08001600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff ffea 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <LoopForever+0x6>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	; (8001664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <LoopForever+0xe>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	; (8001670 <LoopForever+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f00a fcd1 	bl	800bff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001656:	f7fe ffad 	bl	80005b4 <main>

0800165a <LoopForever>:

LoopForever:
    b LoopForever
 800165a:	e7fe      	b.n	800165a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800165c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001668:	0800ca38 	.word	0x0800ca38
  ldr r2, =_sbss
 800166c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001670:	2000b1d0 	.word	0x2000b1d0

08001674 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC3_IRQHandler>
	...

08001678 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4603      	mov	r3, r0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	460b      	mov	r3, r1
 8001686:	81bb      	strh	r3, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001690:	f000 fc96 	bl	8001fc0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb01 	bl	8001ca4 <CODEC_IO_Write>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80016ac:	89bb      	ldrh	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d81b      	bhi.n	80016ec <cs43l22_Init+0x74>
 80016b4:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <cs43l22_Init+0x44>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <cs43l22_Init+0x1c4>)
 80016ce:	22fa      	movs	r2, #250	; 0xfa
 80016d0:	701a      	strb	r2, [r3, #0]
    break;
 80016d2:	e00f      	b.n	80016f4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <cs43l22_Init+0x1c4>)
 80016d6:	22af      	movs	r2, #175	; 0xaf
 80016d8:	701a      	strb	r2, [r3, #0]
    break;
 80016da:	e00b      	b.n	80016f4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <cs43l22_Init+0x1c4>)
 80016de:	22aa      	movs	r2, #170	; 0xaa
 80016e0:	701a      	strb	r2, [r3, #0]
    break;
 80016e2:	e007      	b.n	80016f4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80016e4:	4b55      	ldr	r3, [pc, #340]	; (800183c <cs43l22_Init+0x1c4>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]
    break;    
 80016ea:	e003      	b.n	80016f4 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <cs43l22_Init+0x1c4>)
 80016ee:	2205      	movs	r2, #5
 80016f0:	701a      	strb	r2, [r3, #0]
    break;    
 80016f2:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <cs43l22_Init+0x1c4>)
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	2104      	movs	r1, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f000 facf 	bl	8001ca4 <CODEC_IO_Write>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4413      	add	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2281      	movs	r2, #129	; 0x81
 8001716:	2105      	movs	r1, #5
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fac3 	bl	8001ca4 <CODEC_IO_Write>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2204      	movs	r2, #4
 800172e:	2106      	movs	r1, #6
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fab7 	bl	8001ca4 <CODEC_IO_Write>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001740:	7afa      	ldrb	r2, [r7, #11]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f964 	bl	8001a14 <cs43l22_SetVolume>
 800174c:	4602      	mov	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d023      	beq.n	80017a2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2206      	movs	r2, #6
 8001760:	210f      	movs	r1, #15
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fa9e 	bl	8001ca4 <CODEC_IO_Write>
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2200      	movs	r2, #0
 8001778:	2124      	movs	r1, #36	; 0x24
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fa92 	bl	8001ca4 <CODEC_IO_Write>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2200      	movs	r2, #0
 8001790:	2125      	movs	r1, #37	; 0x25
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fa86 	bl	8001ca4 <CODEC_IO_Write>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	210a      	movs	r1, #10
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fa7a 	bl	8001ca4 <CODEC_IO_Write>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2204      	movs	r2, #4
 80017c0:	210e      	movs	r1, #14
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fa6e 	bl	8001ca4 <CODEC_IO_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	2127      	movs	r1, #39	; 0x27
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fa62 	bl	8001ca4 <CODEC_IO_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	220f      	movs	r2, #15
 80017f0:	211f      	movs	r1, #31
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fa56 	bl	8001ca4 <CODEC_IO_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	220a      	movs	r2, #10
 8001808:	211a      	movs	r1, #26
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fa4a 	bl	8001ca4 <CODEC_IO_Write>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	220a      	movs	r2, #10
 8001820:	211b      	movs	r1, #27
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fa3e 	bl	8001ca4 <CODEC_IO_Write>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001832:	697b      	ldr	r3, [r7, #20]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200003d4 	.word	0x200003d4

08001840 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001844:	f000 fbf2 	bl	800202c <AUDIO_IO_DeInit>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8001856:	f000 fbb3 	bl	8001fc0 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fc3a 	bl	80020da <AUDIO_IO_Read>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f023 0307 	bic.w	r3, r3, #7
 8001870:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	80fb      	strh	r3, [r7, #6]
 8001888:	4613      	mov	r3, r2
 800188a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <cs43l22_Play+0x70>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d123      	bne.n	80018e0 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2206      	movs	r2, #6
 800189e:	210e      	movs	r1, #14
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f9ff 	bl	8001ca4 <CODEC_IO_Write>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f919 	bl	8001aec <cs43l22_SetMute>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	229e      	movs	r2, #158	; 0x9e
 80018c8:	2102      	movs	r1, #2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f9ea 	bl	8001ca4 <CODEC_IO_Write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <cs43l22_Play+0x70>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000078 	.word	0x20000078

080018f0 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2101      	movs	r1, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f8f2 	bl	8001aec <cs43l22_SetMute>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2201      	movs	r2, #1
 8001916:	2102      	movs	r1, #2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f9c3 	bl	8001ca4 <CODEC_IO_Write>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f8ce 	bl	8001aec <cs43l22_SetMute>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	e002      	b.n	8001964 <cs43l22_Resume+0x30>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2bfe      	cmp	r3, #254	; 0xfe
 8001968:	d9f9      	bls.n	800195e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <cs43l22_Resume+0x74>)
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	2104      	movs	r1, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f994 	bl	8001ca4 <CODEC_IO_Write>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	229e      	movs	r2, #158	; 0x9e
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f988 	bl	8001ca4 <CODEC_IO_Write>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200003d4 	.word	0x200003d4

080019ac <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f893 	bl	8001aec <cs43l22_SetMute>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2204      	movs	r2, #4
 80019d4:	210e      	movs	r1, #14
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f964 	bl	8001ca4 <CODEC_IO_Write>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	229f      	movs	r2, #159	; 0x9f
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f958 	bl	8001ca4 <CODEC_IO_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <cs43l22_Stop+0x64>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000078 	.word	0x20000078

08001a14 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	80fb      	strh	r3, [r7, #6]
 8001a20:	4613      	mov	r3, r2
 8001a22:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d80b      	bhi.n	8001a46 <cs43l22_SetVolume+0x32>
 8001a2e:	797a      	ldrb	r2, [r7, #5]
 8001a30:	4613      	mov	r3, r2
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <cs43l22_SetVolume+0xb8>)
 8001a38:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3c:	1152      	asrs	r2, r2, #5
 8001a3e:	17db      	asrs	r3, r3, #31
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e000      	b.n	8001a48 <cs43l22_SetVolume+0x34>
 8001a46:	23ff      	movs	r3, #255	; 0xff
 8001a48:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	2be6      	cmp	r3, #230	; 0xe6
 8001a4e:	d91c      	bls.n	8001a8a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	b2d8      	uxtb	r0, r3
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	3319      	adds	r3, #25
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	f000 f921 	bl	8001ca4 <CODEC_IO_Write>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	b2d8      	uxtb	r0, r3
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	3319      	adds	r3, #25
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	2121      	movs	r1, #33	; 0x21
 8001a7a:	f000 f913 	bl	8001ca4 <CODEC_IO_Write>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e01b      	b.n	8001ac2 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	b2d8      	uxtb	r0, r3
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	3319      	adds	r3, #25
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	2120      	movs	r1, #32
 8001a98:	f000 f904 	bl	8001ca4 <CODEC_IO_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	b2d8      	uxtb	r0, r3
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	3319      	adds	r3, #25
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2121      	movs	r1, #33	; 0x21
 8001ab4:	f000 f8f6 	bl	8001ca4 <CODEC_IO_Write>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	51eb851f 	.word	0x51eb851f

08001ad0 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d124      	bne.n	8001b4c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	22ff      	movs	r2, #255	; 0xff
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f8ca 	bl	8001ca4 <CODEC_IO_Write>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2122      	movs	r1, #34	; 0x22
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f8be 	bl	8001ca4 <CODEC_IO_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2201      	movs	r2, #1
 8001b38:	2123      	movs	r1, #35	; 0x23
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f8b2 	bl	8001ca4 <CODEC_IO_Write>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e025      	b.n	8001b98 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	2122      	movs	r1, #34	; 0x22
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f8a5 	bl	8001ca4 <CODEC_IO_Write>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2123      	movs	r1, #35	; 0x23
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f899 	bl	8001ca4 <CODEC_IO_Write>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <cs43l22_SetMute+0xb8>)
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	2104      	movs	r1, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f88b 	bl	8001ca4 <CODEC_IO_Write>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200003d4 	.word	0x200003d4

08001ba8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	80fb      	strh	r3, [r7, #6]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001bbc:	797b      	ldrb	r3, [r7, #5]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d84b      	bhi.n	8001c5c <cs43l22_SetOutputMode+0xb4>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <cs43l22_SetOutputMode+0x24>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	08001c1d 	.word	0x08001c1d
 8001bd8:	08001c3d 	.word	0x08001c3d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	22fa      	movs	r2, #250	; 0xfa
 8001be2:	2104      	movs	r1, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f85d 	bl	8001ca4 <CODEC_IO_Write>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <cs43l22_SetOutputMode+0xe0>)
 8001bf6:	22fa      	movs	r2, #250	; 0xfa
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e03f      	b.n	8001c7c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	22af      	movs	r2, #175	; 0xaf
 8001c02:	2104      	movs	r1, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f84d 	bl	8001ca4 <CODEC_IO_Write>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <cs43l22_SetOutputMode+0xe0>)
 8001c16:	22af      	movs	r2, #175	; 0xaf
 8001c18:	701a      	strb	r2, [r3, #0]
      break;
 8001c1a:	e02f      	b.n	8001c7c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	22aa      	movs	r2, #170	; 0xaa
 8001c22:	2104      	movs	r1, #4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f83d 	bl	8001ca4 <CODEC_IO_Write>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <cs43l22_SetOutputMode+0xe0>)
 8001c36:	22aa      	movs	r2, #170	; 0xaa
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	e01f      	b.n	8001c7c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2205      	movs	r2, #5
 8001c42:	2104      	movs	r1, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f82d 	bl	8001ca4 <CODEC_IO_Write>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <cs43l22_SetOutputMode+0xe0>)
 8001c56:	2205      	movs	r2, #5
 8001c58:	701a      	strb	r2, [r3, #0]
      break;    
 8001c5a:	e00f      	b.n	8001c7c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2205      	movs	r2, #5
 8001c62:	2104      	movs	r1, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f81d 	bl	8001ca4 <CODEC_IO_Write>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <cs43l22_SetOutputMode+0xe0>)
 8001c76:	2205      	movs	r2, #5
 8001c78:	701a      	strb	r2, [r3, #0]
      break;
 8001c7a:	bf00      	nop
  }  
  return counter;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003d4 	.word	0x200003d4

08001c8c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	71bb      	strb	r3, [r7, #6]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001cba:	797a      	ldrb	r2, [r7, #5]
 8001cbc:	79b9      	ldrb	r1, [r7, #6]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f9f3 	bl	80020ac <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	b2db      	uxtb	r3, r3
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <I2C1_Init+0x50>)
 8001cda:	f004 fca7 	bl	800662c <HAL_I2C_GetState>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11d      	bne.n	8001d20 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <I2C1_Init+0x50>)
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <I2C1_Init+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <I2C1_Init+0x50>)
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <I2C1_Init+0x58>)
 8001cee:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <I2C1_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <I2C1_Init+0x50>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <I2C1_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <I2C1_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <I2C1_Init+0x50>)
 8001d16:	f000 f80b 	bl	8001d30 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001d1a:	4802      	ldr	r0, [pc, #8]	; (8001d24 <I2C1_Init+0x50>)
 8001d1c:	f004 f99a 	bl	8006054 <HAL_I2C_Init>
  }
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200003d8 	.word	0x200003d8
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	90112626 	.word	0x90112626

08001d30 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0ae      	sub	sp, #184	; 0xb8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6593      	str	r3, [r2, #88]	; 0x58
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001d50:	f005 f9e8 	bl	8007124 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <I2C1_MspInit+0xf8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d15e      	bne.n	8001e1c <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d66:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 fcc7 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001da8:	2312      	movs	r3, #18
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001dc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4819      	ldr	r0, [pc, #100]	; (8001e2c <I2C1_MspInit+0xfc>)
 8001dc8:	f003 fe76 	bl	8005ab8 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dee:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <I2C1_MspInit+0xf4>)
 8001df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	201f      	movs	r0, #31
 8001e02:	f003 fb9e 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001e06:	201f      	movs	r0, #31
 8001e08:	f003 fbb7 	bl	800557a <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2020      	movs	r0, #32
 8001e12:	f003 fb96 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001e16:	2020      	movs	r0, #32
 8001e18:	f003 fbaf 	bl	800557a <HAL_NVIC_EnableIRQ>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	37b8      	adds	r7, #184	; 0xb8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	48000400 	.word	0x48000400

08001e30 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <I2C1_DeInit+0x20>)
 8001e36:	f004 fbf9 	bl	800662c <HAL_I2C_GetState>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <I2C1_DeInit+0x20>)
 8001e42:	f004 f996 	bl	8006172 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001e46:	4802      	ldr	r0, [pc, #8]	; (8001e50 <I2C1_DeInit+0x20>)
 8001e48:	f000 f804 	bl	8001e54 <I2C1_MspDeInit>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200003d8 	.word	0x200003d8

08001e54 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <I2C1_MspDeInit+0xa0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d141      	bne.n	8001eea <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001e96:	21c0      	movs	r1, #192	; 0xc0
 8001e98:	4818      	ldr	r0, [pc, #96]	; (8001efc <I2C1_MspDeInit+0xa8>)
 8001e9a:	f003 ffb7 	bl	8005e0c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001ebc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001ec2:	201f      	movs	r0, #31
 8001ec4:	f003 fb67 	bl	8005596 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001ec8:	2020      	movs	r0, #32
 8001eca:	f003 fb64 	bl	8005596 <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <I2C1_MspDeInit+0xa4>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001ee6:	f005 f92d 	bl	8007144 <HAL_PWREx_DisableVddIO2>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400

08001f00 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	81fb      	strh	r3, [r7, #14]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	81bb      	strh	r3, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <I2C1_WriteBuffer+0x4c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	8978      	ldrh	r0, [r7, #10]
 8001f1e:	89ba      	ldrh	r2, [r7, #12]
 8001f20:	89f9      	ldrh	r1, [r7, #14]
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	8c3b      	ldrh	r3, [r7, #32]
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <I2C1_WriteBuffer+0x50>)
 8001f30:	f004 f94e 	bl	80061d0 <HAL_I2C_Mem_Write>
 8001f34:	4603      	mov	r3, r0
 8001f36:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001f3e:	f000 f833 	bl	8001fa8 <I2C1_Error>
  }
  return status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000007c 	.word	0x2000007c
 8001f50:	200003d8 	.word	0x200003d8

08001f54 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af04      	add	r7, sp, #16
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	81fb      	strh	r3, [r7, #14]
 8001f60:	460b      	mov	r3, r1
 8001f62:	81bb      	strh	r3, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <I2C1_ReadBuffer+0x4c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	8978      	ldrh	r0, [r7, #10]
 8001f72:	89ba      	ldrh	r2, [r7, #12]
 8001f74:	89f9      	ldrh	r1, [r7, #14]
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	8c3b      	ldrh	r3, [r7, #32]
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <I2C1_ReadBuffer+0x50>)
 8001f84:	f004 fa38 	bl	80063f8 <HAL_I2C_Mem_Read>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001f92:	f000 f809 	bl	8001fa8 <I2C1_Error>
  }
  return status;
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000007c 	.word	0x2000007c
 8001fa4:	200003d8 	.word	0x200003d8

08001fa8 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <I2C1_Error+0x14>)
 8001fae:	f004 f8e0 	bl	8006172 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001fb2:	f7ff fe8f 	bl	8001cd4 <I2C1_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200003d8 	.word	0x200003d8

08001fc0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <AUDIO_IO_Init+0x64>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <AUDIO_IO_Init+0x64>)
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <AUDIO_IO_Init+0x64>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001fde:	2308      	movs	r3, #8
 8001fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <AUDIO_IO_Init+0x68>)
 8001ff4:	f003 fd60 	bl	8005ab8 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001ff8:	f7ff fe6c 	bl	8001cd4 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2108      	movs	r1, #8
 8002000:	4809      	ldr	r0, [pc, #36]	; (8002028 <AUDIO_IO_Init+0x68>)
 8002002:	f004 f80f 	bl	8006024 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8002006:	2005      	movs	r0, #5
 8002008:	f001 fbd2 	bl	80037b0 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 800200c:	2201      	movs	r2, #1
 800200e:	2108      	movs	r1, #8
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <AUDIO_IO_Init+0x68>)
 8002012:	f004 f807 	bl	8006024 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8002016:	2005      	movs	r0, #5
 8002018:	f001 fbca 	bl	80037b0 <HAL_Delay>
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	48001000 	.word	0x48001000

0800202c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <AUDIO_IO_DeInit+0x78>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <AUDIO_IO_DeInit+0x78>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <AUDIO_IO_DeInit+0x78>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 800204a:	2301      	movs	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 800204e:	237c      	movs	r3, #124	; 0x7c
 8002050:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8002052:	2302      	movs	r3, #2
 8002054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4812      	ldr	r0, [pc, #72]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 8002060:	f003 fd2a 	bl	8005ab8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	2104      	movs	r1, #4
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 800206a:	f003 ffdb 	bl	8006024 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2108      	movs	r1, #8
 8002072:	480d      	ldr	r0, [pc, #52]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 8002074:	f003 ffd6 	bl	8006024 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2110      	movs	r1, #16
 800207c:	480a      	ldr	r0, [pc, #40]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 800207e:	f003 ffd1 	bl	8006024 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2120      	movs	r1, #32
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 8002088:	f003 ffcc 	bl	8006024 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <AUDIO_IO_DeInit+0x7c>)
 8002092:	f003 ffc7 	bl	8006024 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8002096:	f7ff fecb 	bl	8001e30 <I2C1_DeInit>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	48001000 	.word	0x48001000

080020ac <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	460b      	mov	r3, r1
 80020b8:	71bb      	strb	r3, [r7, #6]
 80020ba:	4613      	mov	r3, r2
 80020bc:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	b298      	uxth	r0, r3
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	b299      	uxth	r1, r3
 80020c6:	1d7b      	adds	r3, r7, #5
 80020c8:	2201      	movs	r2, #1
 80020ca:	9200      	str	r2, [sp, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f7ff ff17 	bl	8001f00 <I2C1_WriteBuffer>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af02      	add	r7, sp, #8
 80020e0:	4603      	mov	r3, r0
 80020e2:	460a      	mov	r2, r1
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	4613      	mov	r3, r2
 80020e8:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	b298      	uxth	r0, r3
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	b299      	uxth	r1, r3
 80020f6:	f107 030f 	add.w	r3, r7, #15
 80020fa:	2201      	movs	r2, #1
 80020fc:	9200      	str	r2, [sp, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	f7ff ff28 	bl	8001f54 <I2C1_ReadBuffer>

  return Read_Value;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t Volume,
                           uint32_t AudioFreq)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	603a      	str	r2, [r7, #0]
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	460b      	mov	r3, r1
 800211e:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs43l22_drv;
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <BSP_AUDIO_OUT_Init+0x8c>)
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <BSP_AUDIO_OUT_Init+0x90>)
 8002124:	601a      	str	r2, [r3, #0]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <BSP_AUDIO_OUT_Init+0x8c>)
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <BSP_AUDIO_OUT_Init+0x8c>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <BSP_AUDIO_OUT_Init+0x8c>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]

  /* Configure the SAI PLL according to the requested audio frequency */
  if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f000 f9ab 	bl	8002494 <AUDIO_SAIPLLConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <BSP_AUDIO_OUT_Init+0x38>
  {
    return AUDIO_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e024      	b.n	8002192 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* SAI data transfer preparation: prepare the Media to be used for the audio
     transfer from memory to SAI peripheral. */
  if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8002148:	6838      	ldr	r0, [r7, #0]
 800214a:	f000 f8f1 	bl	8002330 <AUDIO_SAIx_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <BSP_AUDIO_OUT_Init+0x48>
  {
    return AUDIO_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e01c      	b.n	8002192 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Retrieve audio codec identifier */
  if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) != CS43L22_ID)
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <BSP_AUDIO_OUT_Init+0x90>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2094      	movs	r0, #148	; 0x94
 800215e:	4798      	blx	r3
 8002160:	4603      	mov	r3, r0
 8002162:	2be0      	cmp	r3, #224	; 0xe0
 8002164:	d001      	beq.n	800216a <BSP_AUDIO_OUT_Init+0x5a>
  {
    return AUDIO_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e013      	b.n	8002192 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Reset the audio codec Registers */
  AUDIO_CODEC_Reset();
 800216a:	f000 f983 	bl	8002474 <AUDIO_CODEC_Reset>

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <BSP_AUDIO_OUT_Init+0x8c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681c      	ldr	r4, [r3, #0]
 8002174:	797a      	ldrb	r2, [r7, #5]
 8002176:	88f9      	ldrh	r1, [r7, #6]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2094      	movs	r0, #148	; 0x94
 800217c:	47a0      	blx	r4
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <BSP_AUDIO_OUT_Init+0x78>
                               OutputDevice,
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e004      	b.n	8002192 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Set the requested volume */
  BSP_AUDIO_OUT_SetVolume(Volume);
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f86a 	bl	8002264 <BSP_AUDIO_OUT_SetVolume>

  return AUDIO_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	2000b094 	.word	0x2000b094
 80021a0:	20000048 	.word	0x20000048

080021a4 <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data BYTES.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */

	BSP_QSPI_Read(Music_buffor,(uint32_t) pData, DMA_MAX(Size));
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	4293      	cmp	r3, r2
 80021b8:	bf28      	it	cs
 80021ba:	4613      	movcs	r3, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4813      	ldr	r0, [pc, #76]	; (800220c <BSP_AUDIO_OUT_Play+0x68>)
 80021c0:	f001 f8a4 	bl	800330c <BSP_QSPI_Read>
	if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai, Music_buffor ,DMA_MAX(Size)) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ca:	4293      	cmp	r3, r2
 80021cc:	bf28      	it	cs
 80021ce:	4613      	movcs	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	490d      	ldr	r1, [pc, #52]	; (800220c <BSP_AUDIO_OUT_Play+0x68>)
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <BSP_AUDIO_OUT_Play+0x6c>)
 80021d8:	f008 fa0c 	bl	800a5f4 <HAL_SAI_Transmit_DMA>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <BSP_AUDIO_OUT_Play+0x42>
	{
		return AUDIO_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00d      	b.n	8002202 <BSP_AUDIO_OUT_Play+0x5e>
	}

  /* Call the audio Codec Play function */
	if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) Music_buffor, (uint16_t) Size) != 0)
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <BSP_AUDIO_OUT_Play+0x70>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b292      	uxth	r2, r2
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <BSP_AUDIO_OUT_Play+0x68>)
 80021f2:	2094      	movs	r0, #148	; 0x94
 80021f4:	4798      	blx	r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <BSP_AUDIO_OUT_Play+0x5c>
	{
		return AUDIO_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <BSP_AUDIO_OUT_Play+0x5e>
	}

	return AUDIO_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000424 	.word	0x20000424
 8002210:	2000b0a4 	.word	0x2000b0a4
 8002214:	2000b094 	.word	0x2000b094

08002218 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Call Audio Codec Stop function */
  if (hAudioOut.AudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <BSP_AUDIO_OUT_Stop+0x44>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	2094      	movs	r0, #148	; 0x94
 800222a:	4798      	blx	r3
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <BSP_AUDIO_OUT_Stop+0x1e>
  {
    return AUDIO_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <BSP_AUDIO_OUT_Stop+0x3c>
  }

  if (Option == CODEC_PDWN_HW)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <BSP_AUDIO_OUT_Stop+0x2a>
  {
    /* Wait at least 100us */
    HAL_Delay(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f001 fab7 	bl	80037b0 <HAL_Delay>
  }

  /* Stop DMA transfer of PCM samples towards the serial audio interface */
  if (HAL_SAI_DMAStop(&BSP_AUDIO_hSai) != HAL_OK)
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <BSP_AUDIO_OUT_Stop+0x48>)
 8002244:	f008 f91c 	bl	800a480 <HAL_SAI_DMAStop>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <BSP_AUDIO_OUT_Stop+0x3a>
  {
    return AUDIO_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <BSP_AUDIO_OUT_Stop+0x3c>
  }

  return AUDIO_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000b094 	.word	0x2000b094
 8002260:	2000b0a4 	.word	0x2000b0a4

08002264 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (hAudioOut.AudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	4611      	mov	r1, r2
 8002278:	2094      	movs	r0, #148	; 0x94
 800227a:	4798      	blx	r3
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <BSP_AUDIO_OUT_SetVolume+0x24>
  }

  return AUDIO_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000b094 	.word	0x2000b094

08002294 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6053      	str	r3, [r2, #4]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6093      	str	r3, [r2, #8]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60d3      	str	r3, [r2, #12]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000b094 	.word	0x2000b094

080022c4 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'TransferComplete' function (if any) */
  if (hAudioOut.CbTransferComplete != (Audio_CallbackTypeDef)NULL)
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_SAI_TxCpltCallback+0x20>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_SAI_TxCpltCallback+0x16>
  {
    hAudioOut.CbTransferComplete();
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_SAI_TxCpltCallback+0x20>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4798      	blx	r3
  }
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000b094 	.word	0x2000b094

080022e8 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_SAI_TxHalfCpltCallback+0x20>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4798      	blx	r3
  }
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000b094 	.word	0x2000b094

0800230c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_SAI_ErrorCallback+0x20>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_SAI_ErrorCallback+0x20>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4798      	blx	r3
  }
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000b094 	.word	0x2000b094

08002330 <AUDIO_SAIx_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai);
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002346:	601a      	str	r2, [r3, #0]

  /* Initialize the BSP_AUDIO_hSai Instance parameter */
  BSP_AUDIO_hSai.Instance = AUDIO_SAIx;
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800234a:	4a49      	ldr	r2, [pc, #292]	; (8002470 <AUDIO_SAIx_Init+0x140>)
 800234c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai.Init.AudioMode      = SAI_MODEMASTER_TX;
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8002368:	4b40      	ldr	r3, [pc, #256]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002370:	2201      	movs	r2, #1
 8002372:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002380:	d029      	beq.n	80023d6 <AUDIO_SAIx_Init+0xa6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <AUDIO_SAIx_Init+0xa2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002392:	d01c      	beq.n	80023ce <AUDIO_SAIx_Init+0x9e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f245 6222 	movw	r2, #22050	; 0x5622
 800239a:	4293      	cmp	r3, r2
 800239c:	d015      	beq.n	80023ca <AUDIO_SAIx_Init+0x9a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80023a4:	d00f      	beq.n	80023c6 <AUDIO_SAIx_Init+0x96>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d008      	beq.n	80023c2 <AUDIO_SAIx_Init+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <AUDIO_SAIx_Init+0x8e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e00c      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023be:	2301      	movs	r3, #1
 80023c0:	e00a      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023c2:	2300      	movs	r3, #0
 80023c4:	e008      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e006      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e004      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e002      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e000      	b.n	80023d8 <AUDIO_SAIx_Init+0xa8>
 80023d6:	230c      	movs	r3, #12
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023da:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai.Init.MonoStereoMode = SAI_STEREOMODE;
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai.Init.CompandingMode = SAI_NOCOMPANDING;
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai.Init.DataSize       = SAI_DATASIZE_16;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002402:	2200      	movs	r2, #0
 8002404:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai.FrameInit.FrameLength = 32;
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002408:	2220      	movs	r2, #32
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai.FrameInit.ActiveFrameLength = 16;
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800240e:	2210      	movs	r2, #16
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002418:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800241c:	2200      	movs	r2, #0
 800241e:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002422:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002426:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai.SlotInit.FirstBitOffset = 0;
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800242a:	2200      	movs	r2, #0
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002430:	2200      	movs	r2, #0
 8002432:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai.SlotInit.SlotNumber = 2;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002436:	2202      	movs	r2, #2
 8002438:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 800243c:	2203      	movs	r2, #3
 800243e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai) != HAL_OK)
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002442:	f007 feab 	bl	800a19c <HAL_SAI_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <AUDIO_SAIx_Init+0x120>
  {
    return AUDIO_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e008      	b.n	8002462 <AUDIO_SAIx_Init+0x132>
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai);
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <AUDIO_SAIx_Init+0x13c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800245e:	601a      	str	r2, [r3, #0]

  return AUDIO_OK;
 8002460:	2300      	movs	r3, #0

}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000b0a4 	.word	0x2000b0a4
 8002470:	40015404 	.word	0x40015404

08002474 <AUDIO_CODEC_Reset>:
  * @brief  Resets the audio codec. It restores the default configuration of the
  *         codec (this function shall be called before initializing the codec).
  * @retval None
  */
static void AUDIO_CODEC_Reset(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Initialize the audio driver structure */
  hAudioOut.AudioDrv = &cs43l22_drv;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <AUDIO_CODEC_Reset+0x18>)
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <AUDIO_CODEC_Reset+0x1c>)
 800247c:	601a      	str	r2, [r3, #0]

  hAudioOut.AudioDrv->Reset(AUDIO_I2C_ADDRESS);
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <AUDIO_CODEC_Reset+0x18>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2094      	movs	r0, #148	; 0x94
 8002486:	4798      	blx	r3
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000b094 	.word	0x2000b094
 8002490:	20000048 	.word	0x20000048

08002494 <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0a4      	sub	sp, #144	; 0x90
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	4618      	mov	r0, r3
 80024a2:	f006 fc17 	bl	8008cd4 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f245 6222 	movw	r2, #22050	; 0x5622
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10c      	bne.n	80024de <AUDIO_SAIPLLConfig+0x4a>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 80024c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c8:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 24;
 80024ca:	2318      	movs	r3, #24
 80024cc:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 80024ce:	2311      	movs	r3, #17
 80024d0:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80024d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 80024d8:	2300      	movs	r3, #0
 80024da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024dc:	e00b      	b.n	80024f6 <AUDIO_SAIPLLConfig+0x62>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 80024de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e2:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 43;
 80024e4:	232b      	movs	r3, #43	; 0x2b
 80024e6:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 80024e8:	2307      	movs	r3, #7
 80024ea:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80024ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	4618      	mov	r0, r3
 80024fc:	f006 f900 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <AUDIO_SAIPLLConfig+0x76>
  {
    return AUDIO_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <AUDIO_SAIPLLConfig+0x78>
  }

  return AUDIO_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3790      	adds	r7, #144	; 0x90
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <BSP_LCD_GLASS_Init+0x70>)
 800251c:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002526:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800252a:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800252e:	220c      	movs	r2, #12
 8002530:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002540:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002544:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 800256e:	f000 f8eb 	bl	8002748 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8002572:	4803      	ldr	r0, [pc, #12]	; (8002580 <BSP_LCD_GLASS_Init+0x6c>)
 8002574:	f004 fba6 	bl	8006cc4 <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8002578:	f000 f82a 	bl	80025d0 <BSP_LCD_GLASS_Clear>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000b12c 	.word	0x2000b12c
 8002584:	40002400 	.word	0x40002400

08002588 <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8002594:	e00b      	b.n	80025ae <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fadf 	bl	8002b60 <WriteChar>

    /* Point on the next character */
    ptr++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3301      	adds	r3, #1
 80025a6:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <BSP_LCD_GLASS_DisplayString+0x34>
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d9ec      	bls.n	8002596 <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <BSP_LCD_GLASS_DisplayString+0x44>)
 80025be:	f004 fcf2 	bl	8006fa6 <HAL_LCD_UpdateDisplayRequest>
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000b12c 	.word	0x2000b12c

080025d0 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <BSP_LCD_GLASS_Clear+0x10>)
 80025d6:	f004 fc90 	bl	8006efa <HAL_LCD_Clear>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000b12c 	.word	0x2000b12c

080025e4 <BSP_LCD_GLASS_ScrollSentence>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_ScrollSentence(uint8_t *ptr, uint16_t nScroll, uint16_t ScrollSpeed)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	803b      	strh	r3, [r7, #0]
  uint8_t repetition = 0, nbrchar = 0, sizestr = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	75fb      	strb	r3, [r7, #23]
 80025f8:	2300      	movs	r3, #0
 80025fa:	75bb      	strb	r3, [r7, #22]
 80025fc:	2300      	movs	r3, #0
 80025fe:	757b      	strb	r3, [r7, #21]
  uint8_t *ptr1;
  uint8_t str[6] = "";
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	2300      	movs	r3, #0
 8002606:	81bb      	strh	r3, [r7, #12]

  /* Reset interrupt variable in case key was press before entering function */
  bLCDGlass_KeyPressed = 0;
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]

  if (ptr == 0)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8092 	beq.w	800273a <BSP_LCD_GLASS_ScrollSentence+0x156>
  {
    return;
  }

  /* To calculate end of string */
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	2300      	movs	r3, #0
 800261c:	757b      	strb	r3, [r7, #21]
 800261e:	e005      	b.n	800262c <BSP_LCD_GLASS_ScrollSentence+0x48>
 8002620:	7d7b      	ldrb	r3, [r7, #21]
 8002622:	3301      	adds	r3, #1
 8002624:	757b      	strb	r3, [r7, #21]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f5      	bne.n	8002620 <BSP_LCD_GLASS_ScrollSentence+0x3c>

  ptr1 = ptr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	613b      	str	r3, [r7, #16]

  BSP_LCD_GLASS_DisplayString(str);
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ffa3 	bl	8002588 <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 8002642:	883b      	ldrh	r3, [r7, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f8b3 	bl	80037b0 <HAL_Delay>

  /* To shift the string for scrolling display*/
  for (repetition = 0; repetition < nScroll; repetition++)
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
 800264e:	e06e      	b.n	800272e <BSP_LCD_GLASS_ScrollSentence+0x14a>
  {
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8002650:	2300      	movs	r3, #0
 8002652:	75bb      	strb	r3, [r7, #22]
 8002654:	e064      	b.n	8002720 <BSP_LCD_GLASS_ScrollSentence+0x13c>
    {
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8002656:	7dbb      	ldrb	r3, [r7, #22]
 8002658:	3301      	adds	r3, #1
 800265a:	7d7a      	ldrb	r2, [r7, #21]
 800265c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002660:	fb01 f202 	mul.w	r2, r1, r2
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	461a      	mov	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	723b      	strb	r3, [r7, #8]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	3302      	adds	r3, #2
 8002674:	7d7a      	ldrb	r2, [r7, #21]
 8002676:	fb93 f1f2 	sdiv	r1, r3, r2
 800267a:	fb01 f202 	mul.w	r2, r1, r2
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	461a      	mov	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	727b      	strb	r3, [r7, #9]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	3303      	adds	r3, #3
 800268e:	7d7a      	ldrb	r2, [r7, #21]
 8002690:	fb93 f1f2 	sdiv	r1, r3, r2
 8002694:	fb01 f202 	mul.w	r2, r1, r2
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	461a      	mov	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	72bb      	strb	r3, [r7, #10]
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 80026a4:	7dbb      	ldrb	r3, [r7, #22]
 80026a6:	3304      	adds	r3, #4
 80026a8:	7d7a      	ldrb	r2, [r7, #21]
 80026aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80026ae:	fb01 f202 	mul.w	r2, r1, r2
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	72fb      	strb	r3, [r7, #11]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 80026be:	7dbb      	ldrb	r3, [r7, #22]
 80026c0:	3305      	adds	r3, #5
 80026c2:	7d7a      	ldrb	r2, [r7, #21]
 80026c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80026c8:	fb01 f202 	mul.w	r2, r1, r2
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	461a      	mov	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	733b      	strb	r3, [r7, #12]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 80026d8:	7dbb      	ldrb	r3, [r7, #22]
 80026da:	3306      	adds	r3, #6
 80026dc:	7d7a      	ldrb	r2, [r7, #21]
 80026de:	fb93 f1f2 	sdiv	r1, r3, r2
 80026e2:	fb01 f202 	mul.w	r2, r1, r2
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	737b      	strb	r3, [r7, #13]
      BSP_LCD_GLASS_Clear();
 80026f2:	f7ff ff6d 	bl	80025d0 <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff44 	bl	8002588 <BSP_LCD_GLASS_DisplayString>

      /* user button pressed stop the scrolling sentence */
      if (bLCDGlass_KeyPressed)
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <BSP_LCD_GLASS_ScrollSentence+0x12e>
      {
        bLCDGlass_KeyPressed = 0;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
        return;
 8002710:	e014      	b.n	800273c <BSP_LCD_GLASS_ScrollSentence+0x158>
      }
      HAL_Delay(ScrollSpeed);
 8002712:	883b      	ldrh	r3, [r7, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f84b 	bl	80037b0 <HAL_Delay>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 800271a:	7dbb      	ldrb	r3, [r7, #22]
 800271c:	3301      	adds	r3, #1
 800271e:	75bb      	strb	r3, [r7, #22]
 8002720:	7dba      	ldrb	r2, [r7, #22]
 8002722:	7d7b      	ldrb	r3, [r7, #21]
 8002724:	429a      	cmp	r2, r3
 8002726:	d396      	bcc.n	8002656 <BSP_LCD_GLASS_ScrollSentence+0x72>
  for (repetition = 0; repetition < nScroll; repetition++)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	3301      	adds	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	b29b      	uxth	r3, r3
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	429a      	cmp	r2, r3
 8002736:	d88b      	bhi.n	8002650 <BSP_LCD_GLASS_ScrollSentence+0x6c>
 8002738:	e000      	b.n	800273c <BSP_LCD_GLASS_ScrollSentence+0x158>
    return;
 800273a:	bf00      	nop
    }
  }
}
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000b128 	.word	0x2000b128

08002748 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0c0      	sub	sp, #256	; 0x100
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002750:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8002760:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002764:	2244      	movs	r2, #68	; 0x44
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f009 fc69 	bl	800c040 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 800276e:	f107 0320 	add.w	r3, r7, #32
 8002772:	2288      	movs	r2, #136	; 0x88
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f009 fc62 	bl	800c040 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <LCD_MspInit+0x17c>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <LCD_MspInit+0x17c>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	; 0x58
 8002788:	4b4e      	ldr	r3, [pc, #312]	; (80028c4 <LCD_MspInit+0x17c>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8002794:	2304      	movs	r3, #4
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80027a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 f9ba 	bl	8007b24 <HAL_RCC_OscConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d000      	beq.n	80027b8 <LCD_MspInit+0x70>
  {
    while (1);
 80027b6:	e7fe      	b.n	80027b6 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027bc:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 ff98 	bl	8008700 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d0:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <LCD_MspInit+0x17c>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <LCD_MspInit+0x17c>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <LCD_MspInit+0x17c>)
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <LCD_MspInit+0x17c>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	4a35      	ldr	r2, [pc, #212]	; (80028c4 <LCD_MspInit+0x17c>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <LCD_MspInit+0x17c>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <LCD_MspInit+0x17c>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <LCD_MspInit+0x17c>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <LCD_MspInit+0x17c>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <LCD_MspInit+0x17c>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <LCD_MspInit+0x17c>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <LCD_MspInit+0x17c>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002830:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002834:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800284a:	230b      	movs	r3, #11
 800284c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002850:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285a:	f003 f92d 	bl	8005ab8 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800285e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8002862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8002866:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800286a:	4619      	mov	r1, r3
 800286c:	4816      	ldr	r0, [pc, #88]	; (80028c8 <LCD_MspInit+0x180>)
 800286e:	f003 f923 	bl	8005ab8 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8002872:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800287a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800287e:	4619      	mov	r1, r3
 8002880:	4812      	ldr	r0, [pc, #72]	; (80028cc <LCD_MspInit+0x184>)
 8002882:	f003 f919 	bl	8005ab8 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8002886:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800288a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800288e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002892:	4619      	mov	r1, r3
 8002894:	480e      	ldr	r0, [pc, #56]	; (80028d0 <LCD_MspInit+0x188>)
 8002896:	f003 f90f 	bl	8005ab8 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 800289a:	2002      	movs	r0, #2
 800289c:	f000 ff88 	bl	80037b0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <LCD_MspInit+0x17c>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <LCD_MspInit+0x17c>)
 80028a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <LCD_MspInit+0x17c>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
}
 80028b8:	bf00      	nop
 80028ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	48000400 	.word	0x48000400
 80028cc:	48000800 	.word	0x48000800
 80028d0:	48000c00 	.word	0x48000c00

080028d4 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
 80028e0:	4613      	mov	r3, r2
 80028e2:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 80028e4:	2300      	movs	r3, #0
 80028e6:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	737b      	strb	r3, [r7, #13]
 80028ec:	2300      	movs	r3, #0
 80028ee:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b6e      	cmp	r3, #110	; 0x6e
 80028f6:	f300 80a9 	bgt.w	8002a4c <Convert+0x178>
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f2c0 80dd 	blt.w	8002aba <Convert+0x1e6>
 8002900:	3b20      	subs	r3, #32
 8002902:	2b4e      	cmp	r3, #78	; 0x4e
 8002904:	f200 80d9 	bhi.w	8002aba <Convert+0x1e6>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <Convert+0x3c>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002a53 	.word	0x08002a53
 8002914:	08002abb 	.word	0x08002abb
 8002918:	08002abb 	.word	0x08002abb
 800291c:	08002abb 	.word	0x08002abb
 8002920:	08002abb 	.word	0x08002abb
 8002924:	08002a9b 	.word	0x08002a9b
 8002928:	08002abb 	.word	0x08002abb
 800292c:	08002abb 	.word	0x08002abb
 8002930:	08002a61 	.word	0x08002a61
 8002934:	08002a67 	.word	0x08002a67
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a8d 	.word	0x08002a8d
 8002940:	08002abb 	.word	0x08002abb
 8002944:	08002a85 	.word	0x08002a85
 8002948:	08002abb 	.word	0x08002abb
 800294c:	08002a95 	.word	0x08002a95
 8002950:	08002aab 	.word	0x08002aab
 8002954:	08002aab 	.word	0x08002aab
 8002958:	08002aab 	.word	0x08002aab
 800295c:	08002aab 	.word	0x08002aab
 8002960:	08002aab 	.word	0x08002aab
 8002964:	08002aab 	.word	0x08002aab
 8002968:	08002aab 	.word	0x08002aab
 800296c:	08002aab 	.word	0x08002aab
 8002970:	08002aab 	.word	0x08002aab
 8002974:	08002aab 	.word	0x08002aab
 8002978:	08002abb 	.word	0x08002abb
 800297c:	08002abb 	.word	0x08002abb
 8002980:	08002abb 	.word	0x08002abb
 8002984:	08002abb 	.word	0x08002abb
 8002988:	08002abb 	.word	0x08002abb
 800298c:	08002abb 	.word	0x08002abb
 8002990:	08002abb 	.word	0x08002abb
 8002994:	08002abb 	.word	0x08002abb
 8002998:	08002abb 	.word	0x08002abb
 800299c:	08002abb 	.word	0x08002abb
 80029a0:	08002abb 	.word	0x08002abb
 80029a4:	08002abb 	.word	0x08002abb
 80029a8:	08002abb 	.word	0x08002abb
 80029ac:	08002abb 	.word	0x08002abb
 80029b0:	08002abb 	.word	0x08002abb
 80029b4:	08002abb 	.word	0x08002abb
 80029b8:	08002abb 	.word	0x08002abb
 80029bc:	08002abb 	.word	0x08002abb
 80029c0:	08002abb 	.word	0x08002abb
 80029c4:	08002abb 	.word	0x08002abb
 80029c8:	08002abb 	.word	0x08002abb
 80029cc:	08002abb 	.word	0x08002abb
 80029d0:	08002abb 	.word	0x08002abb
 80029d4:	08002abb 	.word	0x08002abb
 80029d8:	08002abb 	.word	0x08002abb
 80029dc:	08002abb 	.word	0x08002abb
 80029e0:	08002abb 	.word	0x08002abb
 80029e4:	08002abb 	.word	0x08002abb
 80029e8:	08002abb 	.word	0x08002abb
 80029ec:	08002abb 	.word	0x08002abb
 80029f0:	08002abb 	.word	0x08002abb
 80029f4:	08002abb 	.word	0x08002abb
 80029f8:	08002abb 	.word	0x08002abb
 80029fc:	08002abb 	.word	0x08002abb
 8002a00:	08002abb 	.word	0x08002abb
 8002a04:	08002abb 	.word	0x08002abb
 8002a08:	08002abb 	.word	0x08002abb
 8002a0c:	08002abb 	.word	0x08002abb
 8002a10:	08002abb 	.word	0x08002abb
 8002a14:	08002abb 	.word	0x08002abb
 8002a18:	08002abb 	.word	0x08002abb
 8002a1c:	08002abb 	.word	0x08002abb
 8002a20:	08002a6d 	.word	0x08002a6d
 8002a24:	08002abb 	.word	0x08002abb
 8002a28:	08002abb 	.word	0x08002abb
 8002a2c:	08002abb 	.word	0x08002abb
 8002a30:	08002abb 	.word	0x08002abb
 8002a34:	08002abb 	.word	0x08002abb
 8002a38:	08002abb 	.word	0x08002abb
 8002a3c:	08002abb 	.word	0x08002abb
 8002a40:	08002abb 	.word	0x08002abb
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	2bff      	cmp	r3, #255	; 0xff
 8002a4e:	d028      	beq.n	8002aa2 <Convert+0x1ce>
 8002a50:	e033      	b.n	8002aba <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	81fb      	strh	r3, [r7, #14]
      break;
 8002a56:	e04f      	b.n	8002af8 <Convert+0x224>

    case '*':
      ch = C_STAR;
 8002a58:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8002a5c:	81fb      	strh	r3, [r7, #14]
      break;
 8002a5e:	e04b      	b.n	8002af8 <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 8002a60:	2328      	movs	r3, #40	; 0x28
 8002a62:	81fb      	strh	r3, [r7, #14]
      break;
 8002a64:	e048      	b.n	8002af8 <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 8002a66:	2311      	movs	r3, #17
 8002a68:	81fb      	strh	r3, [r7, #14]
      break;
 8002a6a:	e045      	b.n	8002af8 <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 8002a6c:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002a70:	81fb      	strh	r3, [r7, #14]
      break;
 8002a72:	e041      	b.n	8002af8 <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 8002a74:	f24b 2310 	movw	r3, #45584	; 0xb210
 8002a78:	81fb      	strh	r3, [r7, #14]
      break;
 8002a7a:	e03d      	b.n	8002af8 <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 8002a7c:	f242 2310 	movw	r3, #8720	; 0x2210
 8002a80:	81fb      	strh	r3, [r7, #14]
      break;
 8002a82:	e039      	b.n	8002af8 <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 8002a84:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a88:	81fb      	strh	r3, [r7, #14]
      break;
 8002a8a:	e035      	b.n	8002af8 <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 8002a8c:	f24a 0314 	movw	r3, #40980	; 0xa014
 8002a90:	81fb      	strh	r3, [r7, #14]
      break;
 8002a92:	e031      	b.n	8002af8 <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 8002a94:	23c0      	movs	r3, #192	; 0xc0
 8002a96:	81fb      	strh	r3, [r7, #14]
      break;
 8002a98:	e02e      	b.n	8002af8 <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 8002a9a:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 8002a9e:	81fb      	strh	r3, [r7, #14]
      break;
 8002aa0:	e02a      	b.n	8002af8 <Convert+0x224>
    case 255 :
      ch = C_FULL;
 8002aa2:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 8002aa6:	81fb      	strh	r3, [r7, #14]
      break ;
 8002aa8:	e026      	b.n	8002af8 <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3b30      	subs	r3, #48	; 0x30
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <Convert+0x280>)
 8002ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab6:	81fb      	strh	r3, [r7, #14]
      break;
 8002ab8:	e01e      	b.n	8002af8 <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b5a      	cmp	r3, #90	; 0x5a
 8002ac0:	d80a      	bhi.n	8002ad8 <Convert+0x204>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d906      	bls.n	8002ad8 <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	3b41      	subs	r3, #65	; 0x41
 8002ad0:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <Convert+0x284>)
 8002ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad6:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b7a      	cmp	r3, #122	; 0x7a
 8002ade:	d80a      	bhi.n	8002af6 <Convert+0x222>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b60      	cmp	r3, #96	; 0x60
 8002ae6:	d906      	bls.n	8002af6 <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	3b61      	subs	r3, #97	; 0x61
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <Convert+0x284>)
 8002af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af4:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8002af6:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d103      	bne.n	8002b06 <Convert+0x232>
  {
    ch |= 0x0002;
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8002b06:	78bb      	ldrb	r3, [r7, #2]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d103      	bne.n	8002b14 <Convert+0x240>
  {
    ch |= 0x0020;
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002b14:	230c      	movs	r3, #12
 8002b16:	737b      	strb	r3, [r7, #13]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	733b      	strb	r3, [r7, #12]
 8002b1c:	e010      	b.n	8002b40 <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8002b1e:	89fa      	ldrh	r2, [r7, #14]
 8002b20:	7b7b      	ldrb	r3, [r7, #13]
 8002b22:	fa42 f303 	asr.w	r3, r2, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	7b3b      	ldrb	r3, [r7, #12]
 8002b2a:	f002 020f 	and.w	r2, r2, #15
 8002b2e:	490b      	ldr	r1, [pc, #44]	; (8002b5c <Convert+0x288>)
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002b34:	7b7b      	ldrb	r3, [r7, #13]
 8002b36:	3b04      	subs	r3, #4
 8002b38:	737b      	strb	r3, [r7, #13]
 8002b3a:	7b3b      	ldrb	r3, [r7, #12]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	733b      	strb	r3, [r7, #12]
 8002b40:	7b3b      	ldrb	r3, [r7, #12]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d9eb      	bls.n	8002b1e <Convert+0x24a>
  }
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	0800c9e0 	.word	0x0800c9e0
 8002b58:	0800c9ac 	.word	0x0800c9ac
 8002b5c:	2000b168 	.word	0x2000b168

08002b60 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	70fb      	strb	r3, [r7, #3]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70bb      	strb	r3, [r7, #2]
 8002b76:	4613      	mov	r3, r2
 8002b78:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 8002b7e:	78ba      	ldrb	r2, [r7, #2]
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fea5 	bl	80028d4 <Convert>

  switch (Position)
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	f200 835b 	bhi.w	8003248 <WriteChar+0x6e8>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <WriteChar+0x38>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002bb1 	.word	0x08002bb1
 8002b9c:	08002cab 	.word	0x08002cab
 8002ba0:	08002dc5 	.word	0x08002dc5
 8002ba4:	08002ec7 	.word	0x08002ec7
 8002ba8:	08002ff5 	.word	0x08002ff5
 8002bac:	0800313f 	.word	0x0800313f
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002bb0:	4b80      	ldr	r3, [pc, #512]	; (8002db4 <WriteChar+0x254>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	f003 0210 	and.w	r2, r3, #16
 8002bba:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <WriteChar+0x254>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc6:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <WriteChar+0x254>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	059b      	lsls	r3, r3, #22
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	4b77      	ldr	r3, [pc, #476]	; (8002db4 <WriteChar+0x254>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a74      	ldr	r2, [pc, #464]	; (8002db8 <WriteChar+0x258>)
 8002be6:	2100      	movs	r1, #0
 8002be8:	4874      	ldr	r0, [pc, #464]	; (8002dbc <WriteChar+0x25c>)
 8002bea:	f004 f92b 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002bee:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <WriteChar+0x254>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	f003 0210 	and.w	r2, r3, #16
 8002bf8:	4b6e      	ldr	r3, [pc, #440]	; (8002db4 <WriteChar+0x254>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	05db      	lsls	r3, r3, #23
 8002c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c04:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002c06:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <WriteChar+0x254>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	059b      	lsls	r3, r3, #22
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	431a      	orrs	r2, r3
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <WriteChar+0x254>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <WriteChar+0x258>)
 8002c24:	2102      	movs	r1, #2
 8002c26:	4865      	ldr	r0, [pc, #404]	; (8002dbc <WriteChar+0x25c>)
 8002c28:	f004 f90c 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <WriteChar+0x254>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	f003 0210 	and.w	r2, r3, #16
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <WriteChar+0x254>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	05db      	lsls	r3, r3, #23
 8002c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c42:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002c44:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <WriteChar+0x254>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	059b      	lsls	r3, r3, #22
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	431a      	orrs	r2, r3
 8002c52:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <WriteChar+0x254>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <WriteChar+0x258>)
 8002c62:	2104      	movs	r1, #4
 8002c64:	4855      	ldr	r0, [pc, #340]	; (8002dbc <WriteChar+0x25c>)
 8002c66:	f004 f8ed 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002c6a:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <WriteChar+0x254>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	f003 0210 	and.w	r2, r3, #16
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <WriteChar+0x254>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c80:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002c82:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <WriteChar+0x254>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	059b      	lsls	r3, r3, #22
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <WriteChar+0x254>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <WriteChar+0x258>)
 8002ca0:	2106      	movs	r1, #6
 8002ca2:	4846      	ldr	r0, [pc, #280]	; (8002dbc <WriteChar+0x25c>)
 8002ca4:	f004 f8ce 	bl	8006e44 <HAL_LCD_Write>
      break;
 8002ca8:	e2cf      	b.n	800324a <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002caa:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <WriteChar+0x254>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	019b      	lsls	r3, r3, #6
 8002cb0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <WriteChar+0x254>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	035b      	lsls	r3, r3, #13
 8002cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc0:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <WriteChar+0x254>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <WriteChar+0x254>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	015b      	lsls	r3, r3, #5
 8002cd8:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	; (8002dc0 <WriteChar+0x260>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4835      	ldr	r0, [pc, #212]	; (8002dbc <WriteChar+0x25c>)
 8002ce8:	f004 f8ac 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <WriteChar+0x254>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <WriteChar+0x254>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	035b      	lsls	r3, r3, #13
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d02:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <WriteChar+0x254>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	031b      	lsls	r3, r3, #12
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	431a      	orrs	r2, r3
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <WriteChar+0x254>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	08db      	lsrs	r3, r3, #3
 8002d18:	015b      	lsls	r3, r3, #5
 8002d1a:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <WriteChar+0x260>)
 8002d26:	2102      	movs	r1, #2
 8002d28:	4824      	ldr	r0, [pc, #144]	; (8002dbc <WriteChar+0x25c>)
 8002d2a:	f004 f88b 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <WriteChar+0x254>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <WriteChar+0x254>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	035b      	lsls	r3, r3, #13
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <WriteChar+0x254>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	031b      	lsls	r3, r3, #12
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	431a      	orrs	r2, r3
 8002d54:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <WriteChar+0x254>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <WriteChar+0x260>)
 8002d68:	2104      	movs	r1, #4
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <WriteChar+0x25c>)
 8002d6c:	f004 f86a 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <WriteChar+0x254>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <WriteChar+0x254>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	035b      	lsls	r3, r3, #13
 8002d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d86:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <WriteChar+0x254>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	031b      	lsls	r3, r3, #12
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	431a      	orrs	r2, r3
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <WriteChar+0x254>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <WriteChar+0x260>)
 8002daa:	2106      	movs	r1, #6
 8002dac:	4803      	ldr	r0, [pc, #12]	; (8002dbc <WriteChar+0x25c>)
 8002dae:	f004 f849 	bl	8006e44 <HAL_LCD_Write>
      break;
 8002db2:	e24a      	b.n	800324a <WriteChar+0x6ea>
 8002db4:	2000b168 	.word	0x2000b168
 8002db8:	ff3fffe7 	.word	0xff3fffe7
 8002dbc:	2000b12c 	.word	0x2000b12c
 8002dc0:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002dc4:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <WriteChar+0x488>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	03db      	lsls	r3, r3, #15
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b86      	ldr	r3, [pc, #536]	; (8002fe8 <WriteChar+0x488>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	075b      	lsls	r3, r3, #29
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd8:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002dda:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <WriteChar+0x488>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	431a      	orrs	r2, r3
 8002de8:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <WriteChar+0x488>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	039b      	lsls	r3, r3, #14
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	; (8002fec <WriteChar+0x48c>)
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	487c      	ldr	r0, [pc, #496]	; (8002ff0 <WriteChar+0x490>)
 8002e00:	f004 f820 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002e04:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <WriteChar+0x488>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	03db      	lsls	r3, r3, #15
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <WriteChar+0x488>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	075b      	lsls	r3, r3, #29
 8002e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e18:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002e1a:	4b73      	ldr	r3, [pc, #460]	; (8002fe8 <WriteChar+0x488>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	431a      	orrs	r2, r3
 8002e28:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <WriteChar+0x488>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	039b      	lsls	r3, r3, #14
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a6c      	ldr	r2, [pc, #432]	; (8002fec <WriteChar+0x48c>)
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	486c      	ldr	r0, [pc, #432]	; (8002ff0 <WriteChar+0x490>)
 8002e40:	f004 f800 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <WriteChar+0x488>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	03db      	lsls	r3, r3, #15
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <WriteChar+0x488>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	075b      	lsls	r3, r3, #29
 8002e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e58:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <WriteChar+0x488>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	431a      	orrs	r2, r3
 8002e68:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <WriteChar+0x488>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	039b      	lsls	r3, r3, #14
 8002e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <WriteChar+0x48c>)
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	485c      	ldr	r0, [pc, #368]	; (8002ff0 <WriteChar+0x490>)
 8002e80:	f003 ffe0 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <WriteChar+0x488>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	03db      	lsls	r3, r3, #15
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <WriteChar+0x488>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	075b      	lsls	r3, r3, #29
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e98:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <WriteChar+0x488>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <WriteChar+0x488>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	039b      	lsls	r3, r3, #14
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <WriteChar+0x48c>)
 8002ebc:	2106      	movs	r1, #6
 8002ebe:	484c      	ldr	r0, [pc, #304]	; (8002ff0 <WriteChar+0x490>)
 8002ec0:	f003 ffc0 	bl	8006e44 <HAL_LCD_Write>
      break;
 8002ec4:	e1c1      	b.n	800324a <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002ec6:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <WriteChar+0x488>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	07da      	lsls	r2, r3, #31
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <WriteChar+0x488>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	079b      	lsls	r3, r3, #30
 8002ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4842      	ldr	r0, [pc, #264]	; (8002ff0 <WriteChar+0x490>)
 8002ee6:	f003 ffad 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <WriteChar+0x488>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0202 	and.w	r2, r3, #2
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <WriteChar+0x488>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f06f 0203 	mvn.w	r2, #3
 8002f06:	2101      	movs	r1, #1
 8002f08:	4839      	ldr	r0, [pc, #228]	; (8002ff0 <WriteChar+0x490>)
 8002f0a:	f003 ff9b 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <WriteChar+0x488>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	07da      	lsls	r2, r3, #31
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <WriteChar+0x488>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	079b      	lsls	r3, r3, #30
 8002f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4830      	ldr	r0, [pc, #192]	; (8002ff0 <WriteChar+0x490>)
 8002f2e:	f003 ff89 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <WriteChar+0x488>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0202 	and.w	r2, r3, #2
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <WriteChar+0x488>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f06f 0203 	mvn.w	r2, #3
 8002f4e:	2103      	movs	r1, #3
 8002f50:	4827      	ldr	r0, [pc, #156]	; (8002ff0 <WriteChar+0x490>)
 8002f52:	f003 ff77 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <WriteChar+0x488>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	07da      	lsls	r2, r3, #31
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <WriteChar+0x488>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	079b      	lsls	r3, r3, #30
 8002f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002f72:	2104      	movs	r1, #4
 8002f74:	481e      	ldr	r0, [pc, #120]	; (8002ff0 <WriteChar+0x490>)
 8002f76:	f003 ff65 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <WriteChar+0x488>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0202 	and.w	r2, r3, #2
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <WriteChar+0x488>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f06f 0203 	mvn.w	r2, #3
 8002f96:	2105      	movs	r1, #5
 8002f98:	4815      	ldr	r0, [pc, #84]	; (8002ff0 <WriteChar+0x490>)
 8002f9a:	f003 ff53 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <WriteChar+0x488>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	07da      	lsls	r2, r3, #31
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <WriteChar+0x488>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	079b      	lsls	r3, r3, #30
 8002fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002fba:	2106      	movs	r1, #6
 8002fbc:	480c      	ldr	r0, [pc, #48]	; (8002ff0 <WriteChar+0x490>)
 8002fbe:	f003 ff41 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <WriteChar+0x488>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0202 	and.w	r2, r3, #2
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <WriteChar+0x488>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f06f 0203 	mvn.w	r2, #3
 8002fde:	2107      	movs	r1, #7
 8002fe0:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <WriteChar+0x490>)
 8002fe2:	f003 ff2f 	bl	8006e44 <HAL_LCD_Write>
      break;
 8002fe6:	e130      	b.n	800324a <WriteChar+0x6ea>
 8002fe8:	2000b168 	.word	0x2000b168
 8002fec:	cfff3fff 	.word	0xcfff3fff
 8002ff0:	2000b12c 	.word	0x2000b12c

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002ff4:	4b97      	ldr	r3, [pc, #604]	; (8003254 <WriteChar+0x6f4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	065b      	lsls	r3, r3, #25
 8002ffc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8003000:	4b94      	ldr	r3, [pc, #592]	; (8003254 <WriteChar+0x6f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8003016:	2100      	movs	r1, #0
 8003018:	488f      	ldr	r0, [pc, #572]	; (8003258 <WriteChar+0x6f8>)
 800301a:	f003 ff13 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 800301e:	4b8d      	ldr	r3, [pc, #564]	; (8003254 <WriteChar+0x6f4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f003 0208 	and.w	r2, r3, #8
 8003028:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <WriteChar+0x6f4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f06f 020c 	mvn.w	r2, #12
 800303e:	2101      	movs	r1, #1
 8003040:	4885      	ldr	r0, [pc, #532]	; (8003258 <WriteChar+0x6f8>)
 8003042:	f003 feff 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8003046:	4b83      	ldr	r3, [pc, #524]	; (8003254 <WriteChar+0x6f4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	065b      	lsls	r3, r3, #25
 800304e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8003052:	4b80      	ldr	r3, [pc, #512]	; (8003254 <WriteChar+0x6f4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	061b      	lsls	r3, r3, #24
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8003068:	2102      	movs	r1, #2
 800306a:	487b      	ldr	r0, [pc, #492]	; (8003258 <WriteChar+0x6f8>)
 800306c:	f003 feea 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <WriteChar+0x6f4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f003 0208 	and.w	r2, r3, #8
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <WriteChar+0x6f4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f06f 020c 	mvn.w	r2, #12
 8003090:	2103      	movs	r1, #3
 8003092:	4871      	ldr	r0, [pc, #452]	; (8003258 <WriteChar+0x6f8>)
 8003094:	f003 fed6 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8003098:	4b6e      	ldr	r3, [pc, #440]	; (8003254 <WriteChar+0x6f4>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	065b      	lsls	r3, r3, #25
 80030a0:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80030a4:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <WriteChar+0x6f4>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80030ba:	2104      	movs	r1, #4
 80030bc:	4866      	ldr	r0, [pc, #408]	; (8003258 <WriteChar+0x6f8>)
 80030be:	f003 fec1 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80030c2:	4b64      	ldr	r3, [pc, #400]	; (8003254 <WriteChar+0x6f4>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	f003 0208 	and.w	r2, r3, #8
 80030cc:	4b61      	ldr	r3, [pc, #388]	; (8003254 <WriteChar+0x6f4>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f06f 020c 	mvn.w	r2, #12
 80030e2:	2105      	movs	r1, #5
 80030e4:	485c      	ldr	r0, [pc, #368]	; (8003258 <WriteChar+0x6f8>)
 80030e6:	f003 fead 	bl	8006e44 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80030ea:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <WriteChar+0x6f4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	065b      	lsls	r3, r3, #25
 80030f2:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <WriteChar+0x6f4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800310c:	2106      	movs	r1, #6
 800310e:	4852      	ldr	r0, [pc, #328]	; (8003258 <WriteChar+0x6f8>)
 8003110:	f003 fe98 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <WriteChar+0x6f4>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f003 0208 	and.w	r2, r3, #8
 800311e:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <WriteChar+0x6f4>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	08db      	lsrs	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f06f 020c 	mvn.w	r2, #12
 8003134:	2107      	movs	r1, #7
 8003136:	4848      	ldr	r0, [pc, #288]	; (8003258 <WriteChar+0x6f8>)
 8003138:	f003 fe84 	bl	8006e44 <HAL_LCD_Write>
      break;
 800313c:	e085      	b.n	800324a <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800313e:	4b45      	ldr	r3, [pc, #276]	; (8003254 <WriteChar+0x6f4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	045b      	lsls	r3, r3, #17
 8003144:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <WriteChar+0x6f4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <WriteChar+0x6f4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	025b      	lsls	r3, r3, #9
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	431a      	orrs	r2, r3
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <WriteChar+0x6f4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a39      	ldr	r2, [pc, #228]	; (800325c <WriteChar+0x6fc>)
 8003178:	2100      	movs	r1, #0
 800317a:	4837      	ldr	r0, [pc, #220]	; (8003258 <WriteChar+0x6f8>)
 800317c:	f003 fe62 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <WriteChar+0x6f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	045b      	lsls	r3, r3, #17
 8003186:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <WriteChar+0x6f4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8003198:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <WriteChar+0x6f4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	025b      	lsls	r3, r3, #9
 80031a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a4:	431a      	orrs	r2, r3
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <WriteChar+0x6f4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	069b      	lsls	r3, r3, #26
 80031ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <WriteChar+0x6fc>)
 80031ba:	2102      	movs	r1, #2
 80031bc:	4826      	ldr	r0, [pc, #152]	; (8003258 <WriteChar+0x6f8>)
 80031be:	f003 fe41 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <WriteChar+0x6f4>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	045b      	lsls	r3, r3, #17
 80031c8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <WriteChar+0x6f4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <WriteChar+0x6f4>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	431a      	orrs	r2, r3
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <WriteChar+0x6f4>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <WriteChar+0x6fc>)
 80031fc:	2104      	movs	r1, #4
 80031fe:	4816      	ldr	r0, [pc, #88]	; (8003258 <WriteChar+0x6f8>)
 8003200:	f003 fe20 	bl	8006e44 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <WriteChar+0x6f4>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	045b      	lsls	r3, r3, #17
 800320a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <WriteChar+0x6f4>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <WriteChar+0x6f4>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	025b      	lsls	r3, r3, #9
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	431a      	orrs	r2, r3
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <WriteChar+0x6f4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	08db      	lsrs	r3, r3, #3
 8003230:	069b      	lsls	r3, r3, #26
 8003232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a07      	ldr	r2, [pc, #28]	; (800325c <WriteChar+0x6fc>)
 800323e:	2106      	movs	r1, #6
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <WriteChar+0x6f8>)
 8003242:	f003 fdff 	bl	8006e44 <HAL_LCD_Write>
      break;
 8003246:	e000      	b.n	800324a <WriteChar+0x6ea>

    default:
      break;
 8003248:	bf00      	nop
  }
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000b168 	.word	0x2000b168
 8003258:	2000b12c 	.word	0x2000b12c
 800325c:	fbfdfcff 	.word	0xfbfdfcff

08003260 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <BSP_QSPI_Init+0xa4>)
 8003268:	4a27      	ldr	r2, [pc, #156]	; (8003308 <BSP_QSPI_Init+0xa8>)
 800326a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800326c:	4825      	ldr	r0, [pc, #148]	; (8003304 <BSP_QSPI_Init+0xa4>)
 800326e:	f003 ffef 	bl	8007250 <HAL_QSPI_DeInit>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e03f      	b.n	80032fc <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 800327c:	f000 f888 	bl	8003390 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <BSP_QSPI_Init+0xa4>)
 8003282:	2201      	movs	r2, #1
 8003284:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8003286:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <BSP_QSPI_Init+0xa4>)
 8003288:	2204      	movs	r2, #4
 800328a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <BSP_QSPI_Init+0xa4>)
 800328e:	2210      	movs	r2, #16
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e003      	b.n	80032b6 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80032b6:	3b01      	subs	r3, #1
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032bc:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80032ca:	480e      	ldr	r0, [pc, #56]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032cc:	f003 ff4a 	bl	8007164 <HAL_QSPI_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e010      	b.n	80032fc <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80032da:	480a      	ldr	r0, [pc, #40]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032dc:	f000 f8a4 	bl	8003428 <QSPI_ResetMemory>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80032e6:	2304      	movs	r3, #4
 80032e8:	e008      	b.n	80032fc <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <BSP_QSPI_Init+0xa4>)
 80032ec:	f000 f8e0 	bl	80034b0 <QSPI_DummyCyclesCfg>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 80032f6:	2304      	movs	r3, #4
 80032f8:	e000      	b.n	80032fc <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	2000b178 	.word	0x2000b178
 8003308:	a0001000 	.word	0xa0001000

0800330c <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b092      	sub	sp, #72	; 0x48
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800331e:	23eb      	movs	r3, #235	; 0xeb
 8003320:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003322:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800332c:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8003336:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800333c:	230a      	movs	r3, #10
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003348:	2300      	movs	r3, #0
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4619      	mov	r1, r3
 800335a:	480c      	ldr	r0, [pc, #48]	; (800338c <BSP_QSPI_Read+0x80>)
 800335c:	f003 ff9c 	bl	8007298 <HAL_QSPI_Command>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00b      	b.n	8003382 <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <BSP_QSPI_Read+0x80>)
 8003372:	f004 f886 	bl	8007482 <HAL_QSPI_Receive>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3748      	adds	r7, #72	; 0x48
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2000b178 	.word	0x2000b178

08003390 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <QSPI_MspInit+0x90>)
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <QSPI_MspInit+0x90>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6513      	str	r3, [r2, #80]	; 0x50
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <QSPI_MspInit+0x90>)
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <QSPI_MspInit+0x90>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <QSPI_MspInit+0x90>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <QSPI_MspInit+0x90>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <QSPI_MspInit+0x90>)
 80033c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <QSPI_MspInit+0x90>)
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <QSPI_MspInit+0x90>)
 80033cc:	f043 0310 	orr.w	r3, r3, #16
 80033d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <QSPI_MspInit+0x90>)
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 80033de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80033f0:	230a      	movs	r3, #10
 80033f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	4619      	mov	r1, r3
 80033fa:	480a      	ldr	r0, [pc, #40]	; (8003424 <QSPI_MspInit+0x94>)
 80033fc:	f002 fb5c 	bl	8005ab8 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003400:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8003404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	4619      	mov	r1, r3
 8003410:	4804      	ldr	r0, [pc, #16]	; (8003424 <QSPI_MspInit+0x94>)
 8003412:	f002 fb51 	bl	8005ab8 <HAL_GPIO_Init>
}
 8003416:	bf00      	nop
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	48001000 	.word	0x48001000

08003428 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b090      	sub	sp, #64	; 0x40
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003434:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003436:	2366      	movs	r3, #102	; 0x66
 8003438:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800344e:	2300      	movs	r3, #0
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003452:	2300      	movs	r3, #0
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4619      	mov	r1, r3
 8003460:	4812      	ldr	r0, [pc, #72]	; (80034ac <QSPI_ResetMemory+0x84>)
 8003462:	f003 ff19 	bl	8007298 <HAL_QSPI_Command>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e019      	b.n	80034a4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003470:	2399      	movs	r3, #153	; 0x99
 8003472:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003474:	f107 0308 	add.w	r3, r7, #8
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4619      	mov	r1, r3
 800347e:	480b      	ldr	r0, [pc, #44]	; (80034ac <QSPI_ResetMemory+0x84>)
 8003480:	f003 ff0a 	bl	8007298 <HAL_QSPI_Command>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00a      	b.n	80034a4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800348e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003492:	4806      	ldr	r0, [pc, #24]	; (80034ac <QSPI_ResetMemory+0x84>)
 8003494:	f000 f8d6 	bl	8003644 <QSPI_AutoPollingMemReady>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3740      	adds	r7, #64	; 0x40
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000b178 	.word	0x2000b178

080034b0 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b094      	sub	sp, #80	; 0x50
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80034be:	2385      	movs	r3, #133	; 0x85
 80034c0:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80034ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034dc:	2300      	movs	r3, #0
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034e0:	2300      	movs	r3, #0
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4619      	mov	r1, r3
 80034ee:	482e      	ldr	r0, [pc, #184]	; (80035a8 <QSPI_DummyCyclesCfg+0xf8>)
 80034f0:	f003 fed2 	bl	8007298 <HAL_QSPI_Command>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04f      	b.n	800359e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034fe:	f107 030b 	add.w	r3, r7, #11
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4619      	mov	r1, r3
 8003508:	4827      	ldr	r0, [pc, #156]	; (80035a8 <QSPI_DummyCyclesCfg+0xf8>)
 800350a:	f003 ffba 	bl	8007482 <HAL_QSPI_Receive>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e042      	b.n	800359e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003518:	4823      	ldr	r0, [pc, #140]	; (80035a8 <QSPI_DummyCyclesCfg+0xf8>)
 800351a:	f000 f847 	bl	80035ac <QSPI_WriteEnable>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e03a      	b.n	800359e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003528:	2381      	movs	r3, #129	; 0x81
 800352a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800352c:	7afb      	ldrb	r3, [r7, #11]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	b25a      	sxtb	r2, r3
 8003536:	23f0      	movs	r3, #240	; 0xf0
 8003538:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8003546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	230a      	movs	r3, #10
 800355c:	408b      	lsls	r3, r1
 800355e:	b25b      	sxtb	r3, r3
 8003560:	4313      	orrs	r3, r2
 8003562:	b25b      	sxtb	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4619      	mov	r1, r3
 8003572:	480d      	ldr	r0, [pc, #52]	; (80035a8 <QSPI_DummyCyclesCfg+0xf8>)
 8003574:	f003 fe90 	bl	8007298 <HAL_QSPI_Command>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00d      	b.n	800359e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003582:	f107 030b 	add.w	r3, r7, #11
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4619      	mov	r1, r3
 800358c:	4806      	ldr	r0, [pc, #24]	; (80035a8 <QSPI_DummyCyclesCfg+0xf8>)
 800358e:	f003 fee1 	bl	8007354 <HAL_QSPI_Transmit>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3750      	adds	r7, #80	; 0x50
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2000b178 	.word	0x2000b178

080035ac <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b096      	sub	sp, #88	; 0x58
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80035ba:	2306      	movs	r3, #6
 80035bc:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035d2:	2300      	movs	r3, #0
 80035d4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035d6:	2300      	movs	r3, #0
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035da:	f107 0320 	add.w	r3, r7, #32
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4619      	mov	r1, r3
 80035e4:	4816      	ldr	r0, [pc, #88]	; (8003640 <QSPI_WriteEnable+0x94>)
 80035e6:	f003 fe57 	bl	8007298 <HAL_QSPI_Command>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e020      	b.n	8003636 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 80035f4:	2302      	movs	r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 80035f8:	2302      	movs	r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003604:	2310      	movs	r3, #16
 8003606:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800360e:	2305      	movs	r3, #5
 8003610:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8003612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003616:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	f107 0120 	add.w	r1, r7, #32
 8003620:	f241 3388 	movw	r3, #5000	; 0x1388
 8003624:	4806      	ldr	r0, [pc, #24]	; (8003640 <QSPI_WriteEnable+0x94>)
 8003626:	f003 ffce 	bl	80075c6 <HAL_QSPI_AutoPolling>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3758      	adds	r7, #88	; 0x58
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000b178 	.word	0x2000b178

08003644 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b096      	sub	sp, #88	; 0x58
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800364e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003654:	2305      	movs	r3, #5
 8003656:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003658:	2300      	movs	r3, #0
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800365c:	2300      	movs	r3, #0
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800366e:	2300      	movs	r3, #0
 8003670:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003672:	2300      	movs	r3, #0
 8003674:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 800367a:	2301      	movs	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003686:	2310      	movs	r3, #16
 8003688:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800368a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800368e:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003690:	f107 0208 	add.w	r2, r7, #8
 8003694:	f107 0120 	add.w	r1, r7, #32
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4806      	ldr	r0, [pc, #24]	; (80036b4 <QSPI_AutoPollingMemReady+0x70>)
 800369c:	f003 ff93 	bl	80075c6 <HAL_QSPI_AutoPolling>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3758      	adds	r7, #88	; 0x58
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	2000b178 	.word	0x2000b178

080036b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_Init+0x3c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_Init+0x3c>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ce:	2003      	movs	r0, #3
 80036d0:	f001 ff2c 	bl	800552c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 f80f 	bl	80036f8 <HAL_InitTick>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	e001      	b.n	80036ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036e6:	f7fd fbd9 	bl	8000e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ea:	79fb      	ldrb	r3, [r7, #7]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_InitTick+0x6c>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_InitTick+0x70>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <HAL_InitTick+0x6c>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371a:	fbb3 f3f1 	udiv	r3, r3, r1
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f001 ff45 	bl	80055b2 <HAL_SYSTICK_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d809      	bhi.n	8003748 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f001 ff01 	bl	8005542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <HAL_InitTick+0x74>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e007      	b.n	8003758 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e004      	b.n	8003758 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e001      	b.n	8003758 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000084 	.word	0x20000084
 8003768:	20000044 	.word	0x20000044
 800376c:	20000080 	.word	0x20000080

08003770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x20>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x24>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4413      	add	r3, r2
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_IncTick+0x24>)
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000084 	.word	0x20000084
 8003794:	2000b1bc 	.word	0x2000b1bc

08003798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_GetTick+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	2000b1bc 	.word	0x2000b1bc

080037b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7ff ffee 	bl	8003798 <HAL_GetTick>
 80037bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d005      	beq.n	80037d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_Delay+0x44>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d6:	bf00      	nop
 80037d8:	f7ff ffde 	bl	8003798 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d8f7      	bhi.n	80037d8 <HAL_Delay+0x28>
  {
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000084 	.word	0x20000084

080037f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3360      	adds	r3, #96	; 0x60
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <LL_ADC_SetOffset+0x44>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	03fff000 	.word	0x03fff000

080038a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3360      	adds	r3, #96	; 0x60
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3330      	adds	r3, #48	; 0x30
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	4413      	add	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	211f      	movs	r1, #31
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 011f 	and.w	r1, r3, #31
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	431a      	orrs	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b087      	sub	sp, #28
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3314      	adds	r3, #20
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0d1b      	lsrs	r3, r3, #20
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2107      	movs	r1, #7
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0d1b      	lsrs	r3, r3, #20
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	431a      	orrs	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0318 	and.w	r3, r3, #24
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a28:	40d9      	lsrs	r1, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	0007ffff 	.word	0x0007ffff

08003a4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 031f 	and.w	r3, r3, #31
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6093      	str	r3, [r2, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abc:	d101      	bne.n	8003ac2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ae4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <LL_ADC_IsEnabled+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_ADC_IsEnabled+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d101      	bne.n	8003bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d101      	bne.n	8003bd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e136      	b.n	8003e6c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fd f969 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff3f 	bl	8003aa8 <LL_ADC_IsDeepPowerDownEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff25 	bl	8003a84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff5a 	bl	8003af8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ff3e 	bl	8003ad0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c54:	4b87      	ldr	r3, [pc, #540]	; (8003e74 <HAL_ADC_Init+0x290>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_ADC_Init+0x294>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c68:	e002      	b.n	8003c70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f9      	bne.n	8003c6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff3c 	bl	8003af8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff75 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003cac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 80cf 	bne.w	8003e5a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 80cb 	bne.w	8003e5a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff35 	bl	8003b48 <LL_ADC_IsEnabled>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d115      	bne.n	8003d10 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce4:	4865      	ldr	r0, [pc, #404]	; (8003e7c <HAL_ADC_Init+0x298>)
 8003ce6:	f7ff ff2f 	bl	8003b48 <LL_ADC_IsEnabled>
 8003cea:	4604      	mov	r4, r0
 8003cec:	4864      	ldr	r0, [pc, #400]	; (8003e80 <HAL_ADC_Init+0x29c>)
 8003cee:	f7ff ff2b 	bl	8003b48 <LL_ADC_IsEnabled>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	431c      	orrs	r4, r3
 8003cf6:	4863      	ldr	r0, [pc, #396]	; (8003e84 <HAL_ADC_Init+0x2a0>)
 8003cf8:	f7ff ff26 	bl	8003b48 <LL_ADC_IsEnabled>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4323      	orrs	r3, r4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	485f      	ldr	r0, [pc, #380]	; (8003e88 <HAL_ADC_Init+0x2a4>)
 8003d0c:	f7ff fd74 	bl	80037f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7e5b      	ldrb	r3, [r3, #25]
 8003d14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d106      	bne.n	8003d4c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	3b01      	subs	r3, #1
 8003d44:	045b      	lsls	r3, r3, #17
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_ADC_Init+0x2a8>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	69b9      	ldr	r1, [r7, #24]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff08 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003d86:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff15 	bl	8003bbc <LL_ADC_INJ_IsConversionOngoing>
 8003d92:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d13a      	bne.n	8003e16 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003da4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbc:	f023 0302 	bic.w	r3, r3, #2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d118      	bne.n	8003e06 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dea:	4311      	orrs	r1, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003df6:	430a      	orrs	r2, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	611a      	str	r2, [r3, #16]
 8003e04:	e007      	b.n	8003e16 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10c      	bne.n	8003e38 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f023 010f 	bic.w	r1, r3, #15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	1e5a      	subs	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
 8003e36:	e007      	b.n	8003e48 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020f 	bic.w	r2, r2, #15
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f023 0303 	bic.w	r3, r3, #3
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
 8003e58:	e007      	b.n	8003e6a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0210 	orr.w	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3724      	adds	r7, #36	; 0x24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd90      	pop	{r4, r7, pc}
 8003e74:	20000044 	.word	0x20000044
 8003e78:	053e2d63 	.word	0x053e2d63
 8003e7c:	50040000 	.word	0x50040000
 8003e80:	50040100 	.word	0x50040100
 8003e84:	50040200 	.word	0x50040200
 8003e88:	50040300 	.word	0x50040300
 8003e8c:	fff0c007 	.word	0xfff0c007

08003e90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e98:	4857      	ldr	r0, [pc, #348]	; (8003ff8 <HAL_ADC_Start+0x168>)
 8003e9a:	f7ff fdd7 	bl	8003a4c <LL_ADC_GetMultimode>
 8003e9e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fe76 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 809c 	bne.w	8003fea <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_Start+0x30>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e097      	b.n	8003ff0 <HAL_ADC_Start+0x160>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f001 f8d1 	bl	8005070 <ADC_Enable>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 8083 	bne.w	8003fe0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_ADC_Start+0x16c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d002      	beq.n	8003efe <HAL_ADC_Start+0x6e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_Start+0x70>
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <HAL_ADC_Start+0x170>)
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d002      	beq.n	8003f0e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	d106      	bne.n	8003f36 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	f023 0206 	bic.w	r2, r3, #6
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	; 0x58
 8003f34:	e002      	b.n	8003f3c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	221c      	movs	r2, #28
 8003f42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <HAL_ADC_Start+0x16c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d002      	beq.n	8003f5c <HAL_ADC_Start+0xcc>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e000      	b.n	8003f5e <HAL_ADC_Start+0xce>
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_ADC_Start+0x170>)
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d008      	beq.n	8003f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d002      	beq.n	8003f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	d114      	bne.n	8003fa2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fde7 	bl	8003b6e <LL_ADC_REG_StartConversion>
 8003fa0:	e025      	b.n	8003fee <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_ADC_Start+0x16c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d002      	beq.n	8003fbe <HAL_ADC_Start+0x12e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	e000      	b.n	8003fc0 <HAL_ADC_Start+0x130>
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_ADC_Start+0x170>)
 8003fc0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00f      	beq.n	8003fee <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8003fde:	e006      	b.n	8003fee <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003fe8:	e001      	b.n	8003fee <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	50040300 	.word	0x50040300
 8003ffc:	50040100 	.word	0x50040100
 8004000:	50040000 	.word	0x50040000

08004004 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800400e:	4866      	ldr	r0, [pc, #408]	; (80041a8 <HAL_ADC_PollForConversion+0x1a4>)
 8004010:	f7ff fd1c 	bl	8003a4c <LL_ADC_GetMultimode>
 8004014:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d102      	bne.n	8004024 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800401e:	2308      	movs	r3, #8
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e02a      	b.n	800407a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d002      	beq.n	8004036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b09      	cmp	r3, #9
 8004034:	d111      	bne.n	800405a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0a4      	b.n	800419e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004054:	2304      	movs	r3, #4
 8004056:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004058:	e00f      	b.n	800407a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800405a:	4853      	ldr	r0, [pc, #332]	; (80041a8 <HAL_ADC_PollForConversion+0x1a4>)
 800405c:	f7ff fd04 	bl	8003a68 <LL_ADC_GetMultiDMATransfer>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e093      	b.n	800419e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004076:	2304      	movs	r3, #4
 8004078:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800407a:	f7ff fb8d 	bl	8003798 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004080:	e021      	b.n	80040c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d01d      	beq.n	80040c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800408a:	f7ff fb85 	bl	8003798 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <HAL_ADC_PollForConversion+0x9c>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d112      	bne.n	80040c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e06b      	b.n	800419e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0d6      	beq.n	8004082 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fc10 	bl	800390a <LL_ADC_REG_IsTriggerSourceSWStart>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e5b      	ldrb	r3, [r3, #25]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d118      	bne.n	800412a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d111      	bne.n	800412a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_ADC_PollForConversion+0x1a8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d002      	beq.n	800413a <HAL_ADC_PollForConversion+0x136>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	e000      	b.n	800413c <HAL_ADC_PollForConversion+0x138>
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_ADC_PollForConversion+0x1ac>)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	4293      	cmp	r3, r2
 8004142:	d008      	beq.n	8004156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b05      	cmp	r3, #5
 800414e:	d002      	beq.n	8004156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b09      	cmp	r3, #9
 8004154:	d104      	bne.n	8004160 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e00c      	b.n	800417a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_ADC_PollForConversion+0x1a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d002      	beq.n	8004170 <HAL_ADC_PollForConversion+0x16c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	e000      	b.n	8004172 <HAL_ADC_PollForConversion+0x16e>
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_ADC_PollForConversion+0x1ac>)
 8004172:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d104      	bne.n	800418a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2208      	movs	r2, #8
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e008      	b.n	800419c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d103      	bne.n	800419c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	220c      	movs	r2, #12
 800419a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	50040300 	.word	0x50040300
 80041ac:	50040100 	.word	0x50040100
 80041b0:	50040000 	.word	0x50040000

080041b4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041bc:	4893      	ldr	r0, [pc, #588]	; (800440c <HAL_ADC_Start_IT+0x258>)
 80041be:	f7ff fc45 	bl	8003a4c <LL_ADC_GetMultimode>
 80041c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fce4 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 8111 	bne.w	80043f8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_Start_IT+0x30>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e10e      	b.n	8004402 <HAL_ADC_Start_IT+0x24e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 ff3f 	bl	8005070 <ADC_Enable>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 80f8 	bne.w	80043ee <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7e      	ldr	r2, [pc, #504]	; (8004410 <HAL_ADC_Start_IT+0x25c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d002      	beq.n	8004222 <HAL_ADC_Start_IT+0x6e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	e000      	b.n	8004224 <HAL_ADC_Start_IT+0x70>
 8004222:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_ADC_Start_IT+0x260>)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4293      	cmp	r3, r2
 800422a:	d002      	beq.n	8004232 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f023 0206 	bic.w	r2, r3, #6
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	659a      	str	r2, [r3, #88]	; 0x58
 8004256:	e002      	b.n	800425e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	221c      	movs	r2, #28
 8004264:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 021c 	bic.w	r2, r2, #28
 800427c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d108      	bne.n	8004298 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0208 	orr.w	r2, r2, #8
 8004294:	605a      	str	r2, [r3, #4]
          break;
 8004296:	e008      	b.n	80042aa <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0204 	orr.w	r2, r2, #4
 80042a6:	605a      	str	r2, [r3, #4]
          break;
 80042a8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0210 	orr.w	r2, r2, #16
 80042c0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_ADC_Start_IT+0x25c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d002      	beq.n	80042d2 <HAL_ADC_Start_IT+0x11e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	e000      	b.n	80042d4 <HAL_ADC_Start_IT+0x120>
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_ADC_Start_IT+0x260>)
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	4293      	cmp	r3, r2
 80042da:	d008      	beq.n	80042ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d002      	beq.n	80042ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	d13b      	bne.n	8004366 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02d      	beq.n	8004358 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004304:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d110      	bne.n	8004336 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0220 	bic.w	r2, r2, #32
 8004322:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004332:	605a      	str	r2, [r3, #4]
              break;
 8004334:	e011      	b.n	800435a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	605a      	str	r2, [r3, #4]
              break;
 8004356:	e000      	b.n	800435a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8004358:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fc05 	bl	8003b6e <LL_ADC_REG_StartConversion>
 8004364:	e04c      	b.n	8004400 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a26      	ldr	r2, [pc, #152]	; (8004410 <HAL_ADC_Start_IT+0x25c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d002      	beq.n	8004382 <HAL_ADC_Start_IT+0x1ce>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	e000      	b.n	8004384 <HAL_ADC_Start_IT+0x1d0>
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_ADC_Start_IT+0x260>)
 8004384:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d035      	beq.n	80043fe <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800439a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d110      	bne.n	80043cc <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0220 	bic.w	r2, r2, #32
 80043b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c8:	605a      	str	r2, [r3, #4]
              break;
 80043ca:	e019      	b.n	8004400 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0220 	orr.w	r2, r2, #32
 80043ea:	605a      	str	r2, [r3, #4]
              break;
 80043ec:	e008      	b.n	8004400 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80043f6:	e003      	b.n	8004400 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
 80043fa:	75fb      	strb	r3, [r7, #23]
 80043fc:	e000      	b.n	8004400 <HAL_ADC_Start_IT+0x24c>
        }
 80043fe:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	50040300 	.word	0x50040300
 8004410:	50040100 	.word	0x50040100
 8004414:	50040000 	.word	0x50040000

08004418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004450:	4882      	ldr	r0, [pc, #520]	; (800465c <HAL_ADC_IRQHandler+0x228>)
 8004452:	f7ff fafb 	bl	8003a4c <LL_ADC_GetMultimode>
 8004456:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d017      	beq.n	8004492 <HAL_ADC_IRQHandler+0x5e>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d012      	beq.n	8004492 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fea3 	bl	80051d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2202      	movs	r2, #2
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <HAL_ADC_IRQHandler+0x72>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8083 	beq.w	80045b8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d07d      	beq.n	80045b8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fa16 	bl	800390a <LL_ADC_REG_IsTriggerSourceSWStart>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d062      	beq.n	80045aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_ADC_IRQHandler+0x22c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d002      	beq.n	80044f4 <HAL_ADC_IRQHandler+0xc0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	e000      	b.n	80044f6 <HAL_ADC_IRQHandler+0xc2>
 80044f4:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <HAL_ADC_IRQHandler+0x230>)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d008      	beq.n	8004510 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b05      	cmp	r3, #5
 8004508:	d002      	beq.n	8004510 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b09      	cmp	r3, #9
 800450e:	d104      	bne.n	800451a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	e00c      	b.n	8004534 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_ADC_IRQHandler+0x22c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d002      	beq.n	800452a <HAL_ADC_IRQHandler+0xf6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	e000      	b.n	800452c <HAL_ADC_IRQHandler+0xf8>
 800452a:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <HAL_ADC_IRQHandler+0x230>)
 800452c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d135      	bne.n	80045aa <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d12e      	bne.n	80045aa <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fb20 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11a      	bne.n	8004592 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020c 	bic.w	r2, r2, #12
 800456a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d112      	bne.n	80045aa <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
 8004590:	e00b      	b.n	80045aa <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f043 0210 	orr.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fb fff0 	bl	8000590 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	220c      	movs	r2, #12
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_ADC_IRQHandler+0x198>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 809f 	beq.w	8004716 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8099 	beq.w	8004716 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f9c1 	bl	8003988 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004606:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff f97c 	bl	800390a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004612:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a11      	ldr	r2, [pc, #68]	; (8004660 <HAL_ADC_IRQHandler+0x22c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d002      	beq.n	8004624 <HAL_ADC_IRQHandler+0x1f0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	e000      	b.n	8004626 <HAL_ADC_IRQHandler+0x1f2>
 8004624:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <HAL_ADC_IRQHandler+0x230>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	4293      	cmp	r3, r2
 800462c:	d008      	beq.n	8004640 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d002      	beq.n	8004640 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b07      	cmp	r3, #7
 800463e:	d104      	bne.n	800464a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	e013      	b.n	8004672 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <HAL_ADC_IRQHandler+0x22c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_ADC_IRQHandler+0x234>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	e007      	b.n	800466a <HAL_ADC_IRQHandler+0x236>
 800465a:	bf00      	nop
 800465c:	50040300 	.word	0x50040300
 8004660:	50040100 	.word	0x50040100
 8004664:	50040000 	.word	0x50040000
 8004668:	4b7d      	ldr	r3, [pc, #500]	; (8004860 <HAL_ADC_IRQHandler+0x42c>)
 800466a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d047      	beq.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_ADC_IRQHandler+0x25e>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d03f      	beq.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800468e:	2b00      	cmp	r3, #0
 8004690:	d13a      	bne.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d133      	bne.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d12e      	bne.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fa84 	bl	8003bbc <LL_ADC_INJ_IsConversionOngoing>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11a      	bne.n	80046f0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046c8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d112      	bne.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
 80046ee:	e00b      	b.n	8004708 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fd39 	bl	8005180 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2260      	movs	r2, #96	; 0x60
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d011      	beq.n	8004744 <HAL_ADC_IRQHandler+0x310>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f896 	bl	8004868 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <HAL_ADC_IRQHandler+0x340>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fd1f 	bl	80051a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477a:	2b00      	cmp	r3, #0
 800477c:	d012      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x370>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fd11 	bl	80051bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d036      	beq.n	800481c <HAL_ADC_IRQHandler+0x3e8>
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d031      	beq.n	800481c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80047c0:	2301      	movs	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
 80047c4:	e014      	b.n	80047f0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047cc:	4825      	ldr	r0, [pc, #148]	; (8004864 <HAL_ADC_IRQHandler+0x430>)
 80047ce:	f7ff f94b 	bl	8003a68 <LL_ADC_GetMultiDMATransfer>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80047d8:	2301      	movs	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e008      	b.n	80047f0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80047ec:	2301      	movs	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10e      	bne.n	8004814 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f043 0202 	orr.w	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f834 	bl	800487c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2210      	movs	r2, #16
 800481a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <HAL_ADC_IRQHandler+0x424>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	f043 0208 	orr.w	r2, r3, #8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004850:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fc9e 	bl	8005194 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004858:	bf00      	nop
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	50040000 	.word	0x50040000
 8004864:	50040300 	.word	0x50040300

08004868 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b0b6      	sub	sp, #216	; 0xd8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x22>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e3c7      	b.n	8005042 <HAL_ADC_ConfigChannel+0x7b2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff f969 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 83a8 	bne.w	800501c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d824      	bhi.n	800491e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	3b02      	subs	r3, #2
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d81b      	bhi.n	8004916 <HAL_ADC_ConfigChannel+0x86>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_ADC_ConfigChannel+0x54>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	080048fd 	.word	0x080048fd
 80048ec:	08004905 	.word	0x08004905
 80048f0:	0800490d 	.word	0x0800490d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	220c      	movs	r2, #12
 80048f8:	605a      	str	r2, [r3, #4]
          break;
 80048fa:	e011      	b.n	8004920 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2212      	movs	r2, #18
 8004900:	605a      	str	r2, [r3, #4]
          break;
 8004902:	e00d      	b.n	8004920 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2218      	movs	r2, #24
 8004908:	605a      	str	r2, [r3, #4]
          break;
 800490a:	e009      	b.n	8004920 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004912:	605a      	str	r2, [r3, #4]
          break;
 8004914:	e004      	b.n	8004920 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2206      	movs	r2, #6
 800491a:	605a      	str	r2, [r3, #4]
          break;
 800491c:	e000      	b.n	8004920 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800491e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	f7fe ffff 	bl	8003930 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff f92d 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 800493c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff f939 	bl	8003bbc <LL_ADC_INJ_IsConversionOngoing>
 800494a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800494e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 81a6 	bne.w	8004ca4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 81a1 	bne.w	8004ca4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	461a      	mov	r2, r3
 8004970:	f7ff f81d 	bl	80039ae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d00a      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6919      	ldr	r1, [r3, #16]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a6:	f7fe ff5b 	bl	8003860 <LL_ADC_SetOffset>
 80049aa:	e17b      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ff78 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x148>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe ff6d 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80049ce:	4603      	mov	r3, r0
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	f003 021f 	and.w	r2, r3, #31
 80049d6:	e01e      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x186>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe ff62 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80049f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80049fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004a06:	2320      	movs	r3, #32
 8004a08:	e004      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x19e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	e018      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x1d0>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e004      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe ff31 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe ff15 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x20e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe ff0a 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004a94:	4603      	mov	r3, r0
 8004a96:	0e9b      	lsrs	r3, r3, #26
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	e01e      	b.n	8004adc <HAL_ADC_ConfigChannel+0x24c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe feff 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e004      	b.n	8004ada <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x264>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0e9b      	lsrs	r3, r3, #26
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	e018      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x296>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e004      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d106      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fece 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe feb2 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x2d4>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fea7 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	f003 021f 	and.w	r2, r3, #31
 8004b62:	e01e      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x312>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2102      	movs	r1, #2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fe9c 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004b92:	2320      	movs	r3, #32
 8004b94:	e004      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x32a>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	0e9b      	lsrs	r3, r3, #26
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	e016      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x358>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bc6:	fa93 f3a3 	rbit	r3, r3
 8004bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	e004      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d106      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fe6d 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2103      	movs	r1, #3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe fe51 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x396>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2103      	movs	r1, #3
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fe46 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	0e9b      	lsrs	r3, r3, #26
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	e017      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x3c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fe3b 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e003      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x3de>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0e9b      	lsrs	r3, r3, #26
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	e011      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x402>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e003      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d106      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fe18 	bl	80038d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe ff4d 	bl	8003b48 <LL_ADC_IsEnabled>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 813f 	bne.w	8004f34 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fe fe9e 	bl	8003a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a8e      	ldr	r2, [pc, #568]	; (8004f08 <HAL_ADC_ConfigChannel+0x678>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f040 8130 	bne.w	8004f34 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x46c>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0e9b      	lsrs	r3, r3, #26
 8004cea:	3301      	adds	r3, #1
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	bf94      	ite	ls
 8004cf4:	2301      	movls	r3, #1
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e019      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x4a0>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e003      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	bf94      	ite	ls
 8004d2a:	2301      	movls	r3, #1
 8004d2c:	2300      	movhi	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d079      	beq.n	8004e28 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x4c0>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	3301      	adds	r3, #1
 8004d48:	069b      	lsls	r3, r3, #26
 8004d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4e:	e015      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x4ec>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004d68:	2320      	movs	r3, #32
 8004d6a:	e003      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	069b      	lsls	r3, r3, #26
 8004d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x50c>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0e9b      	lsrs	r3, r3, #26
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2101      	movs	r1, #1
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	e017      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x53c>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004db4:	2320      	movs	r3, #32
 8004db6:	e003      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	ea42 0103 	orr.w	r1, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x562>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0e9b      	lsrs	r3, r3, #26
 8004de2:	3301      	adds	r3, #1
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	051b      	lsls	r3, r3, #20
 8004df0:	e018      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x594>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	e003      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	fab3 f383 	clz	r3, r3
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	f003 021f 	and.w	r2, r3, #31
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e24:	430b      	orrs	r3, r1
 8004e26:	e080      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x5b4>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	069b      	lsls	r3, r3, #26
 8004e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e42:	e015      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x5e0>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	e003      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	3301      	adds	r3, #1
 8004e6a:	069b      	lsls	r3, r3, #26
 8004e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x600>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0e9b      	lsrs	r3, r3, #26
 8004e82:	3301      	adds	r3, #1
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	e017      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x630>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2101      	movs	r1, #1
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	ea42 0103 	orr.w	r1, r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10d      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x65c>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	0e9b      	lsrs	r3, r3, #26
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f003 021f 	and.w	r2, r3, #31
 8004edc:	4613      	mov	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3b1e      	subs	r3, #30
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eea:	e01d      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x698>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	613b      	str	r3, [r7, #16]
  return result;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004f04:	2320      	movs	r3, #32
 8004f06:	e005      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x684>
 8004f08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f003 021f 	and.w	r2, r3, #31
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b1e      	subs	r3, #30
 8004f22:	051b      	lsls	r3, r3, #20
 8004f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f7fe fd3d 	bl	80039ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b44      	ldr	r3, [pc, #272]	; (800504c <HAL_ADC_ConfigChannel+0x7bc>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d07a      	beq.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f40:	4843      	ldr	r0, [pc, #268]	; (8005050 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f42:	f7fe fc7f 	bl	8003844 <LL_ADC_GetCommonPathInternalCh>
 8004f46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a41      	ldr	r2, [pc, #260]	; (8005054 <HAL_ADC_ConfigChannel+0x7c4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d12c      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d126      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <HAL_ADC_ConfigChannel+0x7c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_ADC_ConfigChannel+0x6e4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_ADC_ConfigChannel+0x7cc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d15d      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4834      	ldr	r0, [pc, #208]	; (8005050 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f80:	f7fe fc4d 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_ADC_ConfigChannel+0x7d0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	4a36      	ldr	r2, [pc, #216]	; (8005064 <HAL_ADC_ConfigChannel+0x7d4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f9e:	e002      	b.n	8004fa6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f9      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fac:	e040      	b.n	8005030 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	; (8005068 <HAL_ADC_ConfigChannel+0x7d8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d118      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x75a>
 8004fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d112      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <HAL_ADC_ConfigChannel+0x7c8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_ADC_ConfigChannel+0x748>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_ADC_ConfigChannel+0x7cc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d12d      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	481b      	ldr	r0, [pc, #108]	; (8005050 <HAL_ADC_ConfigChannel+0x7c0>)
 8004fe4:	f7fe fc1b 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe8:	e024      	b.n	8005034 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_ADC_ConfigChannel+0x7dc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d120      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11a      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <HAL_ADC_ConfigChannel+0x7c8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d115      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800500a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800500e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005012:	4619      	mov	r1, r3
 8005014:	480e      	ldr	r0, [pc, #56]	; (8005050 <HAL_ADC_ConfigChannel+0x7c0>)
 8005016:	f7fe fc02 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
 800501a:	e00c      	b.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800502e:	e002      	b.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005030:	bf00      	nop
 8005032:	e000      	b.n	8005036 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005034:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800503e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005042:	4618      	mov	r0, r3
 8005044:	37d8      	adds	r7, #216	; 0xd8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	80080000 	.word	0x80080000
 8005050:	50040300 	.word	0x50040300
 8005054:	c7520000 	.word	0xc7520000
 8005058:	50040000 	.word	0x50040000
 800505c:	50040200 	.word	0x50040200
 8005060:	20000044 	.word	0x20000044
 8005064:	053e2d63 	.word	0x053e2d63
 8005068:	cb840000 	.word	0xcb840000
 800506c:	80000001 	.word	0x80000001

08005070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fd63 	bl	8003b48 <LL_ADC_IsEnabled>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d14d      	bne.n	8005124 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <ADC_Enable+0xc0>)
 8005090:	4013      	ands	r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0210 	orr.w	r2, r3, #16
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e039      	b.n	8005126 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fd32 	bl	8003b20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050bc:	f7fe fb6c 	bl	8003798 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050c2:	e028      	b.n	8005116 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fd3d 	bl	8003b48 <LL_ADC_IsEnabled>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fd21 	bl	8003b20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050de:	f7fe fb5b 	bl	8003798 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d914      	bls.n	8005116 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d00d      	beq.n	8005116 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0210 	orr.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	f043 0201 	orr.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e007      	b.n	8005126 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d1cf      	bne.n	80050c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	8000003f 	.word	0x8000003f

08005134 <LL_ADC_IsEnabled>:
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <LL_ADC_IsEnabled+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_ADC_IsEnabled+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_ADC_REG_IsConversionOngoing>:
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b04      	cmp	r3, #4
 800516c:	d101      	bne.n	8005172 <LL_ADC_REG_IsConversionOngoing+0x18>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b09f      	sub	sp, #124	; 0x7c
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051fe:	2302      	movs	r3, #2
 8005200:	e093      	b.n	800532a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800520a:	2300      	movs	r3, #0
 800520c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800520e:	2300      	movs	r3, #0
 8005210:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a47      	ldr	r2, [pc, #284]	; (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d102      	bne.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	e001      	b.n	8005226 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e072      	b.n	800532a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff87 	bl	800515a <LL_ADC_REG_IsConversionOngoing>
 800524c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff81 	bl	800515a <LL_ADC_REG_IsConversionOngoing>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d154      	bne.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800525e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005260:	2b00      	cmp	r3, #0
 8005262:	d151      	bne.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d02c      	beq.n	80052ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005282:	035b      	lsls	r3, r3, #13
 8005284:	430b      	orrs	r3, r1
 8005286:	431a      	orrs	r2, r3
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800528c:	4829      	ldr	r0, [pc, #164]	; (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800528e:	f7ff ff51 	bl	8005134 <LL_ADC_IsEnabled>
 8005292:	4604      	mov	r4, r0
 8005294:	4828      	ldr	r0, [pc, #160]	; (8005338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005296:	f7ff ff4d 	bl	8005134 <LL_ADC_IsEnabled>
 800529a:	4603      	mov	r3, r0
 800529c:	431c      	orrs	r4, r3
 800529e:	4828      	ldr	r0, [pc, #160]	; (8005340 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80052a0:	f7ff ff48 	bl	8005134 <LL_ADC_IsEnabled>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4323      	orrs	r3, r4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d137      	bne.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052b4:	f023 030f 	bic.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	6811      	ldr	r1, [r2, #0]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	6892      	ldr	r2, [r2, #8]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052c8:	e028      	b.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052d6:	4817      	ldr	r0, [pc, #92]	; (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80052d8:	f7ff ff2c 	bl	8005134 <LL_ADC_IsEnabled>
 80052dc:	4604      	mov	r4, r0
 80052de:	4816      	ldr	r0, [pc, #88]	; (8005338 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80052e0:	f7ff ff28 	bl	8005134 <LL_ADC_IsEnabled>
 80052e4:	4603      	mov	r3, r0
 80052e6:	431c      	orrs	r4, r3
 80052e8:	4815      	ldr	r0, [pc, #84]	; (8005340 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80052ea:	f7ff ff23 	bl	8005134 <LL_ADC_IsEnabled>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4323      	orrs	r3, r4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d112      	bne.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052fe:	f023 030f 	bic.w	r3, r3, #15
 8005302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005304:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005306:	e009      	b.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800531a:	e000      	b.n	800531e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800531c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005326:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800532a:	4618      	mov	r0, r3
 800532c:	377c      	adds	r7, #124	; 0x7c
 800532e:	46bd      	mov	sp, r7
 8005330:	bd90      	pop	{r4, r7, pc}
 8005332:	bf00      	nop
 8005334:	50040000 	.word	0x50040000
 8005338:	50040100 	.word	0x50040100
 800533c:	50040300 	.word	0x50040300
 8005340:	50040200 	.word	0x50040200

08005344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <__NVIC_SetPriorityGrouping+0x44>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005360:	4013      	ands	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800536c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <__NVIC_SetPriorityGrouping+0x44>)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	60d3      	str	r3, [r2, #12]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000ed00 	.word	0xe000ed00

0800538c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	f003 0307 	and.w	r3, r3, #7
}
 800539a:	4618      	mov	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db0b      	blt.n	80053d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	4907      	ldr	r1, [pc, #28]	; (80053e0 <__NVIC_EnableIRQ+0x38>)
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2001      	movs	r0, #1
 80053ca:	fa00 f202 	lsl.w	r2, r0, r2
 80053ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000e100 	.word	0xe000e100

080053e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	db12      	blt.n	800541c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	f003 021f 	and.w	r2, r3, #31
 80053fc:	490a      	ldr	r1, [pc, #40]	; (8005428 <__NVIC_DisableIRQ+0x44>)
 80053fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2001      	movs	r0, #1
 8005406:	fa00 f202 	lsl.w	r2, r0, r2
 800540a:	3320      	adds	r3, #32
 800540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005410:	f3bf 8f4f 	dsb	sy
}
 8005414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005416:	f3bf 8f6f 	isb	sy
}
 800541a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000e100 	.word	0xe000e100

0800542c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db0a      	blt.n	8005456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	490c      	ldr	r1, [pc, #48]	; (8005478 <__NVIC_SetPriority+0x4c>)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	440b      	add	r3, r1
 8005450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005454:	e00a      	b.n	800546c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <__NVIC_SetPriority+0x50>)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3b04      	subs	r3, #4
 8005464:	0112      	lsls	r2, r2, #4
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	440b      	add	r3, r1
 800546a:	761a      	strb	r2, [r3, #24]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f1c3 0307 	rsb	r3, r3, #7
 800549a:	2b04      	cmp	r3, #4
 800549c:	bf28      	it	cs
 800549e:	2304      	movcs	r3, #4
 80054a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d902      	bls.n	80054b0 <NVIC_EncodePriority+0x30>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3b03      	subs	r3, #3
 80054ae:	e000      	b.n	80054b2 <NVIC_EncodePriority+0x32>
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	401a      	ands	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43d9      	mvns	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	4313      	orrs	r3, r2
         );
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f8:	d301      	bcc.n	80054fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00f      	b.n	800551e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <SysTick_Config+0x40>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005506:	210f      	movs	r1, #15
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f7ff ff8e 	bl	800542c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <SysTick_Config+0x40>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005516:	4b04      	ldr	r3, [pc, #16]	; (8005528 <SysTick_Config+0x40>)
 8005518:	2207      	movs	r2, #7
 800551a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	e000e010 	.word	0xe000e010

0800552c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff05 	bl	8005344 <__NVIC_SetPriorityGrouping>
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005554:	f7ff ff1a 	bl	800538c <__NVIC_GetPriorityGrouping>
 8005558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff ff8e 	bl	8005480 <NVIC_EncodePriority>
 8005564:	4602      	mov	r2, r0
 8005566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff5d 	bl	800542c <__NVIC_SetPriority>
}
 8005572:	bf00      	nop
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff0d 	bl	80053a8 <__NVIC_EnableIRQ>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff1d 	bl	80053e4 <__NVIC_DisableIRQ>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff94 	bl	80054e8 <SysTick_Config>
 80055c0:	4603      	mov	r3, r0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e098      	b.n	8005710 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b4d      	ldr	r3, [pc, #308]	; (800571c <HAL_DMA_Init+0x150>)
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d80f      	bhi.n	800560a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <HAL_DMA_Init+0x154>)
 80055f2:	4413      	add	r3, r2
 80055f4:	4a4b      	ldr	r2, [pc, #300]	; (8005724 <HAL_DMA_Init+0x158>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	009a      	lsls	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a48      	ldr	r2, [pc, #288]	; (8005728 <HAL_DMA_Init+0x15c>)
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
 8005608:	e00e      	b.n	8005628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	4b46      	ldr	r3, [pc, #280]	; (800572c <HAL_DMA_Init+0x160>)
 8005612:	4413      	add	r3, r2
 8005614:	4a43      	ldr	r2, [pc, #268]	; (8005724 <HAL_DMA_Init+0x158>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	009a      	lsls	r2, r3, #2
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a42      	ldr	r2, [pc, #264]	; (8005730 <HAL_DMA_Init+0x164>)
 8005626:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800564c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005682:	d039      	beq.n	80056f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	4a27      	ldr	r2, [pc, #156]	; (8005728 <HAL_DMA_Init+0x15c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d11a      	bne.n	80056c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800568e:	4b29      	ldr	r3, [pc, #164]	; (8005734 <HAL_DMA_Init+0x168>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f003 031c 	and.w	r3, r3, #28
 800569a:	210f      	movs	r1, #15
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	4924      	ldr	r1, [pc, #144]	; (8005734 <HAL_DMA_Init+0x168>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056a8:	4b22      	ldr	r3, [pc, #136]	; (8005734 <HAL_DMA_Init+0x168>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	f003 031c 	and.w	r3, r3, #28
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	491d      	ldr	r1, [pc, #116]	; (8005734 <HAL_DMA_Init+0x168>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
 80056c2:	e019      	b.n	80056f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056c4:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <HAL_DMA_Init+0x16c>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f003 031c 	and.w	r3, r3, #28
 80056d0:	210f      	movs	r1, #15
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	4917      	ldr	r1, [pc, #92]	; (8005738 <HAL_DMA_Init+0x16c>)
 80056da:	4013      	ands	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_DMA_Init+0x16c>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f003 031c 	and.w	r3, r3, #28
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	4911      	ldr	r1, [pc, #68]	; (8005738 <HAL_DMA_Init+0x16c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	40020407 	.word	0x40020407
 8005720:	bffdfff8 	.word	0xbffdfff8
 8005724:	cccccccd 	.word	0xcccccccd
 8005728:	40020000 	.word	0x40020000
 800572c:	bffdfbf8 	.word	0xbffdfbf8
 8005730:	40020400 	.word	0x40020400
 8005734:	400200a8 	.word	0x400200a8
 8005738:	400204a8 	.word	0x400204a8

0800573c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_DMA_Start_IT+0x20>
 8005758:	2302      	movs	r3, #2
 800575a:	e04b      	b.n	80057f4 <HAL_DMA_Start_IT+0xb8>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d13a      	bne.n	80057e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f95f 	bl	8005a58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 020e 	orr.w	r2, r2, #14
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e00f      	b.n	80057d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 020a 	orr.w	r2, r2, #10
 80057d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e005      	b.n	80057f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
 80057f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d008      	beq.n	8005826 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2204      	movs	r2, #4
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e022      	b.n	800586c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 020e 	bic.w	r2, r2, #14
 8005834:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	f003 021c 	and.w	r2, r3, #28
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2101      	movs	r1, #1
 8005854:	fa01 f202 	lsl.w	r2, r1, r2
 8005858:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d005      	beq.n	800589c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2204      	movs	r2, #4
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e029      	b.n	80058f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 020e 	bic.w	r2, r2, #14
 80058aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	f003 021c 	and.w	r2, r3, #28
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f202 	lsl.w	r2, r1, r2
 80058ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
    }
  }
  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	f003 031c 	and.w	r3, r3, #28
 800591a:	2204      	movs	r2, #4
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d026      	beq.n	8005974 <HAL_DMA_IRQHandler+0x7a>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d021      	beq.n	8005974 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0204 	bic.w	r2, r2, #4
 800594c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	f003 021c 	and.w	r2, r3, #28
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2104      	movs	r1, #4
 800595c:	fa01 f202 	lsl.w	r2, r1, r2
 8005960:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d071      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005972:	e06c      	b.n	8005a4e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	f003 031c 	and.w	r3, r3, #28
 800597c:	2202      	movs	r2, #2
 800597e:	409a      	lsls	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xec>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d029      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 020a 	bic.w	r2, r2, #10
 80059ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f003 021c 	and.w	r2, r3, #28
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2102      	movs	r1, #2
 80059c6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d038      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80059e4:	e033      	b.n	8005a4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f003 031c 	and.w	r3, r3, #28
 80059ee:	2208      	movs	r2, #8
 80059f0:	409a      	lsls	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d02a      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d025      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 020e 	bic.w	r2, r2, #14
 8005a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f003 021c 	and.w	r2, r3, #28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f202 	lsl.w	r2, r1, r2
 8005a26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
}
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f003 021c 	and.w	r2, r3, #28
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2101      	movs	r1, #1
 8005a74:	fa01 f202 	lsl.w	r2, r1, r2
 8005a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d108      	bne.n	8005a9c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a9a:	e007      	b.n	8005aac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ac6:	e17f      	b.n	8005dc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2101      	movs	r1, #1
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8171 	beq.w	8005dc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d005      	beq.n	8005af8 <HAL_GPIO_Init+0x40>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d130      	bne.n	8005b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	2203      	movs	r2, #3
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2e:	2201      	movs	r2, #1
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 0201 	and.w	r2, r3, #1
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d118      	bne.n	8005b98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	08db      	lsrs	r3, r3, #3
 8005b82:	f003 0201 	and.w	r2, r3, #1
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d017      	beq.n	8005bd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d123      	bne.n	8005c28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	08da      	lsrs	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3208      	adds	r2, #8
 8005be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	220f      	movs	r2, #15
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	08da      	lsrs	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3208      	adds	r2, #8
 8005c22:	6939      	ldr	r1, [r7, #16]
 8005c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	2203      	movs	r2, #3
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0203 	and.w	r2, r3, #3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80ac 	beq.w	8005dc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <HAL_GPIO_Init+0x330>)
 8005c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6e:	4a5e      	ldr	r2, [pc, #376]	; (8005de8 <HAL_GPIO_Init+0x330>)
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	6613      	str	r3, [r2, #96]	; 0x60
 8005c76:	4b5c      	ldr	r3, [pc, #368]	; (8005de8 <HAL_GPIO_Init+0x330>)
 8005c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c82:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_GPIO_Init+0x334>)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3302      	adds	r3, #2
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cac:	d025      	beq.n	8005cfa <HAL_GPIO_Init+0x242>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	; (8005df0 <HAL_GPIO_Init+0x338>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01f      	beq.n	8005cf6 <HAL_GPIO_Init+0x23e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a4e      	ldr	r2, [pc, #312]	; (8005df4 <HAL_GPIO_Init+0x33c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d019      	beq.n	8005cf2 <HAL_GPIO_Init+0x23a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a4d      	ldr	r2, [pc, #308]	; (8005df8 <HAL_GPIO_Init+0x340>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_GPIO_Init+0x236>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a4c      	ldr	r2, [pc, #304]	; (8005dfc <HAL_GPIO_Init+0x344>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00d      	beq.n	8005cea <HAL_GPIO_Init+0x232>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a4b      	ldr	r2, [pc, #300]	; (8005e00 <HAL_GPIO_Init+0x348>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <HAL_GPIO_Init+0x22e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <HAL_GPIO_Init+0x34c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_GPIO_Init+0x22a>
 8005cde:	2306      	movs	r3, #6
 8005ce0:	e00c      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005ce2:	2307      	movs	r3, #7
 8005ce4:	e00a      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	e008      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005cea:	2304      	movs	r3, #4
 8005cec:	e006      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e004      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e002      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_GPIO_Init+0x244>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	f002 0203 	and.w	r2, r2, #3
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	4093      	lsls	r3, r2
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d0c:	4937      	ldr	r1, [pc, #220]	; (8005dec <HAL_GPIO_Init+0x334>)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	089b      	lsrs	r3, r3, #2
 8005d12:	3302      	adds	r3, #2
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d3e:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4013      	ands	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005dbc:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <HAL_GPIO_Init+0x350>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f47f ae78 	bne.w	8005ac8 <HAL_GPIO_Init+0x10>
  }
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40010000 	.word	0x40010000
 8005df0:	48000400 	.word	0x48000400
 8005df4:	48000800 	.word	0x48000800
 8005df8:	48000c00 	.word	0x48000c00
 8005dfc:	48001000 	.word	0x48001000
 8005e00:	48001400 	.word	0x48001400
 8005e04:	48001800 	.word	0x48001800
 8005e08:	40010400 	.word	0x40010400

08005e0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005e1a:	e0cd      	b.n	8005fb8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	4013      	ands	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80c0 	beq.w	8005fb2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e32:	4a68      	ldr	r2, [pc, #416]	; (8005fd4 <HAL_GPIO_DeInit+0x1c8>)
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	3302      	adds	r3, #2
 8005e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e5a:	d025      	beq.n	8005ea8 <HAL_GPIO_DeInit+0x9c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <HAL_GPIO_DeInit+0x1cc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01f      	beq.n	8005ea4 <HAL_GPIO_DeInit+0x98>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a5d      	ldr	r2, [pc, #372]	; (8005fdc <HAL_GPIO_DeInit+0x1d0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d019      	beq.n	8005ea0 <HAL_GPIO_DeInit+0x94>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a5c      	ldr	r2, [pc, #368]	; (8005fe0 <HAL_GPIO_DeInit+0x1d4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <HAL_GPIO_DeInit+0x90>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a5b      	ldr	r2, [pc, #364]	; (8005fe4 <HAL_GPIO_DeInit+0x1d8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00d      	beq.n	8005e98 <HAL_GPIO_DeInit+0x8c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a5a      	ldr	r2, [pc, #360]	; (8005fe8 <HAL_GPIO_DeInit+0x1dc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <HAL_GPIO_DeInit+0x88>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a59      	ldr	r2, [pc, #356]	; (8005fec <HAL_GPIO_DeInit+0x1e0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_GPIO_DeInit+0x84>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	e00c      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005e90:	2307      	movs	r3, #7
 8005e92:	e00a      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005e94:	2305      	movs	r3, #5
 8005e96:	e008      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e006      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e004      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e002      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_GPIO_DeInit+0x9e>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	f002 0203 	and.w	r2, r2, #3
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d132      	bne.n	8005f20 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005eba:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	494b      	ldr	r1, [pc, #300]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005ec8:	4b49      	ldr	r3, [pc, #292]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	4947      	ldr	r1, [pc, #284]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	4944      	ldr	r1, [pc, #272]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005ee4:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	4940      	ldr	r1, [pc, #256]	; (8005ff0 <HAL_GPIO_DeInit+0x1e4>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	220f      	movs	r2, #15
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005f02:	4a34      	ldr	r2, [pc, #208]	; (8005fd4 <HAL_GPIO_DeInit+0x1c8>)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	3302      	adds	r3, #2
 8005f0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	43da      	mvns	r2, r3
 8005f12:	4830      	ldr	r0, [pc, #192]	; (8005fd4 <HAL_GPIO_DeInit+0x1c8>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	400a      	ands	r2, r1
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	2103      	movs	r1, #3
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	08da      	lsrs	r2, r3, #3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3208      	adds	r2, #8
 8005f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	220f      	movs	r2, #15
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	08d2      	lsrs	r2, r2, #3
 8005f54:	4019      	ands	r1, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3208      	adds	r2, #8
 8005f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	2103      	movs	r1, #3
 8005f68:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	401a      	ands	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	2101      	movs	r1, #1
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	2103      	movs	r1, #3
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	401a      	ands	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	401a      	ands	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f47f af2b 	bne.w	8005e1c <HAL_GPIO_DeInit+0x10>
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	48000400 	.word	0x48000400
 8005fdc:	48000800 	.word	0x48000800
 8005fe0:	48000c00 	.word	0x48000c00
 8005fe4:	48001000 	.word	0x48001000
 8005fe8:	48001400 	.word	0x48001400
 8005fec:	48001800 	.word	0x48001800
 8005ff0:	40010400 	.word	0x40010400

08005ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
 8006010:	e001      	b.n	8006016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	807b      	strh	r3, [r7, #2]
 8006030:	4613      	mov	r3, r2
 8006032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006034:	787b      	ldrb	r3, [r7, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800603a:	887a      	ldrh	r2, [r7, #2]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006040:	e002      	b.n	8006048 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e081      	b.n	800616a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fa ff78 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d107      	bne.n	80060ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	e006      	b.n	80060dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d104      	bne.n	80060ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e021      	b.n	80061c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fa ff45 	bl	800102c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	f040 80f9 	bne.w	80063ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_I2C_Mem_Write+0x34>
 80061fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0ed      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_I2C_Mem_Write+0x4e>
 800621a:	2302      	movs	r3, #2
 800621c:	e0e6      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006226:	f7fd fab7 	bl	8003798 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2319      	movs	r3, #25
 8006232:	2201      	movs	r2, #1
 8006234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fad1 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0d1      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2221      	movs	r2, #33	; 0x21
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006270:	88f8      	ldrh	r0, [r7, #6]
 8006272:	893a      	ldrh	r2, [r7, #8]
 8006274:	8979      	ldrh	r1, [r7, #10]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f9e1 	bl	8006648 <I2C_RequestMemoryWrite>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0a9      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2bff      	cmp	r3, #255	; 0xff
 80062a0:	d90e      	bls.n	80062c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	8979      	ldrh	r1, [r7, #10]
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fc39 	bl	8006b30 <I2C_TransferConfig>
 80062be:	e00f      	b.n	80062e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	8979      	ldrh	r1, [r7, #10]
 80062d2:	2300      	movs	r3, #0
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fc28 	bl	8006b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fabb 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e07b      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d034      	beq.n	8006398 <HAL_I2C_Mem_Write+0x1c8>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d130      	bne.n	8006398 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fa4d 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e04d      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2bff      	cmp	r3, #255	; 0xff
 8006358:	d90e      	bls.n	8006378 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006364:	b2da      	uxtb	r2, r3
 8006366:	8979      	ldrh	r1, [r7, #10]
 8006368:	2300      	movs	r3, #0
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fbdd 	bl	8006b30 <I2C_TransferConfig>
 8006376:	e00f      	b.n	8006398 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	b2da      	uxtb	r2, r3
 8006388:	8979      	ldrh	r1, [r7, #10]
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fbcc 	bl	8006b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d19e      	bne.n	80062e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa9a 	bl	80068e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e01a      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2220      	movs	r2, #32
 80063bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_I2C_Mem_Write+0x224>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	fe00e800 	.word	0xfe00e800

080063f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b20      	cmp	r3, #32
 800641c:	f040 80fd 	bne.w	800661a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_I2C_Mem_Read+0x34>
 8006426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0f1      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_I2C_Mem_Read+0x4e>
 8006442:	2302      	movs	r3, #2
 8006444:	e0ea      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800644e:	f7fd f9a3 	bl	8003798 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2319      	movs	r3, #25
 800645a:	2201      	movs	r2, #1
 800645c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f9bd 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0d5      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2222      	movs	r2, #34	; 0x22
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006498:	88f8      	ldrh	r0, [r7, #6]
 800649a:	893a      	ldrh	r2, [r7, #8]
 800649c:	8979      	ldrh	r1, [r7, #10]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4603      	mov	r3, r0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f921 	bl	80066f0 <I2C_RequestMemoryRead>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0ad      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d90e      	bls.n	80064e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	8979      	ldrh	r1, [r7, #10]
 80064d8:	4b52      	ldr	r3, [pc, #328]	; (8006624 <HAL_I2C_Mem_Read+0x22c>)
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fb25 	bl	8006b30 <I2C_TransferConfig>
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <HAL_I2C_Mem_Read+0x22c>)
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fb14 	bl	8006b30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	2200      	movs	r2, #0
 8006510:	2104      	movs	r1, #4
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f964 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e07c      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d034      	beq.n	80065c8 <HAL_I2C_Mem_Read+0x1d0>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d130      	bne.n	80065c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	2200      	movs	r2, #0
 800656e:	2180      	movs	r1, #128	; 0x80
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f935 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e04d      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006584:	b29b      	uxth	r3, r3
 8006586:	2bff      	cmp	r3, #255	; 0xff
 8006588:	d90e      	bls.n	80065a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	22ff      	movs	r2, #255	; 0xff
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	b2da      	uxtb	r2, r3
 8006596:	8979      	ldrh	r1, [r7, #10]
 8006598:	2300      	movs	r3, #0
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fac5 	bl	8006b30 <I2C_TransferConfig>
 80065a6:	e00f      	b.n	80065c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	8979      	ldrh	r1, [r7, #10]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fab4 	bl	8006b30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d19a      	bne.n	8006508 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f982 	bl	80068e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e01a      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2220      	movs	r2, #32
 80065ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_I2C_Mem_Read+0x230>)
 80065fa:	400b      	ands	r3, r1
 80065fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	e000      	b.n	800661c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	80002400 	.word	0x80002400
 8006628:	fe00e800 	.word	0xfe00e800

0800662c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663a:	b2db      	uxtb	r3, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4603      	mov	r3, r0
 8006658:	817b      	strh	r3, [r7, #10]
 800665a:	460b      	mov	r3, r1
 800665c:	813b      	strh	r3, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	8979      	ldrh	r1, [r7, #10]
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <I2C_RequestMemoryWrite+0xa4>)
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fa5d 	bl	8006b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f8f0 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e02c      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006690:	893b      	ldrh	r3, [r7, #8]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
 800669a:	e015      	b.n	80066c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f8d6 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e012      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f884 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	80002000 	.word	0x80002000

080066f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	8979      	ldrh	r1, [r7, #10]
 8006710:	4b20      	ldr	r3, [pc, #128]	; (8006794 <I2C_RequestMemoryRead+0xa4>)
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fa0a 	bl	8006b30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f89d 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e02c      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d105      	bne.n	8006742 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006736:	893b      	ldrh	r3, [r7, #8]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
 8006740:	e015      	b.n	800676e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006742:	893b      	ldrh	r3, [r7, #8]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	69b9      	ldr	r1, [r7, #24]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f883 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e012      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2200      	movs	r2, #0
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f831 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	80002000 	.word	0x80002000

08006798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d007      	beq.n	80067d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	619a      	str	r2, [r3, #24]
  }
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f0:	e022      	b.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d01e      	beq.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fc ffcd 	bl	8003798 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d113      	bne.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e00f      	b.n	8006858 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	429a      	cmp	r2, r3
 8006854:	d0cd      	beq.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800686c:	e02c      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f870 	bl	8006958 <I2C_IsErrorOccurred>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e02a      	b.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d01e      	beq.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688a:	f7fc ff85 	bl	8003798 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d113      	bne.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e007      	b.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d1cb      	bne.n	800686e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ec:	e028      	b.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f830 	bl	8006958 <I2C_IsErrorOccurred>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e026      	b.n	8006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006902:	f7fc ff49 	bl	8003798 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d113      	bne.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e007      	b.n	8006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d1cf      	bne.n	80068ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d075      	beq.n	8006a70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800698c:	e056      	b.n	8006a3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d052      	beq.n	8006a3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fc feff 	bl	8003798 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_IsErrorOccurred+0x54>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d147      	bne.n	8006a3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ce:	d12e      	bne.n	8006a2e <I2C_IsErrorOccurred+0xd6>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d02a      	beq.n	8006a2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d027      	beq.n	8006a2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ee:	f7fc fed3 	bl	8003798 <HAL_GetTick>
 80069f2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f4:	e01b      	b.n	8006a2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f6:	f7fc fecf 	bl	8003798 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b19      	cmp	r3, #25
 8006a02:	d914      	bls.n	8006a2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d1dc      	bne.n	80069f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d003      	beq.n	8006a52 <I2C_IsErrorOccurred+0xfa>
 8006a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d09d      	beq.n	800698e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f043 0304 	orr.w	r3, r3, #4
 8006a68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f043 0308 	orr.w	r3, r3, #8
 8006aaa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01c      	beq.n	8006b20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fe56 	bl	8006798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <I2C_IsErrorOccurred+0x1d4>)
 8006af8:	400b      	ands	r3, r1
 8006afa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3728      	adds	r7, #40	; 0x28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	fe00e800 	.word	0xfe00e800

08006b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	817b      	strh	r3, [r7, #10]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b48:	7a7b      	ldrb	r3, [r7, #9]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b50:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b5e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	0d5b      	lsrs	r3, r3, #21
 8006b6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <I2C_TransferConfig+0x60>)
 8006b70:	430b      	orrs	r3, r1
 8006b72:	43db      	mvns	r3, r3
 8006b74:	ea02 0103 	and.w	r1, r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	03ff63ff 	.word	0x03ff63ff

08006b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d138      	bne.n	8006c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e032      	b.n	8006c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2224      	movs	r2, #36	; 0x24
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d139      	bne.n	8006cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e033      	b.n	8006cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	; 0x24
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0af      	b.n	8006e36 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fa f9c0 	bl	8001070 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e00a      	b.n	8006d24 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	3304      	adds	r3, #4
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	3301      	adds	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d9f1      	bls.n	8006d0e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0204 	orr.w	r2, r2, #4
 8006d38:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_LCD_Init+0x17c>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6851      	ldr	r1, [r2, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6892      	ldr	r2, [r2, #8]
 8006d4c:	4311      	orrs	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d52:	4311      	orrs	r1, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d58:	4311      	orrs	r1, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	69d2      	ldr	r2, [r2, #28]
 8006d5e:	4311      	orrs	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6a12      	ldr	r2, [r2, #32]
 8006d64:	4311      	orrs	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6992      	ldr	r2, [r2, #24]
 8006d6a:	4311      	orrs	r1, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d70:	4311      	orrs	r1, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	430b      	orrs	r3, r1
 8006d78:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f94c 	bl	8007018 <LCD_WaitForSynchro>
 8006d80:	4603      	mov	r3, r0
 8006d82:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_LCD_Init+0xca>
  {
    return status;
 8006d8a:	7cfb      	ldrb	r3, [r7, #19]
 8006d8c:	e053      	b.n	8006e36 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006dc6:	f7fc fce7 	bl	8003798 <HAL_GetTick>
 8006dca:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006dcc:	e00c      	b.n	8006de8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006dce:	f7fc fce3 	bl	8003798 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ddc:	d904      	bls.n	8006de8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2208      	movs	r2, #8
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e026      	b.n	8006e36 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d1eb      	bne.n	8006dce <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006df6:	f7fc fccf 	bl	8003798 <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006dfc:	e00c      	b.n	8006e18 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006dfe:	f7fc fccb 	bl	8003798 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e0c:	d904      	bls.n	8006e18 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2210      	movs	r2, #16
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e00e      	b.n	8006e36 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d1eb      	bne.n	8006dfe <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	fc00000e 	.word	0xfc00000e

08006e44 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e58:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d002      	beq.n	8006e66 <HAL_LCD_Write+0x22>
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d144      	bne.n	8006ef0 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d12a      	bne.n	8006ec8 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_LCD_Write+0x3c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e038      	b.n	8006ef2 <HAL_LCD_Write+0xae>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8006e90:	f7fc fc82 	bl	8003798 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006e96:	e010      	b.n	8006eba <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006e98:	f7fc fc7e 	bl	8003798 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ea6:	d908      	bls.n	8006eba <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e01b      	b.n	8006ef2 <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d0e7      	beq.n	8006e98 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	401a      	ands	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6819      	ldr	r1, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f0c:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006f0e:	7cbb      	ldrb	r3, [r7, #18]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d002      	beq.n	8006f1a <HAL_LCD_Clear+0x20>
 8006f14:	7cbb      	ldrb	r3, [r7, #18]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d140      	bne.n	8006f9c <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_LCD_Clear+0x2e>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e03a      	b.n	8006f9e <HAL_LCD_Clear+0xa4>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006f38:	f7fc fc2e 	bl	8003798 <HAL_GetTick>
 8006f3c:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006f3e:	e010      	b.n	8006f62 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006f40:	f7fc fc2a 	bl	8003798 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4e:	d908      	bls.n	8006f62 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e01d      	b.n	8006f9e <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d0e7      	beq.n	8006f40 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e00a      	b.n	8006f8c <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d9f1      	bls.n	8006f76 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f807 	bl	8006fa6 <HAL_LCD_UpdateDisplayRequest>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8006f9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0204 	orr.w	r2, r2, #4
 8006fc4:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006fc6:	f7fc fbe7 	bl	8003798 <HAL_GetTick>
 8006fca:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006fcc:	e010      	b.n	8006ff0 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006fce:	f7fc fbe3 	bl	8003798 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	d908      	bls.n	8006ff0 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e00f      	b.n	8007010 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d1e7      	bne.n	8006fce <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007020:	f7fc fbba 	bl	8003798 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007026:	e00c      	b.n	8007042 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8007028:	f7fc fbb6 	bl	8003798 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007036:	d904      	bls.n	8007042 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e007      	b.n	8007052 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b20      	cmp	r3, #32
 800704e:	d1eb      	bne.n	8007028 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007060:	4b04      	ldr	r3, [pc, #16]	; (8007074 <HAL_PWREx_GetVoltageRange+0x18>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40007000 	.word	0x40007000

08007078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007086:	d130      	bne.n	80070ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007088:	4b23      	ldr	r3, [pc, #140]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d038      	beq.n	8007108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007096:	4b20      	ldr	r3, [pc, #128]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800709e:	4a1e      	ldr	r2, [pc, #120]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070a6:	4b1d      	ldr	r3, [pc, #116]	; (800711c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2232      	movs	r2, #50	; 0x32
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	0c9b      	lsrs	r3, r3, #18
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070bc:	e002      	b.n	80070c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d0:	d102      	bne.n	80070d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f2      	bne.n	80070be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070d8:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d110      	bne.n	8007108 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e00f      	b.n	800710a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f6:	d007      	beq.n	8007108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007100:	4a05      	ldr	r2, [pc, #20]	; (8007118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007106:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40007000 	.word	0x40007000
 800711c:	20000044 	.word	0x20000044
 8007120:	431bde83 	.word	0x431bde83

08007124 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_PWREx_EnableVddIO2+0x1c>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_PWREx_EnableVddIO2+0x1c>)
 800712e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007132:	6053      	str	r3, [r2, #4]
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40007000 	.word	0x40007000

08007144 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_PWREx_DisableVddIO2+0x1c>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_PWREx_DisableVddIO2+0x1c>)
 800714e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007152:	6053      	str	r3, [r2, #4]
}
 8007154:	bf00      	nop
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40007000 	.word	0x40007000

08007164 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800716c:	f7fc fb14 	bl	8003798 <HAL_GetTick>
 8007170:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e063      	b.n	8007244 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fa f83b 	bl	800120c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007196:	f241 3188 	movw	r1, #5000	; 0x1388
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 faf7 	bl	800778e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	2120      	movs	r1, #32
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 faef 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d131      	bne.n	800723a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f023 0310 	bic.w	r3, r3, #16
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6852      	ldr	r2, [r2, #4]
 80071e8:	0611      	lsls	r1, r2, #24
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68d2      	ldr	r2, [r2, #12]
 80071ee:	4311      	orrs	r1, r2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <HAL_QSPI_Init+0xe8>)
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6912      	ldr	r2, [r2, #16]
 8007206:	0411      	lsls	r1, r2, #16
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6952      	ldr	r2, [r2, #20]
 800720c:	4311      	orrs	r1, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6992      	ldr	r2, [r2, #24]
 8007212:	4311      	orrs	r1, r2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	430b      	orrs	r3, r1
 800721a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007242:	7afb      	ldrb	r3, [r7, #11]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	ffe0f8fe 	.word	0xffe0f8fe

08007250 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e016      	b.n	8007290 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fa f80e 	bl	8001294 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80072a4:	f7fc fa78 	bl	8003798 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_QSPI_Command+0x22>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e048      	b.n	800734c <HAL_QSPI_Command+0xb4>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d137      	bne.n	800733e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2200      	movs	r2, #0
 80072e4:	2120      	movs	r1, #32
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fa5f 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d125      	bne.n	8007342 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80072f6:	2200      	movs	r2, #0
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fa8c 	bl	8007818 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2201      	movs	r2, #1
 8007310:	2102      	movs	r1, #2
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fa49 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2202      	movs	r2, #2
 8007328:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007332:	e006      	b.n	8007342 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800733c:	e001      	b.n	8007342 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800733e:	2302      	movs	r3, #2
 8007340:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007364:	f7fc fa18 	bl	8003798 <HAL_GetTick>
 8007368:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3320      	adds	r3, #32
 8007370:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_QSPI_Transmit+0x2e>
 800737e:	2302      	movs	r3, #2
 8007380:	e07b      	b.n	800747a <HAL_QSPI_Transmit+0x126>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b01      	cmp	r3, #1
 8007394:	d16a      	bne.n	800746c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d05b      	beq.n	800745a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2212      	movs	r2, #18
 80073a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695a      	ldr	r2, [r3, #20]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80073d6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80073d8:	e01b      	b.n	8007412 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2201      	movs	r2, #1
 80073e2:	2104      	movs	r1, #4
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f9e0 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80073ee:	7ffb      	ldrb	r3, [r7, #31]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d113      	bne.n	800741c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1df      	bne.n	80073da <HAL_QSPI_Transmit+0x86>
 800741a:	e000      	b.n	800741e <HAL_QSPI_Transmit+0xca>
          break;
 800741c:	bf00      	nop
      }

      if (status == HAL_OK)
 800741e:	7ffb      	ldrb	r3, [r7, #31]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d115      	bne.n	8007450 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2201      	movs	r2, #1
 800742c:	2102      	movs	r1, #2
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f9bb 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007438:	7ffb      	ldrb	r3, [r7, #31]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2202      	movs	r2, #2
 8007444:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f934 	bl	80076b4 <HAL_QSPI_Abort>
 800744c:	4603      	mov	r3, r0
 800744e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007458:	e00a      	b.n	8007470 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745e:	f043 0208 	orr.w	r2, r3, #8
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	77fb      	strb	r3, [r7, #31]
 800746a:	e001      	b.n	8007470 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800746c:	2302      	movs	r3, #2
 800746e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8007478:	7ffb      	ldrb	r3, [r7, #31]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3720      	adds	r7, #32
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b08a      	sub	sp, #40	; 0x28
 8007486:	af02      	add	r7, sp, #8
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007492:	f7fc f981 	bl	8003798 <HAL_GetTick>
 8007496:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3320      	adds	r3, #32
 80074a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_QSPI_Receive+0x36>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e082      	b.n	80075be <HAL_QSPI_Receive+0x13c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d171      	bne.n	80075b0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d062      	beq.n	800759e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2222      	movs	r2, #34	; 0x22
 80074dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007510:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800751a:	e01c      	b.n	8007556 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2201      	movs	r2, #1
 8007524:	2106      	movs	r1, #6
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f93f 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007530:	7ffb      	ldrb	r3, [r7, #31]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d114      	bne.n	8007560 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	1e5a      	subs	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1de      	bne.n	800751c <HAL_QSPI_Receive+0x9a>
 800755e:	e000      	b.n	8007562 <HAL_QSPI_Receive+0xe0>
          break;
 8007560:	bf00      	nop
      }

      if (status == HAL_OK)
 8007562:	7ffb      	ldrb	r3, [r7, #31]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d115      	bne.n	8007594 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2201      	movs	r2, #1
 8007570:	2102      	movs	r1, #2
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f919 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800757c:	7ffb      	ldrb	r3, [r7, #31]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2202      	movs	r2, #2
 8007588:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f892 	bl	80076b4 <HAL_QSPI_Abort>
 8007590:	4603      	mov	r3, r0
 8007592:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800759c:	e00a      	b.n	80075b4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	f043 0208 	orr.w	r2, r3, #8
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e001      	b.n	80075b4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
 80075b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b088      	sub	sp, #32
 80075ca:	af02      	add	r7, sp, #8
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80075d4:	f7fc f8e0 	bl	8003798 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d101      	bne.n	80075ea <HAL_QSPI_AutoPolling+0x24>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e060      	b.n	80076ac <HAL_QSPI_AutoPolling+0xe6>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d14f      	bne.n	800769e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2242      	movs	r2, #66	; 0x42
 8007608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2200      	movs	r2, #0
 8007614:	2120      	movs	r1, #32
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f8c7 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d13d      	bne.n	80076a2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6852      	ldr	r2, [r2, #4]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6892      	ldr	r2, [r2, #8]
 8007642:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800765c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f8d3 	bl	8007818 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2201      	movs	r2, #1
 800767a:	2108      	movs	r1, #8
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f894 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800769c:	e001      	b.n	80076a2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800769e:	2302      	movs	r3, #2
 80076a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80076c0:	f7fc f86a 	bl	8003798 <HAL_GetTick>
 80076c4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d056      	beq.n	8007784 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d017      	beq.n	800771c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe f87b 	bl	80057fc <HAL_DMA_Abort>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	f043 0204 	orr.w	r2, r3, #4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0202 	orr.w	r2, r2, #2
 800772a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2201      	movs	r2, #1
 8007736:	2102      	movs	r1, #2
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f836 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10e      	bne.n	8007766 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2202      	movs	r2, #2
 800774e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	2120      	movs	r1, #32
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f824 	bl	80077aa <QSPI_WaitFlagStateUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800777a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	4613      	mov	r3, r2
 80077b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077ba:	e01a      	b.n	80077f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d016      	beq.n	80077f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c4:	f7fb ffe8 	bl	8003798 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <QSPI_WaitFlagStateUntilTimeout+0x30>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2204      	movs	r2, #4
 80077de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e00e      	b.n	8007810 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	429a      	cmp	r2, r3
 800780c:	d1d6      	bne.n	80077bc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <QSPI_Config+0x28>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007832:	d005      	beq.n	8007840 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3a01      	subs	r2, #1
 800783e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80b9 	beq.w	80079bc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d05f      	beq.n	8007912 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	6892      	ldr	r2, [r2, #8]
 800785a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d031      	beq.n	80078c8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	431a      	orrs	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	431a      	orrs	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	049b      	lsls	r3, r3, #18
 8007880:	431a      	orrs	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	431a      	orrs	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	431a      	orrs	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	431a      	orrs	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	431a      	orrs	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	431a      	orrs	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	ea42 0103 	orr.w	r1, r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078b8:	f000 812e 	beq.w	8007b18 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	6852      	ldr	r2, [r2, #4]
 80078c4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80078c6:	e127      	b.n	8007b18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	431a      	orrs	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	431a      	orrs	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	431a      	orrs	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	049b      	lsls	r3, r3, #18
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	431a      	orrs	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	ea42 0103 	orr.w	r1, r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	430a      	orrs	r2, r1
 800790e:	615a      	str	r2, [r3, #20]
}
 8007910:	e102      	b.n	8007b18 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02e      	beq.n	8007978 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	431a      	orrs	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	431a      	orrs	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	431a      	orrs	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	049b      	lsls	r3, r3, #18
 8007936:	431a      	orrs	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	431a      	orrs	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	431a      	orrs	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	431a      	orrs	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	ea42 0103 	orr.w	r1, r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	430a      	orrs	r2, r1
 8007960:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007968:	f000 80d6 	beq.w	8007b18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	6852      	ldr	r2, [r2, #4]
 8007974:	619a      	str	r2, [r3, #24]
}
 8007976:	e0cf      	b.n	8007b18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	431a      	orrs	r2, r3
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	431a      	orrs	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	431a      	orrs	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	049b      	lsls	r3, r3, #18
 8007994:	431a      	orrs	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	431a      	orrs	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	ea42 0103 	orr.w	r1, r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	615a      	str	r2, [r3, #20]
}
 80079ba:	e0ad      	b.n	8007b18 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d058      	beq.n	8007a76 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	6892      	ldr	r2, [r2, #8]
 80079cc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02d      	beq.n	8007a32 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e4:	431a      	orrs	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	049b      	lsls	r3, r3, #18
 80079f2:	431a      	orrs	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	ea42 0103 	orr.w	r1, r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a24:	d078      	beq.n	8007b18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	6852      	ldr	r2, [r2, #4]
 8007a2e:	619a      	str	r2, [r3, #24]
}
 8007a30:	e072      	b.n	8007b18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	431a      	orrs	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	049b      	lsls	r3, r3, #18
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	431a      	orrs	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	ea42 0103 	orr.w	r1, r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	615a      	str	r2, [r3, #20]
}
 8007a74:	e050      	b.n	8007b18 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02a      	beq.n	8007ad4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	431a      	orrs	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	431a      	orrs	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	049b      	lsls	r3, r3, #18
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	ea42 0103 	orr.w	r1, r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ac6:	d027      	beq.n	8007b18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	6852      	ldr	r2, [r2, #4]
 8007ad0:	619a      	str	r2, [r3, #24]
}
 8007ad2:	e021      	b.n	8007b18 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01d      	beq.n	8007b18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aea:	431a      	orrs	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	431a      	orrs	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	049b      	lsls	r3, r3, #18
 8007af8:	431a      	orrs	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	431a      	orrs	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	ea42 0103 	orr.w	r1, r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	615a      	str	r2, [r3, #20]
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e3d8      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b36:	4b97      	ldr	r3, [pc, #604]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
 8007b3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b40:	4b94      	ldr	r3, [pc, #592]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80e4 	beq.w	8007d20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_RCC_OscConfig+0x4a>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	f040 808b 	bne.w	8007c7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f040 8087 	bne.w	8007c7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b6e:	4b89      	ldr	r3, [pc, #548]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_RCC_OscConfig+0x62>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e3b0      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	4b82      	ldr	r3, [pc, #520]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x7c>
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b9e:	e005      	b.n	8007bac <HAL_RCC_OscConfig+0x88>
 8007ba0:	4b7c      	ldr	r3, [pc, #496]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d223      	bcs.n	8007bf8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fd43 	bl	8008640 <RCC_SetFlashLatencyFromMSIRange>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e391      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bc4:	4b73      	ldr	r3, [pc, #460]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a72      	ldr	r2, [pc, #456]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bca:	f043 0308 	orr.w	r3, r3, #8
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	4b70      	ldr	r3, [pc, #448]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	496d      	ldr	r1, [pc, #436]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007be2:	4b6c      	ldr	r3, [pc, #432]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	4968      	ldr	r1, [pc, #416]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]
 8007bf6:	e025      	b.n	8007c44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bf8:	4b66      	ldr	r3, [pc, #408]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a65      	ldr	r2, [pc, #404]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007bfe:	f043 0308 	orr.w	r3, r3, #8
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4b63      	ldr	r3, [pc, #396]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	4960      	ldr	r1, [pc, #384]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c16:	4b5f      	ldr	r3, [pc, #380]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	495b      	ldr	r1, [pc, #364]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fd03 	bl	8008640 <RCC_SetFlashLatencyFromMSIRange>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e351      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c44:	f000 fc38 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4b52      	ldr	r3, [pc, #328]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	091b      	lsrs	r3, r3, #4
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	4950      	ldr	r1, [pc, #320]	; (8007d98 <HAL_RCC_OscConfig+0x274>)
 8007c56:	5ccb      	ldrb	r3, [r1, r3]
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	4a4e      	ldr	r2, [pc, #312]	; (8007d9c <HAL_RCC_OscConfig+0x278>)
 8007c62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c64:	4b4e      	ldr	r3, [pc, #312]	; (8007da0 <HAL_RCC_OscConfig+0x27c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fb fd45 	bl	80036f8 <HAL_InitTick>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d052      	beq.n	8007d1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	e335      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d032      	beq.n	8007cea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a42      	ldr	r2, [pc, #264]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c90:	f7fb fd82 	bl	8003798 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c98:	f7fb fd7e 	bl	8003798 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e31e      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007caa:	4b3a      	ldr	r3, [pc, #232]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a36      	ldr	r2, [pc, #216]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cbc:	f043 0308 	orr.w	r3, r3, #8
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b34      	ldr	r3, [pc, #208]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	4931      	ldr	r1, [pc, #196]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cd4:	4b2f      	ldr	r3, [pc, #188]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	492c      	ldr	r1, [pc, #176]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	604b      	str	r3, [r1, #4]
 8007ce8:	e01a      	b.n	8007d20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007cea:	4b2a      	ldr	r3, [pc, #168]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a29      	ldr	r2, [pc, #164]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007cf0:	f023 0301 	bic.w	r3, r3, #1
 8007cf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cf6:	f7fb fd4f 	bl	8003798 <HAL_GetTick>
 8007cfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cfe:	f7fb fd4b 	bl	8003798 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e2eb      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d10:	4b20      	ldr	r3, [pc, #128]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f0      	bne.n	8007cfe <HAL_RCC_OscConfig+0x1da>
 8007d1c:	e000      	b.n	8007d20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d074      	beq.n	8007e16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d005      	beq.n	8007d3e <HAL_RCC_OscConfig+0x21a>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b0c      	cmp	r3, #12
 8007d36:	d10e      	bne.n	8007d56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d10b      	bne.n	8007d56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d064      	beq.n	8007e14 <HAL_RCC_OscConfig+0x2f0>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d160      	bne.n	8007e14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e2c8      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCC_OscConfig+0x24a>
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a0b      	ldr	r2, [pc, #44]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e026      	b.n	8007dbc <HAL_RCC_OscConfig+0x298>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d76:	d115      	bne.n	8007da4 <HAL_RCC_OscConfig+0x280>
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a05      	ldr	r2, [pc, #20]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a02      	ldr	r2, [pc, #8]	; (8007d94 <HAL_RCC_OscConfig+0x270>)
 8007d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	e014      	b.n	8007dbc <HAL_RCC_OscConfig+0x298>
 8007d92:	bf00      	nop
 8007d94:	40021000 	.word	0x40021000
 8007d98:	0800c964 	.word	0x0800c964
 8007d9c:	20000044 	.word	0x20000044
 8007da0:	20000080 	.word	0x20000080
 8007da4:	4ba0      	ldr	r3, [pc, #640]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a9f      	ldr	r2, [pc, #636]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	4b9d      	ldr	r3, [pc, #628]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a9c      	ldr	r2, [pc, #624]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d013      	beq.n	8007dec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7fb fce8 	bl	8003798 <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dcc:	f7fb fce4 	bl	8003798 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b64      	cmp	r3, #100	; 0x64
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e284      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dde:	4b92      	ldr	r3, [pc, #584]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x2a8>
 8007dea:	e014      	b.n	8007e16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fb fcd4 	bl	8003798 <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007df4:	f7fb fcd0 	bl	8003798 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b64      	cmp	r3, #100	; 0x64
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e270      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e06:	4b88      	ldr	r3, [pc, #544]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x2d0>
 8007e12:	e000      	b.n	8007e16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d060      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d005      	beq.n	8007e34 <HAL_RCC_OscConfig+0x310>
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b0c      	cmp	r3, #12
 8007e2c:	d119      	bne.n	8007e62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d116      	bne.n	8007e62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e34:	4b7c      	ldr	r3, [pc, #496]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_RCC_OscConfig+0x328>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e24d      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e4c:	4b76      	ldr	r3, [pc, #472]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	061b      	lsls	r3, r3, #24
 8007e5a:	4973      	ldr	r1, [pc, #460]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e60:	e040      	b.n	8007ee4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d023      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e6a:	4b6f      	ldr	r3, [pc, #444]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a6e      	ldr	r2, [pc, #440]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e76:	f7fb fc8f 	bl	8003798 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e7e:	f7fb fc8b 	bl	8003798 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e22b      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e90:	4b65      	ldr	r3, [pc, #404]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e9c:	4b62      	ldr	r3, [pc, #392]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	061b      	lsls	r3, r3, #24
 8007eaa:	495f      	ldr	r1, [pc, #380]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	e018      	b.n	8007ee4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eb2:	4b5d      	ldr	r3, [pc, #372]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a5c      	ldr	r2, [pc, #368]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebe:	f7fb fc6b 	bl	8003798 <HAL_GetTick>
 8007ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ec6:	f7fb fc67 	bl	8003798 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e207      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ed8:	4b53      	ldr	r3, [pc, #332]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1f0      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03c      	beq.n	8007f6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01c      	beq.n	8007f32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007efe:	4a4a      	ldr	r2, [pc, #296]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f08:	f7fb fc46 	bl	8003798 <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f10:	f7fb fc42 	bl	8003798 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e1e2      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f22:	4b41      	ldr	r3, [pc, #260]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0ef      	beq.n	8007f10 <HAL_RCC_OscConfig+0x3ec>
 8007f30:	e01b      	b.n	8007f6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f32:	4b3d      	ldr	r3, [pc, #244]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f38:	4a3b      	ldr	r2, [pc, #236]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f3a:	f023 0301 	bic.w	r3, r3, #1
 8007f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f42:	f7fb fc29 	bl	8003798 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f4a:	f7fb fc25 	bl	8003798 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1c5      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f5c:	4b32      	ldr	r3, [pc, #200]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1ef      	bne.n	8007f4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80a6 	beq.w	80080c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007f7c:	4b2a      	ldr	r3, [pc, #168]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10d      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f88:	4b27      	ldr	r3, [pc, #156]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	4a26      	ldr	r2, [pc, #152]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f92:	6593      	str	r3, [r2, #88]	; 0x58
 8007f94:	4b24      	ldr	r3, [pc, #144]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9c:	60bb      	str	r3, [r7, #8]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fa4:	4b21      	ldr	r3, [pc, #132]	; (800802c <HAL_RCC_OscConfig+0x508>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d118      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fb0:	4b1e      	ldr	r3, [pc, #120]	; (800802c <HAL_RCC_OscConfig+0x508>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_RCC_OscConfig+0x508>)
 8007fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fbc:	f7fb fbec 	bl	8003798 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc4:	f7fb fbe8 	bl	8003798 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e188      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <HAL_RCC_OscConfig+0x508>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d108      	bne.n	8007ffc <HAL_RCC_OscConfig+0x4d8>
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ffa:	e029      	b.n	8008050 <HAL_RCC_OscConfig+0x52c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b05      	cmp	r3, #5
 8008002:	d115      	bne.n	8008030 <HAL_RCC_OscConfig+0x50c>
 8008004:	4b08      	ldr	r3, [pc, #32]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	4a07      	ldr	r2, [pc, #28]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 800800c:	f043 0304 	orr.w	r3, r3, #4
 8008010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	4a03      	ldr	r2, [pc, #12]	; (8008028 <HAL_RCC_OscConfig+0x504>)
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008024:	e014      	b.n	8008050 <HAL_RCC_OscConfig+0x52c>
 8008026:	bf00      	nop
 8008028:	40021000 	.word	0x40021000
 800802c:	40007000 	.word	0x40007000
 8008030:	4b91      	ldr	r3, [pc, #580]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	4a90      	ldr	r2, [pc, #576]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008040:	4b8d      	ldr	r3, [pc, #564]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	4a8c      	ldr	r2, [pc, #560]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008048:	f023 0304 	bic.w	r3, r3, #4
 800804c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d016      	beq.n	8008086 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008058:	f7fb fb9e 	bl	8003798 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800805e:	e00a      	b.n	8008076 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008060:	f7fb fb9a 	bl	8003798 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	f241 3288 	movw	r2, #5000	; 0x1388
 800806e:	4293      	cmp	r3, r2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e138      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008076:	4b80      	ldr	r3, [pc, #512]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0ed      	beq.n	8008060 <HAL_RCC_OscConfig+0x53c>
 8008084:	e015      	b.n	80080b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008086:	f7fb fb87 	bl	8003798 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800808c:	e00a      	b.n	80080a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808e:	f7fb fb83 	bl	8003798 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f241 3288 	movw	r2, #5000	; 0x1388
 800809c:	4293      	cmp	r3, r2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e121      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080a4:	4b74      	ldr	r3, [pc, #464]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80080a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ed      	bne.n	800808e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d105      	bne.n	80080c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080b8:	4b6f      	ldr	r3, [pc, #444]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80080ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080bc:	4a6e      	ldr	r2, [pc, #440]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80080be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 810c 	beq.w	80082e6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	f040 80d4 	bne.w	8008280 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080d8:	4b67      	ldr	r3, [pc, #412]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f003 0203 	and.w	r2, r3, #3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d130      	bne.n	800814e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	3b01      	subs	r3, #1
 80080f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d127      	bne.n	800814e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800810a:	429a      	cmp	r2, r3
 800810c:	d11f      	bne.n	800814e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008118:	2a07      	cmp	r2, #7
 800811a:	bf14      	ite	ne
 800811c:	2201      	movne	r2, #1
 800811e:	2200      	moveq	r2, #0
 8008120:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008122:	4293      	cmp	r3, r2
 8008124:	d113      	bne.n	800814e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	3b01      	subs	r3, #1
 8008134:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008136:	429a      	cmp	r2, r3
 8008138:	d109      	bne.n	800814e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	3b01      	subs	r3, #1
 8008148:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800814a:	429a      	cmp	r2, r3
 800814c:	d06e      	beq.n	800822c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b0c      	cmp	r3, #12
 8008152:	d069      	beq.n	8008228 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008154:	4b48      	ldr	r3, [pc, #288]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008160:	4b45      	ldr	r3, [pc, #276]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e0bb      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008170:	4b41      	ldr	r3, [pc, #260]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a40      	ldr	r2, [pc, #256]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800817a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800817c:	f7fb fb0c 	bl	8003798 <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008182:	e008      	b.n	8008196 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008184:	f7fb fb08 	bl	8003798 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e0a8      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008196:	4b38      	ldr	r3, [pc, #224]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f0      	bne.n	8008184 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081a2:	4b35      	ldr	r3, [pc, #212]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	4b35      	ldr	r3, [pc, #212]	; (800827c <HAL_RCC_OscConfig+0x758>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081b2:	3a01      	subs	r2, #1
 80081b4:	0112      	lsls	r2, r2, #4
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081bc:	0212      	lsls	r2, r2, #8
 80081be:	4311      	orrs	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80081c4:	0852      	lsrs	r2, r2, #1
 80081c6:	3a01      	subs	r2, #1
 80081c8:	0552      	lsls	r2, r2, #21
 80081ca:	4311      	orrs	r1, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081d0:	0852      	lsrs	r2, r2, #1
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0652      	lsls	r2, r2, #25
 80081d6:	4311      	orrs	r1, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081dc:	0912      	lsrs	r2, r2, #4
 80081de:	0452      	lsls	r2, r2, #17
 80081e0:	430a      	orrs	r2, r1
 80081e2:	4925      	ldr	r1, [pc, #148]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081e8:	4b23      	ldr	r3, [pc, #140]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a22      	ldr	r2, [pc, #136]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 80081fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008200:	f7fb faca 	bl	8003798 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008208:	f7fb fac6 	bl	8003798 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e066      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800821a:	4b17      	ldr	r3, [pc, #92]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0f0      	beq.n	8008208 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008226:	e05e      	b.n	80082e6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e05d      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d156      	bne.n	80082e6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a0e      	ldr	r2, [pc, #56]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800823e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008242:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a0b      	ldr	r2, [pc, #44]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800824a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800824e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008250:	f7fb faa2 	bl	8003798 <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008258:	f7fb fa9e 	bl	8003798 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e03e      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <HAL_RCC_OscConfig+0x754>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x734>
 8008276:	e036      	b.n	80082e6 <HAL_RCC_OscConfig+0x7c2>
 8008278:	40021000 	.word	0x40021000
 800827c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	2b0c      	cmp	r3, #12
 8008284:	d02d      	beq.n	80082e2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a19      	ldr	r2, [pc, #100]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 800828c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008290:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008292:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800829e:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80082aa:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 80082b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80082b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ba:	f7fb fa6d 	bl	8003798 <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c2:	f7fb fa69 	bl	8003798 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e009      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <HAL_RCC_OscConfig+0x7cc>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <HAL_RCC_OscConfig+0x79e>
 80082e0:	e001      	b.n	80082e6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40021000 	.word	0x40021000

080082f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e0c8      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008308:	4b66      	ldr	r3, [pc, #408]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d910      	bls.n	8008338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008316:	4b63      	ldr	r3, [pc, #396]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f023 0207 	bic.w	r2, r3, #7
 800831e:	4961      	ldr	r1, [pc, #388]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	4313      	orrs	r3, r2
 8008324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008326:	4b5f      	ldr	r3, [pc, #380]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d001      	beq.n	8008338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e0b0      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d04c      	beq.n	80083de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d107      	bne.n	800835c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800834c:	4b56      	ldr	r3, [pc, #344]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d121      	bne.n	800839c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e09e      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d107      	bne.n	8008374 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008364:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d115      	bne.n	800839c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e092      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800837c:	4b4a      	ldr	r3, [pc, #296]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e086      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800838c:	4b46      	ldr	r3, [pc, #280]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e07e      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800839c:	4b42      	ldr	r3, [pc, #264]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f023 0203 	bic.w	r2, r3, #3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	493f      	ldr	r1, [pc, #252]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ae:	f7fb f9f3 	bl	8003798 <HAL_GetTick>
 80083b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b4:	e00a      	b.n	80083cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083b6:	f7fb f9ef 	bl	8003798 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e066      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 020c 	and.w	r2, r3, #12
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	429a      	cmp	r2, r3
 80083dc:	d1eb      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ea:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	492c      	ldr	r1, [pc, #176]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083fc:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d210      	bcs.n	800842c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800840a:	4b26      	ldr	r3, [pc, #152]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f023 0207 	bic.w	r2, r3, #7
 8008412:	4924      	ldr	r1, [pc, #144]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	4313      	orrs	r3, r2
 8008418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841a:	4b22      	ldr	r3, [pc, #136]	; (80084a4 <HAL_RCC_ClockConfig+0x1b0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d001      	beq.n	800842c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e036      	b.n	800849a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008438:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	4918      	ldr	r1, [pc, #96]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008446:	4313      	orrs	r3, r2
 8008448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4910      	ldr	r1, [pc, #64]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008466:	4313      	orrs	r3, r2
 8008468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800846a:	f000 f825 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800846e:	4602      	mov	r2, r0
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <HAL_RCC_ClockConfig+0x1b4>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	490c      	ldr	r1, [pc, #48]	; (80084ac <HAL_RCC_ClockConfig+0x1b8>)
 800847c:	5ccb      	ldrb	r3, [r1, r3]
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	fa22 f303 	lsr.w	r3, r2, r3
 8008486:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800848a:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <HAL_RCC_ClockConfig+0x1c0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fb f932 	bl	80036f8 <HAL_InitTick>
 8008494:	4603      	mov	r3, r0
 8008496:	72fb      	strb	r3, [r7, #11]

  return status;
 8008498:	7afb      	ldrb	r3, [r7, #11]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40022000 	.word	0x40022000
 80084a8:	40021000 	.word	0x40021000
 80084ac:	0800c964 	.word	0x0800c964
 80084b0:	20000044 	.word	0x20000044
 80084b4:	20000080 	.word	0x20000080

080084b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b089      	sub	sp, #36	; 0x24
 80084bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	2300      	movs	r3, #0
 80084c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084c6:	4b3e      	ldr	r3, [pc, #248]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 030c 	and.w	r3, r3, #12
 80084ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084d0:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0303 	and.w	r3, r3, #3
 80084d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x34>
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b0c      	cmp	r3, #12
 80084e4:	d121      	bne.n	800852a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d11e      	bne.n	800852a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80084ec:	4b34      	ldr	r3, [pc, #208]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d107      	bne.n	8008508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80084f8:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80084fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	e005      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008508:	4b2d      	ldr	r3, [pc, #180]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008514:	4a2b      	ldr	r2, [pc, #172]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10d      	bne.n	8008540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008528:	e00a      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b04      	cmp	r3, #4
 800852e:	d102      	bne.n	8008536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e004      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d101      	bne.n	8008540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800853c:	4b23      	ldr	r3, [pc, #140]	; (80085cc <HAL_RCC_GetSysClockFreq+0x114>)
 800853e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b0c      	cmp	r3, #12
 8008544:	d134      	bne.n	80085b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008546:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d003      	beq.n	800855e <HAL_RCC_GetSysClockFreq+0xa6>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d003      	beq.n	8008564 <HAL_RCC_GetSysClockFreq+0xac>
 800855c:	e005      	b.n	800856a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008560:	617b      	str	r3, [r7, #20]
      break;
 8008562:	e005      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008564:	4b19      	ldr	r3, [pc, #100]	; (80085cc <HAL_RCC_GetSysClockFreq+0x114>)
 8008566:	617b      	str	r3, [r7, #20]
      break;
 8008568:	e002      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	617b      	str	r3, [r7, #20]
      break;
 800856e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008570:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	091b      	lsrs	r3, r3, #4
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	3301      	adds	r3, #1
 800857c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	fb03 f202 	mul.w	r2, r3, r2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	0e5b      	lsrs	r3, r3, #25
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	3301      	adds	r3, #1
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80085b0:	69bb      	ldr	r3, [r7, #24]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3724      	adds	r7, #36	; 0x24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	40021000 	.word	0x40021000
 80085c4:	0800c97c 	.word	0x0800c97c
 80085c8:	00f42400 	.word	0x00f42400
 80085cc:	007a1200 	.word	0x007a1200

080085d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085d4:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80085d6:	681b      	ldr	r3, [r3, #0]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000044 	.word	0x20000044

080085e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085ec:	f7ff fff0 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 80085f0:	4602      	mov	r2, r0
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_GetPCLK1Freq+0x24>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	0a1b      	lsrs	r3, r3, #8
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	4904      	ldr	r1, [pc, #16]	; (8008610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085fe:	5ccb      	ldrb	r3, [r1, r3]
 8008600:	f003 031f 	and.w	r3, r3, #31
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008608:	4618      	mov	r0, r3
 800860a:	bd80      	pop	{r7, pc}
 800860c:	40021000 	.word	0x40021000
 8008610:	0800c974 	.word	0x0800c974

08008614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008618:	f7ff ffda 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	0adb      	lsrs	r3, r3, #11
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <HAL_RCC_GetPCLK2Freq+0x28>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40021000 	.word	0x40021000
 800863c:	0800c974 	.word	0x0800c974

08008640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008648:	2300      	movs	r3, #0
 800864a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800864c:	4b2a      	ldr	r3, [pc, #168]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800864e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008658:	f7fe fd00 	bl	800705c <HAL_PWREx_GetVoltageRange>
 800865c:	6178      	str	r0, [r7, #20]
 800865e:	e014      	b.n	800868a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008660:	4b25      	ldr	r3, [pc, #148]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008664:	4a24      	ldr	r2, [pc, #144]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866a:	6593      	str	r3, [r2, #88]	; 0x58
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008678:	f7fe fcf0 	bl	800705c <HAL_PWREx_GetVoltageRange>
 800867c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800867e:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008688:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008690:	d10b      	bne.n	80086aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b80      	cmp	r3, #128	; 0x80
 8008696:	d919      	bls.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2ba0      	cmp	r3, #160	; 0xa0
 800869c:	d902      	bls.n	80086a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800869e:	2302      	movs	r3, #2
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	e013      	b.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80086a4:	2301      	movs	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	e010      	b.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d902      	bls.n	80086b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80086b0:	2303      	movs	r3, #3
 80086b2:	613b      	str	r3, [r7, #16]
 80086b4:	e00a      	b.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d102      	bne.n	80086c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80086bc:	2302      	movs	r3, #2
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	e004      	b.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d101      	bne.n	80086cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80086c8:	2301      	movs	r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f023 0207 	bic.w	r2, r3, #7
 80086d4:	4909      	ldr	r1, [pc, #36]	; (80086fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80086dc:	4b07      	ldr	r3, [pc, #28]	; (80086fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d001      	beq.n	80086ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e000      	b.n	80086f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40021000 	.word	0x40021000
 80086fc:	40022000 	.word	0x40022000

08008700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008708:	2300      	movs	r3, #0
 800870a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800870c:	2300      	movs	r3, #0
 800870e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008718:	2b00      	cmp	r3, #0
 800871a:	d041      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008724:	d02a      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800872a:	d824      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800872c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008730:	d008      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008736:	d81e      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800873c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008740:	d010      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008742:	e018      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008744:	4b86      	ldr	r3, [pc, #536]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	4a85      	ldr	r2, [pc, #532]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800874a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800874e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008750:	e015      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3304      	adds	r3, #4
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f001 f919 	bl	8009990 <RCCEx_PLLSAI1_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008762:	e00c      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3320      	adds	r3, #32
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fa04 	bl	8009b78 <RCCEx_PLLSAI2_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008774:	e003      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	74fb      	strb	r3, [r7, #19]
      break;
 800877a:	e000      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800877c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800877e:	7cfb      	ldrb	r3, [r7, #19]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008784:	4b76      	ldr	r3, [pc, #472]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008792:	4973      	ldr	r1, [pc, #460]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800879a:	e001      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879c:	7cfb      	ldrb	r3, [r7, #19]
 800879e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d041      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087b4:	d02a      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80087b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087ba:	d824      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80087bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c0:	d008      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80087c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c6:	d81e      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80087cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087d0:	d010      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80087d2:	e018      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80087d4:	4b62      	ldr	r3, [pc, #392]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a61      	ldr	r2, [pc, #388]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80087e0:	e015      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3304      	adds	r3, #4
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 f8d1 	bl	8009990 <RCCEx_PLLSAI1_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80087f2:	e00c      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3320      	adds	r3, #32
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 f9bc 	bl	8009b78 <RCCEx_PLLSAI2_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008804:	e003      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	74fb      	strb	r3, [r7, #19]
      break;
 800880a:	e000      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800880c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008814:	4b52      	ldr	r3, [pc, #328]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008822:	494f      	ldr	r1, [pc, #316]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008824:	4313      	orrs	r3, r2
 8008826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800882a:	e001      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	7cfb      	ldrb	r3, [r7, #19]
 800882e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80a0 	beq.w	800897e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800883e:	2300      	movs	r3, #0
 8008840:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008842:	4b47      	ldr	r3, [pc, #284]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00d      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008858:	4b41      	ldr	r3, [pc, #260]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800885a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885c:	4a40      	ldr	r2, [pc, #256]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800885e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008862:	6593      	str	r3, [r2, #88]	; 0x58
 8008864:	4b3e      	ldr	r3, [pc, #248]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008870:	2301      	movs	r3, #1
 8008872:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008874:	4b3b      	ldr	r3, [pc, #236]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a3a      	ldr	r2, [pc, #232]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008880:	f7fa ff8a 	bl	8003798 <HAL_GetTick>
 8008884:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008886:	e009      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008888:	f7fa ff86 	bl	8003798 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d902      	bls.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	74fb      	strb	r3, [r7, #19]
        break;
 800889a:	e005      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800889c:	4b31      	ldr	r3, [pc, #196]	; (8008964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0ef      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80088a8:	7cfb      	ldrb	r3, [r7, #19]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d15c      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088ae:	4b2c      	ldr	r3, [pc, #176]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01f      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d019      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088cc:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088d8:	4b21      	ldr	r3, [pc, #132]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088de:	4a20      	ldr	r2, [pc, #128]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088e8:	4b1d      	ldr	r3, [pc, #116]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ee:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088f8:	4a19      	ldr	r2, [pc, #100]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890a:	f7fa ff45 	bl	8003798 <HAL_GetTick>
 800890e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008910:	e00b      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008912:	f7fa ff41 	bl	8003798 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008920:	4293      	cmp	r3, r2
 8008922:	d902      	bls.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	74fb      	strb	r3, [r7, #19]
            break;
 8008928:	e006      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800892a:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800892c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0ec      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008938:	7cfb      	ldrb	r3, [r7, #19]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10c      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800893e:	4b08      	ldr	r3, [pc, #32]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800894e:	4904      	ldr	r1, [pc, #16]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008950:	4313      	orrs	r3, r2
 8008952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008956:	e009      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	74bb      	strb	r3, [r7, #18]
 800895c:	e006      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800895e:	bf00      	nop
 8008960:	40021000 	.word	0x40021000
 8008964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008968:	7cfb      	ldrb	r3, [r7, #19]
 800896a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800896c:	7c7b      	ldrb	r3, [r7, #17]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d105      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008972:	4b9e      	ldr	r3, [pc, #632]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008976:	4a9d      	ldr	r2, [pc, #628]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800897c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800898a:	4b98      	ldr	r3, [pc, #608]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008990:	f023 0203 	bic.w	r2, r3, #3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	4994      	ldr	r1, [pc, #592]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089ac:	4b8f      	ldr	r3, [pc, #572]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b2:	f023 020c 	bic.w	r2, r3, #12
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	498c      	ldr	r1, [pc, #560]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0304 	and.w	r3, r3, #4
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089ce:	4b87      	ldr	r3, [pc, #540]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	4983      	ldr	r1, [pc, #524]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089f0:	4b7e      	ldr	r3, [pc, #504]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	497b      	ldr	r1, [pc, #492]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a12:	4b76      	ldr	r3, [pc, #472]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a20:	4972      	ldr	r1, [pc, #456]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a34:	4b6d      	ldr	r3, [pc, #436]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a42:	496a      	ldr	r1, [pc, #424]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a56:	4b65      	ldr	r3, [pc, #404]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a64:	4961      	ldr	r1, [pc, #388]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a78:	4b5c      	ldr	r3, [pc, #368]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a86:	4959      	ldr	r1, [pc, #356]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a9a:	4b54      	ldr	r3, [pc, #336]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa8:	4950      	ldr	r1, [pc, #320]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008abc:	4b4b      	ldr	r3, [pc, #300]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	4948      	ldr	r1, [pc, #288]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ade:	4b43      	ldr	r3, [pc, #268]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	493f      	ldr	r1, [pc, #252]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d028      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b00:	4b3a      	ldr	r3, [pc, #232]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	4937      	ldr	r1, [pc, #220]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b20:	4b32      	ldr	r3, [pc, #200]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4a31      	ldr	r2, [pc, #196]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2a:	60d3      	str	r3, [r2, #12]
 8008b2c:	e011      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b36:	d10c      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 ff26 	bl	8009990 <RCCEx_PLLSAI1_Config>
 8008b44:	4603      	mov	r3, r0
 8008b46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008b48:	7cfb      	ldrb	r3, [r7, #19]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008b4e:	7cfb      	ldrb	r3, [r7, #19]
 8008b50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d028      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008b5e:	4b23      	ldr	r3, [pc, #140]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	491f      	ldr	r1, [pc, #124]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b7c:	d106      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b7e:	4b1b      	ldr	r3, [pc, #108]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b88:	60d3      	str	r3, [r2, #12]
 8008b8a:	e011      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b94:	d10c      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fef7 	bl	8009990 <RCCEx_PLLSAI1_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ba6:	7cfb      	ldrb	r3, [r7, #19]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008bac:	7cfb      	ldrb	r3, [r7, #19]
 8008bae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d02b      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bca:	4908      	ldr	r1, [pc, #32]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bda:	d109      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bdc:	4b03      	ldr	r3, [pc, #12]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4a02      	ldr	r2, [pc, #8]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be6:	60d3      	str	r3, [r2, #12]
 8008be8:	e014      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008bea:	bf00      	nop
 8008bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fec5 	bl	8009990 <RCCEx_PLLSAI1_Config>
 8008c06:	4603      	mov	r3, r0
 8008c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c0a:	7cfb      	ldrb	r3, [r7, #19]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008c10:	7cfb      	ldrb	r3, [r7, #19]
 8008c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d02f      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c20:	4b2b      	ldr	r3, [pc, #172]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c2e:	4928      	ldr	r1, [pc, #160]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c3e:	d10d      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	2102      	movs	r1, #2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fea2 	bl	8009990 <RCCEx_PLLSAI1_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d014      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
 8008c58:	74bb      	strb	r3, [r7, #18]
 8008c5a:	e011      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3320      	adds	r3, #32
 8008c6a:	2102      	movs	r1, #2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 ff83 	bl	8009b78 <RCCEx_PLLSAI2_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c76:	7cfb      	ldrb	r3, [r7, #19]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008c7c:	7cfb      	ldrb	r3, [r7, #19]
 8008c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00a      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c8c:	4b10      	ldr	r3, [pc, #64]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c9a:	490d      	ldr	r1, [pc, #52]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cbe:	4904      	ldr	r1, [pc, #16]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008cc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40021000 	.word	0x40021000

08008cd4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a73      	ldr	r2, [pc, #460]	; (8008eac <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 8008ce0:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8008ce2:	4b73      	ldr	r3, [pc, #460]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	f003 0203 	and.w	r2, r3, #3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008cee:	4b70      	ldr	r3, [pc, #448]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	091b      	lsrs	r3, r3, #4
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008cfe:	4b6c      	ldr	r3, [pc, #432]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8008d0c:	4b68      	ldr	r3, [pc, #416]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	0c5b      	lsrs	r3, r3, #17
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	1dda      	adds	r2, r3, #7
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8008d1e:	4b64      	ldr	r3, [pc, #400]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	0d5b      	lsrs	r3, r3, #21
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	3301      	adds	r3, #1
 8008d2a:	005a      	lsls	r2, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008d30:	4b5f      	ldr	r3, [pc, #380]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	0e5b      	lsrs	r3, r3, #25
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	005a      	lsls	r2, r3, #1
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008d52:	4b57      	ldr	r3, [pc, #348]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008d60:	4b53      	ldr	r3, [pc, #332]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	0c5b      	lsrs	r3, r3, #17
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	1dda      	adds	r2, r3, #7
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008d72:	4b4f      	ldr	r3, [pc, #316]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	0e5b      	lsrs	r3, r3, #25
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	005a      	lsls	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008d84:	4b4a      	ldr	r3, [pc, #296]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	f003 0203 	and.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008d92:	4b47      	ldr	r3, [pc, #284]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d98:	f003 020c 	and.w	r2, r3, #12
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008da0:	4b43      	ldr	r3, [pc, #268]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8008dae:	4b40      	ldr	r3, [pc, #256]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8008dbc:	4b3c      	ldr	r3, [pc, #240]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8008dca:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008dd8:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dde:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8008de6:	4b32      	ldr	r3, [pc, #200]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dec:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8008df4:	4b2e      	ldr	r3, [pc, #184]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e02:	4b2b      	ldr	r3, [pc, #172]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008e10:	4b27      	ldr	r3, [pc, #156]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e16:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e24:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008e3a:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e40:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008e4a:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e50:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7a:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e88:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	000fffff 	.word	0x000fffff
 8008eb0:	40021000 	.word	0x40021000

08008eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec6:	d13e      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008ec8:	4bb2      	ldr	r3, [pc, #712]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eda:	d028      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ee2:	f200 8542 	bhi.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eec:	d005      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef4:	d00e      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8008ef6:	f000 bd38 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008efa:	4ba6      	ldr	r3, [pc, #664]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	f040 8532 	bne.w	800996e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8008f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0e:	61fb      	str	r3, [r7, #28]
      break;
 8008f10:	f000 bd2d 	b.w	800996e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008f14:	4b9f      	ldr	r3, [pc, #636]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f040 8527 	bne.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8008f24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008f28:	61fb      	str	r3, [r7, #28]
      break;
 8008f2a:	f000 bd22 	b.w	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f2e:	4b99      	ldr	r3, [pc, #612]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f3a:	f040 851c 	bne.w	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8008f3e:	4b96      	ldr	r3, [pc, #600]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008f40:	61fb      	str	r3, [r7, #28]
      break;
 8008f42:	f000 bd18 	b.w	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f46:	4b93      	ldr	r3, [pc, #588]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d036      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d840      	bhi.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d003      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d020      	beq.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008f68:	e039      	b.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008f6a:	4b8a      	ldr	r3, [pc, #552]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d116      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008f76:	4b87      	ldr	r3, [pc, #540]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008f82:	4b84      	ldr	r3, [pc, #528]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	091b      	lsrs	r3, r3, #4
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	e005      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008f8e:	4b81      	ldr	r3, [pc, #516]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f94:	0a1b      	lsrs	r3, r3, #8
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	4a80      	ldr	r2, [pc, #512]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008fa2:	e01f      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61bb      	str	r3, [r7, #24]
      break;
 8008fa8:	e01c      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008faa:	4b7a      	ldr	r3, [pc, #488]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb6:	d102      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8008fb8:	4b79      	ldr	r3, [pc, #484]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008fba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008fbc:	e012      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61bb      	str	r3, [r7, #24]
      break;
 8008fc2:	e00f      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fc4:	4b73      	ldr	r3, [pc, #460]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd0:	d102      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8008fd2:	4b74      	ldr	r3, [pc, #464]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008fd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008fd6:	e005      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
      break;
 8008fdc:	e002      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61bb      	str	r3, [r7, #24]
      break;
 8008fe2:	bf00      	nop
    }

    switch(PeriphClk)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fea:	f000 80dd 	beq.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ff4:	f200 84c1 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ffe:	f000 80d3 	beq.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009008:	f200 84b7 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009012:	f000 835f 	beq.w	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901c:	f200 84ad 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009026:	f000 847e 	beq.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009030:	f200 84a3 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903a:	f000 82cd 	beq.w	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009044:	f200 8499 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904e:	f000 80ab 	beq.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009058:	f200 848f 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	f000 8090 	beq.w	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906c:	f200 8485 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009076:	d07f      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907e:	f200 847c 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009088:	f000 8403 	beq.w	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009092:	f200 8472 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909c:	f000 83af 	beq.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090a6:	f200 8468 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b0:	f000 8379 	beq.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ba:	f200 845e 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b80      	cmp	r3, #128	; 0x80
 80090c2:	f000 8344 	beq.w	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	f200 8456 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d84b      	bhi.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 844f 	beq.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b1f      	cmp	r3, #31
 80090e2:	f200 844a 	bhi.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	080092d5 	.word	0x080092d5
 80090f0:	08009343 	.word	0x08009343
 80090f4:	0800997b 	.word	0x0800997b
 80090f8:	080093d7 	.word	0x080093d7
 80090fc:	0800997b 	.word	0x0800997b
 8009100:	0800997b 	.word	0x0800997b
 8009104:	0800997b 	.word	0x0800997b
 8009108:	0800945d 	.word	0x0800945d
 800910c:	0800997b 	.word	0x0800997b
 8009110:	0800997b 	.word	0x0800997b
 8009114:	0800997b 	.word	0x0800997b
 8009118:	0800997b 	.word	0x0800997b
 800911c:	0800997b 	.word	0x0800997b
 8009120:	0800997b 	.word	0x0800997b
 8009124:	0800997b 	.word	0x0800997b
 8009128:	080094d5 	.word	0x080094d5
 800912c:	0800997b 	.word	0x0800997b
 8009130:	0800997b 	.word	0x0800997b
 8009134:	0800997b 	.word	0x0800997b
 8009138:	0800997b 	.word	0x0800997b
 800913c:	0800997b 	.word	0x0800997b
 8009140:	0800997b 	.word	0x0800997b
 8009144:	0800997b 	.word	0x0800997b
 8009148:	0800997b 	.word	0x0800997b
 800914c:	0800997b 	.word	0x0800997b
 8009150:	0800997b 	.word	0x0800997b
 8009154:	0800997b 	.word	0x0800997b
 8009158:	0800997b 	.word	0x0800997b
 800915c:	0800997b 	.word	0x0800997b
 8009160:	0800997b 	.word	0x0800997b
 8009164:	0800997b 	.word	0x0800997b
 8009168:	08009557 	.word	0x08009557
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	f000 82c1 	beq.w	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009174:	f000 bc01 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009178:	69b9      	ldr	r1, [r7, #24]
 800917a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800917e:	f000 fdd9 	bl	8009d34 <RCCEx_GetSAIxPeriphCLKFreq>
 8009182:	61f8      	str	r0, [r7, #28]
      break;
 8009184:	e3fa      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009186:	69b9      	ldr	r1, [r7, #24]
 8009188:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800918c:	f000 fdd2 	bl	8009d34 <RCCEx_GetSAIxPeriphCLKFreq>
 8009190:	61f8      	str	r0, [r7, #28]
      break;
 8009192:	e3f3      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8009194:	40021000 	.word	0x40021000
 8009198:	0003d090 	.word	0x0003d090
 800919c:	0800c97c 	.word	0x0800c97c
 80091a0:	00f42400 	.word	0x00f42400
 80091a4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80091a8:	4ba9      	ldr	r3, [pc, #676]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091ba:	d00c      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091c2:	d87f      	bhi.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091ca:	d04e      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d2:	d01d      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80091d4:	e076      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80091d6:	4b9e      	ldr	r3, [pc, #632]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d172      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80091e2:	4b9b      	ldr	r3, [pc, #620]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80091ee:	4b98      	ldr	r3, [pc, #608]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	e005      	b.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80091fa:	4b95      	ldr	r3, [pc, #596]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009200:	0a1b      	lsrs	r3, r3, #8
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	4a93      	ldr	r2, [pc, #588]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920c:	61fb      	str	r3, [r7, #28]
          break;
 800920e:	e05b      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009210:	4b8f      	ldr	r3, [pc, #572]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921c:	d156      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800921e:	4b8c      	ldr	r3, [pc, #560]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800922a:	d14f      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800922c:	4b88      	ldr	r3, [pc, #544]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009236:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	fb03 f202 	mul.w	r2, r3, r2
 8009240:	4b83      	ldr	r3, [pc, #524]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	3301      	adds	r3, #1
 800924c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009250:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009252:	4b7f      	ldr	r3, [pc, #508]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	0d5b      	lsrs	r3, r3, #21
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	3301      	adds	r3, #1
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	fbb2 f3f3 	udiv	r3, r2, r3
 8009266:	61fb      	str	r3, [r7, #28]
          break;
 8009268:	e030      	b.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800926a:	4b79      	ldr	r3, [pc, #484]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009276:	d12b      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009278:	4b75      	ldr	r3, [pc, #468]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009284:	d124      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009286:	4b72      	ldr	r3, [pc, #456]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	0a1b      	lsrs	r3, r3, #8
 800928c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009290:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	fb03 f202 	mul.w	r2, r3, r2
 800929a:	4b6d      	ldr	r3, [pc, #436]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	091b      	lsrs	r3, r3, #4
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	3301      	adds	r3, #1
 80092a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092aa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80092ac:	4b68      	ldr	r3, [pc, #416]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	0d5b      	lsrs	r3, r3, #21
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	3301      	adds	r3, #1
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c0:	61fb      	str	r3, [r7, #28]
          break;
 80092c2:	e005      	b.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80092c4:	bf00      	nop
 80092c6:	e359      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80092c8:	bf00      	nop
 80092ca:	e357      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80092cc:	bf00      	nop
 80092ce:	e355      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80092d0:	bf00      	nop
        break;
 80092d2:	e353      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80092d4:	4b5e      	ldr	r3, [pc, #376]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80092d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d827      	bhi.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	08009305 	.word	0x08009305
 80092f4:	0800930d 	.word	0x0800930d
 80092f8:	08009321 	.word	0x08009321
          frequency = HAL_RCC_GetPCLK2Freq();
 80092fc:	f7ff f98a 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 8009300:	61f8      	str	r0, [r7, #28]
          break;
 8009302:	e01d      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8009304:	f7ff f8d8 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 8009308:	61f8      	str	r0, [r7, #28]
          break;
 800930a:	e019      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800930c:	4b50      	ldr	r3, [pc, #320]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009318:	d10f      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800931a:	4b4f      	ldr	r3, [pc, #316]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800931c:	61fb      	str	r3, [r7, #28]
          break;
 800931e:	e00c      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009320:	4b4b      	ldr	r3, [pc, #300]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800932e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009332:	61fb      	str	r3, [r7, #28]
          break;
 8009334:	e003      	b.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8009336:	bf00      	nop
 8009338:	e320      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800933a:	bf00      	nop
 800933c:	e31e      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800933e:	bf00      	nop
        break;
 8009340:	e31c      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009342:	4b43      	ldr	r3, [pc, #268]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	f003 030c 	and.w	r3, r3, #12
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b0c      	cmp	r3, #12
 8009352:	d83a      	bhi.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009391 	.word	0x08009391
 8009360:	080093cb 	.word	0x080093cb
 8009364:	080093cb 	.word	0x080093cb
 8009368:	080093cb 	.word	0x080093cb
 800936c:	08009399 	.word	0x08009399
 8009370:	080093cb 	.word	0x080093cb
 8009374:	080093cb 	.word	0x080093cb
 8009378:	080093cb 	.word	0x080093cb
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093cb 	.word	0x080093cb
 8009384:	080093cb 	.word	0x080093cb
 8009388:	080093cb 	.word	0x080093cb
 800938c:	080093b5 	.word	0x080093b5
          frequency = HAL_RCC_GetPCLK1Freq();
 8009390:	f7ff f92a 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009394:	61f8      	str	r0, [r7, #28]
          break;
 8009396:	e01d      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8009398:	f7ff f88e 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800939c:	61f8      	str	r0, [r7, #28]
          break;
 800939e:	e019      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093a0:	4b2b      	ldr	r3, [pc, #172]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ac:	d10f      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80093ae:	4b2a      	ldr	r3, [pc, #168]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80093b0:	61fb      	str	r3, [r7, #28]
          break;
 80093b2:	e00c      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093b4:	4b26      	ldr	r3, [pc, #152]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d107      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c6:	61fb      	str	r3, [r7, #28]
          break;
 80093c8:	e003      	b.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80093ca:	bf00      	nop
 80093cc:	e2d6      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80093ce:	bf00      	nop
 80093d0:	e2d4      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80093d2:	bf00      	nop
        break;
 80093d4:	e2d2      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80093d6:	4b1e      	ldr	r3, [pc, #120]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d021      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b30      	cmp	r3, #48	; 0x30
 80093ec:	d829      	bhi.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d011      	beq.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d823      	bhi.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b10      	cmp	r3, #16
 8009404:	d004      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8009406:	e01c      	b.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009408:	f7ff f8ee 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800940c:	61f8      	str	r0, [r7, #28]
          break;
 800940e:	e01d      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8009410:	f7ff f852 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 8009414:	61f8      	str	r0, [r7, #28]
          break;
 8009416:	e019      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009418:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009424:	d10f      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009428:	61fb      	str	r3, [r7, #28]
          break;
 800942a:	e00c      	b.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b02      	cmp	r3, #2
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800943a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800943e:	61fb      	str	r3, [r7, #28]
          break;
 8009440:	e003      	b.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8009442:	bf00      	nop
 8009444:	e29a      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009446:	bf00      	nop
 8009448:	e298      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800944a:	bf00      	nop
        break;
 800944c:	e296      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800944e:	bf00      	nop
 8009450:	40021000 	.word	0x40021000
 8009454:	0800c97c 	.word	0x0800c97c
 8009458:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800945c:	4b9b      	ldr	r3, [pc, #620]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800945e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2bc0      	cmp	r3, #192	; 0xc0
 800946c:	d021      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2bc0      	cmp	r3, #192	; 0xc0
 8009472:	d829      	bhi.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b80      	cmp	r3, #128	; 0x80
 8009478:	d011      	beq.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d823      	bhi.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d004      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800948c:	e01c      	b.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800948e:	f7ff f8ab 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009492:	61f8      	str	r0, [r7, #28]
          break;
 8009494:	e01d      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009496:	f7ff f80f 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800949a:	61f8      	str	r0, [r7, #28]
          break;
 800949c:	e019      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800949e:	4b8b      	ldr	r3, [pc, #556]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094aa:	d10f      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80094ac:	4b88      	ldr	r3, [pc, #544]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80094ae:	61fb      	str	r3, [r7, #28]
          break;
 80094b0:	e00c      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80094b2:	4b86      	ldr	r3, [pc, #536]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d107      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80094c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c4:	61fb      	str	r3, [r7, #28]
          break;
 80094c6:	e003      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80094c8:	bf00      	nop
 80094ca:	e257      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094cc:	bf00      	nop
 80094ce:	e255      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094d0:	bf00      	nop
        break;
 80094d2:	e253      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80094d4:	4b7d      	ldr	r3, [pc, #500]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094e6:	d025      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ee:	d82c      	bhi.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f6:	d013      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fe:	d824      	bhi.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950c:	d004      	beq.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800950e:	e01c      	b.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009510:	f7ff f86a 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009514:	61f8      	str	r0, [r7, #28]
          break;
 8009516:	e01d      	b.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009518:	f7fe ffce 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800951c:	61f8      	str	r0, [r7, #28]
          break;
 800951e:	e019      	b.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009520:	4b6a      	ldr	r3, [pc, #424]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800952c:	d10f      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800952e:	4b68      	ldr	r3, [pc, #416]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8009530:	61fb      	str	r3, [r7, #28]
          break;
 8009532:	e00c      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009534:	4b65      	ldr	r3, [pc, #404]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b02      	cmp	r3, #2
 8009540:	d107      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8009542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009546:	61fb      	str	r3, [r7, #28]
          break;
 8009548:	e003      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800954a:	bf00      	nop
 800954c:	e216      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800954e:	bf00      	nop
 8009550:	e214      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009552:	bf00      	nop
        break;
 8009554:	e212      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009556:	4b5d      	ldr	r3, [pc, #372]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009568:	d025      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009570:	d82c      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009578:	d013      	beq.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009580:	d824      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958e:	d004      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8009590:	e01c      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009592:	f7ff f829 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009596:	61f8      	str	r0, [r7, #28]
          break;
 8009598:	e01d      	b.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800959a:	f7fe ff8d 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800959e:	61f8      	str	r0, [r7, #28]
          break;
 80095a0:	e019      	b.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095a2:	4b4a      	ldr	r3, [pc, #296]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ae:	d10f      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80095b0:	4b47      	ldr	r3, [pc, #284]	; (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80095b2:	61fb      	str	r3, [r7, #28]
          break;
 80095b4:	e00c      	b.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095b6:	4b45      	ldr	r3, [pc, #276]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d107      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80095c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095c8:	61fb      	str	r3, [r7, #28]
          break;
 80095ca:	e003      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80095cc:	bf00      	nop
 80095ce:	e1d5      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80095d0:	bf00      	nop
 80095d2:	e1d3      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80095d4:	bf00      	nop
        break;
 80095d6:	e1d1      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80095d8:	4b3c      	ldr	r3, [pc, #240]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80095da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095ea:	d00c      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095f2:	d864      	bhi.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095fa:	d008      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009602:	d030      	beq.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8009604:	e05b      	b.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8009606:	f7fe ff57 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800960a:	61f8      	str	r0, [r7, #28]
          break;
 800960c:	e05c      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800960e:	4b2f      	ldr	r3, [pc, #188]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800961a:	d152      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800961c:	4b2b      	ldr	r3, [pc, #172]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d04c      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009628:	4b28      	ldr	r3, [pc, #160]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009632:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	fb03 f202 	mul.w	r2, r3, r2
 800963c:	4b23      	ldr	r3, [pc, #140]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	091b      	lsrs	r3, r3, #4
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	3301      	adds	r3, #1
 8009648:	fbb2 f3f3 	udiv	r3, r2, r3
 800964c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800964e:	4b1f      	ldr	r3, [pc, #124]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	0e5b      	lsrs	r3, r3, #25
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	3301      	adds	r3, #1
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009662:	61fb      	str	r3, [r7, #28]
          break;
 8009664:	e02d      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8009666:	4b19      	ldr	r3, [pc, #100]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800966e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009672:	d128      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8009674:	4b15      	ldr	r3, [pc, #84]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d022      	beq.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009680:	4b12      	ldr	r3, [pc, #72]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800968a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	fb03 f202 	mul.w	r2, r3, r2
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	091b      	lsrs	r3, r3, #4
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	3301      	adds	r3, #1
 80096a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	0e5b      	lsrs	r3, r3, #25
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	3301      	adds	r3, #1
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ba:	61fb      	str	r3, [r7, #28]
          break;
 80096bc:	e003      	b.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80096be:	bf00      	nop
 80096c0:	e15c      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096c2:	bf00      	nop
 80096c4:	e15a      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096c6:	bf00      	nop
        break;
 80096c8:	e158      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80096ca:	bf00      	nop
 80096cc:	40021000 	.word	0x40021000
 80096d0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80096d4:	4b9d      	ldr	r3, [pc, #628]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096de:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d103      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80096e6:	f7fe ff95 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 80096ea:	61f8      	str	r0, [r7, #28]
        break;
 80096ec:	e146      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80096ee:	f7fe fee3 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 80096f2:	61f8      	str	r0, [r7, #28]
        break;
 80096f4:	e142      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80096f6:	4b95      	ldr	r3, [pc, #596]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80096f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009708:	d013      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009710:	d819      	bhi.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971e:	d004      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8009720:	e011      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009722:	f7fe ff61 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009726:	61f8      	str	r0, [r7, #28]
          break;
 8009728:	e010      	b.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800972a:	f7fe fec5 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800972e:	61f8      	str	r0, [r7, #28]
          break;
 8009730:	e00c      	b.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009732:	4b86      	ldr	r3, [pc, #536]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800973a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973e:	d104      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8009740:	4b83      	ldr	r3, [pc, #524]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009742:	61fb      	str	r3, [r7, #28]
          break;
 8009744:	e001      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8009746:	bf00      	nop
 8009748:	e118      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800974a:	bf00      	nop
        break;
 800974c:	e116      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800974e:	4b7f      	ldr	r3, [pc, #508]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009760:	d013      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009768:	d819      	bhi.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d004      	beq.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009776:	d004      	beq.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8009778:	e011      	b.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800977a:	f7fe ff35 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800977e:	61f8      	str	r0, [r7, #28]
          break;
 8009780:	e010      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009782:	f7fe fe99 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 8009786:	61f8      	str	r0, [r7, #28]
          break;
 8009788:	e00c      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800978a:	4b70      	ldr	r3, [pc, #448]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009796:	d104      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8009798:	4b6d      	ldr	r3, [pc, #436]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800979a:	61fb      	str	r3, [r7, #28]
          break;
 800979c:	e001      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800979e:	bf00      	nop
 80097a0:	e0ec      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80097a2:	bf00      	nop
        break;
 80097a4:	e0ea      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80097a6:	4b69      	ldr	r3, [pc, #420]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097b8:	d013      	beq.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c0:	d819      	bhi.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ce:	d004      	beq.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80097d0:	e011      	b.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80097d2:	f7fe ff09 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 80097d6:	61f8      	str	r0, [r7, #28]
          break;
 80097d8:	e010      	b.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80097da:	f7fe fe6d 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 80097de:	61f8      	str	r0, [r7, #28]
          break;
 80097e0:	e00c      	b.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097e2:	4b5a      	ldr	r3, [pc, #360]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ee:	d104      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80097f0:	4b57      	ldr	r3, [pc, #348]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80097f2:	61fb      	str	r3, [r7, #28]
          break;
 80097f4:	e001      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80097f6:	bf00      	nop
 80097f8:	e0c0      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80097fa:	bf00      	nop
        break;
 80097fc:	e0be      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80097fe:	4b53      	ldr	r3, [pc, #332]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009804:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009810:	d02c      	beq.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009818:	d833      	bhi.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009820:	d01a      	beq.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009828:	d82b      	bhi.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009836:	d004      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8009838:	e023      	b.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800983a:	f7fe fed5 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800983e:	61f8      	str	r0, [r7, #28]
          break;
 8009840:	e026      	b.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009842:	4b42      	ldr	r3, [pc, #264]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b02      	cmp	r3, #2
 800984e:	d11a      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8009850:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009854:	61fb      	str	r3, [r7, #28]
          break;
 8009856:	e016      	b.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009858:	4b3c      	ldr	r3, [pc, #240]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009864:	d111      	bne.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8009866:	4b3a      	ldr	r3, [pc, #232]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009868:	61fb      	str	r3, [r7, #28]
          break;
 800986a:	e00e      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800986c:	4b37      	ldr	r3, [pc, #220]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800986e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b02      	cmp	r3, #2
 8009878:	d109      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800987a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800987e:	61fb      	str	r3, [r7, #28]
          break;
 8009880:	e005      	b.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8009882:	bf00      	nop
 8009884:	e07a      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009886:	bf00      	nop
 8009888:	e078      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800988a:	bf00      	nop
 800988c:	e076      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800988e:	bf00      	nop
        break;
 8009890:	e074      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009892:	4b2e      	ldr	r3, [pc, #184]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009898:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098a4:	d02c      	beq.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098ac:	d833      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098b4:	d01a      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098bc:	d82b      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ca:	d004      	beq.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80098cc:	e023      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80098ce:	f7fe fe8b 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 80098d2:	61f8      	str	r0, [r7, #28]
          break;
 80098d4:	e026      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80098d6:	4b1d      	ldr	r3, [pc, #116]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80098d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d11a      	bne.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80098e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80098e8:	61fb      	str	r3, [r7, #28]
          break;
 80098ea:	e016      	b.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098ec:	4b17      	ldr	r3, [pc, #92]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f8:	d111      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80098fc:	61fb      	str	r3, [r7, #28]
          break;
 80098fe:	e00e      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009900:	4b12      	ldr	r3, [pc, #72]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b02      	cmp	r3, #2
 800990c:	d109      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800990e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009912:	61fb      	str	r3, [r7, #28]
          break;
 8009914:	e005      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8009916:	bf00      	nop
 8009918:	e030      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800991a:	bf00      	nop
 800991c:	e02e      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800991e:	bf00      	nop
 8009920:	e02c      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009922:	bf00      	nop
        break;
 8009924:	e02a      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800992c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d009      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8009940:	e012      	b.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009942:	f7fe fe51 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 8009946:	61f8      	str	r0, [r7, #28]
          break;
 8009948:	e00e      	b.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800994a:	bf00      	nop
 800994c:	40021000 	.word	0x40021000
 8009950:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009954:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009960:	d101      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8009962:	4b0a      	ldr	r3, [pc, #40]	; (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8009964:	61fb      	str	r3, [r7, #28]
          break;
 8009966:	bf00      	nop
        break;
 8009968:	e008      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800996a:	bf00      	nop
 800996c:	e006      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800996e:	bf00      	nop
 8009970:	e004      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009972:	bf00      	nop
 8009974:	e002      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009976:	bf00      	nop
 8009978:	e000      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800997a:	bf00      	nop
    }
  }

  return(frequency);
 800997c:	69fb      	ldr	r3, [r7, #28]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40021000 	.word	0x40021000
 800998c:	00f42400 	.word	0x00f42400

08009990 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800999e:	4b75      	ldr	r3, [pc, #468]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d018      	beq.n	80099dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80099aa:	4b72      	ldr	r3, [pc, #456]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0203 	and.w	r2, r3, #3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d10d      	bne.n	80099d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
       ||
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80099c2:	4b6c      	ldr	r3, [pc, #432]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	091b      	lsrs	r3, r3, #4
 80099c8:	f003 0307 	and.w	r3, r3, #7
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
       ||
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d047      	beq.n	8009a66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	73fb      	strb	r3, [r7, #15]
 80099da:	e044      	b.n	8009a66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d018      	beq.n	8009a16 <RCCEx_PLLSAI1_Config+0x86>
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d825      	bhi.n	8009a34 <RCCEx_PLLSAI1_Config+0xa4>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d002      	beq.n	80099f2 <RCCEx_PLLSAI1_Config+0x62>
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d009      	beq.n	8009a04 <RCCEx_PLLSAI1_Config+0x74>
 80099f0:	e020      	b.n	8009a34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099f2:	4b60      	ldr	r3, [pc, #384]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d11d      	bne.n	8009a3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a02:	e01a      	b.n	8009a3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a04:	4b5b      	ldr	r3, [pc, #364]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d116      	bne.n	8009a3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a14:	e013      	b.n	8009a3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a16:	4b57      	ldr	r3, [pc, #348]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10f      	bne.n	8009a42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a22:	4b54      	ldr	r3, [pc, #336]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d109      	bne.n	8009a42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a32:	e006      	b.n	8009a42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
      break;
 8009a38:	e004      	b.n	8009a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009a3a:	bf00      	nop
 8009a3c:	e002      	b.n	8009a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009a3e:	bf00      	nop
 8009a40:	e000      	b.n	8009a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10d      	bne.n	8009a66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009a4a:	4b4a      	ldr	r3, [pc, #296]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	4944      	ldr	r1, [pc, #272]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d17d      	bne.n	8009b68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009a6c:	4b41      	ldr	r3, [pc, #260]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a40      	ldr	r2, [pc, #256]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a78:	f7f9 fe8e 	bl	8003798 <HAL_GetTick>
 8009a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a7e:	e009      	b.n	8009a94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a80:	f7f9 fe8a 	bl	8003798 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d902      	bls.n	8009a94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	73fb      	strb	r3, [r7, #15]
        break;
 8009a92:	e005      	b.n	8009aa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a94:	4b37      	ldr	r3, [pc, #220]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1ef      	bne.n	8009a80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d160      	bne.n	8009b68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d111      	bne.n	8009ad0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009aac:	4b31      	ldr	r3, [pc, #196]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6892      	ldr	r2, [r2, #8]
 8009abc:	0211      	lsls	r1, r2, #8
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	68d2      	ldr	r2, [r2, #12]
 8009ac2:	0912      	lsrs	r2, r2, #4
 8009ac4:	0452      	lsls	r2, r2, #17
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	492a      	ldr	r1, [pc, #168]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	610b      	str	r3, [r1, #16]
 8009ace:	e027      	b.n	8009b20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d112      	bne.n	8009afc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ad6:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	6892      	ldr	r2, [r2, #8]
 8009ae6:	0211      	lsls	r1, r2, #8
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6912      	ldr	r2, [r2, #16]
 8009aec:	0852      	lsrs	r2, r2, #1
 8009aee:	3a01      	subs	r2, #1
 8009af0:	0552      	lsls	r2, r2, #21
 8009af2:	430a      	orrs	r2, r1
 8009af4:	491f      	ldr	r1, [pc, #124]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	610b      	str	r3, [r1, #16]
 8009afa:	e011      	b.n	8009b20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009afc:	4b1d      	ldr	r3, [pc, #116]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6892      	ldr	r2, [r2, #8]
 8009b0c:	0211      	lsls	r1, r2, #8
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6952      	ldr	r2, [r2, #20]
 8009b12:	0852      	lsrs	r2, r2, #1
 8009b14:	3a01      	subs	r2, #1
 8009b16:	0652      	lsls	r2, r2, #25
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	4916      	ldr	r1, [pc, #88]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009b20:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b2c:	f7f9 fe34 	bl	8003798 <HAL_GetTick>
 8009b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009b32:	e009      	b.n	8009b48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b34:	f7f9 fe30 	bl	8003798 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d902      	bls.n	8009b48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	73fb      	strb	r3, [r7, #15]
          break;
 8009b46:	e005      	b.n	8009b54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0ef      	beq.n	8009b34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009b5a:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b5c:	691a      	ldr	r2, [r3, #16]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	4904      	ldr	r1, [pc, #16]	; (8009b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40021000 	.word	0x40021000

08009b78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009b86:	4b6a      	ldr	r3, [pc, #424]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d018      	beq.n	8009bc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009b92:	4b67      	ldr	r3, [pc, #412]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f003 0203 	and.w	r2, r3, #3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d10d      	bne.n	8009bbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009baa:	4b61      	ldr	r3, [pc, #388]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	091b      	lsrs	r3, r3, #4
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d047      	beq.n	8009c4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	73fb      	strb	r3, [r7, #15]
 8009bc2:	e044      	b.n	8009c4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d018      	beq.n	8009bfe <RCCEx_PLLSAI2_Config+0x86>
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d825      	bhi.n	8009c1c <RCCEx_PLLSAI2_Config+0xa4>
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d002      	beq.n	8009bda <RCCEx_PLLSAI2_Config+0x62>
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d009      	beq.n	8009bec <RCCEx_PLLSAI2_Config+0x74>
 8009bd8:	e020      	b.n	8009c1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009bda:	4b55      	ldr	r3, [pc, #340]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d11d      	bne.n	8009c22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009bea:	e01a      	b.n	8009c22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009bec:	4b50      	ldr	r3, [pc, #320]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d116      	bne.n	8009c26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009bfc:	e013      	b.n	8009c26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009bfe:	4b4c      	ldr	r3, [pc, #304]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10f      	bne.n	8009c2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009c0a:	4b49      	ldr	r3, [pc, #292]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c1a:	e006      	b.n	8009c2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c20:	e004      	b.n	8009c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c22:	bf00      	nop
 8009c24:	e002      	b.n	8009c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c26:	bf00      	nop
 8009c28:	e000      	b.n	8009c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009c32:	4b3f      	ldr	r3, [pc, #252]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6819      	ldr	r1, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	430b      	orrs	r3, r1
 8009c48:	4939      	ldr	r1, [pc, #228]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d167      	bne.n	8009d24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009c54:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a35      	ldr	r2, [pc, #212]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c60:	f7f9 fd9a 	bl	8003798 <HAL_GetTick>
 8009c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009c66:	e009      	b.n	8009c7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009c68:	f7f9 fd96 	bl	8003798 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d902      	bls.n	8009c7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	73fb      	strb	r3, [r7, #15]
        break;
 8009c7a:	e005      	b.n	8009c88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009c7c:	4b2c      	ldr	r3, [pc, #176]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1ef      	bne.n	8009c68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d14a      	bne.n	8009d24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d111      	bne.n	8009cb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009c94:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6892      	ldr	r2, [r2, #8]
 8009ca4:	0211      	lsls	r1, r2, #8
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	68d2      	ldr	r2, [r2, #12]
 8009caa:	0912      	lsrs	r2, r2, #4
 8009cac:	0452      	lsls	r2, r2, #17
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	491f      	ldr	r1, [pc, #124]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	614b      	str	r3, [r1, #20]
 8009cb6:	e011      	b.n	8009cdc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6892      	ldr	r2, [r2, #8]
 8009cc8:	0211      	lsls	r1, r2, #8
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6912      	ldr	r2, [r2, #16]
 8009cce:	0852      	lsrs	r2, r2, #1
 8009cd0:	3a01      	subs	r2, #1
 8009cd2:	0652      	lsls	r2, r2, #25
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	4916      	ldr	r1, [pc, #88]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce8:	f7f9 fd56 	bl	8003798 <HAL_GetTick>
 8009cec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009cee:	e009      	b.n	8009d04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009cf0:	f7f9 fd52 	bl	8003798 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d902      	bls.n	8009d04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	73fb      	strb	r3, [r7, #15]
          break;
 8009d02:	e005      	b.n	8009d10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009d04:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0ef      	beq.n	8009cf0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	4904      	ldr	r1, [pc, #16]	; (8009d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	40021000 	.word	0x40021000

08009d34 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b089      	sub	sp, #36	; 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d50:	d10c      	bne.n	8009d6c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009d52:	4b6e      	ldr	r3, [pc, #440]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009d5c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d64:	d112      	bne.n	8009d8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009d66:	4b6a      	ldr	r3, [pc, #424]	; (8009f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	e00f      	b.n	8009d8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d72:	d10b      	bne.n	8009d8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009d74:	4b65      	ldr	r3, [pc, #404]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009d7e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d86:	d101      	bne.n	8009d8c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009d88:	4b61      	ldr	r3, [pc, #388]	; (8009f10 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009d8a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 80b4 	bne.w	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d9e:	d003      	beq.n	8009da8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009da6:	d135      	bne.n	8009e14 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009da8:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009db4:	f040 80a1 	bne.w	8009efa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8009db8:	4b54      	ldr	r3, [pc, #336]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 809a 	beq.w	8009efa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009dc6:	4b51      	ldr	r3, [pc, #324]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	091b      	lsrs	r3, r3, #4
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009dda:	4b4c      	ldr	r3, [pc, #304]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009de4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009dec:	4b47      	ldr	r3, [pc, #284]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009df8:	2311      	movs	r3, #17
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e001      	b.n	8009e02 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8009dfe:	2307      	movs	r3, #7
 8009e00:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	fb03 f202 	mul.w	r2, r3, r2
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e10:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009e12:	e072      	b.n	8009efa <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d133      	bne.n	8009e82 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009e1a:	4b3c      	ldr	r3, [pc, #240]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e26:	d169      	bne.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009e28:	4b38      	ldr	r3, [pc, #224]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d063      	beq.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e34:	4b35      	ldr	r3, [pc, #212]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	091b      	lsrs	r3, r3, #4
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	3301      	adds	r3, #1
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e46:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009e48:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	0a1b      	lsrs	r3, r3, #8
 8009e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e52:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009e5a:	4b2c      	ldr	r3, [pc, #176]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8009e66:	2311      	movs	r3, #17
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e001      	b.n	8009e70 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009e6c:	2307      	movs	r3, #7
 8009e6e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	fb03 f202 	mul.w	r2, r3, r2
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	e03c      	b.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e88:	d003      	beq.n	8009e92 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e90:	d134      	bne.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009e92:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e9e:	d12d      	bne.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009ea0:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d027      	beq.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009eac:	4b17      	ldr	r3, [pc, #92]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	091b      	lsrs	r3, r3, #4
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009ec0:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009ed2:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8009ede:	2311      	movs	r3, #17
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	e001      	b.n	8009ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8009ee4:	2307      	movs	r3, #7
 8009ee6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	fb03 f202 	mul.w	r2, r3, r2
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	e000      	b.n	8009efc <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009efa:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009efc:	69fb      	ldr	r3, [r7, #28]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3724      	adds	r7, #36	; 0x24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40021000 	.word	0x40021000
 8009f10:	001fff68 	.word	0x001fff68

08009f14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d06c      	beq.n	800a000 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7f7 f9c8 	bl	80012d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	22ca      	movs	r2, #202	; 0xca
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2253      	movs	r2, #83	; 0x53
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f87c 	bl	800a056 <RTC_EnterInitMode>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d14b      	bne.n	800a000 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6812      	ldr	r2, [r2, #0]
 8009f72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f7a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6899      	ldr	r1, [r3, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	68d2      	ldr	r2, [r2, #12]
 8009fa2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6919      	ldr	r1, [r3, #16]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	041a      	lsls	r2, r3, #16
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f87f 	bl	800a0bc <RTC_ExitInitMode>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11b      	bne.n	800a000 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0203 	bic.w	r2, r2, #3
 8009fd6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69da      	ldr	r2, [r3, #28]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a020:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a022:	f7f9 fbb9 	bl	8003798 <HAL_GetTick>
 800a026:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a028:	e009      	b.n	800a03e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a02a:	f7f9 fbb5 	bl	8003798 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a038:	d901      	bls.n	800a03e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e007      	b.n	800a04e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0ee      	beq.n	800a02a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d120      	bne.n	800a0b2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a07a:	f7f9 fb8d 	bl	8003798 <HAL_GetTick>
 800a07e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a080:	e00d      	b.n	800a09e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a082:	f7f9 fb89 	bl	8003798 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a090:	d905      	bls.n	800a09e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2203      	movs	r2, #3
 800a09a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <RTC_EnterInitMode+0x5c>
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d1e7      	bne.n	800a082 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	4a19      	ldr	r2, [pc, #100]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a0ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0d2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a0d4:	4b17      	ldr	r3, [pc, #92]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10c      	bne.n	800a0fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ff92 	bl	800a00a <HAL_RTC_WaitForSynchro>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01e      	beq.n	800a12a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	e017      	b.n	800a12a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a0fa:	4b0e      	ldr	r3, [pc, #56]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	4a0d      	ldr	r2, [pc, #52]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a100:	f023 0320 	bic.w	r3, r3, #32
 800a104:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff ff7f 	bl	800a00a <HAL_RTC_WaitForSynchro>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	4a04      	ldr	r2, [pc, #16]	; (800a134 <RTC_ExitInitMode+0x78>)
 800a124:	f043 0320 	orr.w	r3, r3, #32
 800a128:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40002800 	.word	0x40002800

0800a138 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d904      	bls.n	800a156 <HAL_SAI_InitProtocol+0x1e>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	3b03      	subs	r3, #3
 800a150:	2b01      	cmp	r3, #1
 800a152:	d812      	bhi.n	800a17a <HAL_SAI_InitProtocol+0x42>
 800a154:	e008      	b.n	800a168 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 fc9d 	bl	800aa9c <SAI_InitI2S>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
      break;
 800a166:	e00b      	b.n	800a180 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 fd46 	bl	800ac00 <SAI_InitPCM>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
      break;
 800a178:	e002      	b.n	800a180 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
      break;
 800a17e:	bf00      	nop
  }

  if (status == HAL_OK)
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 f808 	bl	800a19c <HAL_SAI_Init>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e155      	b.n	800a45a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d106      	bne.n	800a1c8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7f7 f91c 	bl	8001400 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fdd3 	bl	800ad74 <SAI_Disable>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e140      	b.n	800a45a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d00c      	beq.n	800a202 <HAL_SAI_Init+0x66>
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d80d      	bhi.n	800a208 <HAL_SAI_Init+0x6c>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <HAL_SAI_Init+0x5a>
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d003      	beq.n	800a1fc <HAL_SAI_Init+0x60>
 800a1f4:	e008      	b.n	800a208 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
      break;
 800a1fa:	e008      	b.n	800a20e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	61fb      	str	r3, [r7, #28]
      break;
 800a200:	e005      	b.n	800a20e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a202:	2320      	movs	r3, #32
 800a204:	61fb      	str	r3, [r7, #28]
      break;
 800a206:	e002      	b.n	800a20e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	61fb      	str	r3, [r7, #28]
      break;
 800a20c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	2b03      	cmp	r3, #3
 800a214:	d81d      	bhi.n	800a252 <HAL_SAI_Init+0xb6>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <HAL_SAI_Init+0x80>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a22d 	.word	0x0800a22d
 800a220:	0800a233 	.word	0x0800a233
 800a224:	0800a23b 	.word	0x0800a23b
 800a228:	0800a243 	.word	0x0800a243
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]
      break;
 800a230:	e012      	b.n	800a258 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a236:	617b      	str	r3, [r7, #20]
      break;
 800a238:	e00e      	b.n	800a258 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a23a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a23e:	617b      	str	r3, [r7, #20]
      break;
 800a240:	e00a      	b.n	800a258 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a246:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	61fb      	str	r3, [r7, #28]
      break;
 800a250:	e002      	b.n	800a258 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]
      break;
 800a256:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a81      	ldr	r2, [pc, #516]	; (800a464 <HAL_SAI_Init+0x2c8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d004      	beq.n	800a26c <HAL_SAI_Init+0xd0>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a80      	ldr	r2, [pc, #512]	; (800a468 <HAL_SAI_Init+0x2cc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d103      	bne.n	800a274 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800a26c:	4a7f      	ldr	r2, [pc, #508]	; (800a46c <HAL_SAI_Init+0x2d0>)
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e002      	b.n	800a27a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a274:	4a7e      	ldr	r2, [pc, #504]	; (800a470 <HAL_SAI_Init+0x2d4>)
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d041      	beq.n	800a306 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a77      	ldr	r2, [pc, #476]	; (800a464 <HAL_SAI_Init+0x2c8>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d004      	beq.n	800a296 <HAL_SAI_Init+0xfa>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a75      	ldr	r2, [pc, #468]	; (800a468 <HAL_SAI_Init+0x2cc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d105      	bne.n	800a2a2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a296:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a29a:	f7fe fe0b 	bl	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a29e:	6138      	str	r0, [r7, #16]
 800a2a0:	e004      	b.n	800a2ac <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a2a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a2a6:	f7fe fe05 	bl	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2aa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4a6b      	ldr	r2, [pc, #428]	; (800a474 <HAL_SAI_Init+0x2d8>)
 800a2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2cc:	08da      	lsrs	r2, r3, #3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a2d2:	68f9      	ldr	r1, [r7, #12]
 800a2d4:	4b67      	ldr	r3, [pc, #412]	; (800a474 <HAL_SAI_Init+0x2d8>)
 800a2d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a2da:	08da      	lsrs	r2, r3, #3
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	1aca      	subs	r2, r1, r3
 800a2e6:	2a08      	cmp	r2, #8
 800a2e8:	d904      	bls.n	800a2f4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d104      	bne.n	800a306 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	085a      	lsrs	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_SAI_Init+0x17a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d109      	bne.n	800a32a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_SAI_Init+0x186>
 800a31e:	2300      	movs	r3, #0
 800a320:	e001      	b.n	800a326 <HAL_SAI_Init+0x18a>
 800a322:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	e008      	b.n	800a33c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d102      	bne.n	800a338 <HAL_SAI_Init+0x19c>
 800a332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a336:	e000      	b.n	800a33a <HAL_SAI_Init+0x19e>
 800a338:	2300      	movs	r3, #0
 800a33a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6819      	ldr	r1, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4b4c      	ldr	r3, [pc, #304]	; (800a478 <HAL_SAI_Init+0x2dc>)
 800a348:	400b      	ands	r3, r1
 800a34a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a360:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	431a      	orrs	r2, r3
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800a374:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a380:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	051b      	lsls	r3, r3, #20
 800a388:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a3a0:	f023 030f 	bic.w	r3, r3, #15
 800a3a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6859      	ldr	r1, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699a      	ldr	r2, [r3, #24]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6899      	ldr	r1, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4b2b      	ldr	r3, [pc, #172]	; (800a47c <HAL_SAI_Init+0x2e0>)
 800a3d0:	400b      	ands	r3, r1
 800a3d2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6899      	ldr	r1, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a3ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a3f0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a3fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68d9      	ldr	r1, [r3, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a412:	400b      	ands	r3, r1
 800a414:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68d9      	ldr	r1, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a424:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a42c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a432:	3b01      	subs	r3, #1
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	40015404 	.word	0x40015404
 800a468:	40015424 	.word	0x40015424
 800a46c:	40015400 	.word	0x40015400
 800a470:	40015800 	.word	0x40015800
 800a474:	cccccccd 	.word	0xcccccccd
 800a478:	ff05c010 	.word	0xff05c010
 800a47c:	fff88000 	.word	0xfff88000

0800a480 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_SAI_DMAStop+0x1a>
 800a496:	2302      	movs	r3, #2
 800a498:	e042      	b.n	800a520 <HAL_SAI_DMAStop+0xa0>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a4b0:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b12      	cmp	r3, #18
 800a4bc:	d108      	bne.n	800a4d0 <HAL_SAI_DMAStop+0x50>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d004      	beq.n	800a4d0 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fb f996 	bl	80057fc <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b22      	cmp	r3, #34	; 0x22
 800a4da:	d108      	bne.n	800a4ee <HAL_SAI_DMAStop+0x6e>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d004      	beq.n	800a4ee <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fb f987 	bl	80057fc <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc40 	bl	800ad74 <SAI_Disable>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f042 0208 	orr.w	r2, r2, #8
 800a50c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d101      	bne.n	800a542 <HAL_SAI_Abort+0x1a>
 800a53e:	2302      	movs	r3, #2
 800a540:	e053      	b.n	800a5ea <HAL_SAI_Abort+0xc2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a558:	d125      	bne.n	800a5a6 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a568:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b12      	cmp	r3, #18
 800a574:	d108      	bne.n	800a588 <HAL_SAI_Abort+0x60>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a582:	4618      	mov	r0, r3
 800a584:	f7fb f93a 	bl	80057fc <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b22      	cmp	r3, #34	; 0x22
 800a592:	d108      	bne.n	800a5a6 <HAL_SAI_Abort+0x7e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fb f92b 	bl	80057fc <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b6:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fbdb 	bl	800ad74 <SAI_Disable>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0208 	orr.w	r2, r2, #8
 800a5d6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a602:	f7f9 f8c9 	bl	8003798 <HAL_GetTick>
 800a606:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <HAL_SAI_Transmit_DMA+0x20>
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e093      	b.n	800a740 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	f040 808c 	bne.w	800a73e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_SAI_Transmit_DMA+0x40>
 800a630:	2302      	movs	r3, #2
 800a632:	e085      	b.n	800a740 <HAL_SAI_Transmit_DMA+0x14c>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	88fa      	ldrh	r2, [r7, #6]
 800a646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	88fa      	ldrh	r2, [r7, #6]
 800a64e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2212      	movs	r2, #18
 800a65e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a666:	4a38      	ldr	r2, [pc, #224]	; (800a748 <HAL_SAI_Transmit_DMA+0x154>)
 800a668:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a66e:	4a37      	ldr	r2, [pc, #220]	; (800a74c <HAL_SAI_Transmit_DMA+0x158>)
 800a670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a676:	4a36      	ldr	r2, [pc, #216]	; (800a750 <HAL_SAI_Transmit_DMA+0x15c>)
 800a678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a67e:	2200      	movs	r2, #0
 800a680:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a68a:	4619      	mov	r1, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	331c      	adds	r3, #28
 800a692:	461a      	mov	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a69a:	f7fb f84f 	bl	800573c <HAL_DMA_Start_IT>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e047      	b.n	800a740 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fb26 	bl	800ad04 <SAI_InterruptFlag>
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a6d6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a6d8:	e015      	b.n	800a706 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a6da:	f7f9 f85d 	bl	8003798 <HAL_GetTick>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6e8:	d90d      	bls.n	800a706 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	e01c      	b.n	800a740 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0e2      	beq.n	800a6da <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d107      	bne.n	800a732 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a730:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e000      	b.n	800a740 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800a73e:	2302      	movs	r3, #2
  }
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	0800ae47 	.word	0x0800ae47
 800a74c:	0800ade9 	.word	0x0800ade9
 800a750:	0800ae63 	.word	0x0800ae63

0800a754 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8192 	beq.w	800aa8e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f003 0308 	and.w	r3, r3, #8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <HAL_SAI_IRQHandler+0x4c>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
 800a79e:	e176      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01e      	beq.n	800a7e8 <HAL_SAI_IRQHandler+0x94>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d019      	beq.n	800a7e8 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b22      	cmp	r3, #34	; 0x22
 800a7c6:	d101      	bne.n	800a7cc <HAL_SAI_IRQHandler+0x78>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e000      	b.n	800a7ce <HAL_SAI_IRQHandler+0x7a>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7f7 fd93 	bl	800230c <HAL_SAI_ErrorCallback>
 800a7e6:	e152      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d011      	beq.n	800a816 <HAL_SAI_IRQHandler+0xc2>
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00c      	beq.n	800a816 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2202      	movs	r2, #2
 800a802:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 8140 	beq.w	800aa8e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a812:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a814:	e13b      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d055      	beq.n	800a8cc <HAL_SAI_IRQHandler+0x178>
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f003 0320 	and.w	r3, r3, #32
 800a826:	2b00      	cmp	r3, #0
 800a828:	d050      	beq.n	800a8cc <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2220      	movs	r2, #32
 800a830:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a838:	f043 0204 	orr.w	r2, r3, #4
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d038      	beq.n	800a8be <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d016      	beq.n	800a882 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a858:	4a8f      	ldr	r2, [pc, #572]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a85a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a860:	4618      	mov	r0, r3
 800a862:	f7fb f809 	bl	8005878 <HAL_DMA_Abort_IT>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00a      	beq.n	800a882 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a872:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7f7 fd45 	bl	800230c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80fc 	beq.w	800aa84 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a890:	4a81      	ldr	r2, [pc, #516]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a892:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fa ffed 	bl	8005878 <HAL_DMA_Abort_IT>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80ef 	beq.w	800aa84 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7f7 fd28 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8bc:	e0e2      	b.n	800aa84 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff fe32 	bl	800a528 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7f7 fd21 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8ca:	e0db      	b.n	800aa84 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d055      	beq.n	800a982 <HAL_SAI_IRQHandler+0x22e>
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d050      	beq.n	800a982 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2240      	movs	r2, #64	; 0x40
 800a8e6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ee:	f043 0208 	orr.w	r2, r3, #8
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d038      	beq.n	800a974 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d016      	beq.n	800a938 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90e:	4a62      	ldr	r2, [pc, #392]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a910:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a916:	4618      	mov	r0, r3
 800a918:	f7fa ffae 	bl	8005878 <HAL_DMA_Abort_IT>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00a      	beq.n	800a938 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7f7 fcea 	bl	800230c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80a3 	beq.w	800aa88 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a946:	4a54      	ldr	r2, [pc, #336]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a948:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fa ff92 	bl	8005878 <HAL_DMA_Abort_IT>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 8096 	beq.w	800aa88 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a962:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7f7 fccd 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a972:	e089      	b.n	800aa88 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff fdd7 	bl	800a528 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7f7 fcc6 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a980:	e082      	b.n	800aa88 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d061      	beq.n	800aa50 <HAL_SAI_IRQHandler+0x2fc>
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d05c      	beq.n	800aa50 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2204      	movs	r2, #4
 800a99c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a4:	f043 0220 	orr.w	r2, r3, #32
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d036      	beq.n	800aa26 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d016      	beq.n	800a9ee <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c4:	4a34      	ldr	r2, [pc, #208]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fa ff53 	bl	8005878 <HAL_DMA_Abort_IT>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7f7 fc8f 	bl	800230c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d04a      	beq.n	800aa8c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	4a27      	ldr	r2, [pc, #156]	; (800aa98 <HAL_SAI_IRQHandler+0x344>)
 800a9fc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fa ff38 	bl	8005878 <HAL_DMA_Abort_IT>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d03e      	beq.n	800aa8c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f7 fc74 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa24:	e032      	b.n	800aa8c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f04f 32ff 	mov.w	r2, #4294967295
 800aa36:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7f7 fc5f 	bl	800230c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa4e:	e01d      	b.n	800aa8c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f003 0310 	and.w	r3, r3, #16
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d019      	beq.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d014      	beq.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2210      	movs	r2, #16
 800aa6a:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa72:	f043 0210 	orr.w	r2, r3, #16
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7f7 fc45 	bl	800230c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800aa82:	e004      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa84:	bf00      	nop
 800aa86:	e002      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa88:	bf00      	nop
 800aa8a:	e000      	b.n	800aa8e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa8c:	bf00      	nop
}
 800aa8e:	bf00      	nop
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	0800aeb5 	.word	0x0800aeb5

0800aa9c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <SAI_InitI2S+0x2e>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d103      	bne.n	800aad2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	63da      	str	r2, [r3, #60]	; 0x3c
 800aad0:	e002      	b.n	800aad8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aade:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aae6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e077      	b.n	800abf2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d107      	bne.n	800ab18 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ab14:	651a      	str	r2, [r3, #80]	; 0x50
 800ab16:	e006      	b.n	800ab26 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d84f      	bhi.n	800abcc <SAI_InitI2S+0x130>
 800ab2c:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <SAI_InitI2S+0x98>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab67 	.word	0x0800ab67
 800ab3c:	0800ab89 	.word	0x0800ab89
 800ab40:	0800abab 	.word	0x0800abab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2280      	movs	r2, #128	; 0x80
 800ab48:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	085b      	lsrs	r3, r3, #1
 800ab58:	011a      	lsls	r2, r3, #4
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2240      	movs	r2, #64	; 0x40
 800ab62:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ab64:	e035      	b.n	800abd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2280      	movs	r2, #128	; 0x80
 800ab6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	019a      	lsls	r2, r3, #6
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	085b      	lsrs	r3, r3, #1
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2280      	movs	r2, #128	; 0x80
 800ab84:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ab86:	e024      	b.n	800abd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	22c0      	movs	r2, #192	; 0xc0
 800ab8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	019a      	lsls	r2, r3, #6
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	085b      	lsrs	r3, r3, #1
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2280      	movs	r2, #128	; 0x80
 800aba6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800aba8:	e013      	b.n	800abd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22e0      	movs	r2, #224	; 0xe0
 800abae:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	085b      	lsrs	r3, r3, #1
 800abb4:	019a      	lsls	r2, r3, #6
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	085b      	lsrs	r3, r3, #1
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2280      	movs	r2, #128	; 0x80
 800abc8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800abca:	e002      	b.n	800abd2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	75fb      	strb	r3, [r7, #23]
      break;
 800abd0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d10b      	bne.n	800abf0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d102      	bne.n	800abe4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2210      	movs	r2, #16
 800abe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d102      	bne.n	800abf0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2208      	movs	r2, #8
 800abee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	371c      	adds	r7, #28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop

0800ac00 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <SAI_InitPCM+0x2e>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d103      	bne.n	800ac36 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2201      	movs	r2, #1
 800ac32:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac34:	e002      	b.n	800ac3c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ac48:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ac50:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac64:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d103      	bne.n	800ac74 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	645a      	str	r2, [r3, #68]	; 0x44
 800ac72:	e002      	b.n	800ac7a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	220d      	movs	r2, #13
 800ac78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d837      	bhi.n	800acf0 <SAI_InitPCM+0xf0>
 800ac80:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <SAI_InitPCM+0x88>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800acaf 	.word	0x0800acaf
 800ac90:	0800acc5 	.word	0x0800acc5
 800ac94:	0800acdb 	.word	0x0800acdb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2280      	movs	r2, #128	; 0x80
 800ac9c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	011a      	lsls	r2, r3, #4
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2240      	movs	r2, #64	; 0x40
 800acaa:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800acac:	e023      	b.n	800acf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2280      	movs	r2, #128	; 0x80
 800acb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2280      	movs	r2, #128	; 0x80
 800acc0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800acc2:	e018      	b.n	800acf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	22c0      	movs	r2, #192	; 0xc0
 800acc8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2280      	movs	r2, #128	; 0x80
 800acd6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800acd8:	e00d      	b.n	800acf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	22e0      	movs	r2, #224	; 0xe0
 800acde:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2280      	movs	r2, #128	; 0x80
 800acec:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800acee:	e002      	b.n	800acf6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	75fb      	strb	r3, [r7, #23]
      break;
 800acf4:	bf00      	nop
  }

  return status;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d103      	bne.n	800ad22 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f043 0308 	orr.w	r3, r3, #8
 800ad20:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d10b      	bne.n	800ad42 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d003      	beq.n	800ad3a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d103      	bne.n	800ad42 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f043 0310 	orr.w	r3, r3, #16
 800ad40:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d003      	beq.n	800ad52 <SAI_InterruptFlag+0x4e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d104      	bne.n	800ad5c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e003      	b.n	800ad64 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f043 0304 	orr.w	r3, r3, #4
 800ad62:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ad7c:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <SAI_Disable+0x6c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a18      	ldr	r2, [pc, #96]	; (800ade4 <SAI_Disable+0x70>)
 800ad82:	fba2 2303 	umull	r2, r3, r2, r3
 800ad86:	0b1b      	lsrs	r3, r3, #12
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	72fb      	strb	r3, [r7, #11]
      break;
 800adba:	e009      	b.n	800add0 <SAI_Disable+0x5c>
    }
    count--;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e7      	bne.n	800ada0 <SAI_Disable+0x2c>

  return status;
 800add0:	7afb      	ldrb	r3, [r7, #11]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	20000044 	.word	0x20000044
 800ade4:	95cbec1b 	.word	0x95cbec1b

0800ade8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d01c      	beq.n	800ae38 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae14:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ae16:	2100      	movs	r1, #0
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff ff73 	bl	800ad04 <SAI_InterruptFlag>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	43d9      	mvns	r1, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	400a      	ands	r2, r1
 800ae2e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7f7 fa43 	bl	80022c4 <HAL_SAI_TxCpltCallback>
#endif
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae52:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7f7 fa47 	bl	80022e8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae8e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff ff6f 	bl	800ad74 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7f7 fa30 	bl	800230c <HAL_SAI_ErrorCallback>
#endif
}
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aed0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2200      	movs	r2, #0
 800aed8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f04f 32ff 	mov.w	r2, #4294967295
 800aee2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	d00a      	beq.n	800af04 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff ff40 	bl	800ad74 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f042 0208 	orr.w	r2, r2, #8
 800af02:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7f7 f9f9 	bl	800230c <HAL_SAI_ErrorCallback>
#endif
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e040      	b.n	800afb6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7f6 f9f5 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2224      	movs	r2, #36	; 0x24
 800af4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fb2f 	bl	800b5c4 <UART_SetConfig>
 800af66:	4603      	mov	r3, r0
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e022      	b.n	800afb6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fddb 	bl	800bb34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f042 0201 	orr.w	r2, r2, #1
 800afac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fe62 	bl	800bc78 <UART_CheckIdleState>
 800afb4:	4603      	mov	r3, r0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b0ba      	sub	sp, #232	; 0xe8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800afea:	f640 030f 	movw	r3, #2063	; 0x80f
 800afee:	4013      	ands	r3, r2
 800aff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d115      	bne.n	800b028 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800affc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00f      	beq.n	800b028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 82a6 	beq.w	800b56a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
      }
      return;
 800b026:	e2a0      	b.n	800b56a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8117 	beq.w	800b260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b03e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b042:	4b85      	ldr	r3, [pc, #532]	; (800b258 <HAL_UART_IRQHandler+0x298>)
 800b044:	4013      	ands	r3, r2
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 810a 	beq.w	800b260 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d011      	beq.n	800b07c <HAL_UART_IRQHandler+0xbc>
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b072:	f043 0201 	orr.w	r2, r3, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d011      	beq.n	800b0ac <HAL_UART_IRQHandler+0xec>
 800b088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2202      	movs	r2, #2
 800b09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a2:	f043 0204 	orr.w	r2, r3, #4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b0:	f003 0304 	and.w	r3, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d011      	beq.n	800b0dc <HAL_UART_IRQHandler+0x11c>
 800b0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0d2:	f043 0202 	orr.w	r2, r3, #2
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d017      	beq.n	800b118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d105      	bne.n	800b100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2208      	movs	r2, #8
 800b106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b10e:	f043 0208 	orr.w	r2, r3, #8
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b120:	2b00      	cmp	r3, #0
 800b122:	d012      	beq.n	800b14a <HAL_UART_IRQHandler+0x18a>
 800b124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00c      	beq.n	800b14a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b140:	f043 0220 	orr.w	r2, r3, #32
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 820c 	beq.w	800b56e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00d      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d007      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b192:	2b40      	cmp	r3, #64	; 0x40
 800b194:	d005      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b19a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d04f      	beq.n	800b242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fe75 	bl	800be92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b2:	2b40      	cmp	r3, #64	; 0x40
 800b1b4:	d141      	bne.n	800b23a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1f2:	e841 2300 	strex	r3, r2, [r1]
 800b1f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1d9      	bne.n	800b1b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b206:	2b00      	cmp	r3, #0
 800b208:	d013      	beq.n	800b232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20e:	4a13      	ldr	r2, [pc, #76]	; (800b25c <HAL_UART_IRQHandler+0x29c>)
 800b210:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b216:	4618      	mov	r0, r3
 800b218:	f7fa fb2e 	bl	8005878 <HAL_DMA_Abort_IT>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d017      	beq.n	800b252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b230:	e00f      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9b0 	bl	800b598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b238:	e00b      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f9ac 	bl	800b598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b240:	e007      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f9a8 	bl	800b598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b250:	e18d      	b.n	800b56e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b252:	bf00      	nop
    return;
 800b254:	e18b      	b.n	800b56e <HAL_UART_IRQHandler+0x5ae>
 800b256:	bf00      	nop
 800b258:	04000120 	.word	0x04000120
 800b25c:	0800bf59 	.word	0x0800bf59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b264:	2b01      	cmp	r3, #1
 800b266:	f040 8146 	bne.w	800b4f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26e:	f003 0310 	and.w	r3, r3, #16
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 813f 	beq.w	800b4f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27c:	f003 0310 	and.w	r3, r3, #16
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 8138 	beq.w	800b4f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2210      	movs	r2, #16
 800b28c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b298:	2b40      	cmp	r3, #64	; 0x40
 800b29a:	f040 80b4 	bne.w	800b406 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 815f 	beq.w	800b572 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	f080 8157 	bcs.w	800b572 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f040 8085 	bne.w	800b3ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ec:	e853 3f00 	ldrex	r3, [r3]
 800b2f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b30a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b30e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1da      	bne.n	800b2e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3308      	adds	r3, #8
 800b330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b334:	e853 3f00 	ldrex	r3, [r3]
 800b338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b33a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b33c:	f023 0301 	bic.w	r3, r3, #1
 800b340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3308      	adds	r3, #8
 800b34a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b34e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e1      	bne.n	800b32a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3308      	adds	r3, #8
 800b36c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b37c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3308      	adds	r3, #8
 800b386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b38a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b38c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e3      	bne.n	800b366 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b2:	e853 3f00 	ldrex	r3, [r3]
 800b3b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ba:	f023 0310 	bic.w	r3, r3, #16
 800b3be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3d4:	e841 2300 	strex	r3, r2, [r1]
 800b3d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e4      	bne.n	800b3aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fa fa09 	bl	80057fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f8d4 	bl	800b5ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b404:	e0b5      	b.n	800b572 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b412:	b29b      	uxth	r3, r3
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a7 	beq.w	800b576 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80a2 	beq.w	800b576 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b454:	647b      	str	r3, [r7, #68]	; 0x44
 800b456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e4      	bne.n	800b432 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3308      	adds	r3, #8
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	623b      	str	r3, [r7, #32]
   return(result);
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	f023 0301 	bic.w	r3, r3, #1
 800b47e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3308      	adds	r3, #8
 800b488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b48c:	633a      	str	r2, [r7, #48]	; 0x30
 800b48e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e3      	bne.n	800b468 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f023 0310 	bic.w	r3, r3, #16
 800b4c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4d4:	61fb      	str	r3, [r7, #28]
 800b4d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	69b9      	ldr	r1, [r7, #24]
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e4      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f85c 	bl	800b5ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4f4:	e03f      	b.n	800b576 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <HAL_UART_IRQHandler+0x560>
 800b502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d008      	beq.n	800b520 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b516:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fd5d 	bl	800bfd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b51e:	e02d      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b534:	2b00      	cmp	r3, #0
 800b536:	d008      	beq.n	800b54a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01c      	beq.n	800b57a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	4798      	blx	r3
    }
    return;
 800b548:	e017      	b.n	800b57a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d012      	beq.n	800b57c <HAL_UART_IRQHandler+0x5bc>
 800b556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00c      	beq.n	800b57c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fd0e 	bl	800bf84 <UART_EndTransmit_IT>
    return;
 800b568:	e008      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b56a:	bf00      	nop
 800b56c:	e006      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
    return;
 800b56e:	bf00      	nop
 800b570:	e004      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b572:	bf00      	nop
 800b574:	e002      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
      return;
 800b576:	bf00      	nop
 800b578:	e000      	b.n	800b57c <HAL_UART_IRQHandler+0x5bc>
    return;
 800b57a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b57c:	37e8      	adds	r7, #232	; 0xe8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop

0800b584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5c8:	b08a      	sub	sp, #40	; 0x28
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4ba4      	ldr	r3, [pc, #656]	; (800b884 <UART_SetConfig+0x2c0>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	6812      	ldr	r2, [r2, #0]
 800b5fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a99      	ldr	r2, [pc, #612]	; (800b888 <UART_SetConfig+0x2c4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d004      	beq.n	800b630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62c:	4313      	orrs	r3, r2
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b640:	430a      	orrs	r2, r1
 800b642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a90      	ldr	r2, [pc, #576]	; (800b88c <UART_SetConfig+0x2c8>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d126      	bne.n	800b69c <UART_SetConfig+0xd8>
 800b64e:	4b90      	ldr	r3, [pc, #576]	; (800b890 <UART_SetConfig+0x2cc>)
 800b650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b654:	f003 0303 	and.w	r3, r3, #3
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d81b      	bhi.n	800b694 <UART_SetConfig+0xd0>
 800b65c:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <UART_SetConfig+0xa0>)
 800b65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b662:	bf00      	nop
 800b664:	0800b675 	.word	0x0800b675
 800b668:	0800b685 	.word	0x0800b685
 800b66c:	0800b67d 	.word	0x0800b67d
 800b670:	0800b68d 	.word	0x0800b68d
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b67a:	e116      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b67c:	2302      	movs	r3, #2
 800b67e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b682:	e112      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b684:	2304      	movs	r3, #4
 800b686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b68a:	e10e      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b68c:	2308      	movs	r3, #8
 800b68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b692:	e10a      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b694:	2310      	movs	r3, #16
 800b696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b69a:	e106      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a7c      	ldr	r2, [pc, #496]	; (800b894 <UART_SetConfig+0x2d0>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d138      	bne.n	800b718 <UART_SetConfig+0x154>
 800b6a6:	4b7a      	ldr	r3, [pc, #488]	; (800b890 <UART_SetConfig+0x2cc>)
 800b6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ac:	f003 030c 	and.w	r3, r3, #12
 800b6b0:	2b0c      	cmp	r3, #12
 800b6b2:	d82d      	bhi.n	800b710 <UART_SetConfig+0x14c>
 800b6b4:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <UART_SetConfig+0xf8>)
 800b6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ba:	bf00      	nop
 800b6bc:	0800b6f1 	.word	0x0800b6f1
 800b6c0:	0800b711 	.word	0x0800b711
 800b6c4:	0800b711 	.word	0x0800b711
 800b6c8:	0800b711 	.word	0x0800b711
 800b6cc:	0800b701 	.word	0x0800b701
 800b6d0:	0800b711 	.word	0x0800b711
 800b6d4:	0800b711 	.word	0x0800b711
 800b6d8:	0800b711 	.word	0x0800b711
 800b6dc:	0800b6f9 	.word	0x0800b6f9
 800b6e0:	0800b711 	.word	0x0800b711
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	0800b711 	.word	0x0800b711
 800b6ec:	0800b709 	.word	0x0800b709
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6f6:	e0d8      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6fe:	e0d4      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b700:	2304      	movs	r3, #4
 800b702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b706:	e0d0      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b708:	2308      	movs	r3, #8
 800b70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b70e:	e0cc      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b710:	2310      	movs	r3, #16
 800b712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b716:	e0c8      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a5e      	ldr	r2, [pc, #376]	; (800b898 <UART_SetConfig+0x2d4>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d125      	bne.n	800b76e <UART_SetConfig+0x1aa>
 800b722:	4b5b      	ldr	r3, [pc, #364]	; (800b890 <UART_SetConfig+0x2cc>)
 800b724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b728:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b72c:	2b30      	cmp	r3, #48	; 0x30
 800b72e:	d016      	beq.n	800b75e <UART_SetConfig+0x19a>
 800b730:	2b30      	cmp	r3, #48	; 0x30
 800b732:	d818      	bhi.n	800b766 <UART_SetConfig+0x1a2>
 800b734:	2b20      	cmp	r3, #32
 800b736:	d00a      	beq.n	800b74e <UART_SetConfig+0x18a>
 800b738:	2b20      	cmp	r3, #32
 800b73a:	d814      	bhi.n	800b766 <UART_SetConfig+0x1a2>
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <UART_SetConfig+0x182>
 800b740:	2b10      	cmp	r3, #16
 800b742:	d008      	beq.n	800b756 <UART_SetConfig+0x192>
 800b744:	e00f      	b.n	800b766 <UART_SetConfig+0x1a2>
 800b746:	2300      	movs	r3, #0
 800b748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b74c:	e0ad      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b74e:	2302      	movs	r3, #2
 800b750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b754:	e0a9      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b756:	2304      	movs	r3, #4
 800b758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b75c:	e0a5      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b75e:	2308      	movs	r3, #8
 800b760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b764:	e0a1      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b766:	2310      	movs	r3, #16
 800b768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b76c:	e09d      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a4a      	ldr	r2, [pc, #296]	; (800b89c <UART_SetConfig+0x2d8>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d125      	bne.n	800b7c4 <UART_SetConfig+0x200>
 800b778:	4b45      	ldr	r3, [pc, #276]	; (800b890 <UART_SetConfig+0x2cc>)
 800b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b782:	2bc0      	cmp	r3, #192	; 0xc0
 800b784:	d016      	beq.n	800b7b4 <UART_SetConfig+0x1f0>
 800b786:	2bc0      	cmp	r3, #192	; 0xc0
 800b788:	d818      	bhi.n	800b7bc <UART_SetConfig+0x1f8>
 800b78a:	2b80      	cmp	r3, #128	; 0x80
 800b78c:	d00a      	beq.n	800b7a4 <UART_SetConfig+0x1e0>
 800b78e:	2b80      	cmp	r3, #128	; 0x80
 800b790:	d814      	bhi.n	800b7bc <UART_SetConfig+0x1f8>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <UART_SetConfig+0x1d8>
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d008      	beq.n	800b7ac <UART_SetConfig+0x1e8>
 800b79a:	e00f      	b.n	800b7bc <UART_SetConfig+0x1f8>
 800b79c:	2300      	movs	r3, #0
 800b79e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7a2:	e082      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7aa:	e07e      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b7ac:	2304      	movs	r3, #4
 800b7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7b2:	e07a      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ba:	e076      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b7bc:	2310      	movs	r3, #16
 800b7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7c2:	e072      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a35      	ldr	r2, [pc, #212]	; (800b8a0 <UART_SetConfig+0x2dc>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d12a      	bne.n	800b824 <UART_SetConfig+0x260>
 800b7ce:	4b30      	ldr	r3, [pc, #192]	; (800b890 <UART_SetConfig+0x2cc>)
 800b7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7dc:	d01a      	beq.n	800b814 <UART_SetConfig+0x250>
 800b7de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7e2:	d81b      	bhi.n	800b81c <UART_SetConfig+0x258>
 800b7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e8:	d00c      	beq.n	800b804 <UART_SetConfig+0x240>
 800b7ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ee:	d815      	bhi.n	800b81c <UART_SetConfig+0x258>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <UART_SetConfig+0x238>
 800b7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f8:	d008      	beq.n	800b80c <UART_SetConfig+0x248>
 800b7fa:	e00f      	b.n	800b81c <UART_SetConfig+0x258>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b802:	e052      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b804:	2302      	movs	r3, #2
 800b806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b80a:	e04e      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b80c:	2304      	movs	r3, #4
 800b80e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b812:	e04a      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b814:	2308      	movs	r3, #8
 800b816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b81a:	e046      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b81c:	2310      	movs	r3, #16
 800b81e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b822:	e042      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a17      	ldr	r2, [pc, #92]	; (800b888 <UART_SetConfig+0x2c4>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d13a      	bne.n	800b8a4 <UART_SetConfig+0x2e0>
 800b82e:	4b18      	ldr	r3, [pc, #96]	; (800b890 <UART_SetConfig+0x2cc>)
 800b830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b83c:	d01a      	beq.n	800b874 <UART_SetConfig+0x2b0>
 800b83e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b842:	d81b      	bhi.n	800b87c <UART_SetConfig+0x2b8>
 800b844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b848:	d00c      	beq.n	800b864 <UART_SetConfig+0x2a0>
 800b84a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b84e:	d815      	bhi.n	800b87c <UART_SetConfig+0x2b8>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <UART_SetConfig+0x298>
 800b854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b858:	d008      	beq.n	800b86c <UART_SetConfig+0x2a8>
 800b85a:	e00f      	b.n	800b87c <UART_SetConfig+0x2b8>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b862:	e022      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b864:	2302      	movs	r3, #2
 800b866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b86a:	e01e      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b86c:	2304      	movs	r3, #4
 800b86e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b872:	e01a      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b874:	2308      	movs	r3, #8
 800b876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b87a:	e016      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b87c:	2310      	movs	r3, #16
 800b87e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b882:	e012      	b.n	800b8aa <UART_SetConfig+0x2e6>
 800b884:	efff69f3 	.word	0xefff69f3
 800b888:	40008000 	.word	0x40008000
 800b88c:	40013800 	.word	0x40013800
 800b890:	40021000 	.word	0x40021000
 800b894:	40004400 	.word	0x40004400
 800b898:	40004800 	.word	0x40004800
 800b89c:	40004c00 	.word	0x40004c00
 800b8a0:	40005000 	.word	0x40005000
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a9f      	ldr	r2, [pc, #636]	; (800bb2c <UART_SetConfig+0x568>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d17a      	bne.n	800b9aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d824      	bhi.n	800b906 <UART_SetConfig+0x342>
 800b8bc:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <UART_SetConfig+0x300>)
 800b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c2:	bf00      	nop
 800b8c4:	0800b8e9 	.word	0x0800b8e9
 800b8c8:	0800b907 	.word	0x0800b907
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b907 	.word	0x0800b907
 800b8d4:	0800b8f7 	.word	0x0800b8f7
 800b8d8:	0800b907 	.word	0x0800b907
 800b8dc:	0800b907 	.word	0x0800b907
 800b8e0:	0800b907 	.word	0x0800b907
 800b8e4:	0800b8ff 	.word	0x0800b8ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e8:	f7fc fe7e 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800b8ec:	61f8      	str	r0, [r7, #28]
        break;
 800b8ee:	e010      	b.n	800b912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8f0:	4b8f      	ldr	r3, [pc, #572]	; (800bb30 <UART_SetConfig+0x56c>)
 800b8f2:	61fb      	str	r3, [r7, #28]
        break;
 800b8f4:	e00d      	b.n	800b912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8f6:	f7fc fddf 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800b8fa:	61f8      	str	r0, [r7, #28]
        break;
 800b8fc:	e009      	b.n	800b912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b902:	61fb      	str	r3, [r7, #28]
        break;
 800b904:	e005      	b.n	800b912 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b906:	2300      	movs	r3, #0
 800b908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 80fb 	beq.w	800bb10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	429a      	cmp	r2, r3
 800b928:	d305      	bcc.n	800b936 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	429a      	cmp	r2, r3
 800b934:	d903      	bls.n	800b93e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b93c:	e0e8      	b.n	800bb10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	2200      	movs	r2, #0
 800b942:	461c      	mov	r4, r3
 800b944:	4615      	mov	r5, r2
 800b946:	f04f 0200 	mov.w	r2, #0
 800b94a:	f04f 0300 	mov.w	r3, #0
 800b94e:	022b      	lsls	r3, r5, #8
 800b950:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b954:	0222      	lsls	r2, r4, #8
 800b956:	68f9      	ldr	r1, [r7, #12]
 800b958:	6849      	ldr	r1, [r1, #4]
 800b95a:	0849      	lsrs	r1, r1, #1
 800b95c:	2000      	movs	r0, #0
 800b95e:	4688      	mov	r8, r1
 800b960:	4681      	mov	r9, r0
 800b962:	eb12 0a08 	adds.w	sl, r2, r8
 800b966:	eb43 0b09 	adc.w	fp, r3, r9
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	603b      	str	r3, [r7, #0]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b978:	4650      	mov	r0, sl
 800b97a:	4659      	mov	r1, fp
 800b97c:	f7f4 fc78 	bl	8000270 <__aeabi_uldivmod>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4613      	mov	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b98e:	d308      	bcc.n	800b9a2 <UART_SetConfig+0x3de>
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b996:	d204      	bcs.n	800b9a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	60da      	str	r2, [r3, #12]
 800b9a0:	e0b6      	b.n	800bb10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b9a8:	e0b2      	b.n	800bb10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b2:	d15e      	bne.n	800ba72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b9b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d828      	bhi.n	800ba0e <UART_SetConfig+0x44a>
 800b9bc:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <UART_SetConfig+0x400>)
 800b9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c2:	bf00      	nop
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	0800ba0f 	.word	0x0800ba0f
 800b9d4:	0800b9ff 	.word	0x0800b9ff
 800b9d8:	0800ba0f 	.word	0x0800ba0f
 800b9dc:	0800ba0f 	.word	0x0800ba0f
 800b9e0:	0800ba0f 	.word	0x0800ba0f
 800b9e4:	0800ba07 	.word	0x0800ba07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e8:	f7fc fdfe 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800b9ec:	61f8      	str	r0, [r7, #28]
        break;
 800b9ee:	e014      	b.n	800ba1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9f0:	f7fc fe10 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 800b9f4:	61f8      	str	r0, [r7, #28]
        break;
 800b9f6:	e010      	b.n	800ba1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9f8:	4b4d      	ldr	r3, [pc, #308]	; (800bb30 <UART_SetConfig+0x56c>)
 800b9fa:	61fb      	str	r3, [r7, #28]
        break;
 800b9fc:	e00d      	b.n	800ba1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9fe:	f7fc fd5b 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800ba02:	61f8      	str	r0, [r7, #28]
        break;
 800ba04:	e009      	b.n	800ba1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0a:	61fb      	str	r3, [r7, #28]
        break;
 800ba0c:	e005      	b.n	800ba1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ba18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d077      	beq.n	800bb10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	005a      	lsls	r2, r3, #1
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	085b      	lsrs	r3, r3, #1
 800ba2a:	441a      	add	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2b0f      	cmp	r3, #15
 800ba3a:	d916      	bls.n	800ba6a <UART_SetConfig+0x4a6>
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba42:	d212      	bcs.n	800ba6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	f023 030f 	bic.w	r3, r3, #15
 800ba4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	085b      	lsrs	r3, r3, #1
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	8afb      	ldrh	r3, [r7, #22]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	8afa      	ldrh	r2, [r7, #22]
 800ba66:	60da      	str	r2, [r3, #12]
 800ba68:	e052      	b.n	800bb10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ba70:	e04e      	b.n	800bb10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba76:	2b08      	cmp	r3, #8
 800ba78:	d827      	bhi.n	800baca <UART_SetConfig+0x506>
 800ba7a:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <UART_SetConfig+0x4bc>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800baa5 	.word	0x0800baa5
 800ba84:	0800baad 	.word	0x0800baad
 800ba88:	0800bab5 	.word	0x0800bab5
 800ba8c:	0800bacb 	.word	0x0800bacb
 800ba90:	0800babb 	.word	0x0800babb
 800ba94:	0800bacb 	.word	0x0800bacb
 800ba98:	0800bacb 	.word	0x0800bacb
 800ba9c:	0800bacb 	.word	0x0800bacb
 800baa0:	0800bac3 	.word	0x0800bac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baa4:	f7fc fda0 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800baa8:	61f8      	str	r0, [r7, #28]
        break;
 800baaa:	e014      	b.n	800bad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800baac:	f7fc fdb2 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 800bab0:	61f8      	str	r0, [r7, #28]
        break;
 800bab2:	e010      	b.n	800bad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bab4:	4b1e      	ldr	r3, [pc, #120]	; (800bb30 <UART_SetConfig+0x56c>)
 800bab6:	61fb      	str	r3, [r7, #28]
        break;
 800bab8:	e00d      	b.n	800bad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baba:	f7fc fcfd 	bl	80084b8 <HAL_RCC_GetSysClockFreq>
 800babe:	61f8      	str	r0, [r7, #28]
        break;
 800bac0:	e009      	b.n	800bad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bac6:	61fb      	str	r3, [r7, #28]
        break;
 800bac8:	e005      	b.n	800bad6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bad4:	bf00      	nop
    }

    if (pclk != 0U)
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d019      	beq.n	800bb10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	085a      	lsrs	r2, r3, #1
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	441a      	add	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	fbb2 f3f3 	udiv	r3, r2, r3
 800baee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	2b0f      	cmp	r3, #15
 800baf4:	d909      	bls.n	800bb0a <UART_SetConfig+0x546>
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bafc:	d205      	bcs.n	800bb0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	60da      	str	r2, [r3, #12]
 800bb08:	e002      	b.n	800bb10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bb1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3728      	adds	r7, #40	; 0x28
 800bb24:	46bd      	mov	sp, r7
 800bb26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb2a:	bf00      	nop
 800bb2c:	40008000 	.word	0x40008000
 800bb30:	00f42400 	.word	0x00f42400

0800bb34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00a      	beq.n	800bb5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	430a      	orrs	r2, r1
 800bb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00a      	beq.n	800bba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	f003 0308 	and.w	r3, r3, #8
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	f003 0310 	and.w	r3, r3, #16
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	f003 0320 	and.w	r3, r3, #32
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	430a      	orrs	r2, r1
 800bc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01a      	beq.n	800bc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc32:	d10a      	bne.n	800bc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	605a      	str	r2, [r3, #4]
  }
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc88:	f7f7 fd86 	bl	8003798 <HAL_GetTick>
 800bc8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0308 	and.w	r3, r3, #8
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d10e      	bne.n	800bcba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f82d 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e023      	b.n	800bd02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d10e      	bne.n	800bce6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f817 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e00d      	b.n	800bd02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2220      	movs	r2, #32
 800bcf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b09c      	sub	sp, #112	; 0x70
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	603b      	str	r3, [r7, #0]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd1a:	e0a5      	b.n	800be68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	f000 80a1 	beq.w	800be68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd26:	f7f7 fd37 	bl	8003798 <HAL_GetTick>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d302      	bcc.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x32>
 800bd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d13e      	bne.n	800bdba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd50:	667b      	str	r3, [r7, #100]	; 0x64
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	663b      	str	r3, [r7, #96]	; 0x60
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e5      	bne.n	800bd6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2220      	movs	r2, #32
 800bda6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e067      	b.n	800be8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d04f      	beq.n	800be68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd6:	d147      	bne.n	800be68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bde0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	e853 3f00 	ldrex	r3, [r3]
 800bdee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bdf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be00:	637b      	str	r3, [r7, #52]	; 0x34
 800be02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be08:	e841 2300 	strex	r3, r2, [r1]
 800be0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e6      	bne.n	800bde2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3308      	adds	r3, #8
 800be1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	e853 3f00 	ldrex	r3, [r3]
 800be22:	613b      	str	r3, [r7, #16]
   return(result);
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	f023 0301 	bic.w	r3, r3, #1
 800be2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3308      	adds	r3, #8
 800be32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be34:	623a      	str	r2, [r7, #32]
 800be36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be38:	69f9      	ldr	r1, [r7, #28]
 800be3a:	6a3a      	ldr	r2, [r7, #32]
 800be3c:	e841 2300 	strex	r3, r2, [r1]
 800be40:	61bb      	str	r3, [r7, #24]
   return(result);
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e5      	bne.n	800be14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2220      	movs	r2, #32
 800be4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2220      	movs	r2, #32
 800be52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2220      	movs	r2, #32
 800be58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e010      	b.n	800be8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	69da      	ldr	r2, [r3, #28]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	4013      	ands	r3, r2
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	429a      	cmp	r2, r3
 800be76:	bf0c      	ite	eq
 800be78:	2301      	moveq	r3, #1
 800be7a:	2300      	movne	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	461a      	mov	r2, r3
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	429a      	cmp	r2, r3
 800be84:	f43f af4a 	beq.w	800bd1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3770      	adds	r7, #112	; 0x70
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be92:	b480      	push	{r7}
 800be94:	b095      	sub	sp, #84	; 0x54
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb8:	643b      	str	r3, [r7, #64]	; 0x40
 800beba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e6      	bne.n	800be9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3308      	adds	r3, #8
 800bed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	61fb      	str	r3, [r7, #28]
   return(result);
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f023 0301 	bic.w	r3, r3, #1
 800bee2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3308      	adds	r3, #8
 800beea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800beee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e5      	bne.n	800becc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d118      	bne.n	800bf3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	f023 0310 	bic.w	r3, r3, #16
 800bf1c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf26:	61bb      	str	r3, [r7, #24]
 800bf28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	6979      	ldr	r1, [r7, #20]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	613b      	str	r3, [r7, #16]
   return(result);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e6      	bne.n	800bf08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bf4c:	bf00      	nop
 800bf4e:	3754      	adds	r7, #84	; 0x54
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff fb0e 	bl	800b598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	e853 3f00 	ldrex	r3, [r3]
 800bf98:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	61bb      	str	r3, [r7, #24]
 800bfac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfae:	6979      	ldr	r1, [r7, #20]
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1e6      	bne.n	800bf8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff fada 	bl	800b584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfd0:	bf00      	nop
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <__errno>:
 800bfec:	4b01      	ldr	r3, [pc, #4]	; (800bff4 <__errno+0x8>)
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20000088 	.word	0x20000088

0800bff8 <__libc_init_array>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	4d0d      	ldr	r5, [pc, #52]	; (800c030 <__libc_init_array+0x38>)
 800bffc:	4c0d      	ldr	r4, [pc, #52]	; (800c034 <__libc_init_array+0x3c>)
 800bffe:	1b64      	subs	r4, r4, r5
 800c000:	10a4      	asrs	r4, r4, #2
 800c002:	2600      	movs	r6, #0
 800c004:	42a6      	cmp	r6, r4
 800c006:	d109      	bne.n	800c01c <__libc_init_array+0x24>
 800c008:	4d0b      	ldr	r5, [pc, #44]	; (800c038 <__libc_init_array+0x40>)
 800c00a:	4c0c      	ldr	r4, [pc, #48]	; (800c03c <__libc_init_array+0x44>)
 800c00c:	f000 fc8e 	bl	800c92c <_init>
 800c010:	1b64      	subs	r4, r4, r5
 800c012:	10a4      	asrs	r4, r4, #2
 800c014:	2600      	movs	r6, #0
 800c016:	42a6      	cmp	r6, r4
 800c018:	d105      	bne.n	800c026 <__libc_init_array+0x2e>
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c020:	4798      	blx	r3
 800c022:	3601      	adds	r6, #1
 800c024:	e7ee      	b.n	800c004 <__libc_init_array+0xc>
 800c026:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02a:	4798      	blx	r3
 800c02c:	3601      	adds	r6, #1
 800c02e:	e7f2      	b.n	800c016 <__libc_init_array+0x1e>
 800c030:	0800ca30 	.word	0x0800ca30
 800c034:	0800ca30 	.word	0x0800ca30
 800c038:	0800ca30 	.word	0x0800ca30
 800c03c:	0800ca34 	.word	0x0800ca34

0800c040 <memset>:
 800c040:	4402      	add	r2, r0
 800c042:	4603      	mov	r3, r0
 800c044:	4293      	cmp	r3, r2
 800c046:	d100      	bne.n	800c04a <memset+0xa>
 800c048:	4770      	bx	lr
 800c04a:	f803 1b01 	strb.w	r1, [r3], #1
 800c04e:	e7f9      	b.n	800c044 <memset+0x4>

0800c050 <siprintf>:
 800c050:	b40e      	push	{r1, r2, r3}
 800c052:	b500      	push	{lr}
 800c054:	b09c      	sub	sp, #112	; 0x70
 800c056:	ab1d      	add	r3, sp, #116	; 0x74
 800c058:	9002      	str	r0, [sp, #8]
 800c05a:	9006      	str	r0, [sp, #24]
 800c05c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c060:	4809      	ldr	r0, [pc, #36]	; (800c088 <siprintf+0x38>)
 800c062:	9107      	str	r1, [sp, #28]
 800c064:	9104      	str	r1, [sp, #16]
 800c066:	4909      	ldr	r1, [pc, #36]	; (800c08c <siprintf+0x3c>)
 800c068:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06c:	9105      	str	r1, [sp, #20]
 800c06e:	6800      	ldr	r0, [r0, #0]
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	a902      	add	r1, sp, #8
 800c074:	f000 f868 	bl	800c148 <_svfiprintf_r>
 800c078:	9b02      	ldr	r3, [sp, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	b01c      	add	sp, #112	; 0x70
 800c080:	f85d eb04 	ldr.w	lr, [sp], #4
 800c084:	b003      	add	sp, #12
 800c086:	4770      	bx	lr
 800c088:	20000088 	.word	0x20000088
 800c08c:	ffff0208 	.word	0xffff0208

0800c090 <__ssputs_r>:
 800c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	688e      	ldr	r6, [r1, #8]
 800c096:	429e      	cmp	r6, r3
 800c098:	4682      	mov	sl, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4690      	mov	r8, r2
 800c09e:	461f      	mov	r7, r3
 800c0a0:	d838      	bhi.n	800c114 <__ssputs_r+0x84>
 800c0a2:	898a      	ldrh	r2, [r1, #12]
 800c0a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0a8:	d032      	beq.n	800c110 <__ssputs_r+0x80>
 800c0aa:	6825      	ldr	r5, [r4, #0]
 800c0ac:	6909      	ldr	r1, [r1, #16]
 800c0ae:	eba5 0901 	sub.w	r9, r5, r1
 800c0b2:	6965      	ldr	r5, [r4, #20]
 800c0b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0bc:	3301      	adds	r3, #1
 800c0be:	444b      	add	r3, r9
 800c0c0:	106d      	asrs	r5, r5, #1
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	bf38      	it	cc
 800c0c6:	461d      	movcc	r5, r3
 800c0c8:	0553      	lsls	r3, r2, #21
 800c0ca:	d531      	bpl.n	800c130 <__ssputs_r+0xa0>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f000 fb63 	bl	800c798 <_malloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b950      	cbnz	r0, 800c0ec <__ssputs_r+0x5c>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	f8ca 3000 	str.w	r3, [sl]
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	464a      	mov	r2, r9
 800c0f0:	f000 fabe 	bl	800c670 <memcpy>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	6126      	str	r6, [r4, #16]
 800c102:	6165      	str	r5, [r4, #20]
 800c104:	444e      	add	r6, r9
 800c106:	eba5 0509 	sub.w	r5, r5, r9
 800c10a:	6026      	str	r6, [r4, #0]
 800c10c:	60a5      	str	r5, [r4, #8]
 800c10e:	463e      	mov	r6, r7
 800c110:	42be      	cmp	r6, r7
 800c112:	d900      	bls.n	800c116 <__ssputs_r+0x86>
 800c114:	463e      	mov	r6, r7
 800c116:	6820      	ldr	r0, [r4, #0]
 800c118:	4632      	mov	r2, r6
 800c11a:	4641      	mov	r1, r8
 800c11c:	f000 fab6 	bl	800c68c <memmove>
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	1b9b      	subs	r3, r3, r6
 800c124:	60a3      	str	r3, [r4, #8]
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	4433      	add	r3, r6
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	2000      	movs	r0, #0
 800c12e:	e7db      	b.n	800c0e8 <__ssputs_r+0x58>
 800c130:	462a      	mov	r2, r5
 800c132:	f000 fba5 	bl	800c880 <_realloc_r>
 800c136:	4606      	mov	r6, r0
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1e1      	bne.n	800c100 <__ssputs_r+0x70>
 800c13c:	6921      	ldr	r1, [r4, #16]
 800c13e:	4650      	mov	r0, sl
 800c140:	f000 fabe 	bl	800c6c0 <_free_r>
 800c144:	e7c7      	b.n	800c0d6 <__ssputs_r+0x46>
	...

0800c148 <_svfiprintf_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	4698      	mov	r8, r3
 800c14e:	898b      	ldrh	r3, [r1, #12]
 800c150:	061b      	lsls	r3, r3, #24
 800c152:	b09d      	sub	sp, #116	; 0x74
 800c154:	4607      	mov	r7, r0
 800c156:	460d      	mov	r5, r1
 800c158:	4614      	mov	r4, r2
 800c15a:	d50e      	bpl.n	800c17a <_svfiprintf_r+0x32>
 800c15c:	690b      	ldr	r3, [r1, #16]
 800c15e:	b963      	cbnz	r3, 800c17a <_svfiprintf_r+0x32>
 800c160:	2140      	movs	r1, #64	; 0x40
 800c162:	f000 fb19 	bl	800c798 <_malloc_r>
 800c166:	6028      	str	r0, [r5, #0]
 800c168:	6128      	str	r0, [r5, #16]
 800c16a:	b920      	cbnz	r0, 800c176 <_svfiprintf_r+0x2e>
 800c16c:	230c      	movs	r3, #12
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	e0d1      	b.n	800c31a <_svfiprintf_r+0x1d2>
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	616b      	str	r3, [r5, #20]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9309      	str	r3, [sp, #36]	; 0x24
 800c17e:	2320      	movs	r3, #32
 800c180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c184:	f8cd 800c 	str.w	r8, [sp, #12]
 800c188:	2330      	movs	r3, #48	; 0x30
 800c18a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c334 <_svfiprintf_r+0x1ec>
 800c18e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	4623      	mov	r3, r4
 800c198:	469a      	mov	sl, r3
 800c19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c19e:	b10a      	cbz	r2, 800c1a4 <_svfiprintf_r+0x5c>
 800c1a0:	2a25      	cmp	r2, #37	; 0x25
 800c1a2:	d1f9      	bne.n	800c198 <_svfiprintf_r+0x50>
 800c1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a8:	d00b      	beq.n	800c1c2 <_svfiprintf_r+0x7a>
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ff6d 	bl	800c090 <__ssputs_r>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f000 80aa 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1be:	445a      	add	r2, fp
 800c1c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80a2 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d6:	f10a 0a01 	add.w	sl, sl, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c1e4:	4654      	mov	r4, sl
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	4851      	ldr	r0, [pc, #324]	; (800c334 <_svfiprintf_r+0x1ec>)
 800c1ee:	f7f3 ffef 	bl	80001d0 <memchr>
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_svfiprintf_r+0xe6>
 800c1f6:	06d0      	lsls	r0, r2, #27
 800c1f8:	bf44      	itt	mi
 800c1fa:	2320      	movmi	r3, #32
 800c1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c200:	0711      	lsls	r1, r2, #28
 800c202:	bf44      	itt	mi
 800c204:	232b      	movmi	r3, #43	; 0x2b
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b2a      	cmp	r3, #42	; 0x2a
 800c210:	d015      	beq.n	800c23e <_svfiprintf_r+0xf6>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4654      	mov	r4, sl
 800c216:	2000      	movs	r0, #0
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4621      	mov	r1, r4
 800c21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c222:	3b30      	subs	r3, #48	; 0x30
 800c224:	2b09      	cmp	r3, #9
 800c226:	d94e      	bls.n	800c2c6 <_svfiprintf_r+0x17e>
 800c228:	b1b0      	cbz	r0, 800c258 <_svfiprintf_r+0x110>
 800c22a:	9207      	str	r2, [sp, #28]
 800c22c:	e014      	b.n	800c258 <_svfiprintf_r+0x110>
 800c22e:	eba0 0308 	sub.w	r3, r0, r8
 800c232:	fa09 f303 	lsl.w	r3, r9, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	46a2      	mov	sl, r4
 800c23c:	e7d2      	b.n	800c1e4 <_svfiprintf_r+0x9c>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	1d19      	adds	r1, r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbb      	ittet	lt
 800c24a:	425b      	neglt	r3, r3
 800c24c:	f042 0202 	orrlt.w	r2, r2, #2
 800c250:	9307      	strge	r3, [sp, #28]
 800c252:	9307      	strlt	r3, [sp, #28]
 800c254:	bfb8      	it	lt
 800c256:	9204      	strlt	r2, [sp, #16]
 800c258:	7823      	ldrb	r3, [r4, #0]
 800c25a:	2b2e      	cmp	r3, #46	; 0x2e
 800c25c:	d10c      	bne.n	800c278 <_svfiprintf_r+0x130>
 800c25e:	7863      	ldrb	r3, [r4, #1]
 800c260:	2b2a      	cmp	r3, #42	; 0x2a
 800c262:	d135      	bne.n	800c2d0 <_svfiprintf_r+0x188>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9203      	str	r2, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bfb8      	it	lt
 800c270:	f04f 33ff 	movlt.w	r3, #4294967295
 800c274:	3402      	adds	r4, #2
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c344 <_svfiprintf_r+0x1fc>
 800c27c:	7821      	ldrb	r1, [r4, #0]
 800c27e:	2203      	movs	r2, #3
 800c280:	4650      	mov	r0, sl
 800c282:	f7f3 ffa5 	bl	80001d0 <memchr>
 800c286:	b140      	cbz	r0, 800c29a <_svfiprintf_r+0x152>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	eba0 000a 	sub.w	r0, r0, sl
 800c28e:	fa03 f000 	lsl.w	r0, r3, r0
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	4303      	orrs	r3, r0
 800c296:	3401      	adds	r4, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29e:	4826      	ldr	r0, [pc, #152]	; (800c338 <_svfiprintf_r+0x1f0>)
 800c2a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2a4:	2206      	movs	r2, #6
 800c2a6:	f7f3 ff93 	bl	80001d0 <memchr>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d038      	beq.n	800c320 <_svfiprintf_r+0x1d8>
 800c2ae:	4b23      	ldr	r3, [pc, #140]	; (800c33c <_svfiprintf_r+0x1f4>)
 800c2b0:	bb1b      	cbnz	r3, 800c2fa <_svfiprintf_r+0x1b2>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	3307      	adds	r3, #7
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	4433      	add	r3, r6
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	e767      	b.n	800c196 <_svfiprintf_r+0x4e>
 800c2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	e7a5      	b.n	800c21c <_svfiprintf_r+0xd4>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	3401      	adds	r4, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e2:	3a30      	subs	r2, #48	; 0x30
 800c2e4:	2a09      	cmp	r2, #9
 800c2e6:	d903      	bls.n	800c2f0 <_svfiprintf_r+0x1a8>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0c5      	beq.n	800c278 <_svfiprintf_r+0x130>
 800c2ec:	9105      	str	r1, [sp, #20]
 800c2ee:	e7c3      	b.n	800c278 <_svfiprintf_r+0x130>
 800c2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7f0      	b.n	800c2dc <_svfiprintf_r+0x194>
 800c2fa:	ab03      	add	r3, sp, #12
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	462a      	mov	r2, r5
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c302:	a904      	add	r1, sp, #16
 800c304:	4638      	mov	r0, r7
 800c306:	f3af 8000 	nop.w
 800c30a:	1c42      	adds	r2, r0, #1
 800c30c:	4606      	mov	r6, r0
 800c30e:	d1d6      	bne.n	800c2be <_svfiprintf_r+0x176>
 800c310:	89ab      	ldrh	r3, [r5, #12]
 800c312:	065b      	lsls	r3, r3, #25
 800c314:	f53f af2c 	bmi.w	800c170 <_svfiprintf_r+0x28>
 800c318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c31a:	b01d      	add	sp, #116	; 0x74
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	ab03      	add	r3, sp, #12
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	462a      	mov	r2, r5
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c328:	a904      	add	r1, sp, #16
 800c32a:	4638      	mov	r0, r7
 800c32c:	f000 f87a 	bl	800c424 <_printf_i>
 800c330:	e7eb      	b.n	800c30a <_svfiprintf_r+0x1c2>
 800c332:	bf00      	nop
 800c334:	0800c9f4 	.word	0x0800c9f4
 800c338:	0800c9fe 	.word	0x0800c9fe
 800c33c:	00000000 	.word	0x00000000
 800c340:	0800c091 	.word	0x0800c091
 800c344:	0800c9fa 	.word	0x0800c9fa

0800c348 <_printf_common>:
 800c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	4616      	mov	r6, r2
 800c34e:	4699      	mov	r9, r3
 800c350:	688a      	ldr	r2, [r1, #8]
 800c352:	690b      	ldr	r3, [r1, #16]
 800c354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c358:	4293      	cmp	r3, r2
 800c35a:	bfb8      	it	lt
 800c35c:	4613      	movlt	r3, r2
 800c35e:	6033      	str	r3, [r6, #0]
 800c360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c364:	4607      	mov	r7, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b10a      	cbz	r2, 800c36e <_printf_common+0x26>
 800c36a:	3301      	adds	r3, #1
 800c36c:	6033      	str	r3, [r6, #0]
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	0699      	lsls	r1, r3, #26
 800c372:	bf42      	ittt	mi
 800c374:	6833      	ldrmi	r3, [r6, #0]
 800c376:	3302      	addmi	r3, #2
 800c378:	6033      	strmi	r3, [r6, #0]
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	f015 0506 	ands.w	r5, r5, #6
 800c380:	d106      	bne.n	800c390 <_printf_common+0x48>
 800c382:	f104 0a19 	add.w	sl, r4, #25
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	6832      	ldr	r2, [r6, #0]
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	42ab      	cmp	r3, r5
 800c38e:	dc26      	bgt.n	800c3de <_printf_common+0x96>
 800c390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c394:	1e13      	subs	r3, r2, #0
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	bf18      	it	ne
 800c39a:	2301      	movne	r3, #1
 800c39c:	0692      	lsls	r2, r2, #26
 800c39e:	d42b      	bmi.n	800c3f8 <_printf_common+0xb0>
 800c3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d01e      	beq.n	800c3ec <_printf_common+0xa4>
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	68e5      	ldr	r5, [r4, #12]
 800c3b2:	6832      	ldr	r2, [r6, #0]
 800c3b4:	f003 0306 	and.w	r3, r3, #6
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	bf08      	it	eq
 800c3bc:	1aad      	subeq	r5, r5, r2
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	6922      	ldr	r2, [r4, #16]
 800c3c2:	bf0c      	ite	eq
 800c3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c8:	2500      	movne	r5, #0
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	bfc4      	itt	gt
 800c3ce:	1a9b      	subgt	r3, r3, r2
 800c3d0:	18ed      	addgt	r5, r5, r3
 800c3d2:	2600      	movs	r6, #0
 800c3d4:	341a      	adds	r4, #26
 800c3d6:	42b5      	cmp	r5, r6
 800c3d8:	d11a      	bne.n	800c410 <_printf_common+0xc8>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e008      	b.n	800c3f0 <_printf_common+0xa8>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4652      	mov	r2, sl
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	47c0      	blx	r8
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d103      	bne.n	800c3f4 <_printf_common+0xac>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	e7c6      	b.n	800c386 <_printf_common+0x3e>
 800c3f8:	18e1      	adds	r1, r4, r3
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	2030      	movs	r0, #48	; 0x30
 800c3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c402:	4422      	add	r2, r4
 800c404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c40c:	3302      	adds	r3, #2
 800c40e:	e7c7      	b.n	800c3a0 <_printf_common+0x58>
 800c410:	2301      	movs	r3, #1
 800c412:	4622      	mov	r2, r4
 800c414:	4649      	mov	r1, r9
 800c416:	4638      	mov	r0, r7
 800c418:	47c0      	blx	r8
 800c41a:	3001      	adds	r0, #1
 800c41c:	d0e6      	beq.n	800c3ec <_printf_common+0xa4>
 800c41e:	3601      	adds	r6, #1
 800c420:	e7d9      	b.n	800c3d6 <_printf_common+0x8e>
	...

0800c424 <_printf_i>:
 800c424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	7e0f      	ldrb	r7, [r1, #24]
 800c42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c42c:	2f78      	cmp	r7, #120	; 0x78
 800c42e:	4691      	mov	r9, r2
 800c430:	4680      	mov	r8, r0
 800c432:	460c      	mov	r4, r1
 800c434:	469a      	mov	sl, r3
 800c436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c43a:	d807      	bhi.n	800c44c <_printf_i+0x28>
 800c43c:	2f62      	cmp	r7, #98	; 0x62
 800c43e:	d80a      	bhi.n	800c456 <_printf_i+0x32>
 800c440:	2f00      	cmp	r7, #0
 800c442:	f000 80d8 	beq.w	800c5f6 <_printf_i+0x1d2>
 800c446:	2f58      	cmp	r7, #88	; 0x58
 800c448:	f000 80a3 	beq.w	800c592 <_printf_i+0x16e>
 800c44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c454:	e03a      	b.n	800c4cc <_printf_i+0xa8>
 800c456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c45a:	2b15      	cmp	r3, #21
 800c45c:	d8f6      	bhi.n	800c44c <_printf_i+0x28>
 800c45e:	a101      	add	r1, pc, #4	; (adr r1, 800c464 <_printf_i+0x40>)
 800c460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4d1 	.word	0x0800c4d1
 800c46c:	0800c44d 	.word	0x0800c44d
 800c470:	0800c44d 	.word	0x0800c44d
 800c474:	0800c44d 	.word	0x0800c44d
 800c478:	0800c44d 	.word	0x0800c44d
 800c47c:	0800c4d1 	.word	0x0800c4d1
 800c480:	0800c44d 	.word	0x0800c44d
 800c484:	0800c44d 	.word	0x0800c44d
 800c488:	0800c44d 	.word	0x0800c44d
 800c48c:	0800c44d 	.word	0x0800c44d
 800c490:	0800c5dd 	.word	0x0800c5dd
 800c494:	0800c501 	.word	0x0800c501
 800c498:	0800c5bf 	.word	0x0800c5bf
 800c49c:	0800c44d 	.word	0x0800c44d
 800c4a0:	0800c44d 	.word	0x0800c44d
 800c4a4:	0800c5ff 	.word	0x0800c5ff
 800c4a8:	0800c44d 	.word	0x0800c44d
 800c4ac:	0800c501 	.word	0x0800c501
 800c4b0:	0800c44d 	.word	0x0800c44d
 800c4b4:	0800c44d 	.word	0x0800c44d
 800c4b8:	0800c5c7 	.word	0x0800c5c7
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	602a      	str	r2, [r5, #0]
 800c4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e0a3      	b.n	800c618 <_printf_i+0x1f4>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	6829      	ldr	r1, [r5, #0]
 800c4d4:	0606      	lsls	r6, r0, #24
 800c4d6:	f101 0304 	add.w	r3, r1, #4
 800c4da:	d50a      	bpl.n	800c4f2 <_printf_i+0xce>
 800c4dc:	680e      	ldr	r6, [r1, #0]
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	da03      	bge.n	800c4ec <_printf_i+0xc8>
 800c4e4:	232d      	movs	r3, #45	; 0x2d
 800c4e6:	4276      	negs	r6, r6
 800c4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4ec:	485e      	ldr	r0, [pc, #376]	; (800c668 <_printf_i+0x244>)
 800c4ee:	230a      	movs	r3, #10
 800c4f0:	e019      	b.n	800c526 <_printf_i+0x102>
 800c4f2:	680e      	ldr	r6, [r1, #0]
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4fa:	bf18      	it	ne
 800c4fc:	b236      	sxthne	r6, r6
 800c4fe:	e7ef      	b.n	800c4e0 <_printf_i+0xbc>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	6820      	ldr	r0, [r4, #0]
 800c504:	1d19      	adds	r1, r3, #4
 800c506:	6029      	str	r1, [r5, #0]
 800c508:	0601      	lsls	r1, r0, #24
 800c50a:	d501      	bpl.n	800c510 <_printf_i+0xec>
 800c50c:	681e      	ldr	r6, [r3, #0]
 800c50e:	e002      	b.n	800c516 <_printf_i+0xf2>
 800c510:	0646      	lsls	r6, r0, #25
 800c512:	d5fb      	bpl.n	800c50c <_printf_i+0xe8>
 800c514:	881e      	ldrh	r6, [r3, #0]
 800c516:	4854      	ldr	r0, [pc, #336]	; (800c668 <_printf_i+0x244>)
 800c518:	2f6f      	cmp	r7, #111	; 0x6f
 800c51a:	bf0c      	ite	eq
 800c51c:	2308      	moveq	r3, #8
 800c51e:	230a      	movne	r3, #10
 800c520:	2100      	movs	r1, #0
 800c522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c526:	6865      	ldr	r5, [r4, #4]
 800c528:	60a5      	str	r5, [r4, #8]
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	bfa2      	ittt	ge
 800c52e:	6821      	ldrge	r1, [r4, #0]
 800c530:	f021 0104 	bicge.w	r1, r1, #4
 800c534:	6021      	strge	r1, [r4, #0]
 800c536:	b90e      	cbnz	r6, 800c53c <_printf_i+0x118>
 800c538:	2d00      	cmp	r5, #0
 800c53a:	d04d      	beq.n	800c5d8 <_printf_i+0x1b4>
 800c53c:	4615      	mov	r5, r2
 800c53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c542:	fb03 6711 	mls	r7, r3, r1, r6
 800c546:	5dc7      	ldrb	r7, [r0, r7]
 800c548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c54c:	4637      	mov	r7, r6
 800c54e:	42bb      	cmp	r3, r7
 800c550:	460e      	mov	r6, r1
 800c552:	d9f4      	bls.n	800c53e <_printf_i+0x11a>
 800c554:	2b08      	cmp	r3, #8
 800c556:	d10b      	bne.n	800c570 <_printf_i+0x14c>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	07de      	lsls	r6, r3, #31
 800c55c:	d508      	bpl.n	800c570 <_printf_i+0x14c>
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	4299      	cmp	r1, r3
 800c564:	bfde      	ittt	le
 800c566:	2330      	movle	r3, #48	; 0x30
 800c568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c570:	1b52      	subs	r2, r2, r5
 800c572:	6122      	str	r2, [r4, #16]
 800c574:	f8cd a000 	str.w	sl, [sp]
 800c578:	464b      	mov	r3, r9
 800c57a:	aa03      	add	r2, sp, #12
 800c57c:	4621      	mov	r1, r4
 800c57e:	4640      	mov	r0, r8
 800c580:	f7ff fee2 	bl	800c348 <_printf_common>
 800c584:	3001      	adds	r0, #1
 800c586:	d14c      	bne.n	800c622 <_printf_i+0x1fe>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	b004      	add	sp, #16
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	4835      	ldr	r0, [pc, #212]	; (800c668 <_printf_i+0x244>)
 800c594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c598:	6829      	ldr	r1, [r5, #0]
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5a0:	6029      	str	r1, [r5, #0]
 800c5a2:	061d      	lsls	r5, r3, #24
 800c5a4:	d514      	bpl.n	800c5d0 <_printf_i+0x1ac>
 800c5a6:	07df      	lsls	r7, r3, #31
 800c5a8:	bf44      	itt	mi
 800c5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ae:	6023      	strmi	r3, [r4, #0]
 800c5b0:	b91e      	cbnz	r6, 800c5ba <_printf_i+0x196>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	f023 0320 	bic.w	r3, r3, #32
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	2310      	movs	r3, #16
 800c5bc:	e7b0      	b.n	800c520 <_printf_i+0xfc>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	f043 0320 	orr.w	r3, r3, #32
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	2378      	movs	r3, #120	; 0x78
 800c5c8:	4828      	ldr	r0, [pc, #160]	; (800c66c <_printf_i+0x248>)
 800c5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5ce:	e7e3      	b.n	800c598 <_printf_i+0x174>
 800c5d0:	0659      	lsls	r1, r3, #25
 800c5d2:	bf48      	it	mi
 800c5d4:	b2b6      	uxthmi	r6, r6
 800c5d6:	e7e6      	b.n	800c5a6 <_printf_i+0x182>
 800c5d8:	4615      	mov	r5, r2
 800c5da:	e7bb      	b.n	800c554 <_printf_i+0x130>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	6826      	ldr	r6, [r4, #0]
 800c5e0:	6961      	ldr	r1, [r4, #20]
 800c5e2:	1d18      	adds	r0, r3, #4
 800c5e4:	6028      	str	r0, [r5, #0]
 800c5e6:	0635      	lsls	r5, r6, #24
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	d501      	bpl.n	800c5f0 <_printf_i+0x1cc>
 800c5ec:	6019      	str	r1, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <_printf_i+0x1d2>
 800c5f0:	0670      	lsls	r0, r6, #25
 800c5f2:	d5fb      	bpl.n	800c5ec <_printf_i+0x1c8>
 800c5f4:	8019      	strh	r1, [r3, #0]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6123      	str	r3, [r4, #16]
 800c5fa:	4615      	mov	r5, r2
 800c5fc:	e7ba      	b.n	800c574 <_printf_i+0x150>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	1d1a      	adds	r2, r3, #4
 800c602:	602a      	str	r2, [r5, #0]
 800c604:	681d      	ldr	r5, [r3, #0]
 800c606:	6862      	ldr	r2, [r4, #4]
 800c608:	2100      	movs	r1, #0
 800c60a:	4628      	mov	r0, r5
 800c60c:	f7f3 fde0 	bl	80001d0 <memchr>
 800c610:	b108      	cbz	r0, 800c616 <_printf_i+0x1f2>
 800c612:	1b40      	subs	r0, r0, r5
 800c614:	6060      	str	r0, [r4, #4]
 800c616:	6863      	ldr	r3, [r4, #4]
 800c618:	6123      	str	r3, [r4, #16]
 800c61a:	2300      	movs	r3, #0
 800c61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c620:	e7a8      	b.n	800c574 <_printf_i+0x150>
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	462a      	mov	r2, r5
 800c626:	4649      	mov	r1, r9
 800c628:	4640      	mov	r0, r8
 800c62a:	47d0      	blx	sl
 800c62c:	3001      	adds	r0, #1
 800c62e:	d0ab      	beq.n	800c588 <_printf_i+0x164>
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	079b      	lsls	r3, r3, #30
 800c634:	d413      	bmi.n	800c65e <_printf_i+0x23a>
 800c636:	68e0      	ldr	r0, [r4, #12]
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	4298      	cmp	r0, r3
 800c63c:	bfb8      	it	lt
 800c63e:	4618      	movlt	r0, r3
 800c640:	e7a4      	b.n	800c58c <_printf_i+0x168>
 800c642:	2301      	movs	r3, #1
 800c644:	4632      	mov	r2, r6
 800c646:	4649      	mov	r1, r9
 800c648:	4640      	mov	r0, r8
 800c64a:	47d0      	blx	sl
 800c64c:	3001      	adds	r0, #1
 800c64e:	d09b      	beq.n	800c588 <_printf_i+0x164>
 800c650:	3501      	adds	r5, #1
 800c652:	68e3      	ldr	r3, [r4, #12]
 800c654:	9903      	ldr	r1, [sp, #12]
 800c656:	1a5b      	subs	r3, r3, r1
 800c658:	42ab      	cmp	r3, r5
 800c65a:	dcf2      	bgt.n	800c642 <_printf_i+0x21e>
 800c65c:	e7eb      	b.n	800c636 <_printf_i+0x212>
 800c65e:	2500      	movs	r5, #0
 800c660:	f104 0619 	add.w	r6, r4, #25
 800c664:	e7f5      	b.n	800c652 <_printf_i+0x22e>
 800c666:	bf00      	nop
 800c668:	0800ca05 	.word	0x0800ca05
 800c66c:	0800ca16 	.word	0x0800ca16

0800c670 <memcpy>:
 800c670:	440a      	add	r2, r1
 800c672:	4291      	cmp	r1, r2
 800c674:	f100 33ff 	add.w	r3, r0, #4294967295
 800c678:	d100      	bne.n	800c67c <memcpy+0xc>
 800c67a:	4770      	bx	lr
 800c67c:	b510      	push	{r4, lr}
 800c67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c686:	4291      	cmp	r1, r2
 800c688:	d1f9      	bne.n	800c67e <memcpy+0xe>
 800c68a:	bd10      	pop	{r4, pc}

0800c68c <memmove>:
 800c68c:	4288      	cmp	r0, r1
 800c68e:	b510      	push	{r4, lr}
 800c690:	eb01 0402 	add.w	r4, r1, r2
 800c694:	d902      	bls.n	800c69c <memmove+0x10>
 800c696:	4284      	cmp	r4, r0
 800c698:	4623      	mov	r3, r4
 800c69a:	d807      	bhi.n	800c6ac <memmove+0x20>
 800c69c:	1e43      	subs	r3, r0, #1
 800c69e:	42a1      	cmp	r1, r4
 800c6a0:	d008      	beq.n	800c6b4 <memmove+0x28>
 800c6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6aa:	e7f8      	b.n	800c69e <memmove+0x12>
 800c6ac:	4402      	add	r2, r0
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	428a      	cmp	r2, r1
 800c6b2:	d100      	bne.n	800c6b6 <memmove+0x2a>
 800c6b4:	bd10      	pop	{r4, pc}
 800c6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6be:	e7f7      	b.n	800c6b0 <memmove+0x24>

0800c6c0 <_free_r>:
 800c6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c2:	2900      	cmp	r1, #0
 800c6c4:	d044      	beq.n	800c750 <_free_r+0x90>
 800c6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ca:	9001      	str	r0, [sp, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c6d2:	bfb8      	it	lt
 800c6d4:	18e4      	addlt	r4, r4, r3
 800c6d6:	f000 f913 	bl	800c900 <__malloc_lock>
 800c6da:	4a1e      	ldr	r2, [pc, #120]	; (800c754 <_free_r+0x94>)
 800c6dc:	9801      	ldr	r0, [sp, #4]
 800c6de:	6813      	ldr	r3, [r2, #0]
 800c6e0:	b933      	cbnz	r3, 800c6f0 <_free_r+0x30>
 800c6e2:	6063      	str	r3, [r4, #4]
 800c6e4:	6014      	str	r4, [r2, #0]
 800c6e6:	b003      	add	sp, #12
 800c6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6ec:	f000 b90e 	b.w	800c90c <__malloc_unlock>
 800c6f0:	42a3      	cmp	r3, r4
 800c6f2:	d908      	bls.n	800c706 <_free_r+0x46>
 800c6f4:	6825      	ldr	r5, [r4, #0]
 800c6f6:	1961      	adds	r1, r4, r5
 800c6f8:	428b      	cmp	r3, r1
 800c6fa:	bf01      	itttt	eq
 800c6fc:	6819      	ldreq	r1, [r3, #0]
 800c6fe:	685b      	ldreq	r3, [r3, #4]
 800c700:	1949      	addeq	r1, r1, r5
 800c702:	6021      	streq	r1, [r4, #0]
 800c704:	e7ed      	b.n	800c6e2 <_free_r+0x22>
 800c706:	461a      	mov	r2, r3
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	b10b      	cbz	r3, 800c710 <_free_r+0x50>
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d9fa      	bls.n	800c706 <_free_r+0x46>
 800c710:	6811      	ldr	r1, [r2, #0]
 800c712:	1855      	adds	r5, r2, r1
 800c714:	42a5      	cmp	r5, r4
 800c716:	d10b      	bne.n	800c730 <_free_r+0x70>
 800c718:	6824      	ldr	r4, [r4, #0]
 800c71a:	4421      	add	r1, r4
 800c71c:	1854      	adds	r4, r2, r1
 800c71e:	42a3      	cmp	r3, r4
 800c720:	6011      	str	r1, [r2, #0]
 800c722:	d1e0      	bne.n	800c6e6 <_free_r+0x26>
 800c724:	681c      	ldr	r4, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	6053      	str	r3, [r2, #4]
 800c72a:	4421      	add	r1, r4
 800c72c:	6011      	str	r1, [r2, #0]
 800c72e:	e7da      	b.n	800c6e6 <_free_r+0x26>
 800c730:	d902      	bls.n	800c738 <_free_r+0x78>
 800c732:	230c      	movs	r3, #12
 800c734:	6003      	str	r3, [r0, #0]
 800c736:	e7d6      	b.n	800c6e6 <_free_r+0x26>
 800c738:	6825      	ldr	r5, [r4, #0]
 800c73a:	1961      	adds	r1, r4, r5
 800c73c:	428b      	cmp	r3, r1
 800c73e:	bf04      	itt	eq
 800c740:	6819      	ldreq	r1, [r3, #0]
 800c742:	685b      	ldreq	r3, [r3, #4]
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	bf04      	itt	eq
 800c748:	1949      	addeq	r1, r1, r5
 800c74a:	6021      	streq	r1, [r4, #0]
 800c74c:	6054      	str	r4, [r2, #4]
 800c74e:	e7ca      	b.n	800c6e6 <_free_r+0x26>
 800c750:	b003      	add	sp, #12
 800c752:	bd30      	pop	{r4, r5, pc}
 800c754:	2000b1c0 	.word	0x2000b1c0

0800c758 <sbrk_aligned>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	4e0e      	ldr	r6, [pc, #56]	; (800c794 <sbrk_aligned+0x3c>)
 800c75c:	460c      	mov	r4, r1
 800c75e:	6831      	ldr	r1, [r6, #0]
 800c760:	4605      	mov	r5, r0
 800c762:	b911      	cbnz	r1, 800c76a <sbrk_aligned+0x12>
 800c764:	f000 f8bc 	bl	800c8e0 <_sbrk_r>
 800c768:	6030      	str	r0, [r6, #0]
 800c76a:	4621      	mov	r1, r4
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 f8b7 	bl	800c8e0 <_sbrk_r>
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	d00a      	beq.n	800c78c <sbrk_aligned+0x34>
 800c776:	1cc4      	adds	r4, r0, #3
 800c778:	f024 0403 	bic.w	r4, r4, #3
 800c77c:	42a0      	cmp	r0, r4
 800c77e:	d007      	beq.n	800c790 <sbrk_aligned+0x38>
 800c780:	1a21      	subs	r1, r4, r0
 800c782:	4628      	mov	r0, r5
 800c784:	f000 f8ac 	bl	800c8e0 <_sbrk_r>
 800c788:	3001      	adds	r0, #1
 800c78a:	d101      	bne.n	800c790 <sbrk_aligned+0x38>
 800c78c:	f04f 34ff 	mov.w	r4, #4294967295
 800c790:	4620      	mov	r0, r4
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	2000b1c4 	.word	0x2000b1c4

0800c798 <_malloc_r>:
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	1ccd      	adds	r5, r1, #3
 800c79e:	f025 0503 	bic.w	r5, r5, #3
 800c7a2:	3508      	adds	r5, #8
 800c7a4:	2d0c      	cmp	r5, #12
 800c7a6:	bf38      	it	cc
 800c7a8:	250c      	movcc	r5, #12
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	db01      	blt.n	800c7b4 <_malloc_r+0x1c>
 800c7b0:	42a9      	cmp	r1, r5
 800c7b2:	d905      	bls.n	800c7c0 <_malloc_r+0x28>
 800c7b4:	230c      	movs	r3, #12
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	2600      	movs	r6, #0
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	4e2e      	ldr	r6, [pc, #184]	; (800c87c <_malloc_r+0xe4>)
 800c7c2:	f000 f89d 	bl	800c900 <__malloc_lock>
 800c7c6:	6833      	ldr	r3, [r6, #0]
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	bb34      	cbnz	r4, 800c81a <_malloc_r+0x82>
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f7ff ffc2 	bl	800c758 <sbrk_aligned>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	d14d      	bne.n	800c876 <_malloc_r+0xde>
 800c7da:	6834      	ldr	r4, [r6, #0]
 800c7dc:	4626      	mov	r6, r4
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	d140      	bne.n	800c864 <_malloc_r+0xcc>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	eb04 0803 	add.w	r8, r4, r3
 800c7ec:	f000 f878 	bl	800c8e0 <_sbrk_r>
 800c7f0:	4580      	cmp	r8, r0
 800c7f2:	d13a      	bne.n	800c86a <_malloc_r+0xd2>
 800c7f4:	6821      	ldr	r1, [r4, #0]
 800c7f6:	3503      	adds	r5, #3
 800c7f8:	1a6d      	subs	r5, r5, r1
 800c7fa:	f025 0503 	bic.w	r5, r5, #3
 800c7fe:	3508      	adds	r5, #8
 800c800:	2d0c      	cmp	r5, #12
 800c802:	bf38      	it	cc
 800c804:	250c      	movcc	r5, #12
 800c806:	4629      	mov	r1, r5
 800c808:	4638      	mov	r0, r7
 800c80a:	f7ff ffa5 	bl	800c758 <sbrk_aligned>
 800c80e:	3001      	adds	r0, #1
 800c810:	d02b      	beq.n	800c86a <_malloc_r+0xd2>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	442b      	add	r3, r5
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	e00e      	b.n	800c838 <_malloc_r+0xa0>
 800c81a:	6822      	ldr	r2, [r4, #0]
 800c81c:	1b52      	subs	r2, r2, r5
 800c81e:	d41e      	bmi.n	800c85e <_malloc_r+0xc6>
 800c820:	2a0b      	cmp	r2, #11
 800c822:	d916      	bls.n	800c852 <_malloc_r+0xba>
 800c824:	1961      	adds	r1, r4, r5
 800c826:	42a3      	cmp	r3, r4
 800c828:	6025      	str	r5, [r4, #0]
 800c82a:	bf18      	it	ne
 800c82c:	6059      	strne	r1, [r3, #4]
 800c82e:	6863      	ldr	r3, [r4, #4]
 800c830:	bf08      	it	eq
 800c832:	6031      	streq	r1, [r6, #0]
 800c834:	5162      	str	r2, [r4, r5]
 800c836:	604b      	str	r3, [r1, #4]
 800c838:	4638      	mov	r0, r7
 800c83a:	f104 060b 	add.w	r6, r4, #11
 800c83e:	f000 f865 	bl	800c90c <__malloc_unlock>
 800c842:	f026 0607 	bic.w	r6, r6, #7
 800c846:	1d23      	adds	r3, r4, #4
 800c848:	1af2      	subs	r2, r6, r3
 800c84a:	d0b6      	beq.n	800c7ba <_malloc_r+0x22>
 800c84c:	1b9b      	subs	r3, r3, r6
 800c84e:	50a3      	str	r3, [r4, r2]
 800c850:	e7b3      	b.n	800c7ba <_malloc_r+0x22>
 800c852:	6862      	ldr	r2, [r4, #4]
 800c854:	42a3      	cmp	r3, r4
 800c856:	bf0c      	ite	eq
 800c858:	6032      	streq	r2, [r6, #0]
 800c85a:	605a      	strne	r2, [r3, #4]
 800c85c:	e7ec      	b.n	800c838 <_malloc_r+0xa0>
 800c85e:	4623      	mov	r3, r4
 800c860:	6864      	ldr	r4, [r4, #4]
 800c862:	e7b2      	b.n	800c7ca <_malloc_r+0x32>
 800c864:	4634      	mov	r4, r6
 800c866:	6876      	ldr	r6, [r6, #4]
 800c868:	e7b9      	b.n	800c7de <_malloc_r+0x46>
 800c86a:	230c      	movs	r3, #12
 800c86c:	603b      	str	r3, [r7, #0]
 800c86e:	4638      	mov	r0, r7
 800c870:	f000 f84c 	bl	800c90c <__malloc_unlock>
 800c874:	e7a1      	b.n	800c7ba <_malloc_r+0x22>
 800c876:	6025      	str	r5, [r4, #0]
 800c878:	e7de      	b.n	800c838 <_malloc_r+0xa0>
 800c87a:	bf00      	nop
 800c87c:	2000b1c0 	.word	0x2000b1c0

0800c880 <_realloc_r>:
 800c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c884:	4680      	mov	r8, r0
 800c886:	4614      	mov	r4, r2
 800c888:	460e      	mov	r6, r1
 800c88a:	b921      	cbnz	r1, 800c896 <_realloc_r+0x16>
 800c88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c890:	4611      	mov	r1, r2
 800c892:	f7ff bf81 	b.w	800c798 <_malloc_r>
 800c896:	b92a      	cbnz	r2, 800c8a4 <_realloc_r+0x24>
 800c898:	f7ff ff12 	bl	800c6c0 <_free_r>
 800c89c:	4625      	mov	r5, r4
 800c89e:	4628      	mov	r0, r5
 800c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a4:	f000 f838 	bl	800c918 <_malloc_usable_size_r>
 800c8a8:	4284      	cmp	r4, r0
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	d802      	bhi.n	800c8b4 <_realloc_r+0x34>
 800c8ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8b2:	d812      	bhi.n	800c8da <_realloc_r+0x5a>
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	f7ff ff6e 	bl	800c798 <_malloc_r>
 800c8bc:	4605      	mov	r5, r0
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0ed      	beq.n	800c89e <_realloc_r+0x1e>
 800c8c2:	42bc      	cmp	r4, r7
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	bf28      	it	cs
 800c8ca:	463a      	movcs	r2, r7
 800c8cc:	f7ff fed0 	bl	800c670 <memcpy>
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	f7ff fef4 	bl	800c6c0 <_free_r>
 800c8d8:	e7e1      	b.n	800c89e <_realloc_r+0x1e>
 800c8da:	4635      	mov	r5, r6
 800c8dc:	e7df      	b.n	800c89e <_realloc_r+0x1e>
	...

0800c8e0 <_sbrk_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d06      	ldr	r5, [pc, #24]	; (800c8fc <_sbrk_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f4 fe52 	bl	8001594 <_sbrk>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_sbrk_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_sbrk_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	2000b1c8 	.word	0x2000b1c8

0800c900 <__malloc_lock>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__malloc_lock+0x8>)
 800c902:	f000 b811 	b.w	800c928 <__retarget_lock_acquire_recursive>
 800c906:	bf00      	nop
 800c908:	2000b1cc 	.word	0x2000b1cc

0800c90c <__malloc_unlock>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__malloc_unlock+0x8>)
 800c90e:	f000 b80c 	b.w	800c92a <__retarget_lock_release_recursive>
 800c912:	bf00      	nop
 800c914:	2000b1cc 	.word	0x2000b1cc

0800c918 <_malloc_usable_size_r>:
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f18      	subs	r0, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfbc      	itt	lt
 800c922:	580b      	ldrlt	r3, [r1, r0]
 800c924:	18c0      	addlt	r0, r0, r3
 800c926:	4770      	bx	lr

0800c928 <__retarget_lock_acquire_recursive>:
 800c928:	4770      	bx	lr

0800c92a <__retarget_lock_release_recursive>:
 800c92a:	4770      	bx	lr

0800c92c <_init>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	bf00      	nop
 800c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c932:	bc08      	pop	{r3}
 800c934:	469e      	mov	lr, r3
 800c936:	4770      	bx	lr

0800c938 <_fini>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	bf00      	nop
 800c93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93e:	bc08      	pop	{r3}
 800c940:	469e      	mov	lr, r3
 800c942:	4770      	bx	lr
