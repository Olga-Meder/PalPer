
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad6c  0800ad6c  0002acb8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad74  0800ad74  0002acb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000acb8  20000000  0800ad7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000acb8  08015a34  0002acb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b178  08015a34  0002b178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021427  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c50  00000000  00000000  0004c10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  0004fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  000518c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca84  00000000  00000000  000532d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eed6  00000000  00000000  0007fd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011601d  00000000  00000000  0009ec2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074cc  00000000  00000000  001b4c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000acb8 	.word	0x2000acb8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acb4 	.word	0x0800acb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000acbc 	.word	0x2000acbc
 80001c4:	0800acb4 	.word	0x0800acb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AudioPlay_Error_CallBack>:
//6.snare -> sektor 21



void AudioPlay_Error_CallBack(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 80004d0:	f000 fc40 	bl	8000d54 <Error_Handler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <AudioPlay_TransferComplete_CallBack>:
static uint16_t *pAudioSample;

static uint32_t RozmiarSekcji = 65536;

void AudioPlay_TransferComplete_CallBack()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <Fill_Buffer>:

/* USER CODE BEGIN PV */


uint8_t PomiarADC;
void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t petla) { // tymczasowa funkcja do wypełniania bufforu
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <Fill_Buffer+0x2c>
  {
	  pBuffer[tmpIndex] = hex_array[petla];
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	4413      	add	r3, r2
 8000504:	4909      	ldr	r1, [pc, #36]	; (800052c <Fill_Buffer+0x44>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	440a      	add	r2, r1
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3f0      	bcc.n	80004fe <Fill_Buffer+0x16>
  }
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	371c      	adds	r7, #28
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000

08000530 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <HAL_ADC_ConvCpltCallback+0x20>)
 800053a:	f003 fad9 	bl	8003af0 <HAL_ADC_GetValue>
 800053e:	4603      	mov	r3, r0
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_ADC_ConvCpltCallback+0x24>)
 8000544:	701a      	strb	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000ace0 	.word	0x2000ace0
 8000554:	2000afbc 	.word	0x2000afbc

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f002 ff03 	bl	8003368 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f89f 	bl	80006a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000566:	f000 f8f1 	bl	800074c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fb17 	bl	8000b9c <MX_GPIO_Init>
  MX_LCD_Init();
 800056e:	f000 fa09 	bl	8000984 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000572:	f000 fa41 	bl	80009f8 <MX_QUADSPI_Init>
  MX_DFSDM1_Init();
 8000576:	f000 f98d 	bl	8000894 <MX_DFSDM1_Init>
  MX_RTC_Init();
 800057a:	f000 fa63 	bl	8000a44 <MX_RTC_Init>
  MX_I2C1_Init();
 800057e:	f000 f9c1 	bl	8000904 <MX_I2C1_Init>
  MX_DMA_Init();
 8000582:	f000 faed 	bl	8000b60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000586:	f000 fabb 	bl	8000b00 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800058a:	f000 fa83 	bl	8000a94 <MX_SAI1_Init>
  MX_ADC1_Init();
 800058e:	f000 f90b 	bl	80007a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 8000592:	f001 fe8d 	bl	80022b0 <BSP_LCD_GLASS_Init>

 // BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_HIGH);

  static QSPI_Info pQSPI_Info;
  uint8_t status;
  status = BSP_QSPI_Init();
 8000596:	f002 fc7f 	bl	8002e98 <BSP_QSPI_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	70fb      	strb	r3, [r7, #3]

  if (status == QSPI_OK) {
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10e      	bne.n	80005c2 <main+0x6a>
	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <main+0x120>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <main+0x120>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <main+0x120>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <main+0x120>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <main+0x120>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  }

 //  HAL_ADC_Start(&hadc1);

  for (uint32_t i = 0; i < AUDIO_FILE_SIZE; i++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	e015      	b.n	80005f4 <main+0x9c>
	  Fill_Buffer(qspi_aTxBuffer, BUFFER_SIZE,i);
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	2101      	movs	r1, #1
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0x124>)
 80005ce:	f7ff ff8b 	bl	80004e8 <Fill_Buffer>
	  BSP_QSPI_Write(qspi_aTxBuffer, ((WRITE_READ_ADDR+(RozmiarSekcji*5))+(BUFFER_SIZE*i)), BUFFER_SIZE);
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <main+0x128>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	441a      	add	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4824      	ldr	r0, [pc, #144]	; (800067c <main+0x124>)
 80005ea:	f002 fcab 	bl	8002f44 <BSP_QSPI_Write>
  for (uint32_t i = 0; i < AUDIO_FILE_SIZE; i++) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f64a 426f 	movw	r2, #44143	; 0xac6f
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d9e4      	bls.n	80005c8 <main+0x70>
  }

  HAL_GPIO_TogglePin(LED4_GPIO_PORT, LED4_PIN);
 80005fe:	2104      	movs	r1, #4
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <main+0x12c>)
 8000602:	f005 f895 	bl	8005730 <HAL_GPIO_TogglePin>
//  BSP_QSPI_Read(qspi_aRxBuffer, (WRITE_READ_ADDR+(RozmiarSekcji*0)), 4);
//  BSP_LCD_GLASS_DisplayString((uint8_t *) qspi_aRxBuffer);


  /* Audio playback demo is running */
  AudioDemo = AUDIO_DEMO_PLAYBACK;
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <main+0x130>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]

  /* Set the remaining number of data to be played */
  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <main+0x134>)
 800060e:	f245 6238 	movw	r2, #22072	; 0x5638
 8000612:	601a      	str	r2, [r3, #0]

  /* Set the pointer to the first audio sample to play */
  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * 3));
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x128>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000622:	461a      	mov	r2, r3
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <main+0x138>)
 8000626:	601a      	str	r2, [r3, #0]


  if(BSP_AUDIO_OUT_Init(2,  // Słuchawki
 8000628:	f64a 4244 	movw	r2, #44100	; 0xac44
 800062c:	213c      	movs	r1, #60	; 0x3c
 800062e:	2002      	movs	r0, #2
 8000630:	f001 fcc0 	bl	8001fb4 <BSP_AUDIO_OUT_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <main+0xec>
                        60, // %głośności
                        44100) != 0)  // częstotliwość
  {
	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 1");
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <main+0x13c>)
 800063c:	f001 fe72 	bl	8002324 <BSP_LCD_GLASS_DisplayString>
		  Error_Handler();
 8000640:	f000 fb88 	bl	8000d54 <Error_Handler>
  }

  BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <main+0x140>)
 8000646:	2100      	movs	r1, #0
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0x144>)
 800064a:	f001 fd15 	bl	8002078 <BSP_AUDIO_OUT_RegisterCallbacks>
                                  NULL,
                                  AudioPlay_TransferComplete_CallBack);

  if(BSP_AUDIO_OUT_SetVolume(60) != 0)
 800064e:	203c      	movs	r0, #60	; 0x3c
 8000650:	f001 fcfa 	bl	8002048 <BSP_AUDIO_OUT_SetVolume>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d004      	beq.n	8000664 <main+0x10c>
  {
	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 2");
 800065a:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0x148>)
 800065c:	f001 fe62 	bl	8002324 <BSP_LCD_GLASS_DisplayString>
	  Error_Handler();
 8000660:	f000 fb78 	bl	8000d54 <Error_Handler>
//	   {
//	 	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 3");
//	 	  Error_Handler();
//	   }

	  HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f002 fefa 	bl	8003460 <HAL_Delay>
  HAL_Delay(2000);
 800066c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000670:	f002 fef6 	bl	8003460 <HAL_Delay>
//  BSP_AUDIO_OUT_Stop(2);

   while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x11c>
 8000676:	bf00      	nop
 8000678:	2000afc0 	.word	0x2000afc0
 800067c:	2000acd4 	.word	0x2000acd4
 8000680:	2000ac70 	.word	0x2000ac70
 8000684:	48000400 	.word	0x48000400
 8000688:	2000acd5 	.word	0x2000acd5
 800068c:	2000acd8 	.word	0x2000acd8
 8000690:	2000acdc 	.word	0x2000acdc
 8000694:	0800accc 	.word	0x0800accc
 8000698:	080004d9 	.word	0x080004d9
 800069c:	080004cd 	.word	0x080004cd
 80006a0:	0800acd4 	.word	0x0800acd4

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f00a faf6 	bl	800aca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f006 f85d 	bl	8006788 <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 fb3e 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d8:	230a      	movs	r3, #10
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e2:	2310      	movs	r3, #16
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fd92 	bl	8007234 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000716:	f000 fb1d 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f007 f966 	bl	8007a04 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073e:	f000 fb09 	bl	8000d54 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	; 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0a2      	sub	sp, #136	; 0x88
 8000750:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2288      	movs	r2, #136	; 0x88
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f00a faa3 	bl	800aca4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 800075e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000762:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000764:	2300      	movs	r3, #0
 8000766:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800076c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000776:	230a      	movs	r3, #10
 8000778:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800077a:	2307      	movs	r3, #7
 800077c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <PeriphCommonClock_Config+0x58>)
 8000788:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4618      	mov	r0, r3
 800078e:	f007 fb3f 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000798:	f000 fadc 	bl	8000d54 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3788      	adds	r7, #136	; 0x88
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	01010000 	.word	0x01010000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007cc:	4a2f      	ldr	r2, [pc, #188]	; (800088c <MX_ADC1_Init+0xe4>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007d8:	2210      	movs	r2, #16
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_ADC1_Init+0xe0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_ADC1_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_ADC1_Init+0xe0>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <MX_ADC1_Init+0xe0>)
 800082c:	f003 f80a 	bl	8003844 <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000836:	f000 fa8d 	bl	8000d54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000846:	f003 ffd7 	bl	80047f8 <HAL_ADCEx_MultiModeConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000850:	f000 fa80 	bl	8000d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000858:	2306      	movs	r3, #6
 800085a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800085c:	2306      	movs	r3, #6
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000860:	237f      	movs	r3, #127	; 0x7f
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000864:	2304      	movs	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_ADC1_Init+0xe0>)
 8000872:	f003 fb79 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800087c:	f000 fa6a 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000ace0 	.word	0x2000ace0
 800088c:	50040000 	.word	0x50040000
 8000890:	21800100 	.word	0x21800100

08000894 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_Init 0 */
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */
  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_DFSDM1_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008d8:	2201      	movs	r2, #1
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_DFSDM1_Init+0x68>)
 80008ea:	f004 f979 	bl	8004be0 <HAL_DFSDM_ChannelInit>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008f4:	f000 fa2e 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */
  /* USER CODE END DFSDM1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000ad44 	.word	0x2000ad44
 8000900:	40016000 	.word	0x40016000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f004 ff10 	bl	8005764 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fa03 	bl	8000d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f005 fca7 	bl	80062a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 f9fa 	bl	8000d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f005 fce9 	bl	800633a <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f9f1 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000ad7c 	.word	0x2000ad7c
 800097c:	40005400 	.word	0x40005400
 8000980:	10909cec 	.word	0x10909cec

08000984 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_LCD_Init+0x6c>)
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <MX_LCD_Init+0x70>)
 800098c:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_LCD_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_LCD_Init+0x6c>)
 8000996:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800099a:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_LCD_Init+0x6c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009a4:	2240      	movs	r2, #64	; 0x40
 80009a6:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_LCD_Init+0x6c>)
 80009de:	f005 fcf9 	bl	80063d4 <HAL_LCD_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_LCD_Init+0x68>
  {
    Error_Handler();
 80009e8:	f000 f9b4 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000adc8 	.word	0x2000adc8
 80009f4:	40002400 	.word	0x40002400

080009f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <MX_QUADSPI_Init+0x48>)
 8000a00:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a16:	2218      	movs	r2, #24
 8000a18:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_QUADSPI_Init+0x44>)
 8000a28:	f005 ff24 	bl	8006874 <HAL_QSPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a32:	f000 f98f 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000ae04 	.word	0x2000ae04
 8000a40:	a0001000 	.word	0xa0001000

08000a44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <MX_RTC_Init+0x4c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a56:	227f      	movs	r2, #127	; 0x7f
 8000a58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_RTC_Init+0x48>)
 8000a7a:	f008 fdd3 	bl	8009624 <HAL_RTC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a84:	f000 f966 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000ae48 	.word	0x2000ae48
 8000a90:	40002800 	.word	0x40002800

08000a94 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_SAI1_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000abe:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ac2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000adc:	2302      	movs	r3, #2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_SAI1_Init+0x64>)
 8000ae4:	f008 feb0 	bl	8009848 <HAL_SAI_InitProtocol>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 f931 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000ae6c 	.word	0x2000ae6c
 8000afc:	40015404 	.word	0x40015404

08000b00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART3_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b44:	f009 fbd3 	bl	800a2ee <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f901 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000af38 	.word	0x2000af38
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6493      	str	r3, [r2, #72]	; 0x48
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2038      	movs	r0, #56	; 0x38
 8000b84:	f003 ffe7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000b88:	2038      	movs	r0, #56	; 0x38
 8000b8a:	f004 f800 	bl	8004b8e <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b5f      	ldr	r3, [pc, #380]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a5e      	ldr	r2, [pc, #376]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b44      	ldr	r3, [pc, #272]	; (8000d48 <MX_GPIO_Init+0x1ac>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2108      	movs	r1, #8
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c48:	f004 fd5a 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2102      	movs	r1, #2
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f004 fd54 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f004 fd4e 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	4839      	ldr	r0, [pc, #228]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000c6a:	f004 fd49 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	4835      	ldr	r0, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c76:	f004 fd43 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482e      	ldr	r0, [pc, #184]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c92:	f004 fa97 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f004 fa8a 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f004 fa7b 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_Y2_Pin;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIGITIZER_IN_Y2_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce4:	f004 fa6e 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f004 fa5f 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000d06:	2304      	movs	r3, #4
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000d1e:	f004 fa51 	bl	80051c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000d3c:	f004 fa42 	bl	80051c4 <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48000400 	.word	0x48000400

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_MspInit+0x44>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6613      	str	r3, [r2, #96]	; 0x60
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12c      	bne.n	8000e24 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_ADC_MspInit+0x88>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f004 f9d8 	bl	80051c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2012      	movs	r0, #18
 8000e1a:	f003 fe9c 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e1e:	2012      	movs	r0, #18
 8000e20:	f003 feb5 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	50040000 	.word	0x50040000
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0a6      	sub	sp, #152	; 0x98
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2288      	movs	r2, #136	; 0x88
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 ff2d 	bl	800aca4 <memset>
  if(DFSDM1_Init == 0)
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0x68>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d120      	bne.n	8000e94 <HAL_DFSDM_ChannelMspInit+0x60>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 ffd4 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8000e6e:	f7ff ff71 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_DFSDM_ChannelMspInit+0x6c>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0x68>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <HAL_DFSDM_ChannelMspInit+0x68>)
 8000e92:	6013      	str	r3, [r2, #0]
  }

}
 8000e94:	bf00      	nop
 8000e96:	3798      	adds	r7, #152	; 0x98
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000afd4 	.word	0x2000afd4
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ac      	sub	sp, #176	; 0xb0
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2288      	movs	r2, #136	; 0x88
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f009 feed 	bl	800aca4 <memset>
  if(hi2c->Instance==I2C1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_I2C_MspInit+0xb0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d13a      	bne.n	8000f4a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 ff95 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eec:	f7ff ff32 	bl	8000d54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f08:	23c0      	movs	r3, #192	; 0xc0
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f20:	2304      	movs	r3, #4
 8000f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_I2C_MspInit+0xb8>)
 8000f2e:	f004 f949 	bl	80051c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37b0      	adds	r7, #176	; 0xb0
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_I2C_MspDeInit+0x38>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10d      	bne.n	8000f8e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_I2C_MspDeInit+0x3c>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_I2C_MspDeInit+0x3c>)
 8000f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <HAL_I2C_MspDeInit+0x40>)
 8000f82:	f004 fac9 	bl	8005518 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_I2C_MspDeInit+0x40>)
 8000f8a:	f004 fac5 	bl	8005518 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ae      	sub	sp, #184	; 0xb8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 fe6d 	bl	800aca4 <memset>
  if(hlcd->Instance==LCD)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a57      	ldr	r2, [pc, #348]	; (800112c <HAL_LCD_MspInit+0x188>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	f040 80a6 	bne.w	8001122 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 ff11 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000ff4:	f7ff feae 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6593      	str	r3, [r2, #88]	; 0x58
 8001004:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a46      	ldr	r2, [pc, #280]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b44      	ldr	r3, [pc, #272]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b41      	ldr	r3, [pc, #260]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a40      	ldr	r2, [pc, #256]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	4a3a      	ldr	r2, [pc, #232]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a34      	ldr	r2, [pc, #208]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_LCD_MspInit+0x18c>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8001070:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800108a:	230b      	movs	r3, #11
 800108c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <HAL_LCD_MspInit+0x190>)
 8001098:	f004 f894 	bl	80051c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 800109c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010b6:	230b      	movs	r3, #11
 80010b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f004 f87d 	bl	80051c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80010ca:	f24f 2333 	movw	r3, #62003	; 0xf233
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010e4:	230b      	movs	r3, #11
 80010e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <HAL_LCD_MspInit+0x194>)
 80010f2:	f004 f867 	bl	80051c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80010f6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001110:	230b      	movs	r3, #11
 8001112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <HAL_LCD_MspInit+0x198>)
 800111e:	f004 f851 	bl	80051c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	37b8      	adds	r7, #184	; 0xb8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40002400 	.word	0x40002400
 8001130:	40021000 	.word	0x40021000
 8001134:	48000800 	.word	0x48000800
 8001138:	48000400 	.word	0x48000400
 800113c:	48000c00 	.word	0x48000c00

08001140 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_QSPI_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d128      	bne.n	80011b4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 8001164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6513      	str	r3, [r2, #80]	; 0x50
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 8001170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_QSPI_MspInit+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001192:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001196:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011a4:	230a      	movs	r3, #10
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_QSPI_MspInit+0x84>)
 80011b0:	f004 f808 	bl	80051c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	a0001000 	.word	0xa0001000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48001000 	.word	0x48001000

080011c8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_QSPI_MspDeInit+0x30>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10a      	bne.n	80011f0 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_QSPI_MspDeInit+0x34>)
 80011dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_QSPI_MspDeInit+0x34>)
 80011e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 80011e6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_QSPI_MspDeInit+0x38>)
 80011ec:	f004 f994 	bl	8005518 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	a0001000 	.word	0xa0001000
 80011fc:	40021000 	.word	0x40021000
 8001200:	48001000 	.word	0x48001000

08001204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0a4      	sub	sp, #144	; 0x90
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2288      	movs	r2, #136	; 0x88
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fd45 	bl	800aca4 <memset>
  if(hrtc->Instance==RTC)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_RTC_MspInit+0x5c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d118      	bne.n	8001256 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f006 fdea 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001242:	f7ff fd87 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_RTC_MspInit+0x60>)
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_RTC_MspInit+0x60>)
 800124e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3790      	adds	r7, #144	; 0x90
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40002800 	.word	0x40002800
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ac      	sub	sp, #176	; 0xb0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2288      	movs	r2, #136	; 0x88
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f009 fd0b 	bl	800aca4 <memset>
  if(huart->Instance==USART3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a21      	ldr	r2, [pc, #132]	; (8001318 <HAL_UART_MspInit+0xb0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d13b      	bne.n	8001310 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001298:	2304      	movs	r3, #4
 800129a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fdb3 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b0:	f7ff fd50 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_UART_MspInit+0xb4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012fe:	2307      	movs	r3, #7
 8001300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_MspInit+0xb8>)
 800130c:	f003 ff5a 	bl	80051c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	37b0      	adds	r7, #176	; 0xb0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004800 	.word	0x40004800
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_SAI_MspInit+0xd8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d15d      	bne.n	80013f2 <HAL_SAI_MspInit+0xce>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_SAI_MspInit+0xdc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d113      	bne.n	8001366 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <HAL_SAI_MspInit+0xe0>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a30      	ldr	r2, [pc, #192]	; (8001404 <HAL_SAI_MspInit+0xe0>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_SAI_MspInit+0xe0>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	204a      	movs	r0, #74	; 0x4a
 800135c:	f003 fbfb 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001360:	204a      	movs	r0, #74	; 0x4a
 8001362:	f003 fc14 	bl	8004b8e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_SAI_MspInit+0xdc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a24      	ldr	r2, [pc, #144]	; (8001400 <HAL_SAI_MspInit+0xdc>)
 800136e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001370:	2374      	movs	r3, #116	; 0x74
 8001372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001380:	230d      	movs	r3, #13
 8001382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	481f      	ldr	r0, [pc, #124]	; (8001408 <HAL_SAI_MspInit+0xe4>)
 800138c:	f003 ff1a 	bl	80051c4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_SAI_MspInit+0xe8>)
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_SAI_MspInit+0xec>)
 8001394:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_SAI_MspInit+0xe8>)
 8001398:	2201      	movs	r2, #1
 800139a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_SAI_MspInit+0xe8>)
 800139e:	2210      	movs	r2, #16
 80013a0:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013bc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013c0:	2220      	movs	r2, #32
 80013c2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80013ca:	4810      	ldr	r0, [pc, #64]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013cc:	f003 fd14 	bl	8004df8 <HAL_DMA_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 80013d6:	f7ff fcbd 	bl	8000d54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013de:	671a      	str	r2, [r3, #112]	; 0x70
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_SAI_MspInit+0xe8>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40015404 	.word	0x40015404
 8001400:	2000afd8 	.word	0x2000afd8
 8001404:	40021000 	.word	0x40021000
 8001408:	48001000 	.word	0x48001000
 800140c:	2000aef0 	.word	0x2000aef0
 8001410:	40020408 	.word	0x40020408

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f001 ffde 	bl	8003420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <ADC1_2_IRQHandler+0x10>)
 800146e:	f002 fb4d 	bl	8003b0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000ace0 	.word	0x2000ace0

0800147c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA2_Channel1_IRQHandler+0x10>)
 8001482:	f003 fdf0 	bl	8005066 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000aef0 	.word	0x2000aef0

08001490 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <SAI1_IRQHandler+0x10>)
 8001496:	f008 fbe1 	bl	8009c5c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000ae6c 	.word	0x2000ae6c

080014a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f009 fbb1 	bl	800ac5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff f82d 	bl	8000558 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	2000acb8 	.word	0x2000acb8
  ldr r2, =_sidata
 800150c:	0800ad7c 	.word	0x0800ad7c
  ldr r2, =_sbss
 8001510:	2000acb8 	.word	0x2000acb8
  ldr r4, =_ebss
 8001514:	2000b178 	.word	0x2000b178

08001518 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC3_IRQHandler>
	...

0800151c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4603      	mov	r3, r0
 8001526:	81fb      	strh	r3, [r7, #14]
 8001528:	460b      	mov	r3, r1
 800152a:	81bb      	strh	r3, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001534:	f000 fc96 	bl	8001e64 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2201      	movs	r2, #1
 800153e:	2102      	movs	r1, #2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fb01 	bl	8001b48 <CODEC_IO_Write>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4413      	add	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	3b01      	subs	r3, #1
 8001554:	2b03      	cmp	r3, #3
 8001556:	d81b      	bhi.n	8001590 <cs43l22_Init+0x74>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <cs43l22_Init+0x44>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001571 	.word	0x08001571
 8001564:	08001579 	.word	0x08001579
 8001568:	08001581 	.word	0x08001581
 800156c:	08001589 	.word	0x08001589
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001570:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <cs43l22_Init+0x1c4>)
 8001572:	22fa      	movs	r2, #250	; 0xfa
 8001574:	701a      	strb	r2, [r3, #0]
    break;
 8001576:	e00f      	b.n	8001598 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <cs43l22_Init+0x1c4>)
 800157a:	22af      	movs	r2, #175	; 0xaf
 800157c:	701a      	strb	r2, [r3, #0]
    break;
 800157e:	e00b      	b.n	8001598 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <cs43l22_Init+0x1c4>)
 8001582:	22aa      	movs	r2, #170	; 0xaa
 8001584:	701a      	strb	r2, [r3, #0]
    break;
 8001586:	e007      	b.n	8001598 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001588:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <cs43l22_Init+0x1c4>)
 800158a:	2205      	movs	r2, #5
 800158c:	701a      	strb	r2, [r3, #0]
    break;    
 800158e:	e003      	b.n	8001598 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <cs43l22_Init+0x1c4>)
 8001592:	2205      	movs	r2, #5
 8001594:	701a      	strb	r2, [r3, #0]
    break;    
 8001596:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <cs43l22_Init+0x1c4>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	2104      	movs	r1, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 facf 	bl	8001b48 <CODEC_IO_Write>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2281      	movs	r2, #129	; 0x81
 80015ba:	2105      	movs	r1, #5
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fac3 	bl	8001b48 <CODEC_IO_Write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2204      	movs	r2, #4
 80015d2:	2106      	movs	r1, #6
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fab7 	bl	8001b48 <CODEC_IO_Write>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80015e4:	7afa      	ldrb	r2, [r7, #11]
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f964 	bl	80018b8 <cs43l22_SetVolume>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80015f8:	89bb      	ldrh	r3, [r7, #12]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d023      	beq.n	8001646 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2206      	movs	r2, #6
 8001604:	210f      	movs	r1, #15
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fa9e 	bl	8001b48 <CODEC_IO_Write>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2200      	movs	r2, #0
 800161c:	2124      	movs	r1, #36	; 0x24
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fa92 	bl	8001b48 <CODEC_IO_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2200      	movs	r2, #0
 8001634:	2125      	movs	r1, #37	; 0x25
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fa86 	bl	8001b48 <CODEC_IO_Write>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2200      	movs	r2, #0
 800164c:	210a      	movs	r1, #10
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fa7a 	bl	8001b48 <CODEC_IO_Write>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2204      	movs	r2, #4
 8001664:	210e      	movs	r1, #14
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa6e 	bl	8001b48 <CODEC_IO_Write>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2200      	movs	r2, #0
 800167c:	2127      	movs	r1, #39	; 0x27
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fa62 	bl	8001b48 <CODEC_IO_Write>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	220f      	movs	r2, #15
 8001694:	211f      	movs	r1, #31
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fa56 	bl	8001b48 <CODEC_IO_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	220a      	movs	r2, #10
 80016ac:	211a      	movs	r1, #26
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fa4a 	bl	8001b48 <CODEC_IO_Write>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	220a      	movs	r2, #10
 80016c4:	211b      	movs	r1, #27
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fa3e 	bl	8001b48 <CODEC_IO_Write>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80016d6:	697b      	ldr	r3, [r7, #20]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000afdc 	.word	0x2000afdc

080016e4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80016e8:	f000 fbf2 	bl	8001ed0 <AUDIO_IO_DeInit>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80016fa:	f000 fbb3 	bl	8001e64 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2101      	movs	r1, #1
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fc3a 	bl	8001f7e <AUDIO_IO_Read>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f023 0307 	bic.w	r3, r3, #7
 8001714:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <cs43l22_Play+0x70>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d123      	bne.n	8001784 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2206      	movs	r2, #6
 8001742:	210e      	movs	r1, #14
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f9ff 	bl	8001b48 <CODEC_IO_Write>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f919 	bl	8001990 <cs43l22_SetMute>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	229e      	movs	r2, #158	; 0x9e
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f9ea 	bl	8001b48 <CODEC_IO_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <cs43l22_Play+0x70>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000aca8 	.word	0x2000aca8

08001794 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	2101      	movs	r1, #1
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f8f2 	bl	8001990 <cs43l22_SetMute>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	2102      	movs	r1, #2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f9c3 	bl	8001b48 <CODEC_IO_Write>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80017cc:	68fb      	ldr	r3, [r7, #12]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f8ce 	bl	8001990 <cs43l22_SetMute>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	e002      	b.n	8001808 <cs43l22_Resume+0x30>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2bfe      	cmp	r3, #254	; 0xfe
 800180c:	d9f9      	bls.n	8001802 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <cs43l22_Resume+0x74>)
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	2104      	movs	r1, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f994 	bl	8001b48 <CODEC_IO_Write>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	229e      	movs	r2, #158	; 0x9e
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f988 	bl	8001b48 <CODEC_IO_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000afdc 	.word	0x2000afdc

08001850 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	2101      	movs	r1, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f893 	bl	8001990 <cs43l22_SetMute>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2204      	movs	r2, #4
 8001878:	210e      	movs	r1, #14
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f964 	bl	8001b48 <CODEC_IO_Write>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	229f      	movs	r2, #159	; 0x9f
 8001890:	2102      	movs	r1, #2
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f958 	bl	8001b48 <CODEC_IO_Write>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <cs43l22_Stop+0x64>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  return counter;    
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000aca8 	.word	0x2000aca8

080018b8 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	4613      	mov	r3, r2
 80018c6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d80b      	bhi.n	80018ea <cs43l22_SetVolume+0x32>
 80018d2:	797a      	ldrb	r2, [r7, #5]
 80018d4:	4613      	mov	r3, r2
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <cs43l22_SetVolume+0xb8>)
 80018dc:	fb82 1203 	smull	r1, r2, r2, r3
 80018e0:	1152      	asrs	r2, r2, #5
 80018e2:	17db      	asrs	r3, r3, #31
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	e000      	b.n	80018ec <cs43l22_SetVolume+0x34>
 80018ea:	23ff      	movs	r3, #255	; 0xff
 80018ec:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	2be6      	cmp	r3, #230	; 0xe6
 80018f2:	d91c      	bls.n	800192e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	b2d8      	uxtb	r0, r3
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	3319      	adds	r3, #25
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	2120      	movs	r1, #32
 8001902:	f000 f921 	bl	8001b48 <CODEC_IO_Write>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	b2d8      	uxtb	r0, r3
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	3319      	adds	r3, #25
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	2121      	movs	r1, #33	; 0x21
 800191e:	f000 f913 	bl	8001b48 <CODEC_IO_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e01b      	b.n	8001966 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2d8      	uxtb	r0, r3
 8001932:	7afb      	ldrb	r3, [r7, #11]
 8001934:	3319      	adds	r3, #25
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	2120      	movs	r1, #32
 800193c:	f000 f904 	bl	8001b48 <CODEC_IO_Write>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	b2d8      	uxtb	r0, r3
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	3319      	adds	r3, #25
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	2121      	movs	r1, #33	; 0x21
 8001958:	f000 f8f6 	bl	8001b48 <CODEC_IO_Write>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	51eb851f 	.word	0x51eb851f

08001974 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d124      	bne.n	80019f0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	22ff      	movs	r2, #255	; 0xff
 80019ac:	2104      	movs	r1, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f8ca 	bl	8001b48 <CODEC_IO_Write>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2201      	movs	r2, #1
 80019c4:	2122      	movs	r1, #34	; 0x22
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f8be 	bl	8001b48 <CODEC_IO_Write>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2201      	movs	r2, #1
 80019dc:	2123      	movs	r1, #35	; 0x23
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f8b2 	bl	8001b48 <CODEC_IO_Write>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e025      	b.n	8001a3c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	2122      	movs	r1, #34	; 0x22
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f8a5 	bl	8001b48 <CODEC_IO_Write>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2123      	movs	r1, #35	; 0x23
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f899 	bl	8001b48 <CODEC_IO_Write>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <cs43l22_SetMute+0xb8>)
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f88b 	bl	8001b48 <CODEC_IO_Write>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000afdc 	.word	0x2000afdc

08001a4c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	80fb      	strh	r3, [r7, #6]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001a60:	797b      	ldrb	r3, [r7, #5]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d84b      	bhi.n	8001b00 <cs43l22_SetOutputMode+0xb4>
 8001a68:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <cs43l22_SetOutputMode+0x24>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001aa1 	.word	0x08001aa1
 8001a78:	08001ac1 	.word	0x08001ac1
 8001a7c:	08001ae1 	.word	0x08001ae1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	22fa      	movs	r2, #250	; 0xfa
 8001a86:	2104      	movs	r1, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f85d 	bl	8001b48 <CODEC_IO_Write>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <cs43l22_SetOutputMode+0xe0>)
 8001a9a:	22fa      	movs	r2, #250	; 0xfa
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e03f      	b.n	8001b20 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	22af      	movs	r2, #175	; 0xaf
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f84d 	bl	8001b48 <CODEC_IO_Write>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <cs43l22_SetOutputMode+0xe0>)
 8001aba:	22af      	movs	r2, #175	; 0xaf
 8001abc:	701a      	strb	r2, [r3, #0]
      break;
 8001abe:	e02f      	b.n	8001b20 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	22aa      	movs	r2, #170	; 0xaa
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f83d 	bl	8001b48 <CODEC_IO_Write>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <cs43l22_SetOutputMode+0xe0>)
 8001ada:	22aa      	movs	r2, #170	; 0xaa
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e01f      	b.n	8001b20 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f82d 	bl	8001b48 <CODEC_IO_Write>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <cs43l22_SetOutputMode+0xe0>)
 8001afa:	2205      	movs	r2, #5
 8001afc:	701a      	strb	r2, [r3, #0]
      break;    
 8001afe:	e00f      	b.n	8001b20 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2205      	movs	r2, #5
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f81d 	bl	8001b48 <CODEC_IO_Write>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <cs43l22_SetOutputMode+0xe0>)
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	bf00      	nop
  }  
  return counter;
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000afdc 	.word	0x2000afdc

08001b30 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	460b      	mov	r3, r1
 8001b54:	71bb      	strb	r3, [r7, #6]
 8001b56:	4613      	mov	r3, r2
 8001b58:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001b5e:	797a      	ldrb	r2, [r7, #5]
 8001b60:	79b9      	ldrb	r1, [r7, #6]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f9f3 	bl	8001f50 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	b2db      	uxtb	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001b7c:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <I2C1_Init+0x50>)
 8001b7e:	f004 f8dd 	bl	8005d3c <HAL_I2C_GetState>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11d      	bne.n	8001bc4 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <I2C1_Init+0x50>)
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <I2C1_Init+0x50>)
 8001b90:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <I2C1_Init+0x50>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <I2C1_Init+0x50>)
 8001bba:	f000 f80b 	bl	8001bd4 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001bbe:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <I2C1_Init+0x50>)
 8001bc0:	f003 fdd0 	bl	8005764 <HAL_I2C_Init>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000afe0 	.word	0x2000afe0
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	90112626 	.word	0x90112626

08001bd4 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0ae      	sub	sp, #184	; 0xb8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	6593      	str	r3, [r2, #88]	; 0x58
 8001be8:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001bf4:	f004 fe1e 	bl	8006834 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a33      	ldr	r2, [pc, #204]	; (8001ccc <I2C1_MspInit+0xf8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d15e      	bne.n	8001cc0 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 f8fd 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001c64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <I2C1_MspInit+0xfc>)
 8001c6c:	f003 faaa 	bl	80051c4 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <I2C1_MspInit+0xf4>)
 8001c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	201f      	movs	r0, #31
 8001ca6:	f002 ff56 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001caa:	201f      	movs	r0, #31
 8001cac:	f002 ff6f 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2020      	movs	r0, #32
 8001cb6:	f002 ff4e 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001cba:	2020      	movs	r0, #32
 8001cbc:	f002 ff67 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	37b8      	adds	r7, #184	; 0xb8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <I2C1_DeInit+0x20>)
 8001cda:	f004 f82f 	bl	8005d3c <HAL_I2C_GetState>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <I2C1_DeInit+0x20>)
 8001ce6:	f003 fdcc 	bl	8005882 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001cea:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <I2C1_DeInit+0x20>)
 8001cec:	f000 f804 	bl	8001cf8 <I2C1_MspDeInit>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000afe0 	.word	0x2000afe0

08001cf8 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <I2C1_MspDeInit+0xa0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d141      	bne.n	8001d8e <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001d3a:	21c0      	movs	r1, #192	; 0xc0
 8001d3c:	4818      	ldr	r0, [pc, #96]	; (8001da0 <I2C1_MspDeInit+0xa8>)
 8001d3e:	f003 fbeb 	bl	8005518 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d4c:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001d66:	201f      	movs	r0, #31
 8001d68:	f002 ff1f 	bl	8004baa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f002 ff1c 	bl	8004baa <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <I2C1_MspDeInit+0xa4>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001d8a:	f004 fd63 	bl	8006854 <HAL_PWREx_DisableVddIO2>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000400 	.word	0x48000400

08001da4 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af04      	add	r7, sp, #16
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4603      	mov	r3, r0
 8001dae:	81fb      	strh	r3, [r7, #14]
 8001db0:	460b      	mov	r3, r1
 8001db2:	81bb      	strh	r3, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <I2C1_WriteBuffer+0x4c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	8978      	ldrh	r0, [r7, #10]
 8001dc2:	89ba      	ldrh	r2, [r7, #12]
 8001dc4:	89f9      	ldrh	r1, [r7, #14]
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	8c3b      	ldrh	r3, [r7, #32]
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <I2C1_WriteBuffer+0x50>)
 8001dd4:	f003 fd84 	bl	80058e0 <HAL_I2C_Mem_Write>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001de2:	f000 f833 	bl	8001e4c <I2C1_Error>
  }
  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000acac 	.word	0x2000acac
 8001df4:	2000afe0 	.word	0x2000afe0

08001df8 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af04      	add	r7, sp, #16
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4603      	mov	r3, r0
 8001e02:	81fb      	strh	r3, [r7, #14]
 8001e04:	460b      	mov	r3, r1
 8001e06:	81bb      	strh	r3, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <I2C1_ReadBuffer+0x4c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	8978      	ldrh	r0, [r7, #10]
 8001e16:	89ba      	ldrh	r2, [r7, #12]
 8001e18:	89f9      	ldrh	r1, [r7, #14]
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	8c3b      	ldrh	r3, [r7, #32]
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4603      	mov	r3, r0
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <I2C1_ReadBuffer+0x50>)
 8001e28:	f003 fe6e 	bl	8005b08 <HAL_I2C_Mem_Read>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001e36:	f000 f809 	bl	8001e4c <I2C1_Error>
  }
  return status;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000acac 	.word	0x2000acac
 8001e48:	2000afe0 	.word	0x2000afe0

08001e4c <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <I2C1_Error+0x14>)
 8001e52:	f003 fd16 	bl	8005882 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001e56:	f7ff fe8f 	bl	8001b78 <I2C1_Init>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000afe0 	.word	0x2000afe0

08001e64 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <AUDIO_IO_Init+0x64>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <AUDIO_IO_Init+0x64>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <AUDIO_IO_Init+0x64>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001e82:	2308      	movs	r3, #8
 8001e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <AUDIO_IO_Init+0x68>)
 8001e98:	f003 f994 	bl	80051c4 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001e9c:	f7ff fe6c 	bl	8001b78 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	4809      	ldr	r0, [pc, #36]	; (8001ecc <AUDIO_IO_Init+0x68>)
 8001ea6:	f003 fc2b 	bl	8005700 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001eaa:	2005      	movs	r0, #5
 8001eac:	f001 fad8 	bl	8003460 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <AUDIO_IO_Init+0x68>)
 8001eb6:	f003 fc23 	bl	8005700 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001eba:	2005      	movs	r0, #5
 8001ebc:	f001 fad0 	bl	8003460 <HAL_Delay>
}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48001000 	.word	0x48001000

08001ed0 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <AUDIO_IO_DeInit+0x78>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <AUDIO_IO_DeInit+0x78>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <AUDIO_IO_DeInit+0x78>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001ef2:	237c      	movs	r3, #124	; 0x7c
 8001ef4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4812      	ldr	r0, [pc, #72]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f04:	f003 f95e 	bl	80051c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	480f      	ldr	r0, [pc, #60]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f0e:	f003 fbf7 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2108      	movs	r1, #8
 8001f16:	480d      	ldr	r0, [pc, #52]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f18:	f003 fbf2 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2110      	movs	r1, #16
 8001f20:	480a      	ldr	r0, [pc, #40]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f22:	f003 fbed 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2120      	movs	r1, #32
 8001f2a:	4808      	ldr	r0, [pc, #32]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f2c:	f003 fbe8 	bl	8005700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2140      	movs	r1, #64	; 0x40
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <AUDIO_IO_DeInit+0x7c>)
 8001f36:	f003 fbe3 	bl	8005700 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001f3a:	f7ff fecb 	bl	8001cd4 <I2C1_DeInit>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48001000 	.word	0x48001000

08001f50 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	71bb      	strb	r3, [r7, #6]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	b298      	uxth	r0, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	1d7b      	adds	r3, r7, #5
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f7ff ff17 	bl	8001da4 <I2C1_WriteBuffer>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af02      	add	r7, sp, #8
 8001f84:	4603      	mov	r3, r0
 8001f86:	460a      	mov	r2, r1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	b298      	uxth	r0, r3
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	f107 030f 	add.w	r3, r7, #15
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f7ff ff28 	bl	8001df8 <I2C1_ReadBuffer>

  return Read_Value;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t Volume,
                           uint32_t AudioFreq)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	603a      	str	r2, [r7, #0]
 8001fbe:	80fb      	strh	r3, [r7, #6]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs43l22_drv;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <BSP_AUDIO_OUT_Init+0x8c>)
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <BSP_AUDIO_OUT_Init+0x90>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <BSP_AUDIO_OUT_Init+0x8c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <BSP_AUDIO_OUT_Init+0x8c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <BSP_AUDIO_OUT_Init+0x8c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]

  /* Configure the SAI PLL according to the requested audio frequency */
  if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 8001fdc:	6838      	ldr	r0, [r7, #0]
 8001fde:	f000 f927 	bl	8002230 <AUDIO_SAIPLLConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <BSP_AUDIO_OUT_Init+0x38>
  {
    return AUDIO_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e024      	b.n	8002036 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* SAI data transfer preparation: prepare the Media to be used for the audio
     transfer from memory to SAI peripheral. */
  if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f000 f86d 	bl	80020cc <AUDIO_SAIx_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <BSP_AUDIO_OUT_Init+0x48>
  {
    return AUDIO_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01c      	b.n	8002036 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Retrieve audio codec identifier */
  if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) != CS43L22_ID)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <BSP_AUDIO_OUT_Init+0x90>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2094      	movs	r0, #148	; 0x94
 8002002:	4798      	blx	r3
 8002004:	4603      	mov	r3, r0
 8002006:	2be0      	cmp	r3, #224	; 0xe0
 8002008:	d001      	beq.n	800200e <BSP_AUDIO_OUT_Init+0x5a>
  {
    return AUDIO_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e013      	b.n	8002036 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Reset the audio codec Registers */
  AUDIO_CODEC_Reset();
 800200e:	f000 f8ff 	bl	8002210 <AUDIO_CODEC_Reset>

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <BSP_AUDIO_OUT_Init+0x8c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	797a      	ldrb	r2, [r7, #5]
 800201a:	88f9      	ldrh	r1, [r7, #6]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2094      	movs	r0, #148	; 0x94
 8002020:	47a0      	blx	r4
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <BSP_AUDIO_OUT_Init+0x78>
                               OutputDevice,
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e004      	b.n	8002036 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Set the requested volume */
  BSP_AUDIO_OUT_SetVolume(Volume);
 800202c:	797b      	ldrb	r3, [r7, #5]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f80a 	bl	8002048 <BSP_AUDIO_OUT_SetVolume>

  return AUDIO_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	2000b02c 	.word	0x2000b02c
 8002044:	2000ac78 	.word	0x2000ac78

08002048 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (hAudioOut.AudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	4611      	mov	r1, r2
 800205c:	2094      	movs	r0, #148	; 0x94
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <BSP_AUDIO_OUT_SetVolume+0x24>
  }

  return AUDIO_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000b02c 	.word	0x2000b02c

08002078 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6053      	str	r3, [r2, #4]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 800208a:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	6093      	str	r3, [r2, #8]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60d3      	str	r3, [r2, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000b02c 	.word	0x2000b02c

080020a8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_SAI_ErrorCallback+0x20>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_SAI_ErrorCallback+0x20>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4798      	blx	r3
  }
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000b02c 	.word	0x2000b02c

080020cc <AUDIO_SAIx_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai);
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Initialize the BSP_AUDIO_hSai Instance parameter */
  BSP_AUDIO_hSai.Instance = AUDIO_SAIx;
 80020e4:	4b48      	ldr	r3, [pc, #288]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020e6:	4a49      	ldr	r2, [pc, #292]	; (800220c <AUDIO_SAIx_Init+0x140>)
 80020e8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai.Init.AudioMode      = SAI_MODEMASTER_TX;
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai.Init.Synchro        = SAI_ASYNCHRONOUS;
 80020f0:	4b45      	ldr	r3, [pc, #276]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80020fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002102:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 800210c:	2201      	movs	r2, #1
 800210e:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800211c:	d029      	beq.n	8002172 <AUDIO_SAIx_Init+0xa6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <AUDIO_SAIx_Init+0xa2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800212e:	d01c      	beq.n	800216a <AUDIO_SAIx_Init+0x9e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f245 6222 	movw	r2, #22050	; 0x5622
 8002136:	4293      	cmp	r3, r2
 8002138:	d015      	beq.n	8002166 <AUDIO_SAIx_Init+0x9a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002140:	d00f      	beq.n	8002162 <AUDIO_SAIx_Init+0x96>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002148:	4293      	cmp	r3, r2
 800214a:	d008      	beq.n	800215e <AUDIO_SAIx_Init+0x92>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <AUDIO_SAIx_Init+0x8e>
 8002156:	2302      	movs	r3, #2
 8002158:	e00c      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 800215a:	2301      	movs	r3, #1
 800215c:	e00a      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 800215e:	2300      	movs	r3, #0
 8002160:	e008      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 8002162:	2303      	movs	r3, #3
 8002164:	e006      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 8002166:	2301      	movs	r3, #1
 8002168:	e004      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 800216a:	2306      	movs	r3, #6
 800216c:	e002      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 800216e:	2302      	movs	r3, #2
 8002170:	e000      	b.n	8002174 <AUDIO_SAIx_Init+0xa8>
 8002172:	230c      	movs	r3, #12
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002176:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai.Init.CompandingMode = SAI_NOCOMPANDING;
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai.Init.DataSize       = SAI_DATASIZE_16;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai.FrameInit.FrameLength = 32;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021a4:	2220      	movs	r2, #32
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai.FrameInit.ActiveFrameLength = 16;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021aa:	2210      	movs	r2, #16
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b4:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai.SlotInit.FirstBitOffset = 0;
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai.SlotInit.SlotNumber = 2;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021d8:	2203      	movs	r2, #3
 80021da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai) != HAL_OK)
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021de:	f007 fb65 	bl	80098ac <HAL_SAI_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <AUDIO_SAIx_Init+0x120>
  {
    return AUDIO_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e008      	b.n	80021fe <AUDIO_SAIx_Init+0x132>
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai);
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <AUDIO_SAIx_Init+0x13c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021fa:	601a      	str	r2, [r3, #0]

  return AUDIO_OK;
 80021fc:	2300      	movs	r3, #0

}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000b03c 	.word	0x2000b03c
 800220c:	40015404 	.word	0x40015404

08002210 <AUDIO_CODEC_Reset>:
  * @brief  Resets the audio codec. It restores the default configuration of the
  *         codec (this function shall be called before initializing the codec).
  * @retval None
  */
static void AUDIO_CODEC_Reset(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Initialize the audio driver structure */
  hAudioOut.AudioDrv = &cs43l22_drv;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <AUDIO_CODEC_Reset+0x18>)
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <AUDIO_CODEC_Reset+0x1c>)
 8002218:	601a      	str	r2, [r3, #0]

  hAudioOut.AudioDrv->Reset(AUDIO_I2C_ADDRESS);
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <AUDIO_CODEC_Reset+0x18>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2094      	movs	r0, #148	; 0x94
 8002222:	4798      	blx	r3
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000b02c 	.word	0x2000b02c
 800222c:	2000ac78 	.word	0x2000ac78

08002230 <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a4      	sub	sp, #144	; 0x90
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4618      	mov	r0, r3
 800223e:	f006 f8d1 	bl	80083e4 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002248:	4293      	cmp	r3, r2
 800224a:	d009      	beq.n	8002260 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f64a 4244 	movw	r2, #44100	; 0xac44
 800225c:	4293      	cmp	r3, r2
 800225e:	d10c      	bne.n	800227a <AUDIO_SAIPLLConfig+0x4a>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8002260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002264:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 24;
 8002266:	2318      	movs	r3, #24
 8002268:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 800226a:	2311      	movs	r3, #17
 800226c:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800226e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002274:	2300      	movs	r3, #0
 8002276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002278:	e00b      	b.n	8002292 <AUDIO_SAIPLLConfig+0x62>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800227a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800227e:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 43;
 8002280:	232b      	movs	r3, #43	; 0x2b
 8002282:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 8002284:	2307      	movs	r3, #7
 8002286:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8002288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 800228e:	2300      	movs	r3, #0
 8002290:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	4618      	mov	r0, r3
 8002298:	f005 fdba 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <AUDIO_SAIPLLConfig+0x76>
  {
    return AUDIO_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <AUDIO_SAIPLLConfig+0x78>
  }

  return AUDIO_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3790      	adds	r7, #144	; 0x90
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <BSP_LCD_GLASS_Init+0x70>)
 80022b8:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022c2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022c6:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022dc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80022e0:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 80022fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 800230a:	f000 f839 	bl	8002380 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <BSP_LCD_GLASS_Init+0x6c>)
 8002310:	f004 f860 	bl	80063d4 <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8002314:	f000 f82a 	bl	800236c <BSP_LCD_GLASS_Clear>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000b0c0 	.word	0x2000b0c0
 8002320:	40002400 	.word	0x40002400

08002324 <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8002330:	e00b      	b.n	800234a <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fa2d 	bl	8002798 <WriteChar>

    /* Point on the next character */
    ptr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3301      	adds	r3, #1
 8002342:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	3301      	adds	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <BSP_LCD_GLASS_DisplayString+0x34>
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d9ec      	bls.n	8002332 <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <BSP_LCD_GLASS_DisplayString+0x44>)
 800235a:	f004 f9ac 	bl	80066b6 <HAL_LCD_UpdateDisplayRequest>
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000b0c0 	.word	0x2000b0c0

0800236c <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <BSP_LCD_GLASS_Clear+0x10>)
 8002372:	f004 f94a 	bl	800660a <HAL_LCD_Clear>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000b0c0 	.word	0x2000b0c0

08002380 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0c0      	sub	sp, #256	; 0x100
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002388:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8002398:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800239c:	2244      	movs	r2, #68	; 0x44
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f008 fc7f 	bl	800aca4 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2288      	movs	r2, #136	; 0x88
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f008 fc78 	bl	800aca4 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b51      	ldr	r3, [pc, #324]	; (80024fc <LCD_MspInit+0x17c>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <LCD_MspInit+0x17c>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6593      	str	r3, [r2, #88]	; 0x58
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <LCD_MspInit+0x17c>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80023cc:	2304      	movs	r3, #4
 80023ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80023d8:	2301      	movs	r3, #1
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80023de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 ff26 	bl	8007234 <HAL_RCC_OscConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d000      	beq.n	80023f0 <LCD_MspInit+0x70>
  {
    while (1);
 80023ee:	e7fe      	b.n	80023ee <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f4:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	4618      	mov	r0, r3
 8002404:	f005 fd04 	bl	8007e10 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <LCD_MspInit+0x17c>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <LCD_MspInit+0x17c>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <LCD_MspInit+0x17c>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <LCD_MspInit+0x17c>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	4a35      	ldr	r2, [pc, #212]	; (80024fc <LCD_MspInit+0x17c>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242c:	4b33      	ldr	r3, [pc, #204]	; (80024fc <LCD_MspInit+0x17c>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <LCD_MspInit+0x17c>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <LCD_MspInit+0x17c>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <LCD_MspInit+0x17c>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <LCD_MspInit+0x17c>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <LCD_MspInit+0x17c>)
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <LCD_MspInit+0x17c>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002468:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800246c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8002482:	230b      	movs	r3, #11
 8002484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002488:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002492:	f002 fe97 	bl	80051c4 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8002496:	f24f 2333 	movw	r3, #62003	; 0xf233
 800249a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800249e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024a2:	4619      	mov	r1, r3
 80024a4:	4816      	ldr	r0, [pc, #88]	; (8002500 <LCD_MspInit+0x180>)
 80024a6:	f002 fe8d 	bl	80051c4 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80024aa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80024ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80024b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024b6:	4619      	mov	r1, r3
 80024b8:	4812      	ldr	r0, [pc, #72]	; (8002504 <LCD_MspInit+0x184>)
 80024ba:	f002 fe83 	bl	80051c4 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80024be:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80024c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80024c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ca:	4619      	mov	r1, r3
 80024cc:	480e      	ldr	r0, [pc, #56]	; (8002508 <LCD_MspInit+0x188>)
 80024ce:	f002 fe79 	bl	80051c4 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80024d2:	2002      	movs	r0, #2
 80024d4:	f000 ffc4 	bl	8003460 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LCD_MspInit+0x17c>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <LCD_MspInit+0x17c>)
 80024de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LCD_MspInit+0x17c>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
}
 80024f0:	bf00      	nop
 80024f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00

0800250c <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
 8002518:	4613      	mov	r3, r2
 800251a:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 800251c:	2300      	movs	r3, #0
 800251e:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	737b      	strb	r3, [r7, #13]
 8002524:	2300      	movs	r3, #0
 8002526:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b6e      	cmp	r3, #110	; 0x6e
 800252e:	f300 80a9 	bgt.w	8002684 <Convert+0x178>
 8002532:	2b20      	cmp	r3, #32
 8002534:	f2c0 80dd 	blt.w	80026f2 <Convert+0x1e6>
 8002538:	3b20      	subs	r3, #32
 800253a:	2b4e      	cmp	r3, #78	; 0x4e
 800253c:	f200 80d9 	bhi.w	80026f2 <Convert+0x1e6>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <Convert+0x3c>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	0800268b 	.word	0x0800268b
 800254c:	080026f3 	.word	0x080026f3
 8002550:	080026f3 	.word	0x080026f3
 8002554:	080026f3 	.word	0x080026f3
 8002558:	080026f3 	.word	0x080026f3
 800255c:	080026d3 	.word	0x080026d3
 8002560:	080026f3 	.word	0x080026f3
 8002564:	080026f3 	.word	0x080026f3
 8002568:	08002699 	.word	0x08002699
 800256c:	0800269f 	.word	0x0800269f
 8002570:	08002691 	.word	0x08002691
 8002574:	080026c5 	.word	0x080026c5
 8002578:	080026f3 	.word	0x080026f3
 800257c:	080026bd 	.word	0x080026bd
 8002580:	080026f3 	.word	0x080026f3
 8002584:	080026cd 	.word	0x080026cd
 8002588:	080026e3 	.word	0x080026e3
 800258c:	080026e3 	.word	0x080026e3
 8002590:	080026e3 	.word	0x080026e3
 8002594:	080026e3 	.word	0x080026e3
 8002598:	080026e3 	.word	0x080026e3
 800259c:	080026e3 	.word	0x080026e3
 80025a0:	080026e3 	.word	0x080026e3
 80025a4:	080026e3 	.word	0x080026e3
 80025a8:	080026e3 	.word	0x080026e3
 80025ac:	080026e3 	.word	0x080026e3
 80025b0:	080026f3 	.word	0x080026f3
 80025b4:	080026f3 	.word	0x080026f3
 80025b8:	080026f3 	.word	0x080026f3
 80025bc:	080026f3 	.word	0x080026f3
 80025c0:	080026f3 	.word	0x080026f3
 80025c4:	080026f3 	.word	0x080026f3
 80025c8:	080026f3 	.word	0x080026f3
 80025cc:	080026f3 	.word	0x080026f3
 80025d0:	080026f3 	.word	0x080026f3
 80025d4:	080026f3 	.word	0x080026f3
 80025d8:	080026f3 	.word	0x080026f3
 80025dc:	080026f3 	.word	0x080026f3
 80025e0:	080026f3 	.word	0x080026f3
 80025e4:	080026f3 	.word	0x080026f3
 80025e8:	080026f3 	.word	0x080026f3
 80025ec:	080026f3 	.word	0x080026f3
 80025f0:	080026f3 	.word	0x080026f3
 80025f4:	080026f3 	.word	0x080026f3
 80025f8:	080026f3 	.word	0x080026f3
 80025fc:	080026f3 	.word	0x080026f3
 8002600:	080026f3 	.word	0x080026f3
 8002604:	080026f3 	.word	0x080026f3
 8002608:	080026f3 	.word	0x080026f3
 800260c:	080026f3 	.word	0x080026f3
 8002610:	080026f3 	.word	0x080026f3
 8002614:	080026f3 	.word	0x080026f3
 8002618:	080026f3 	.word	0x080026f3
 800261c:	080026f3 	.word	0x080026f3
 8002620:	080026f3 	.word	0x080026f3
 8002624:	080026f3 	.word	0x080026f3
 8002628:	080026f3 	.word	0x080026f3
 800262c:	080026f3 	.word	0x080026f3
 8002630:	080026f3 	.word	0x080026f3
 8002634:	080026f3 	.word	0x080026f3
 8002638:	080026f3 	.word	0x080026f3
 800263c:	080026f3 	.word	0x080026f3
 8002640:	080026f3 	.word	0x080026f3
 8002644:	080026f3 	.word	0x080026f3
 8002648:	080026f3 	.word	0x080026f3
 800264c:	080026f3 	.word	0x080026f3
 8002650:	080026f3 	.word	0x080026f3
 8002654:	080026f3 	.word	0x080026f3
 8002658:	080026a5 	.word	0x080026a5
 800265c:	080026f3 	.word	0x080026f3
 8002660:	080026f3 	.word	0x080026f3
 8002664:	080026f3 	.word	0x080026f3
 8002668:	080026f3 	.word	0x080026f3
 800266c:	080026f3 	.word	0x080026f3
 8002670:	080026f3 	.word	0x080026f3
 8002674:	080026f3 	.word	0x080026f3
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026ad 	.word	0x080026ad
 8002680:	080026b5 	.word	0x080026b5
 8002684:	2bff      	cmp	r3, #255	; 0xff
 8002686:	d028      	beq.n	80026da <Convert+0x1ce>
 8002688:	e033      	b.n	80026f2 <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	81fb      	strh	r3, [r7, #14]
      break;
 800268e:	e04f      	b.n	8002730 <Convert+0x224>

    case '*':
      ch = C_STAR;
 8002690:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8002694:	81fb      	strh	r3, [r7, #14]
      break;
 8002696:	e04b      	b.n	8002730 <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 8002698:	2328      	movs	r3, #40	; 0x28
 800269a:	81fb      	strh	r3, [r7, #14]
      break;
 800269c:	e048      	b.n	8002730 <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 800269e:	2311      	movs	r3, #17
 80026a0:	81fb      	strh	r3, [r7, #14]
      break;
 80026a2:	e045      	b.n	8002730 <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 80026a4:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80026a8:	81fb      	strh	r3, [r7, #14]
      break;
 80026aa:	e041      	b.n	8002730 <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 80026ac:	f24b 2310 	movw	r3, #45584	; 0xb210
 80026b0:	81fb      	strh	r3, [r7, #14]
      break;
 80026b2:	e03d      	b.n	8002730 <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 80026b4:	f242 2310 	movw	r3, #8720	; 0x2210
 80026b8:	81fb      	strh	r3, [r7, #14]
      break;
 80026ba:	e039      	b.n	8002730 <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 80026bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026c0:	81fb      	strh	r3, [r7, #14]
      break;
 80026c2:	e035      	b.n	8002730 <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 80026c4:	f24a 0314 	movw	r3, #40980	; 0xa014
 80026c8:	81fb      	strh	r3, [r7, #14]
      break;
 80026ca:	e031      	b.n	8002730 <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	81fb      	strh	r3, [r7, #14]
      break;
 80026d0:	e02e      	b.n	8002730 <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 80026d2:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 80026d6:	81fb      	strh	r3, [r7, #14]
      break;
 80026d8:	e02a      	b.n	8002730 <Convert+0x224>
    case 255 :
      ch = C_FULL;
 80026da:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 80026de:	81fb      	strh	r3, [r7, #14]
      break ;
 80026e0:	e026      	b.n	8002730 <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	3b30      	subs	r3, #48	; 0x30
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <Convert+0x280>)
 80026ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ee:	81fb      	strh	r3, [r7, #14]
      break;
 80026f0:	e01e      	b.n	8002730 <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b5a      	cmp	r3, #90	; 0x5a
 80026f8:	d80a      	bhi.n	8002710 <Convert+0x204>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d906      	bls.n	8002710 <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3b41      	subs	r3, #65	; 0x41
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <Convert+0x284>)
 800270a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800270e:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b7a      	cmp	r3, #122	; 0x7a
 8002716:	d80a      	bhi.n	800272e <Convert+0x222>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b60      	cmp	r3, #96	; 0x60
 800271e:	d906      	bls.n	800272e <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	3b61      	subs	r3, #97	; 0x61
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <Convert+0x284>)
 8002728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272c:	81fb      	strh	r3, [r7, #14]
      }
      break;
 800272e:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d103      	bne.n	800273e <Convert+0x232>
  {
    ch |= 0x0002;
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 800273e:	78bb      	ldrb	r3, [r7, #2]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d103      	bne.n	800274c <Convert+0x240>
  {
    ch |= 0x0020;
 8002744:	89fb      	ldrh	r3, [r7, #14]
 8002746:	f043 0320 	orr.w	r3, r3, #32
 800274a:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 800274c:	230c      	movs	r3, #12
 800274e:	737b      	strb	r3, [r7, #13]
 8002750:	2300      	movs	r3, #0
 8002752:	733b      	strb	r3, [r7, #12]
 8002754:	e010      	b.n	8002778 <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8002756:	89fa      	ldrh	r2, [r7, #14]
 8002758:	7b7b      	ldrb	r3, [r7, #13]
 800275a:	fa42 f303 	asr.w	r3, r2, r3
 800275e:	461a      	mov	r2, r3
 8002760:	7b3b      	ldrb	r3, [r7, #12]
 8002762:	f002 020f 	and.w	r2, r2, #15
 8002766:	490b      	ldr	r1, [pc, #44]	; (8002794 <Convert+0x288>)
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 800276c:	7b7b      	ldrb	r3, [r7, #13]
 800276e:	3b04      	subs	r3, #4
 8002770:	737b      	strb	r3, [r7, #13]
 8002772:	7b3b      	ldrb	r3, [r7, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	733b      	strb	r3, [r7, #12]
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d9eb      	bls.n	8002756 <Convert+0x24a>
  }
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	0800ad58 	.word	0x0800ad58
 8002790:	0800ad24 	.word	0x0800ad24
 8002794:	2000b0fc 	.word	0x2000b0fc

08002798 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	70fb      	strb	r3, [r7, #3]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70bb      	strb	r3, [r7, #2]
 80027ae:	4613      	mov	r3, r2
 80027b0:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 80027b6:	78ba      	ldrb	r2, [r7, #2]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fea5 	bl	800250c <Convert>

  switch (Position)
 80027c2:	787b      	ldrb	r3, [r7, #1]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	f200 835b 	bhi.w	8002e80 <WriteChar+0x6e8>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <WriteChar+0x38>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e9 	.word	0x080027e9
 80027d4:	080028e3 	.word	0x080028e3
 80027d8:	080029fd 	.word	0x080029fd
 80027dc:	08002aff 	.word	0x08002aff
 80027e0:	08002c2d 	.word	0x08002c2d
 80027e4:	08002d77 	.word	0x08002d77
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80027e8:	4b80      	ldr	r3, [pc, #512]	; (80029ec <WriteChar+0x254>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	f003 0210 	and.w	r2, r3, #16
 80027f2:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <WriteChar+0x254>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002800:	4b7a      	ldr	r3, [pc, #488]	; (80029ec <WriteChar+0x254>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	059b      	lsls	r3, r3, #22
 8002808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280c:	431a      	orrs	r2, r3
 800280e:	4b77      	ldr	r3, [pc, #476]	; (80029ec <WriteChar+0x254>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a74      	ldr	r2, [pc, #464]	; (80029f0 <WriteChar+0x258>)
 800281e:	2100      	movs	r1, #0
 8002820:	4874      	ldr	r0, [pc, #464]	; (80029f4 <WriteChar+0x25c>)
 8002822:	f003 fe97 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002826:	4b71      	ldr	r3, [pc, #452]	; (80029ec <WriteChar+0x254>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	f003 0210 	and.w	r2, r3, #16
 8002830:	4b6e      	ldr	r3, [pc, #440]	; (80029ec <WriteChar+0x254>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	05db      	lsls	r3, r3, #23
 8002838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800283c:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800283e:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <WriteChar+0x254>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	059b      	lsls	r3, r3, #22
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	431a      	orrs	r2, r3
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <WriteChar+0x254>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <WriteChar+0x258>)
 800285c:	2102      	movs	r1, #2
 800285e:	4865      	ldr	r0, [pc, #404]	; (80029f4 <WriteChar+0x25c>)
 8002860:	f003 fe78 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002864:	4b61      	ldr	r3, [pc, #388]	; (80029ec <WriteChar+0x254>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	f003 0210 	and.w	r2, r3, #16
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <WriteChar+0x254>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800287a:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800287c:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <WriteChar+0x254>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	059b      	lsls	r3, r3, #22
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	431a      	orrs	r2, r3
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <WriteChar+0x254>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <WriteChar+0x258>)
 800289a:	2104      	movs	r1, #4
 800289c:	4855      	ldr	r0, [pc, #340]	; (80029f4 <WriteChar+0x25c>)
 800289e:	f003 fe59 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80028a2:	4b52      	ldr	r3, [pc, #328]	; (80029ec <WriteChar+0x254>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	f003 0210 	and.w	r2, r3, #16
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <WriteChar+0x254>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b8:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <WriteChar+0x254>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	059b      	lsls	r3, r3, #22
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	431a      	orrs	r2, r3
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <WriteChar+0x254>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <WriteChar+0x258>)
 80028d8:	2106      	movs	r1, #6
 80028da:	4846      	ldr	r0, [pc, #280]	; (80029f4 <WriteChar+0x25c>)
 80028dc:	f003 fe3a 	bl	8006554 <HAL_LCD_Write>
      break;
 80028e0:	e2cf      	b.n	8002e82 <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <WriteChar+0x254>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	019b      	lsls	r3, r3, #6
 80028e8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <WriteChar+0x254>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	035b      	lsls	r3, r3, #13
 80028f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f8:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80028fa:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <WriteChar+0x254>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002906:	431a      	orrs	r2, r3
 8002908:	4b38      	ldr	r3, [pc, #224]	; (80029ec <WriteChar+0x254>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	015b      	lsls	r3, r3, #5
 8002910:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <WriteChar+0x260>)
 800291c:	2100      	movs	r1, #0
 800291e:	4835      	ldr	r0, [pc, #212]	; (80029f4 <WriteChar+0x25c>)
 8002920:	f003 fe18 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002924:	4b31      	ldr	r3, [pc, #196]	; (80029ec <WriteChar+0x254>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <WriteChar+0x254>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	035b      	lsls	r3, r3, #13
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <WriteChar+0x254>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002948:	431a      	orrs	r2, r3
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <WriteChar+0x254>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	015b      	lsls	r3, r3, #5
 8002952:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <WriteChar+0x260>)
 800295e:	2102      	movs	r1, #2
 8002960:	4824      	ldr	r0, [pc, #144]	; (80029f4 <WriteChar+0x25c>)
 8002962:	f003 fdf7 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <WriteChar+0x254>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	019b      	lsls	r3, r3, #6
 800296c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <WriteChar+0x254>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	035b      	lsls	r3, r3, #13
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <WriteChar+0x254>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	431a      	orrs	r2, r3
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <WriteChar+0x254>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <WriteChar+0x260>)
 80029a0:	2104      	movs	r1, #4
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <WriteChar+0x25c>)
 80029a4:	f003 fdd6 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <WriteChar+0x254>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <WriteChar+0x254>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	035b      	lsls	r3, r3, #13
 80029ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029be:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <WriteChar+0x254>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	431a      	orrs	r2, r3
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <WriteChar+0x254>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <WriteChar+0x260>)
 80029e2:	2106      	movs	r1, #6
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <WriteChar+0x25c>)
 80029e6:	f003 fdb5 	bl	8006554 <HAL_LCD_Write>
      break;
 80029ea:	e24a      	b.n	8002e82 <WriteChar+0x6ea>
 80029ec:	2000b0fc 	.word	0x2000b0fc
 80029f0:	ff3fffe7 	.word	0xff3fffe7
 80029f4:	2000b0c0 	.word	0x2000b0c0
 80029f8:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80029fc:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <WriteChar+0x488>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	03db      	lsls	r3, r3, #15
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b86      	ldr	r3, [pc, #536]	; (8002c20 <WriteChar+0x488>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	075b      	lsls	r3, r3, #29
 8002a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a10:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002a12:	4b83      	ldr	r3, [pc, #524]	; (8002c20 <WriteChar+0x488>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	4b7f      	ldr	r3, [pc, #508]	; (8002c20 <WriteChar+0x488>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	039b      	lsls	r3, r3, #14
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <WriteChar+0x48c>)
 8002a34:	2100      	movs	r1, #0
 8002a36:	487c      	ldr	r0, [pc, #496]	; (8002c28 <WriteChar+0x490>)
 8002a38:	f003 fd8c 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002a3c:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <WriteChar+0x488>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	03db      	lsls	r3, r3, #15
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <WriteChar+0x488>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	075b      	lsls	r3, r3, #29
 8002a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a50:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002a52:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <WriteChar+0x488>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	071b      	lsls	r3, r3, #28
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <WriteChar+0x488>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	039b      	lsls	r3, r3, #14
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a6c      	ldr	r2, [pc, #432]	; (8002c24 <WriteChar+0x48c>)
 8002a74:	2102      	movs	r1, #2
 8002a76:	486c      	ldr	r0, [pc, #432]	; (8002c28 <WriteChar+0x490>)
 8002a78:	f003 fd6c 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <WriteChar+0x488>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	03db      	lsls	r3, r3, #15
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <WriteChar+0x488>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	075b      	lsls	r3, r3, #29
 8002a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a90:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <WriteChar+0x488>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	071b      	lsls	r3, r3, #28
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <WriteChar+0x488>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	039b      	lsls	r3, r3, #14
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <WriteChar+0x48c>)
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	485c      	ldr	r0, [pc, #368]	; (8002c28 <WriteChar+0x490>)
 8002ab8:	f003 fd4c 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002abc:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <WriteChar+0x488>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	03db      	lsls	r3, r3, #15
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <WriteChar+0x488>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	075b      	lsls	r3, r3, #29
 8002acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad0:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <WriteChar+0x488>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	071b      	lsls	r3, r3, #28
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <WriteChar+0x488>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	08db      	lsrs	r3, r3, #3
 8002ae6:	039b      	lsls	r3, r3, #14
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <WriteChar+0x48c>)
 8002af4:	2106      	movs	r1, #6
 8002af6:	484c      	ldr	r0, [pc, #304]	; (8002c28 <WriteChar+0x490>)
 8002af8:	f003 fd2c 	bl	8006554 <HAL_LCD_Write>
      break;
 8002afc:	e1c1      	b.n	8002e82 <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002afe:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <WriteChar+0x488>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	07da      	lsls	r2, r3, #31
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <WriteChar+0x488>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	079b      	lsls	r3, r3, #30
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4842      	ldr	r0, [pc, #264]	; (8002c28 <WriteChar+0x490>)
 8002b1e:	f003 fd19 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <WriteChar+0x488>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0202 	and.w	r2, r3, #2
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <WriteChar+0x488>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f06f 0203 	mvn.w	r2, #3
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4839      	ldr	r0, [pc, #228]	; (8002c28 <WriteChar+0x490>)
 8002b42:	f003 fd07 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <WriteChar+0x488>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	07da      	lsls	r2, r3, #31
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <WriteChar+0x488>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	079b      	lsls	r3, r3, #30
 8002b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002b62:	2102      	movs	r1, #2
 8002b64:	4830      	ldr	r0, [pc, #192]	; (8002c28 <WriteChar+0x490>)
 8002b66:	f003 fcf5 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <WriteChar+0x488>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0202 	and.w	r2, r3, #2
 8002b72:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <WriteChar+0x488>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f06f 0203 	mvn.w	r2, #3
 8002b86:	2103      	movs	r1, #3
 8002b88:	4827      	ldr	r0, [pc, #156]	; (8002c28 <WriteChar+0x490>)
 8002b8a:	f003 fce3 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <WriteChar+0x488>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	07da      	lsls	r2, r3, #31
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <WriteChar+0x488>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	079b      	lsls	r3, r3, #30
 8002b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002baa:	2104      	movs	r1, #4
 8002bac:	481e      	ldr	r0, [pc, #120]	; (8002c28 <WriteChar+0x490>)
 8002bae:	f003 fcd1 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <WriteChar+0x488>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0202 	and.w	r2, r3, #2
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <WriteChar+0x488>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f06f 0203 	mvn.w	r2, #3
 8002bce:	2105      	movs	r1, #5
 8002bd0:	4815      	ldr	r0, [pc, #84]	; (8002c28 <WriteChar+0x490>)
 8002bd2:	f003 fcbf 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <WriteChar+0x488>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	07da      	lsls	r2, r3, #31
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <WriteChar+0x488>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	079b      	lsls	r3, r3, #30
 8002be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002bf2:	2106      	movs	r1, #6
 8002bf4:	480c      	ldr	r0, [pc, #48]	; (8002c28 <WriteChar+0x490>)
 8002bf6:	f003 fcad 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <WriteChar+0x488>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0202 	and.w	r2, r3, #2
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <WriteChar+0x488>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f06f 0203 	mvn.w	r2, #3
 8002c16:	2107      	movs	r1, #7
 8002c18:	4803      	ldr	r0, [pc, #12]	; (8002c28 <WriteChar+0x490>)
 8002c1a:	f003 fc9b 	bl	8006554 <HAL_LCD_Write>
      break;
 8002c1e:	e130      	b.n	8002e82 <WriteChar+0x6ea>
 8002c20:	2000b0fc 	.word	0x2000b0fc
 8002c24:	cfff3fff 	.word	0xcfff3fff
 8002c28:	2000b0c0 	.word	0x2000b0c0

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002c2c:	4b97      	ldr	r3, [pc, #604]	; (8002e8c <WriteChar+0x6f4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	065b      	lsls	r3, r3, #25
 8002c34:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002c38:	4b94      	ldr	r3, [pc, #592]	; (8002e8c <WriteChar+0x6f4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002c4e:	2100      	movs	r1, #0
 8002c50:	488f      	ldr	r0, [pc, #572]	; (8002e90 <WriteChar+0x6f8>)
 8002c52:	f003 fc7f 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002c56:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <WriteChar+0x6f4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	f003 0208 	and.w	r2, r3, #8
 8002c60:	4b8a      	ldr	r3, [pc, #552]	; (8002e8c <WriteChar+0x6f4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f06f 020c 	mvn.w	r2, #12
 8002c76:	2101      	movs	r1, #1
 8002c78:	4885      	ldr	r0, [pc, #532]	; (8002e90 <WriteChar+0x6f8>)
 8002c7a:	f003 fc6b 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002c7e:	4b83      	ldr	r3, [pc, #524]	; (8002e8c <WriteChar+0x6f4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	065b      	lsls	r3, r3, #25
 8002c86:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002c8a:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <WriteChar+0x6f4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	487b      	ldr	r0, [pc, #492]	; (8002e90 <WriteChar+0x6f8>)
 8002ca4:	f003 fc56 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002ca8:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <WriteChar+0x6f4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	f003 0208 	and.w	r2, r3, #8
 8002cb2:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <WriteChar+0x6f4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	08db      	lsrs	r3, r3, #3
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f06f 020c 	mvn.w	r2, #12
 8002cc8:	2103      	movs	r1, #3
 8002cca:	4871      	ldr	r0, [pc, #452]	; (8002e90 <WriteChar+0x6f8>)
 8002ccc:	f003 fc42 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002cd0:	4b6e      	ldr	r3, [pc, #440]	; (8002e8c <WriteChar+0x6f4>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	065b      	lsls	r3, r3, #25
 8002cd8:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <WriteChar+0x6f4>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4866      	ldr	r0, [pc, #408]	; (8002e90 <WriteChar+0x6f8>)
 8002cf6:	f003 fc2d 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <WriteChar+0x6f4>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f003 0208 	and.w	r2, r3, #8
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <WriteChar+0x6f4>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f06f 020c 	mvn.w	r2, #12
 8002d1a:	2105      	movs	r1, #5
 8002d1c:	485c      	ldr	r0, [pc, #368]	; (8002e90 <WriteChar+0x6f8>)
 8002d1e:	f003 fc19 	bl	8006554 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002d22:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <WriteChar+0x6f4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	065b      	lsls	r3, r3, #25
 8002d2a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002d2e:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <WriteChar+0x6f4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002d44:	2106      	movs	r1, #6
 8002d46:	4852      	ldr	r0, [pc, #328]	; (8002e90 <WriteChar+0x6f8>)
 8002d48:	f003 fc04 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002d4c:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <WriteChar+0x6f4>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f003 0208 	and.w	r2, r3, #8
 8002d56:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <WriteChar+0x6f4>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f06f 020c 	mvn.w	r2, #12
 8002d6c:	2107      	movs	r1, #7
 8002d6e:	4848      	ldr	r0, [pc, #288]	; (8002e90 <WriteChar+0x6f8>)
 8002d70:	f003 fbf0 	bl	8006554 <HAL_LCD_Write>
      break;
 8002d74:	e085      	b.n	8002e82 <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <WriteChar+0x6f4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	045b      	lsls	r3, r3, #17
 8002d7c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <WriteChar+0x6f4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <WriteChar+0x6f4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <WriteChar+0x6f4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	069b      	lsls	r3, r3, #26
 8002da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <WriteChar+0x6fc>)
 8002db0:	2100      	movs	r1, #0
 8002db2:	4837      	ldr	r0, [pc, #220]	; (8002e90 <WriteChar+0x6f8>)
 8002db4:	f003 fbce 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <WriteChar+0x6f4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	045b      	lsls	r3, r3, #17
 8002dbe:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002dc2:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <WriteChar+0x6f4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <WriteChar+0x6f4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <WriteChar+0x6f4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	069b      	lsls	r3, r3, #26
 8002de6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <WriteChar+0x6fc>)
 8002df2:	2102      	movs	r1, #2
 8002df4:	4826      	ldr	r0, [pc, #152]	; (8002e90 <WriteChar+0x6f8>)
 8002df6:	f003 fbad 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <WriteChar+0x6f4>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	045b      	lsls	r3, r3, #17
 8002e00:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <WriteChar+0x6f4>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <WriteChar+0x6f4>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <WriteChar+0x6f4>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <WriteChar+0x6fc>)
 8002e34:	2104      	movs	r1, #4
 8002e36:	4816      	ldr	r0, [pc, #88]	; (8002e90 <WriteChar+0x6f8>)
 8002e38:	f003 fb8c 	bl	8006554 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <WriteChar+0x6f4>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	045b      	lsls	r3, r3, #17
 8002e42:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <WriteChar+0x6f4>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <WriteChar+0x6f4>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <WriteChar+0x6f4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	069b      	lsls	r3, r3, #26
 8002e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <WriteChar+0x6fc>)
 8002e76:	2106      	movs	r1, #6
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <WriteChar+0x6f8>)
 8002e7a:	f003 fb6b 	bl	8006554 <HAL_LCD_Write>
      break;
 8002e7e:	e000      	b.n	8002e82 <WriteChar+0x6ea>

    default:
      break;
 8002e80:	bf00      	nop
  }
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000b0fc 	.word	0x2000b0fc
 8002e90:	2000b0c0 	.word	0x2000b0c0
 8002e94:	fbfdfcff 	.word	0xfbfdfcff

08002e98 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <BSP_QSPI_Init+0xa8>)
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002ea4:	4825      	ldr	r0, [pc, #148]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ea6:	f003 fd5b 	bl	8006960 <HAL_QSPI_DeInit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e03f      	b.n	8002f34 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 8002eb4:	f000 f8c4 	bl	8003040 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ece:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e003      	b.n	8002eee <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ef4:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002f02:	480e      	ldr	r0, [pc, #56]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002f04:	f003 fcb6 	bl	8006874 <HAL_QSPI_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e010      	b.n	8002f34 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002f12:	480a      	ldr	r0, [pc, #40]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002f14:	f000 f8e0 	bl	80030d8 <QSPI_ResetMemory>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <BSP_QSPI_Init+0xa4>)
 8002f24:	f000 f91c 	bl	8003160 <QSPI_DummyCyclesCfg>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	e000      	b.n	8002f34 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	2000b10c 	.word	0x2000b10c
 8002f40:	a0001000 	.word	0xa0001000

08002f44 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b096      	sub	sp, #88	; 0x58
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002f58:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002f5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d901      	bls.n	8002f66 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002f78:	2312      	movs	r3, #18
 8002f7a:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f86:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8002f8c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa4:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002faa:	4824      	ldr	r0, [pc, #144]	; (800303c <BSP_QSPI_Write+0xf8>)
 8002fac:	f000 f956 	bl	800325c <QSPI_WriteEnable>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03b      	b.n	8003032 <BSP_QSPI_Write+0xee>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	481d      	ldr	r0, [pc, #116]	; (800303c <BSP_QSPI_Write+0xf8>)
 8002fc6:	f003 fcef 	bl	80069a8 <HAL_QSPI_Command>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e02e      	b.n	8003032 <BSP_QSPI_Write+0xee>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	4818      	ldr	r0, [pc, #96]	; (800303c <BSP_QSPI_Write+0xf8>)
 8002fdc:	f003 fd42 	bl	8006a64 <HAL_QSPI_Transmit>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <BSP_QSPI_Write+0xee>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002fea:	f241 3188 	movw	r1, #5000	; 0x1388
 8002fee:	4813      	ldr	r0, [pc, #76]	; (800303c <BSP_QSPI_Write+0xf8>)
 8002ff0:	f000 f980 	bl	80032f4 <QSPI_AutoPollingMemReady>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e019      	b.n	8003032 <BSP_QSPI_Write+0xee>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003002:	4413      	add	r3, r2
 8003004:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003016:	429a      	cmp	r2, r3
 8003018:	d203      	bcs.n	8003022 <BSP_QSPI_Write+0xde>
 800301a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	e001      	b.n	8003026 <BSP_QSPI_Write+0xe2>
 8003022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003026:	657b      	str	r3, [r7, #84]	; 0x54
  }
  while (current_addr < end_addr);
 8003028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	429a      	cmp	r2, r3
 800302e:	d3b8      	bcc.n	8002fa2 <BSP_QSPI_Write+0x5e>

  return QSPI_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3758      	adds	r7, #88	; 0x58
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000b10c 	.word	0x2000b10c

08003040 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <QSPI_MspInit+0x90>)
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <QSPI_MspInit+0x90>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6513      	str	r3, [r2, #80]	; 0x50
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <QSPI_MspInit+0x90>)
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <QSPI_MspInit+0x90>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <QSPI_MspInit+0x90>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <QSPI_MspInit+0x90>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <QSPI_MspInit+0x90>)
 8003070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003074:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <QSPI_MspInit+0x90>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <QSPI_MspInit+0x90>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <QSPI_MspInit+0x90>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 800308e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003098:	2301      	movs	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80030a0:	230a      	movs	r3, #10
 80030a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	4619      	mov	r1, r3
 80030aa:	480a      	ldr	r0, [pc, #40]	; (80030d4 <QSPI_MspInit+0x94>)
 80030ac:	f002 f88a 	bl	80051c4 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80030b0:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 80030b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <QSPI_MspInit+0x94>)
 80030c2:	f002 f87f 	bl	80051c4 <HAL_GPIO_Init>
}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	48001000 	.word	0x48001000

080030d8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b090      	sub	sp, #64	; 0x40
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80030e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e4:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80030e6:	2366      	movs	r3, #102	; 0x66
 80030e8:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030fe:	2300      	movs	r3, #0
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003102:	2300      	movs	r3, #0
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4619      	mov	r1, r3
 8003110:	4812      	ldr	r0, [pc, #72]	; (800315c <QSPI_ResetMemory+0x84>)
 8003112:	f003 fc49 	bl	80069a8 <HAL_QSPI_Command>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e019      	b.n	8003154 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003120:	2399      	movs	r3, #153	; 0x99
 8003122:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003124:	f107 0308 	add.w	r3, r7, #8
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4619      	mov	r1, r3
 800312e:	480b      	ldr	r0, [pc, #44]	; (800315c <QSPI_ResetMemory+0x84>)
 8003130:	f003 fc3a 	bl	80069a8 <HAL_QSPI_Command>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e00a      	b.n	8003154 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800313e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <QSPI_ResetMemory+0x84>)
 8003144:	f000 f8d6 	bl	80032f4 <QSPI_AutoPollingMemReady>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3740      	adds	r7, #64	; 0x40
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000b10c 	.word	0x2000b10c

08003160 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b094      	sub	sp, #80	; 0x50
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800316e:	2385      	movs	r3, #133	; 0x85
 8003170:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800317a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8003184:	2301      	movs	r3, #1
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800318c:	2300      	movs	r3, #0
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003190:	2300      	movs	r3, #0
 8003192:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4619      	mov	r1, r3
 800319e:	482e      	ldr	r0, [pc, #184]	; (8003258 <QSPI_DummyCyclesCfg+0xf8>)
 80031a0:	f003 fc02 	bl	80069a8 <HAL_QSPI_Command>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e04f      	b.n	800324e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031ae:	f107 030b 	add.w	r3, r7, #11
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4619      	mov	r1, r3
 80031b8:	4827      	ldr	r0, [pc, #156]	; (8003258 <QSPI_DummyCyclesCfg+0xf8>)
 80031ba:	f003 fcea 	bl	8006b92 <HAL_QSPI_Receive>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e042      	b.n	800324e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80031c8:	4823      	ldr	r0, [pc, #140]	; (8003258 <QSPI_DummyCyclesCfg+0xf8>)
 80031ca:	f000 f847 	bl	800325c <QSPI_WriteEnable>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e03a      	b.n	800324e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80031d8:	2381      	movs	r3, #129	; 0x81
 80031da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80031dc:	7afb      	ldrb	r3, [r7, #11]
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b25a      	sxtb	r2, r3
 80031e6:	23f0      	movs	r3, #240	; 0xf0
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80031f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 80031f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e003      	b.n	8003208 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8003200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	230a      	movs	r3, #10
 800320c:	408b      	lsls	r3, r1
 800320e:	b25b      	sxtb	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b25b      	sxtb	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4619      	mov	r1, r3
 8003222:	480d      	ldr	r0, [pc, #52]	; (8003258 <QSPI_DummyCyclesCfg+0xf8>)
 8003224:	f003 fbc0 	bl	80069a8 <HAL_QSPI_Command>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00d      	b.n	800324e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003232:	f107 030b 	add.w	r3, r7, #11
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4619      	mov	r1, r3
 800323c:	4806      	ldr	r0, [pc, #24]	; (8003258 <QSPI_DummyCyclesCfg+0xf8>)
 800323e:	f003 fc11 	bl	8006a64 <HAL_QSPI_Transmit>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3750      	adds	r7, #80	; 0x50
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2000b10c 	.word	0x2000b10c

0800325c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b096      	sub	sp, #88	; 0x58
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800326a:	2306      	movs	r3, #6
 800326c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800326e:	2300      	movs	r3, #0
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003272:	2300      	movs	r3, #0
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003282:	2300      	movs	r3, #0
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003286:	2300      	movs	r3, #0
 8003288:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800328a:	f107 0320 	add.w	r3, r7, #32
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4619      	mov	r1, r3
 8003294:	4816      	ldr	r0, [pc, #88]	; (80032f0 <QSPI_WriteEnable+0x94>)
 8003296:	f003 fb87 	bl	80069a8 <HAL_QSPI_Command>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e020      	b.n	80032e6 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 80032a4:	2302      	movs	r3, #2
 80032a6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 80032a8:	2302      	movs	r3, #2
 80032aa:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80032b0:	2301      	movs	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80032b4:	2310      	movs	r3, #16
 80032b6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80032b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032bc:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80032be:	2305      	movs	r3, #5
 80032c0:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80032c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032c8:	f107 0208 	add.w	r2, r7, #8
 80032cc:	f107 0120 	add.w	r1, r7, #32
 80032d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032d4:	4806      	ldr	r0, [pc, #24]	; (80032f0 <QSPI_WriteEnable+0x94>)
 80032d6:	f003 fcfe 	bl	8006cd6 <HAL_QSPI_AutoPolling>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3758      	adds	r7, #88	; 0x58
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000b10c 	.word	0x2000b10c

080032f4 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b096      	sub	sp, #88	; 0x58
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003304:	2305      	movs	r3, #5
 8003306:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003308:	2300      	movs	r3, #0
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800330c:	2300      	movs	r3, #0
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800331e:	2300      	movs	r3, #0
 8003320:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003322:	2300      	movs	r3, #0
 8003324:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 800332a:	2301      	movs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003336:	2310      	movs	r3, #16
 8003338:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800333a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333e:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003340:	f107 0208 	add.w	r2, r7, #8
 8003344:	f107 0120 	add.w	r1, r7, #32
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4806      	ldr	r0, [pc, #24]	; (8003364 <QSPI_AutoPollingMemReady+0x70>)
 800334c:	f003 fcc3 	bl	8006cd6 <HAL_QSPI_AutoPolling>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3758      	adds	r7, #88	; 0x58
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000b10c 	.word	0x2000b10c

08003368 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_Init+0x3c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_Init+0x3c>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337e:	2003      	movs	r0, #3
 8003380:	f001 fbde 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003384:	2000      	movs	r0, #0
 8003386:	f000 f80f 	bl	80033a8 <HAL_InitTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	71fb      	strb	r3, [r7, #7]
 8003394:	e001      	b.n	800339a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003396:	f7fd fce3 	bl	8000d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800339a:	79fb      	ldrb	r3, [r7, #7]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_InitTick+0x6c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_InitTick+0x70>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_InitTick+0x6c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fbf7 	bl	8004bc6 <HAL_SYSTICK_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d809      	bhi.n	80033f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e4:	2200      	movs	r2, #0
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	f001 fbb3 	bl	8004b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_InitTick+0x74>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e007      	b.n	8003408 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e004      	b.n	8003408 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e001      	b.n	8003408 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000acb4 	.word	0x2000acb4
 8003418:	2000ac74 	.word	0x2000ac74
 800341c:	2000acb0 	.word	0x2000acb0

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000acb4 	.word	0x2000acb4
 8003444:	2000b150 	.word	0x2000b150

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000b150 	.word	0x2000b150

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d005      	beq.n	8003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_Delay+0x44>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003486:	bf00      	nop
 8003488:	f7ff ffde 	bl	8003448 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d8f7      	bhi.n	8003488 <HAL_Delay+0x28>
  {
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000acb4 	.word	0x2000acb4

080034a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <LL_ADC_SetOffset+0x44>)
 8003532:	4013      	ands	r3, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	4313      	orrs	r3, r2
 8003540:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	03fff000 	.word	0x03fff000

08003558 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	461a      	mov	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3360      	adds	r3, #96	; 0x60
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3330      	adds	r3, #48	; 0x30
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	4413      	add	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	211f      	movs	r1, #31
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 011f 	and.w	r1, r3, #31
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800365e:	b480      	push	{r7}
 8003660:	b087      	sub	sp, #28
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3314      	adds	r3, #20
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0e5b      	lsrs	r3, r3, #25
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0d1b      	lsrs	r3, r3, #20
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2107      	movs	r1, #7
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	431a      	orrs	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0318 	and.w	r3, r3, #24
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036d8:	40d9      	lsrs	r1, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	400b      	ands	r3, r1
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	0007ffff 	.word	0x0007ffff

080036fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 031f 	and.w	r3, r3, #31
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6093      	str	r3, [r2, #8]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376c:	d101      	bne.n	8003772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037bc:	d101      	bne.n	80037c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <LL_ADC_IsEnabled+0x18>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <LL_ADC_IsEnabled+0x1a>
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d101      	bne.n	800380e <LL_ADC_REG_IsConversionOngoing+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d101      	bne.n	8003834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e136      	b.n	8003acc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd fa9b 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff67 	bl	8003758 <LL_ADC_IsDeepPowerDownEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff4d 	bl	8003734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff82 	bl	80037a8 <LL_ADC_IsInternalRegulatorEnabled>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff66 	bl	8003780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b4:	4b87      	ldr	r3, [pc, #540]	; (8003ad4 <HAL_ADC_Init+0x290>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	4a87      	ldr	r2, [pc, #540]	; (8003ad8 <HAL_ADC_Init+0x294>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038c8:	e002      	b.n	80038d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f9      	bne.n	80038ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff64 	bl	80037a8 <LL_ADC_IsInternalRegulatorEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0210 	orr.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff75 	bl	80037f6 <LL_ADC_REG_IsConversionOngoing>
 800390c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 80cf 	bne.w	8003aba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 80cb 	bne.w	8003aba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800392c:	f043 0202 	orr.w	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff49 	bl	80037d0 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d115      	bne.n	8003970 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003944:	4865      	ldr	r0, [pc, #404]	; (8003adc <HAL_ADC_Init+0x298>)
 8003946:	f7ff ff43 	bl	80037d0 <LL_ADC_IsEnabled>
 800394a:	4604      	mov	r4, r0
 800394c:	4864      	ldr	r0, [pc, #400]	; (8003ae0 <HAL_ADC_Init+0x29c>)
 800394e:	f7ff ff3f 	bl	80037d0 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	431c      	orrs	r4, r3
 8003956:	4863      	ldr	r0, [pc, #396]	; (8003ae4 <HAL_ADC_Init+0x2a0>)
 8003958:	f7ff ff3a 	bl	80037d0 <LL_ADC_IsEnabled>
 800395c:	4603      	mov	r3, r0
 800395e:	4323      	orrs	r3, r4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4619      	mov	r1, r3
 800396a:	485f      	ldr	r0, [pc, #380]	; (8003ae8 <HAL_ADC_Init+0x2a4>)
 800396c:	f7ff fd9c 	bl	80034a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e5b      	ldrb	r3, [r3, #25]
 8003974:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800397a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003980:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003986:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d106      	bne.n	80039ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	3b01      	subs	r3, #1
 80039a4:	045b      	lsls	r3, r3, #17
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_ADC_Init+0x2a8>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	430b      	orrs	r3, r1
 80039da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff08 	bl	80037f6 <LL_ADC_REG_IsConversionOngoing>
 80039e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff15 	bl	800381c <LL_ADC_INJ_IsConversionOngoing>
 80039f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d13d      	bne.n	8003a76 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d13a      	bne.n	8003a76 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a04:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1c:	f023 0302 	bic.w	r3, r3, #2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d118      	bne.n	8003a66 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a56:	430a      	orrs	r2, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	611a      	str	r2, [r3, #16]
 8003a64:	e007      	b.n	8003a76 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10c      	bne.n	8003a98 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f023 010f 	bic.w	r1, r3, #15
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
 8003a96:	e007      	b.n	8003aa8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 020f 	bic.w	r2, r2, #15
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f023 0303 	bic.w	r3, r3, #3
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ab8:	e007      	b.n	8003aca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3724      	adds	r7, #36	; 0x24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd90      	pop	{r4, r7, pc}
 8003ad4:	2000ac74 	.word	0x2000ac74
 8003ad8:	053e2d63 	.word	0x053e2d63
 8003adc:	50040000 	.word	0x50040000
 8003ae0:	50040100 	.word	0x50040100
 8003ae4:	50040200 	.word	0x50040200
 8003ae8:	50040300 	.word	0x50040300
 8003aec:	fff0c007 	.word	0xfff0c007

08003af0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b28:	4882      	ldr	r0, [pc, #520]	; (8003d34 <HAL_ADC_IRQHandler+0x228>)
 8003b2a:	f7ff fde7 	bl	80036fc <LL_ADC_GetMultimode>
 8003b2e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x5e>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fe41 	bl	80047e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x72>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8083 	beq.w	8003c90 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d07d      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fd02 	bl	80035ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d062      	beq.n	8003c82 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5d      	ldr	r2, [pc, #372]	; (8003d38 <HAL_ADC_IRQHandler+0x22c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d002      	beq.n	8003bcc <HAL_ADC_IRQHandler+0xc0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e000      	b.n	8003bce <HAL_ADC_IRQHandler+0xc2>
 8003bcc:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_ADC_IRQHandler+0x230>)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d008      	beq.n	8003be8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d002      	beq.n	8003be8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d104      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	e00c      	b.n	8003c0c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <HAL_ADC_IRQHandler+0x22c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d002      	beq.n	8003c02 <HAL_ADC_IRQHandler+0xf6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_IRQHandler+0xf8>
 8003c02:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <HAL_ADC_IRQHandler+0x230>)
 8003c04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d135      	bne.n	8003c82 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d12e      	bne.n	8003c82 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fde4 	bl	80037f6 <LL_ADC_REG_IsConversionOngoing>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11a      	bne.n	8003c6a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020c 	bic.w	r2, r2, #12
 8003c42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d112      	bne.n	8003c82 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
 8003c68:	e00b      	b.n	8003c82 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fc54 	bl	8000530 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADC_IRQHandler+0x198>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 809f 	beq.w	8003dee <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8099 	beq.w	8003dee <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fcad 	bl	8003638 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003cde:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fc68 	bl	80035ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <HAL_ADC_IRQHandler+0x22c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d002      	beq.n	8003cfc <HAL_ADC_IRQHandler+0x1f0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e000      	b.n	8003cfe <HAL_ADC_IRQHandler+0x1f2>
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <HAL_ADC_IRQHandler+0x230>)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d008      	beq.n	8003d18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d002      	beq.n	8003d18 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	d104      	bne.n	8003d22 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	e013      	b.n	8003d4a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_ADC_IRQHandler+0x22c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x234>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e007      	b.n	8003d42 <HAL_ADC_IRQHandler+0x236>
 8003d32:	bf00      	nop
 8003d34:	50040300 	.word	0x50040300
 8003d38:	50040100 	.word	0x50040100
 8003d3c:	50040000 	.word	0x50040000
 8003d40:	4b7d      	ldr	r3, [pc, #500]	; (8003f38 <HAL_ADC_IRQHandler+0x42c>)
 8003d42:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d047      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_ADC_IRQHandler+0x25e>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03f      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13a      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d133      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d12e      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fd48 	bl	800381c <LL_ADC_INJ_IsConversionOngoing>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11a      	bne.n	8003dc8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003da0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d112      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
 8003dc6:	e00b      	b.n	8003de0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fcd7 	bl	8004794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2260      	movs	r2, #96	; 0x60
 8003dec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d011      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x310>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f896 	bl	8003f40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d012      	beq.n	8003e4c <HAL_ADC_IRQHandler+0x340>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fcbd 	bl	80047bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_ADC_IRQHandler+0x370>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fcaf 	bl	80047d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d036      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x3e8>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d031      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	e014      	b.n	8003ec8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ea4:	4825      	ldr	r0, [pc, #148]	; (8003f3c <HAL_ADC_IRQHandler+0x430>)
 8003ea6:	f7ff fc37 	bl	8003718 <LL_ADC_GetMultiDMATransfer>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e008      	b.n	8003ec8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10e      	bne.n	8003eec <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f834 	bl	8003f54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x424>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f043 0208 	orr.w	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fc3c 	bl	80047a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f30:	bf00      	nop
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	50040000 	.word	0x50040000
 8003f3c:	50040300 	.word	0x50040300

08003f40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b0b6      	sub	sp, #216	; 0xd8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x22>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e3c7      	b.n	800471a <HAL_ADC_ConfigChannel+0x7b2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc2d 	bl	80037f6 <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 83a8 	bne.w	80046f4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d824      	bhi.n	8003ff6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	3b02      	subs	r3, #2
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d81b      	bhi.n	8003fee <HAL_ADC_ConfigChannel+0x86>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_ADC_ConfigChannel+0x54>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fd5 	.word	0x08003fd5
 8003fc4:	08003fdd 	.word	0x08003fdd
 8003fc8:	08003fe5 	.word	0x08003fe5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	605a      	str	r2, [r3, #4]
          break;
 8003fd2:	e011      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2212      	movs	r2, #18
 8003fd8:	605a      	str	r2, [r3, #4]
          break;
 8003fda:	e00d      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2218      	movs	r2, #24
 8003fe0:	605a      	str	r2, [r3, #4]
          break;
 8003fe2:	e009      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fea:	605a      	str	r2, [r3, #4]
          break;
 8003fec:	e004      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	605a      	str	r2, [r3, #4]
          break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003ff6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	f7ff faeb 	bl	80035e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fbf1 	bl	80037f6 <LL_ADC_REG_IsConversionOngoing>
 8004014:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fbfd 	bl	800381c <LL_ADC_INJ_IsConversionOngoing>
 8004022:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 81a6 	bne.w	800437c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 81a1 	bne.w	800437c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	461a      	mov	r2, r3
 8004048:	f7ff fb09 	bl	800365e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00a      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800407e:	f7ff fa47 	bl	8003510 <LL_ADC_SetOffset>
 8004082:	e17b      	b.n	800437c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fa64 	bl	8003558 <LL_ADC_GetOffsetChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x148>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fa59 	bl	8003558 <LL_ADC_GetOffsetChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	e01e      	b.n	80040ee <HAL_ADC_ConfigChannel+0x186>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fa4e 	bl	8003558 <LL_ADC_GetOffsetChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80040ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80040d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e004      	b.n	80040ec <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 80040e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x19e>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	e018      	b.n	8004138 <HAL_ADC_ConfigChannel+0x1d0>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800411a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800411e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e004      	b.n	8004138 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800412e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004138:	429a      	cmp	r2, r3
 800413a:	d106      	bne.n	800414a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fa1d 	bl	8003584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fa01 	bl	8003558 <LL_ADC_GetOffsetChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x20e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff f9f6 	bl	8003558 <LL_ADC_GetOffsetChannel>
 800416c:	4603      	mov	r3, r0
 800416e:	0e9b      	lsrs	r3, r3, #26
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	e01e      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x24c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f9eb 	bl	8003558 <LL_ADC_GetOffsetChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004198:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800419c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e004      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80041a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x264>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	e018      	b.n	80041fe <HAL_ADC_ConfigChannel+0x296>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80041e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80041e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80041f0:	2320      	movs	r3, #32
 80041f2:	e004      	b.n	80041fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80041f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041fe:	429a      	cmp	r2, r3
 8004200:	d106      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f9ba 	bl	8003584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f99e 	bl	8003558 <LL_ADC_GetOffsetChannel>
 800421c:	4603      	mov	r3, r0
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x2d4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f993 	bl	8003558 <LL_ADC_GetOffsetChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	f003 021f 	and.w	r2, r3, #31
 800423a:	e01e      	b.n	800427a <HAL_ADC_ConfigChannel+0x312>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff f988 	bl	8003558 <LL_ADC_GetOffsetChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800425a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800425e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e004      	b.n	8004278 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800426e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x32a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	e016      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x358>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80042a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80042aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80042b2:	2320      	movs	r3, #32
 80042b4:	e004      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80042b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d106      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f959 	bl	8003584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2103      	movs	r1, #3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f93d 	bl	8003558 <LL_ADC_GetOffsetChannel>
 80042de:	4603      	mov	r3, r0
 80042e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x396>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2103      	movs	r1, #3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f932 	bl	8003558 <LL_ADC_GetOffsetChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	0e9b      	lsrs	r3, r3, #26
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	e017      	b.n	800432e <HAL_ADC_ConfigChannel+0x3c6>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2103      	movs	r1, #3
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f927 	bl	8003558 <LL_ADC_GetOffsetChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004318:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800431a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e003      	b.n	800432c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x3de>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0e9b      	lsrs	r3, r3, #26
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	e011      	b.n	800436a <HAL_ADC_ConfigChannel+0x402>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004356:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e003      	b.n	800436a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800436a:	429a      	cmp	r2, r3
 800436c:	d106      	bne.n	800437c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	2103      	movs	r1, #3
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f904 	bl	8003584 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa25 	bl	80037d0 <LL_ADC_IsEnabled>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 813f 	bne.w	800460c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f7ff f98a 	bl	80036b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a8e      	ldr	r2, [pc, #568]	; (80045e0 <HAL_ADC_ConfigChannel+0x678>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f040 8130 	bne.w	800460c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x46c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	3301      	adds	r3, #1
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	bf94      	ite	ls
 80043cc:	2301      	movls	r3, #1
 80043ce:	2300      	movhi	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e019      	b.n	8004408 <HAL_ADC_ConfigChannel+0x4a0>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80043e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80043e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e003      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80043f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2b09      	cmp	r3, #9
 8004400:	bf94      	ite	ls
 8004402:	2301      	movls	r3, #1
 8004404:	2300      	movhi	r3, #0
 8004406:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004408:	2b00      	cmp	r3, #0
 800440a:	d079      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x4c0>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	3301      	adds	r3, #1
 8004420:	069b      	lsls	r3, r3, #26
 8004422:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004426:	e015      	b.n	8004454 <HAL_ADC_ConfigChannel+0x4ec>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800443a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	069b      	lsls	r3, r3, #26
 8004450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x50c>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	3301      	adds	r3, #1
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	e017      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x53c>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	fa93 f3a3 	rbit	r3, r3
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800448c:	2320      	movs	r3, #32
 800448e:	e003      	b.n	8004498 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x562>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	051b      	lsls	r3, r3, #20
 80044c8:	e018      	b.n	80044fc <HAL_ADC_ConfigChannel+0x594>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80044dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80044e2:	2320      	movs	r3, #32
 80044e4:	e003      	b.n	80044ee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3301      	adds	r3, #1
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044fc:	430b      	orrs	r3, r1
 80044fe:	e080      	b.n	8004602 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <HAL_ADC_ConfigChannel+0x5b4>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0e9b      	lsrs	r3, r3, #26
 8004512:	3301      	adds	r3, #1
 8004514:	069b      	lsls	r3, r3, #26
 8004516:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800451a:	e015      	b.n	8004548 <HAL_ADC_ConfigChannel+0x5e0>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	e003      	b.n	8004540 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3301      	adds	r3, #1
 8004542:	069b      	lsls	r3, r3, #26
 8004544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x600>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	0e9b      	lsrs	r3, r3, #26
 800455a:	3301      	adds	r3, #1
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	e017      	b.n	8004598 <HAL_ADC_ConfigChannel+0x630>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	61fb      	str	r3, [r7, #28]
  return result;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004580:	2320      	movs	r3, #32
 8004582:	e003      	b.n	800458c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x65c>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	3301      	adds	r3, #1
 80045b0:	f003 021f 	and.w	r2, r3, #31
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	3b1e      	subs	r3, #30
 80045bc:	051b      	lsls	r3, r3, #20
 80045be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c2:	e01d      	b.n	8004600 <HAL_ADC_ConfigChannel+0x698>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	613b      	str	r3, [r7, #16]
  return result;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80045dc:	2320      	movs	r3, #32
 80045de:	e005      	b.n	80045ec <HAL_ADC_ConfigChannel+0x684>
 80045e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f003 021f 	and.w	r2, r3, #31
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	3b1e      	subs	r3, #30
 80045fa:	051b      	lsls	r3, r3, #20
 80045fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004600:	430b      	orrs	r3, r1
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	6892      	ldr	r2, [r2, #8]
 8004606:	4619      	mov	r1, r3
 8004608:	f7ff f829 	bl	800365e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b44      	ldr	r3, [pc, #272]	; (8004724 <HAL_ADC_ConfigChannel+0x7bc>)
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d07a      	beq.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004618:	4843      	ldr	r0, [pc, #268]	; (8004728 <HAL_ADC_ConfigChannel+0x7c0>)
 800461a:	f7fe ff6b 	bl	80034f4 <LL_ADC_GetCommonPathInternalCh>
 800461e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <HAL_ADC_ConfigChannel+0x7c4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d12c      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800462c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d126      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_ADC_ConfigChannel+0x7c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_ADC_ConfigChannel+0x6e4>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3b      	ldr	r2, [pc, #236]	; (8004734 <HAL_ADC_ConfigChannel+0x7cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d15d      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800464c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004654:	4619      	mov	r1, r3
 8004656:	4834      	ldr	r0, [pc, #208]	; (8004728 <HAL_ADC_ConfigChannel+0x7c0>)
 8004658:	f7fe ff39 	bl	80034ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_ADC_ConfigChannel+0x7d0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	4a36      	ldr	r2, [pc, #216]	; (800473c <HAL_ADC_ConfigChannel+0x7d4>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004676:	e002      	b.n	800467e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3b01      	subs	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f9      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004684:	e040      	b.n	8004708 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2d      	ldr	r2, [pc, #180]	; (8004740 <HAL_ADC_ConfigChannel+0x7d8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d118      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x75a>
 8004690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d112      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <HAL_ADC_ConfigChannel+0x7c8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0x748>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a22      	ldr	r2, [pc, #136]	; (8004734 <HAL_ADC_ConfigChannel+0x7cc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d12d      	bne.n	800470c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b8:	4619      	mov	r1, r3
 80046ba:	481b      	ldr	r0, [pc, #108]	; (8004728 <HAL_ADC_ConfigChannel+0x7c0>)
 80046bc:	f7fe ff07 	bl	80034ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046c0:	e024      	b.n	800470c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_ADC_ConfigChannel+0x7dc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d120      	bne.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11a      	bne.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <HAL_ADC_ConfigChannel+0x7c8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d115      	bne.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ea:	4619      	mov	r1, r3
 80046ec:	480e      	ldr	r0, [pc, #56]	; (8004728 <HAL_ADC_ConfigChannel+0x7c0>)
 80046ee:	f7fe feee 	bl	80034ce <LL_ADC_SetCommonPathInternalCh>
 80046f2:	e00c      	b.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004706:	e002      	b.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004716:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800471a:	4618      	mov	r0, r3
 800471c:	37d8      	adds	r7, #216	; 0xd8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	80080000 	.word	0x80080000
 8004728:	50040300 	.word	0x50040300
 800472c:	c7520000 	.word	0xc7520000
 8004730:	50040000 	.word	0x50040000
 8004734:	50040200 	.word	0x50040200
 8004738:	2000ac74 	.word	0x2000ac74
 800473c:	053e2d63 	.word	0x053e2d63
 8004740:	cb840000 	.word	0xcb840000
 8004744:	80000001 	.word	0x80000001

08004748 <LL_ADC_IsEnabled>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <LL_ADC_IsEnabled+0x18>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_ADC_IsEnabled+0x1a>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_REG_IsConversionOngoing>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d101      	bne.n	8004786 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b09f      	sub	sp, #124	; 0x7c
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004812:	2302      	movs	r3, #2
 8004814:	e093      	b.n	800493e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800481e:	2300      	movs	r3, #0
 8004820:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004822:	2300      	movs	r3, #0
 8004824:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a47      	ldr	r2, [pc, #284]	; (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d102      	bne.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	e001      	b.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e072      	b.n	800493e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff87 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 8004860:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ff81 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d154      	bne.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004874:	2b00      	cmp	r3, #0
 8004876:	d151      	bne.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004878:	4b35      	ldr	r3, [pc, #212]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800487a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02c      	beq.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004896:	035b      	lsls	r3, r3, #13
 8004898:	430b      	orrs	r3, r1
 800489a:	431a      	orrs	r2, r3
 800489c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048a0:	4829      	ldr	r0, [pc, #164]	; (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048a2:	f7ff ff51 	bl	8004748 <LL_ADC_IsEnabled>
 80048a6:	4604      	mov	r4, r0
 80048a8:	4828      	ldr	r0, [pc, #160]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80048aa:	f7ff ff4d 	bl	8004748 <LL_ADC_IsEnabled>
 80048ae:	4603      	mov	r3, r0
 80048b0:	431c      	orrs	r4, r3
 80048b2:	4828      	ldr	r0, [pc, #160]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80048b4:	f7ff ff48 	bl	8004748 <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	4323      	orrs	r3, r4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d137      	bne.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048c8:	f023 030f 	bic.w	r3, r3, #15
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	6811      	ldr	r1, [r2, #0]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	6892      	ldr	r2, [r2, #8]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	431a      	orrs	r2, r3
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048dc:	e028      	b.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ea:	4817      	ldr	r0, [pc, #92]	; (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048ec:	f7ff ff2c 	bl	8004748 <LL_ADC_IsEnabled>
 80048f0:	4604      	mov	r4, r0
 80048f2:	4816      	ldr	r0, [pc, #88]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80048f4:	f7ff ff28 	bl	8004748 <LL_ADC_IsEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	431c      	orrs	r4, r3
 80048fc:	4815      	ldr	r0, [pc, #84]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80048fe:	f7ff ff23 	bl	8004748 <LL_ADC_IsEnabled>
 8004902:	4603      	mov	r3, r0
 8004904:	4323      	orrs	r3, r4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d112      	bne.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004912:	f023 030f 	bic.w	r3, r3, #15
 8004916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004918:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800491a:	e009      	b.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800492e:	e000      	b.n	8004932 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004930:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800493a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800493e:	4618      	mov	r0, r3
 8004940:	377c      	adds	r7, #124	; 0x7c
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	50040000 	.word	0x50040000
 800494c:	50040100 	.word	0x50040100
 8004950:	50040300 	.word	0x50040300
 8004954:	50040200 	.word	0x50040200

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db12      	blt.n	8004a30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	490a      	ldr	r1, [pc, #40]	; (8004a3c <__NVIC_DisableIRQ+0x44>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2001      	movs	r0, #1
 8004a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1e:	3320      	adds	r3, #32
 8004a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a24:	f3bf 8f4f 	dsb	sy
}
 8004a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a2a:	f3bf 8f6f 	isb	sy
}
 8004a2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff05 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b68:	f7ff ff1a 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f7ff ff8e 	bl	8004a94 <NVIC_EncodePriority>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff5d 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff0d 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff1d 	bl	80049f8 <__NVIC_DisableIRQ>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff94 	bl	8004afc <SysTick_Config>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0ac      	b.n	8004d4c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f8b2 	bl	8004d60 <DFSDM_GetChannelFromInstance>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4a55      	ldr	r2, [pc, #340]	; (8004d54 <HAL_DFSDM_ChannelInit+0x174>)
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e09f      	b.n	8004d4c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fc f911 	bl	8000e34 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <HAL_DFSDM_ChannelInit+0x178>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <HAL_DFSDM_ChannelInit+0x178>)
 8004c1a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004c1c:	4b4e      	ldr	r3, [pc, #312]	; (8004d58 <HAL_DFSDM_ChannelInit+0x178>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d125      	bne.n	8004c70 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c2e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4948      	ldr	r1, [pc, #288]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c44:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004c48:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d108      	bne.n	8004c64 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004c52:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8004c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c6e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004c7e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c8e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004c94:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 020f 	bic.w	r2, r2, #15
 8004cac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004cd4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6899      	ldr	r1, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f002 0207 	and.w	r2, r2, #7
 8004d00:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f810 	bl	8004d60 <DFSDM_GetChannelFromInstance>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4904      	ldr	r1, [pc, #16]	; (8004d54 <HAL_DFSDM_ChannelInit+0x174>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	2000b158 	.word	0x2000b158
 8004d58:	2000b154 	.word	0x2000b154
 8004d5c:	40016000 	.word	0x40016000

08004d60 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <DFSDM_GetChannelFromInstance+0x7c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d102      	bne.n	8004d76 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e02b      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <DFSDM_GetChannelFromInstance+0x80>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d102      	bne.n	8004d84 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e024      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <DFSDM_GetChannelFromInstance+0x84>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d102      	bne.n	8004d92 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e01d      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <DFSDM_GetChannelFromInstance+0x88>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d102      	bne.n	8004da0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e016      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <DFSDM_GetChannelFromInstance+0x8c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d102      	bne.n	8004dae <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004da8:	2305      	movs	r3, #5
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e00f      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <DFSDM_GetChannelFromInstance+0x90>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d102      	bne.n	8004dbc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004db6:	2306      	movs	r3, #6
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e008      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <DFSDM_GetChannelFromInstance+0x94>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d102      	bne.n	8004dca <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004dc4:	2307      	movs	r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e001      	b.n	8004dce <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40016000 	.word	0x40016000
 8004de0:	40016020 	.word	0x40016020
 8004de4:	40016040 	.word	0x40016040
 8004de8:	40016080 	.word	0x40016080
 8004dec:	400160a0 	.word	0x400160a0
 8004df0:	400160c0 	.word	0x400160c0
 8004df4:	400160e0 	.word	0x400160e0

08004df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e098      	b.n	8004f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b4d      	ldr	r3, [pc, #308]	; (8004f48 <HAL_DMA_Init+0x150>)
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d80f      	bhi.n	8004e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_DMA_Init+0x154>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a4b      	ldr	r2, [pc, #300]	; (8004f50 <HAL_DMA_Init+0x158>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	009a      	lsls	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a48      	ldr	r2, [pc, #288]	; (8004f54 <HAL_DMA_Init+0x15c>)
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40
 8004e34:	e00e      	b.n	8004e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_DMA_Init+0x160>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	4a43      	ldr	r2, [pc, #268]	; (8004f50 <HAL_DMA_Init+0x158>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	009a      	lsls	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a42      	ldr	r2, [pc, #264]	; (8004f5c <HAL_DMA_Init+0x164>)
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eae:	d039      	beq.n	8004f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_DMA_Init+0x15c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_DMA_Init+0x168>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f003 031c 	and.w	r3, r3, #28
 8004ec6:	210f      	movs	r1, #15
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4924      	ldr	r1, [pc, #144]	; (8004f60 <HAL_DMA_Init+0x168>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_DMA_Init+0x168>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	f003 031c 	and.w	r3, r3, #28
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	491d      	ldr	r1, [pc, #116]	; (8004f60 <HAL_DMA_Init+0x168>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	e019      	b.n	8004f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_DMA_Init+0x16c>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	f003 031c 	and.w	r3, r3, #28
 8004efc:	210f      	movs	r1, #15
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	4917      	ldr	r1, [pc, #92]	; (8004f64 <HAL_DMA_Init+0x16c>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f0a:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <HAL_DMA_Init+0x16c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f003 031c 	and.w	r3, r3, #28
 8004f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1e:	4911      	ldr	r1, [pc, #68]	; (8004f64 <HAL_DMA_Init+0x16c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40020407 	.word	0x40020407
 8004f4c:	bffdfff8 	.word	0xbffdfff8
 8004f50:	cccccccd 	.word	0xcccccccd
 8004f54:	40020000 	.word	0x40020000
 8004f58:	bffdfbf8 	.word	0xbffdfbf8
 8004f5c:	40020400 	.word	0x40020400
 8004f60:	400200a8 	.word	0x400200a8
 8004f64:	400204a8 	.word	0x400204a8

08004f68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d008      	beq.n	8004f92 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e022      	b.n	8004fd8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 020e 	bic.w	r2, r2, #14
 8004fa0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f003 021c 	and.w	r2, r3, #28
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d005      	beq.n	8005008 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2204      	movs	r2, #4
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	e029      	b.n	800505c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 020e 	bic.w	r2, r2, #14
 8005016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f003 021c 	and.w	r2, r3, #28
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f202 	lsl.w	r2, r1, r2
 800503a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
    }
  }
  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f003 031c 	and.w	r3, r3, #28
 8005086:	2204      	movs	r2, #4
 8005088:	409a      	lsls	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d026      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x7a>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d021      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d107      	bne.n	80050ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0204 	bic.w	r2, r2, #4
 80050b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f003 021c 	and.w	r2, r3, #28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2104      	movs	r1, #4
 80050c8:	fa01 f202 	lsl.w	r2, r1, r2
 80050cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d071      	beq.n	80051ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80050de:	e06c      	b.n	80051ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	f003 031c 	and.w	r3, r3, #28
 80050e8:	2202      	movs	r2, #2
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02e      	beq.n	8005152 <HAL_DMA_IRQHandler+0xec>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d029      	beq.n	8005152 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 020a 	bic.w	r2, r2, #10
 800511a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f003 021c 	and.w	r2, r3, #28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	2102      	movs	r1, #2
 8005132:	fa01 f202 	lsl.w	r2, r1, r2
 8005136:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d038      	beq.n	80051ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005150:	e033      	b.n	80051ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f003 031c 	and.w	r3, r3, #28
 800515a:	2208      	movs	r2, #8
 800515c:	409a      	lsls	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02a      	beq.n	80051bc <HAL_DMA_IRQHandler+0x156>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d025      	beq.n	80051bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 020e 	bic.w	r2, r2, #14
 800517e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	f003 021c 	and.w	r2, r3, #28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	2101      	movs	r1, #1
 800518e:	fa01 f202 	lsl.w	r2, r1, r2
 8005192:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
}
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051d2:	e17f      	b.n	80054d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2101      	movs	r1, #1
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8171 	beq.w	80054ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d005      	beq.n	8005204 <HAL_GPIO_Init+0x40>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d130      	bne.n	8005266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	2203      	movs	r2, #3
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800523a:	2201      	movs	r2, #1
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4013      	ands	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 0201 	and.w	r2, r3, #1
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	2b03      	cmp	r3, #3
 8005270:	d118      	bne.n	80052a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005278:	2201      	movs	r2, #1
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	f003 0201 	and.w	r2, r3, #1
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d017      	beq.n	80052e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	2203      	movs	r2, #3
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d123      	bne.n	8005334 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	08da      	lsrs	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3208      	adds	r2, #8
 80052f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	220f      	movs	r2, #15
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	08da      	lsrs	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3208      	adds	r2, #8
 800532e:	6939      	ldr	r1, [r7, #16]
 8005330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	2203      	movs	r2, #3
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4013      	ands	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0203 	and.w	r2, r3, #3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80ac 	beq.w	80054ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005376:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <HAL_GPIO_Init+0x330>)
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_GPIO_Init+0x330>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6613      	str	r3, [r2, #96]	; 0x60
 8005382:	4b5c      	ldr	r3, [pc, #368]	; (80054f4 <HAL_GPIO_Init+0x330>)
 8005384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800538e:	4a5a      	ldr	r2, [pc, #360]	; (80054f8 <HAL_GPIO_Init+0x334>)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	089b      	lsrs	r3, r3, #2
 8005394:	3302      	adds	r3, #2
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	220f      	movs	r2, #15
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053b8:	d025      	beq.n	8005406 <HAL_GPIO_Init+0x242>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a4f      	ldr	r2, [pc, #316]	; (80054fc <HAL_GPIO_Init+0x338>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <HAL_GPIO_Init+0x23e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a4e      	ldr	r2, [pc, #312]	; (8005500 <HAL_GPIO_Init+0x33c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d019      	beq.n	80053fe <HAL_GPIO_Init+0x23a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a4d      	ldr	r2, [pc, #308]	; (8005504 <HAL_GPIO_Init+0x340>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_GPIO_Init+0x236>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a4c      	ldr	r2, [pc, #304]	; (8005508 <HAL_GPIO_Init+0x344>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00d      	beq.n	80053f6 <HAL_GPIO_Init+0x232>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a4b      	ldr	r2, [pc, #300]	; (800550c <HAL_GPIO_Init+0x348>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <HAL_GPIO_Init+0x22e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a4a      	ldr	r2, [pc, #296]	; (8005510 <HAL_GPIO_Init+0x34c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_GPIO_Init+0x22a>
 80053ea:	2306      	movs	r3, #6
 80053ec:	e00c      	b.n	8005408 <HAL_GPIO_Init+0x244>
 80053ee:	2307      	movs	r3, #7
 80053f0:	e00a      	b.n	8005408 <HAL_GPIO_Init+0x244>
 80053f2:	2305      	movs	r3, #5
 80053f4:	e008      	b.n	8005408 <HAL_GPIO_Init+0x244>
 80053f6:	2304      	movs	r3, #4
 80053f8:	e006      	b.n	8005408 <HAL_GPIO_Init+0x244>
 80053fa:	2303      	movs	r3, #3
 80053fc:	e004      	b.n	8005408 <HAL_GPIO_Init+0x244>
 80053fe:	2302      	movs	r3, #2
 8005400:	e002      	b.n	8005408 <HAL_GPIO_Init+0x244>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_GPIO_Init+0x244>
 8005406:	2300      	movs	r3, #0
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	f002 0203 	and.w	r2, r2, #3
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	4093      	lsls	r3, r2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005418:	4937      	ldr	r1, [pc, #220]	; (80054f8 <HAL_GPIO_Init+0x334>)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	3302      	adds	r3, #2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_GPIO_Init+0x350>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800544a:	4a32      	ldr	r2, [pc, #200]	; (8005514 <HAL_GPIO_Init+0x350>)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005450:	4b30      	ldr	r3, [pc, #192]	; (8005514 <HAL_GPIO_Init+0x350>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	43db      	mvns	r3, r3
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4013      	ands	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005474:	4a27      	ldr	r2, [pc, #156]	; (8005514 <HAL_GPIO_Init+0x350>)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_GPIO_Init+0x350>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	43db      	mvns	r3, r3
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4013      	ands	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <HAL_GPIO_Init+0x350>)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80054a4:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <HAL_GPIO_Init+0x350>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054c8:	4a12      	ldr	r2, [pc, #72]	; (8005514 <HAL_GPIO_Init+0x350>)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	3301      	adds	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa22 f303 	lsr.w	r3, r2, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f47f ae78 	bne.w	80051d4 <HAL_GPIO_Init+0x10>
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40010000 	.word	0x40010000
 80054fc:	48000400 	.word	0x48000400
 8005500:	48000800 	.word	0x48000800
 8005504:	48000c00 	.word	0x48000c00
 8005508:	48001000 	.word	0x48001000
 800550c:	48001400 	.word	0x48001400
 8005510:	48001800 	.word	0x48001800
 8005514:	40010400 	.word	0x40010400

08005518 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005526:	e0cd      	b.n	80056c4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005528:	2201      	movs	r2, #1
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80c0 	beq.w	80056be <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800553e:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <HAL_GPIO_DeInit+0x1c8>)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3302      	adds	r3, #2
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	220f      	movs	r2, #15
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4013      	ands	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005566:	d025      	beq.n	80055b4 <HAL_GPIO_DeInit+0x9c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a5e      	ldr	r2, [pc, #376]	; (80056e4 <HAL_GPIO_DeInit+0x1cc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01f      	beq.n	80055b0 <HAL_GPIO_DeInit+0x98>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a5d      	ldr	r2, [pc, #372]	; (80056e8 <HAL_GPIO_DeInit+0x1d0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d019      	beq.n	80055ac <HAL_GPIO_DeInit+0x94>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a5c      	ldr	r2, [pc, #368]	; (80056ec <HAL_GPIO_DeInit+0x1d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_GPIO_DeInit+0x90>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a5b      	ldr	r2, [pc, #364]	; (80056f0 <HAL_GPIO_DeInit+0x1d8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00d      	beq.n	80055a4 <HAL_GPIO_DeInit+0x8c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a5a      	ldr	r2, [pc, #360]	; (80056f4 <HAL_GPIO_DeInit+0x1dc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <HAL_GPIO_DeInit+0x88>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a59      	ldr	r2, [pc, #356]	; (80056f8 <HAL_GPIO_DeInit+0x1e0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <HAL_GPIO_DeInit+0x84>
 8005598:	2306      	movs	r3, #6
 800559a:	e00c      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 800559c:	2307      	movs	r3, #7
 800559e:	e00a      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055a0:	2305      	movs	r3, #5
 80055a2:	e008      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055a4:	2304      	movs	r3, #4
 80055a6:	e006      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055a8:	2303      	movs	r3, #3
 80055aa:	e004      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e002      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_GPIO_DeInit+0x9e>
 80055b4:	2300      	movs	r3, #0
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	f002 0203 	and.w	r2, r2, #3
 80055bc:	0092      	lsls	r2, r2, #2
 80055be:	4093      	lsls	r3, r2
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d132      	bne.n	800562c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80055c6:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	494b      	ldr	r1, [pc, #300]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80055d4:	4b49      	ldr	r3, [pc, #292]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	43db      	mvns	r3, r3
 80055dc:	4947      	ldr	r1, [pc, #284]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055de:	4013      	ands	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80055e2:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	4944      	ldr	r1, [pc, #272]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80055f0:	4b42      	ldr	r3, [pc, #264]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	4940      	ldr	r1, [pc, #256]	; (80056fc <HAL_GPIO_DeInit+0x1e4>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	220f      	movs	r2, #15
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800560e:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <HAL_GPIO_DeInit+0x1c8>)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	089b      	lsrs	r3, r3, #2
 8005614:	3302      	adds	r3, #2
 8005616:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	43da      	mvns	r2, r3
 800561e:	4830      	ldr	r0, [pc, #192]	; (80056e0 <HAL_GPIO_DeInit+0x1c8>)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	400a      	ands	r2, r1
 8005626:	3302      	adds	r3, #2
 8005628:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	2103      	movs	r1, #3
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	08da      	lsrs	r2, r3, #3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3208      	adds	r2, #8
 8005648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	220f      	movs	r2, #15
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	08d2      	lsrs	r2, r2, #3
 8005660:	4019      	ands	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3208      	adds	r2, #8
 8005666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	2103      	movs	r1, #3
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	401a      	ands	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	2101      	movs	r1, #1
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	2103      	movs	r1, #3
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	401a      	ands	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	2101      	movs	r1, #1
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	401a      	ands	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3301      	adds	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f af2b 	bne.w	8005528 <HAL_GPIO_DeInit+0x10>
  }
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40010000 	.word	0x40010000
 80056e4:	48000400 	.word	0x48000400
 80056e8:	48000800 	.word	0x48000800
 80056ec:	48000c00 	.word	0x48000c00
 80056f0:	48001000 	.word	0x48001000
 80056f4:	48001400 	.word	0x48001400
 80056f8:	48001800 	.word	0x48001800
 80056fc:	40010400 	.word	0x40010400

08005700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
 800570c:	4613      	mov	r3, r2
 800570e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800571c:	e002      	b.n	8005724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4013      	ands	r3, r2
 8005748:	041a      	lsls	r2, r3, #16
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	43d9      	mvns	r1, r3
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	400b      	ands	r3, r1
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	619a      	str	r2, [r3, #24]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e081      	b.n	800587a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb fb8a 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	; 0x24
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	e006      	b.n	80057ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d104      	bne.n	80057fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69d9      	ldr	r1, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e021      	b.n	80058d8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fb fb57 	bl	8000f60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	817b      	strh	r3, [r7, #10]
 80058f2:	460b      	mov	r3, r1
 80058f4:	813b      	strh	r3, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b20      	cmp	r3, #32
 8005904:	f040 80f9 	bne.w	8005afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_I2C_Mem_Write+0x34>
 800590e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0ed      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_I2C_Mem_Write+0x4e>
 800592a:	2302      	movs	r3, #2
 800592c:	e0e6      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005936:	f7fd fd87 	bl	8003448 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2319      	movs	r3, #25
 8005942:	2201      	movs	r2, #1
 8005944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fad1 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0d1      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2221      	movs	r2, #33	; 0x21
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2240      	movs	r2, #64	; 0x40
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005980:	88f8      	ldrh	r0, [r7, #6]
 8005982:	893a      	ldrh	r2, [r7, #8]
 8005984:	8979      	ldrh	r1, [r7, #10]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4603      	mov	r3, r0
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f9e1 	bl	8005d58 <I2C_RequestMemoryWrite>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0a9      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2bff      	cmp	r3, #255	; 0xff
 80059b0:	d90e      	bls.n	80059d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	8979      	ldrh	r1, [r7, #10]
 80059c0:	2300      	movs	r3, #0
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fc39 	bl	8006240 <I2C_TransferConfig>
 80059ce:	e00f      	b.n	80059f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	8979      	ldrh	r1, [r7, #10]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fc28 	bl	8006240 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fabb 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e07b      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d034      	beq.n	8005aa8 <HAL_I2C_Mem_Write+0x1c8>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d130      	bne.n	8005aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fa4d 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e04d      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2bff      	cmp	r3, #255	; 0xff
 8005a68:	d90e      	bls.n	8005a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	22ff      	movs	r2, #255	; 0xff
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	8979      	ldrh	r1, [r7, #10]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fbdd 	bl	8006240 <I2C_TransferConfig>
 8005a86:	e00f      	b.n	8005aa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	8979      	ldrh	r1, [r7, #10]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fbcc 	bl	8006240 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d19e      	bne.n	80059f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa9a 	bl	8005ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e01a      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2220      	movs	r2, #32
 8005acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <HAL_I2C_Mem_Write+0x224>)
 8005ada:	400b      	ands	r3, r1
 8005adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e000      	b.n	8005afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	fe00e800 	.word	0xfe00e800

08005b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	817b      	strh	r3, [r7, #10]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	813b      	strh	r3, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	f040 80fd 	bne.w	8005d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_I2C_Mem_Read+0x34>
 8005b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0f1      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_I2C_Mem_Read+0x4e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0ea      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b5e:	f7fd fc73 	bl	8003448 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2319      	movs	r3, #25
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f9bd 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0d5      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2222      	movs	r2, #34	; 0x22
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2240      	movs	r2, #64	; 0x40
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ba8:	88f8      	ldrh	r0, [r7, #6]
 8005baa:	893a      	ldrh	r2, [r7, #8]
 8005bac:	8979      	ldrh	r1, [r7, #10]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f921 	bl	8005e00 <I2C_RequestMemoryRead>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0ad      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2bff      	cmp	r3, #255	; 0xff
 8005bd8:	d90e      	bls.n	8005bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	8979      	ldrh	r1, [r7, #10]
 8005be8:	4b52      	ldr	r3, [pc, #328]	; (8005d34 <HAL_I2C_Mem_Read+0x22c>)
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fb25 	bl	8006240 <I2C_TransferConfig>
 8005bf6:	e00f      	b.n	8005c18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	8979      	ldrh	r1, [r7, #10]
 8005c0a:	4b4a      	ldr	r3, [pc, #296]	; (8005d34 <HAL_I2C_Mem_Read+0x22c>)
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fb14 	bl	8006240 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2104      	movs	r1, #4
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f964 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e07c      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d034      	beq.n	8005cd8 <HAL_I2C_Mem_Read+0x1d0>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d130      	bne.n	8005cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2180      	movs	r1, #128	; 0x80
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f935 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e04d      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2bff      	cmp	r3, #255	; 0xff
 8005c98:	d90e      	bls.n	8005cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	8979      	ldrh	r1, [r7, #10]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fac5 	bl	8006240 <I2C_TransferConfig>
 8005cb6:	e00f      	b.n	8005cd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	8979      	ldrh	r1, [r7, #10]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fab4 	bl	8006240 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d19a      	bne.n	8005c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f982 	bl	8005ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e01a      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_I2C_Mem_Read+0x230>)
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	80002400 	.word	0x80002400
 8005d38:	fe00e800 	.word	0xfe00e800

08005d3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4a:	b2db      	uxtb	r3, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	817b      	strh	r3, [r7, #10]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	813b      	strh	r3, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	8979      	ldrh	r1, [r7, #10]
 8005d78:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <I2C_RequestMemoryWrite+0xa4>)
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fa5d 	bl	8006240 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f8f0 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e02c      	b.n	8005df4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d105      	bne.n	8005dac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005da0:	893b      	ldrh	r3, [r7, #8]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	629a      	str	r2, [r3, #40]	; 0x28
 8005daa:	e015      	b.n	8005dd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f8d6 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e012      	b.n	8005df4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f884 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	80002000 	.word	0x80002000

08005e00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	460b      	mov	r3, r1
 8005e14:	813b      	strh	r3, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	8979      	ldrh	r1, [r7, #10]
 8005e20:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <I2C_RequestMemoryRead+0xa4>)
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fa0a 	bl	8006240 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f89d 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e02c      	b.n	8005e9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d105      	bne.n	8005e52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e46:	893b      	ldrh	r3, [r7, #8]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e50:	e015      	b.n	8005e7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e52:	893b      	ldrh	r3, [r7, #8]
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	69b9      	ldr	r1, [r7, #24]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f883 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e012      	b.n	8005e9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2140      	movs	r1, #64	; 0x40
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f831 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	80002000 	.word	0x80002000

08005ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d103      	bne.n	8005ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	619a      	str	r2, [r3, #24]
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f00:	e022      	b.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d01e      	beq.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fd fa9d 	bl	8003448 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e00f      	b.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d0cd      	beq.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f7c:	e02c      	b.n	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f870 	bl	8006068 <I2C_IsErrorOccurred>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e02a      	b.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d01e      	beq.n	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fd fa55 	bl	8003448 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d113      	bne.n	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e007      	b.n	8005fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d1cb      	bne.n	8005f7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ffc:	e028      	b.n	8006050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f830 	bl	8006068 <I2C_IsErrorOccurred>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e026      	b.n	8006060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fd fa19 	bl	8003448 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d113      	bne.n	8006050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e007      	b.n	8006060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b20      	cmp	r3, #32
 800605c:	d1cf      	bne.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d075      	beq.n	8006180 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2210      	movs	r2, #16
 800609a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800609c:	e056      	b.n	800614c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d052      	beq.n	800614c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fd f9cf 	bl	8003448 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_IsErrorOccurred+0x54>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d147      	bne.n	800614c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060de:	d12e      	bne.n	800613e <I2C_IsErrorOccurred+0xd6>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e6:	d02a      	beq.n	800613e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80060e8:	7cfb      	ldrb	r3, [r7, #19]
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d027      	beq.n	800613e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060fe:	f7fd f9a3 	bl	8003448 <HAL_GetTick>
 8006102:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006104:	e01b      	b.n	800613e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006106:	f7fd f99f 	bl	8003448 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b19      	cmp	r3, #25
 8006112:	d914      	bls.n	800613e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d1dc      	bne.n	8006106 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d003      	beq.n	8006162 <I2C_IsErrorOccurred+0xfa>
 800615a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615e:	2b00      	cmp	r3, #0
 8006160:	d09d      	beq.n	800609e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2220      	movs	r2, #32
 8006170:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f043 0304 	orr.w	r3, r3, #4
 8006178:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	f043 0308 	orr.w	r3, r3, #8
 80061ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80061ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01c      	beq.n	8006230 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fe56 	bl	8005ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <I2C_IsErrorOccurred+0x1d4>)
 8006208:	400b      	ands	r3, r1
 800620a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	431a      	orrs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006234:	4618      	mov	r0, r3
 8006236:	3728      	adds	r7, #40	; 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	fe00e800 	.word	0xfe00e800

08006240 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	817b      	strh	r3, [r7, #10]
 800624e:	4613      	mov	r3, r2
 8006250:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006258:	7a7b      	ldrb	r3, [r7, #9]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006260:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4313      	orrs	r3, r2
 800626a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	0d5b      	lsrs	r3, r3, #21
 800627a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <I2C_TransferConfig+0x60>)
 8006280:	430b      	orrs	r3, r1
 8006282:	43db      	mvns	r3, r3
 8006284:	ea02 0103 	and.w	r1, r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	03ff63ff 	.word	0x03ff63ff

080062a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d138      	bne.n	800632c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e032      	b.n	800632e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2224      	movs	r2, #36	; 0x24
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b20      	cmp	r3, #32
 800634e:	d139      	bne.n	80063c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800635a:	2302      	movs	r3, #2
 800635c:	e033      	b.n	80063c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2224      	movs	r2, #36	; 0x24
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800638c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0af      	b.n	8006546 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fa fdd2 	bl	8000fa4 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e00a      	b.n	8006434 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3304      	adds	r3, #4
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3301      	adds	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b0f      	cmp	r3, #15
 8006438:	d9f1      	bls.n	800641e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0204 	orr.w	r2, r2, #4
 8006448:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <HAL_LCD_Init+0x17c>)
 8006452:	4013      	ands	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6851      	ldr	r1, [r2, #4]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6892      	ldr	r2, [r2, #8]
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	69d2      	ldr	r2, [r2, #28]
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6a12      	ldr	r2, [r2, #32]
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6992      	ldr	r2, [r2, #24]
 800647a:	4311      	orrs	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006480:	4311      	orrs	r1, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	430b      	orrs	r3, r1
 8006488:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f94c 	bl	8006728 <LCD_WaitForSynchro>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_LCD_Init+0xca>
  {
    return status;
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	e053      	b.n	8006546 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80064d6:	f7fc ffb7 	bl	8003448 <HAL_GetTick>
 80064da:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80064dc:	e00c      	b.n	80064f8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80064de:	f7fc ffb3 	bl	8003448 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ec:	d904      	bls.n	80064f8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2208      	movs	r2, #8
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e026      	b.n	8006546 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d1eb      	bne.n	80064de <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006506:	f7fc ff9f 	bl	8003448 <HAL_GetTick>
 800650a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800650c:	e00c      	b.n	8006528 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800650e:	f7fc ff9b 	bl	8003448 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651c:	d904      	bls.n	8006528 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2210      	movs	r2, #16
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e00e      	b.n	8006546 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d1eb      	bne.n	800650e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8006544:	7cfb      	ldrb	r3, [r7, #19]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	fc00000e 	.word	0xfc00000e

08006554 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006568:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d002      	beq.n	8006576 <HAL_LCD_Write+0x22>
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d144      	bne.n	8006600 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d12a      	bne.n	80065d8 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_LCD_Write+0x3c>
 800658c:	2302      	movs	r3, #2
 800658e:	e038      	b.n	8006602 <HAL_LCD_Write+0xae>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 80065a0:	f7fc ff52 	bl	8003448 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80065a6:	e010      	b.n	80065ca <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80065a8:	f7fc ff4e 	bl	8003448 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b6:	d908      	bls.n	80065ca <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2202      	movs	r2, #2
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e01b      	b.n	8006602 <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d0e7      	beq.n	80065a8 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	3304      	adds	r3, #4
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	401a      	ands	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6819      	ldr	r1, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3304      	adds	r3, #4
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800661c:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800661e:	7cbb      	ldrb	r3, [r7, #18]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d002      	beq.n	800662a <HAL_LCD_Clear+0x20>
 8006624:	7cbb      	ldrb	r3, [r7, #18]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d140      	bne.n	80066ac <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_LCD_Clear+0x2e>
 8006634:	2302      	movs	r3, #2
 8006636:	e03a      	b.n	80066ae <HAL_LCD_Clear+0xa4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006648:	f7fc fefe 	bl	8003448 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800664e:	e010      	b.n	8006672 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006650:	f7fc fefa 	bl	8003448 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665e:	d908      	bls.n	8006672 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e01d      	b.n	80066ae <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d0e7      	beq.n	8006650 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e00a      	b.n	800669c <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	3304      	adds	r3, #4
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	2200      	movs	r2, #0
 8006694:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b0f      	cmp	r3, #15
 80066a0:	d9f1      	bls.n	8006686 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f807 	bl	80066b6 <HAL_LCD_UpdateDisplayRequest>
 80066a8:	4603      	mov	r3, r0
 80066aa:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80066ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2208      	movs	r2, #8
 80066c4:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0204 	orr.w	r2, r2, #4
 80066d4:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80066d6:	f7fc feb7 	bl	8003448 <HAL_GetTick>
 80066da:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80066dc:	e010      	b.n	8006700 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80066de:	f7fc feb3 	bl	8003448 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ec:	d908      	bls.n	8006700 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e00f      	b.n	8006720 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d1e7      	bne.n	80066de <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006730:	f7fc fe8a 	bl	8003448 <HAL_GetTick>
 8006734:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006736:	e00c      	b.n	8006752 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006738:	f7fc fe86 	bl	8003448 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006746:	d904      	bls.n	8006752 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e007      	b.n	8006762 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d1eb      	bne.n	8006738 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_PWREx_GetVoltageRange+0x18>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006778:	4618      	mov	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40007000 	.word	0x40007000

08006788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006796:	d130      	bne.n	80067fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006798:	4b23      	ldr	r3, [pc, #140]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d038      	beq.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a6:	4b20      	ldr	r3, [pc, #128]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2232      	movs	r2, #50	; 0x32
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	0c9b      	lsrs	r3, r3, #18
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067cc:	e002      	b.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e0:	d102      	bne.n	80067e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f2      	bne.n	80067ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d110      	bne.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e00f      	b.n	800681a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80067fa:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d007      	beq.n	8006818 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006810:	4a05      	ldr	r2, [pc, #20]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006816:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40007000 	.word	0x40007000
 800682c:	2000ac74 	.word	0x2000ac74
 8006830:	431bde83 	.word	0x431bde83

08006834 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_PWREx_EnableVddIO2+0x1c>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a04      	ldr	r2, [pc, #16]	; (8006850 <HAL_PWREx_EnableVddIO2+0x1c>)
 800683e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006842:	6053      	str	r3, [r2, #4]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40007000 	.word	0x40007000

08006854 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_PWREx_DisableVddIO2+0x1c>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a04      	ldr	r2, [pc, #16]	; (8006870 <HAL_PWREx_DisableVddIO2+0x1c>)
 800685e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006862:	6053      	str	r3, [r2, #4]
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40007000 	.word	0x40007000

08006874 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800687c:	f7fc fde4 	bl	8003448 <HAL_GetTick>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e063      	b.n	8006954 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fa fc4d 	bl	8001140 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 faf7 	bl	8006e9e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	3b01      	subs	r3, #1
 80068c0:	021a      	lsls	r2, r3, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2120      	movs	r1, #32
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 faef 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d131      	bne.n	800694a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f023 0310 	bic.w	r3, r3, #16
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6852      	ldr	r2, [r2, #4]
 80068f8:	0611      	lsls	r1, r2, #24
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68d2      	ldr	r2, [r2, #12]
 80068fe:	4311      	orrs	r1, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <HAL_QSPI_Init+0xe8>)
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6912      	ldr	r2, [r2, #16]
 8006916:	0411      	lsls	r1, r2, #16
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6952      	ldr	r2, [r2, #20]
 800691c:	4311      	orrs	r1, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6992      	ldr	r2, [r2, #24]
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	430b      	orrs	r3, r1
 800692a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006952:	7afb      	ldrb	r3, [r7, #11]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	ffe0f8fe 	.word	0xffe0f8fe

08006960 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e016      	b.n	80069a0 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fc20 	bl	80011c8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069b4:	f7fc fd48 	bl	8003448 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_QSPI_Command+0x22>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e048      	b.n	8006a5c <HAL_QSPI_Command+0xb4>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d137      	bne.n	8006a4e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2200      	movs	r2, #0
 80069f4:	2120      	movs	r1, #32
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fa5f 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d125      	bne.n	8006a52 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006a06:	2200      	movs	r2, #0
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fa8c 	bl	8006f28 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d115      	bne.n	8006a44 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	2102      	movs	r1, #2
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fa49 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10f      	bne.n	8006a52 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2202      	movs	r2, #2
 8006a38:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006a42:	e006      	b.n	8006a52 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006a4c:	e001      	b.n	8006a52 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	; 0x28
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006a74:	f7fc fce8 	bl	8003448 <HAL_GetTick>
 8006a78:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3320      	adds	r3, #32
 8006a80:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_QSPI_Transmit+0x2e>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e07b      	b.n	8006b8a <HAL_QSPI_Transmit+0x126>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d16a      	bne.n	8006b7c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d05b      	beq.n	8006b6a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2212      	movs	r2, #18
 8006ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695a      	ldr	r2, [r3, #20]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006ae6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006ae8:	e01b      	b.n	8006b22 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2201      	movs	r2, #1
 8006af2:	2104      	movs	r1, #4
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f9e0 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1df      	bne.n	8006aea <HAL_QSPI_Transmit+0x86>
 8006b2a:	e000      	b.n	8006b2e <HAL_QSPI_Transmit+0xca>
          break;
 8006b2c:	bf00      	nop
      }

      if (status == HAL_OK)
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d115      	bne.n	8006b60 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f9bb 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006b48:	7ffb      	ldrb	r3, [r7, #31]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d108      	bne.n	8006b60 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2202      	movs	r2, #2
 8006b54:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f934 	bl	8006dc4 <HAL_QSPI_Abort>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006b68:	e00a      	b.n	8006b80 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	f043 0208 	orr.w	r2, r3, #8
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e001      	b.n	8006b80 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b08a      	sub	sp, #40	; 0x28
 8006b96:	af02      	add	r7, sp, #8
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006ba2:	f7fc fc51 	bl	8003448 <HAL_GetTick>
 8006ba6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_QSPI_Receive+0x36>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e082      	b.n	8006cce <HAL_QSPI_Receive+0x13c>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d171      	bne.n	8006cc0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d062      	beq.n	8006cae <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2222      	movs	r2, #34	; 0x22
 8006bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c20:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006c2a:	e01c      	b.n	8006c66 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2201      	movs	r2, #1
 8006c34:	2106      	movs	r1, #6
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f93f 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006c40:	7ffb      	ldrb	r3, [r7, #31]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d114      	bne.n	8006c70 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1de      	bne.n	8006c2c <HAL_QSPI_Receive+0x9a>
 8006c6e:	e000      	b.n	8006c72 <HAL_QSPI_Receive+0xe0>
          break;
 8006c70:	bf00      	nop
      }

      if (status == HAL_OK)
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d115      	bne.n	8006ca4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	2102      	movs	r1, #2
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f919 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d108      	bne.n	8006ca4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2202      	movs	r2, #2
 8006c98:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f892 	bl	8006dc4 <HAL_QSPI_Abort>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006cac:	e00a      	b.n	8006cc4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb2:	f043 0208 	orr.w	r2, r3, #8
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e001      	b.n	8006cc4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af02      	add	r7, sp, #8
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006ce4:	f7fc fbb0 	bl	8003448 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_QSPI_AutoPolling+0x24>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e060      	b.n	8006dbc <HAL_QSPI_AutoPolling+0xe6>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d14f      	bne.n	8006dae <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2242      	movs	r2, #66	; 0x42
 8006d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2200      	movs	r2, #0
 8006d24:	2120      	movs	r1, #32
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f8c7 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d13d      	bne.n	8006db2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6852      	ldr	r2, [r2, #4]
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6892      	ldr	r2, [r2, #8]
 8006d52:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006d6c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f8d3 	bl	8006f28 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	2108      	movs	r1, #8
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f894 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006dac:	e001      	b.n	8006db2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
 8006db0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006dd0:	f7fc fb3a 	bl	8003448 <HAL_GetTick>
 8006dd4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d056      	beq.n	8006e94 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d017      	beq.n	8006e2c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0204 	bic.w	r2, r2, #4
 8006e0a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe f8a9 	bl	8004f68 <HAL_DMA_Abort>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	f043 0204 	orr.w	r2, r3, #4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0202 	orr.w	r2, r2, #2
 8006e3a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2201      	movs	r2, #1
 8006e46:	2102      	movs	r1, #2
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f836 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10e      	bne.n	8006e76 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2120      	movs	r1, #32
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f824 	bl	8006eba <QSPI_WaitFlagStateUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006e8a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006eca:	e01a      	b.n	8006f02 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d016      	beq.n	8006f02 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fc fab8 	bl	8003448 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2204      	movs	r2, #4
 8006eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef6:	f043 0201 	orr.w	r2, r3, #1
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e00e      	b.n	8006f20 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d1d6      	bne.n	8006ecc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <QSPI_Config+0x28>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f42:	d005      	beq.n	8006f50 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3a01      	subs	r2, #1
 8006f4e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80b9 	beq.w	80070cc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d05f      	beq.n	8007022 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	6892      	ldr	r2, [r2, #8]
 8006f6a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d031      	beq.n	8006fd8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	431a      	orrs	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	049b      	lsls	r3, r3, #18
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006fc8:	f000 812e 	beq.w	8007228 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	6852      	ldr	r2, [r2, #4]
 8006fd4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006fd6:	e127      	b.n	8007228 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	431a      	orrs	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	049b      	lsls	r3, r3, #18
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	431a      	orrs	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	431a      	orrs	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	431a      	orrs	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	ea42 0103 	orr.w	r1, r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	430a      	orrs	r2, r1
 800701e:	615a      	str	r2, [r3, #20]
}
 8007020:	e102      	b.n	8007228 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02e      	beq.n	8007088 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	431a      	orrs	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	431a      	orrs	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	431a      	orrs	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	049b      	lsls	r3, r3, #18
 8007046:	431a      	orrs	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	431a      	orrs	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	431a      	orrs	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	431a      	orrs	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	431a      	orrs	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	ea42 0103 	orr.w	r1, r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	430a      	orrs	r2, r1
 8007070:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007078:	f000 80d6 	beq.w	8007228 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	6852      	ldr	r2, [r2, #4]
 8007084:	619a      	str	r2, [r3, #24]
}
 8007086:	e0cf      	b.n	8007228 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	431a      	orrs	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	431a      	orrs	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	431a      	orrs	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	049b      	lsls	r3, r3, #18
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	ea42 0103 	orr.w	r1, r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	615a      	str	r2, [r3, #20]
}
 80070ca:	e0ad      	b.n	8007228 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d058      	beq.n	8007186 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6892      	ldr	r2, [r2, #8]
 80070dc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d02d      	beq.n	8007142 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	431a      	orrs	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	431a      	orrs	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	431a      	orrs	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	049b      	lsls	r3, r3, #18
 8007102:	431a      	orrs	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	431a      	orrs	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	431a      	orrs	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	431a      	orrs	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	ea42 0103 	orr.w	r1, r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	430a      	orrs	r2, r1
 800712c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007134:	d078      	beq.n	8007228 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	6852      	ldr	r2, [r2, #4]
 800713e:	619a      	str	r2, [r3, #24]
}
 8007140:	e072      	b.n	8007228 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	431a      	orrs	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	431a      	orrs	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	431a      	orrs	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	049b      	lsls	r3, r3, #18
 800715e:	431a      	orrs	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	431a      	orrs	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	431a      	orrs	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	431a      	orrs	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	ea42 0103 	orr.w	r1, r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	430a      	orrs	r2, r1
 8007182:	615a      	str	r2, [r3, #20]
}
 8007184:	e050      	b.n	8007228 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02a      	beq.n	80071e4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	431a      	orrs	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719c:	431a      	orrs	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	431a      	orrs	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	049b      	lsls	r3, r3, #18
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	431a      	orrs	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	ea42 0103 	orr.w	r1, r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80071d6:	d027      	beq.n	8007228 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	6852      	ldr	r2, [r2, #4]
 80071e0:	619a      	str	r2, [r3, #24]
}
 80071e2:	e021      	b.n	8007228 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01d      	beq.n	8007228 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	431a      	orrs	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	431a      	orrs	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	431a      	orrs	r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	049b      	lsls	r3, r3, #18
 8007208:	431a      	orrs	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	431a      	orrs	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	431a      	orrs	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	ea42 0103 	orr.w	r1, r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	430a      	orrs	r2, r1
 8007226:	615a      	str	r2, [r3, #20]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e3d8      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007246:	4b97      	ldr	r3, [pc, #604]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007250:	4b94      	ldr	r3, [pc, #592]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80e4 	beq.w	8007430 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_RCC_OscConfig+0x4a>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	f040 808b 	bne.w	800738c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 8087 	bne.w	800738c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800727e:	4b89      	ldr	r3, [pc, #548]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_RCC_OscConfig+0x62>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e3b0      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1a      	ldr	r2, [r3, #32]
 800729a:	4b82      	ldr	r3, [pc, #520]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <HAL_RCC_OscConfig+0x7c>
 80072a6:	4b7f      	ldr	r3, [pc, #508]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ae:	e005      	b.n	80072bc <HAL_RCC_OscConfig+0x88>
 80072b0:	4b7c      	ldr	r3, [pc, #496]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d223      	bcs.n	8007308 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fd43 	bl	8007d50 <RCC_SetFlashLatencyFromMSIRange>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e391      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072d4:	4b73      	ldr	r3, [pc, #460]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a72      	ldr	r2, [pc, #456]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072da:	f043 0308 	orr.w	r3, r3, #8
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b70      	ldr	r3, [pc, #448]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	496d      	ldr	r1, [pc, #436]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072f2:	4b6c      	ldr	r3, [pc, #432]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	4968      	ldr	r1, [pc, #416]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007302:	4313      	orrs	r3, r2
 8007304:	604b      	str	r3, [r1, #4]
 8007306:	e025      	b.n	8007354 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007308:	4b66      	ldr	r3, [pc, #408]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a65      	ldr	r2, [pc, #404]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800730e:	f043 0308 	orr.w	r3, r3, #8
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	4b63      	ldr	r3, [pc, #396]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	4960      	ldr	r1, [pc, #384]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007322:	4313      	orrs	r3, r2
 8007324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007326:	4b5f      	ldr	r3, [pc, #380]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	495b      	ldr	r1, [pc, #364]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007336:	4313      	orrs	r3, r2
 8007338:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fd03 	bl	8007d50 <RCC_SetFlashLatencyFromMSIRange>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e351      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007354:	f000 fc38 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b52      	ldr	r3, [pc, #328]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	091b      	lsrs	r3, r3, #4
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	4950      	ldr	r1, [pc, #320]	; (80074a8 <HAL_RCC_OscConfig+0x274>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
 8007370:	4a4e      	ldr	r2, [pc, #312]	; (80074ac <HAL_RCC_OscConfig+0x278>)
 8007372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007374:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <HAL_RCC_OscConfig+0x27c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fc f815 	bl	80033a8 <HAL_InitTick>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d052      	beq.n	800742e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	e335      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d032      	beq.n	80073fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007394:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073a0:	f7fc f852 	bl	8003448 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073a8:	f7fc f84e 	bl	8003448 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e31e      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073ba:	4b3a      	ldr	r3, [pc, #232]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073c6:	4b37      	ldr	r3, [pc, #220]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a36      	ldr	r2, [pc, #216]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	4931      	ldr	r1, [pc, #196]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073e4:	4b2f      	ldr	r3, [pc, #188]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	492c      	ldr	r1, [pc, #176]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	604b      	str	r3, [r1, #4]
 80073f8:	e01a      	b.n	8007430 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073fa:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a29      	ldr	r2, [pc, #164]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007406:	f7fc f81f 	bl	8003448 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800740e:	f7fc f81b 	bl	8003448 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e2eb      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007420:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f0      	bne.n	800740e <HAL_RCC_OscConfig+0x1da>
 800742c:	e000      	b.n	8007430 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800742e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d074      	beq.n	8007526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b08      	cmp	r3, #8
 8007440:	d005      	beq.n	800744e <HAL_RCC_OscConfig+0x21a>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d10e      	bne.n	8007466 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b03      	cmp	r3, #3
 800744c:	d10b      	bne.n	8007466 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d064      	beq.n	8007524 <HAL_RCC_OscConfig+0x2f0>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d160      	bne.n	8007524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e2c8      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d106      	bne.n	800747e <HAL_RCC_OscConfig+0x24a>
 8007470:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0b      	ldr	r2, [pc, #44]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	e026      	b.n	80074cc <HAL_RCC_OscConfig+0x298>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007486:	d115      	bne.n	80074b4 <HAL_RCC_OscConfig+0x280>
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800748e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a02      	ldr	r2, [pc, #8]	; (80074a4 <HAL_RCC_OscConfig+0x270>)
 800749a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e014      	b.n	80074cc <HAL_RCC_OscConfig+0x298>
 80074a2:	bf00      	nop
 80074a4:	40021000 	.word	0x40021000
 80074a8:	0800acdc 	.word	0x0800acdc
 80074ac:	2000ac74 	.word	0x2000ac74
 80074b0:	2000acb0 	.word	0x2000acb0
 80074b4:	4ba0      	ldr	r3, [pc, #640]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a9f      	ldr	r2, [pc, #636]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80074ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	4b9d      	ldr	r3, [pc, #628]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a9c      	ldr	r2, [pc, #624]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80074c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d013      	beq.n	80074fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fb ffb8 	bl	8003448 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074dc:	f7fb ffb4 	bl	8003448 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b64      	cmp	r3, #100	; 0x64
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e284      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074ee:	4b92      	ldr	r3, [pc, #584]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0x2a8>
 80074fa:	e014      	b.n	8007526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fb ffa4 	bl	8003448 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007504:	f7fb ffa0 	bl	8003448 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b64      	cmp	r3, #100	; 0x64
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e270      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007516:	4b88      	ldr	r3, [pc, #544]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x2d0>
 8007522:	e000      	b.n	8007526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d060      	beq.n	80075f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d005      	beq.n	8007544 <HAL_RCC_OscConfig+0x310>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b0c      	cmp	r3, #12
 800753c:	d119      	bne.n	8007572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d116      	bne.n	8007572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007544:	4b7c      	ldr	r3, [pc, #496]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_RCC_OscConfig+0x328>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e24d      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800755c:	4b76      	ldr	r3, [pc, #472]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	4973      	ldr	r1, [pc, #460]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800756c:	4313      	orrs	r3, r2
 800756e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007570:	e040      	b.n	80075f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d023      	beq.n	80075c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800757a:	4b6f      	ldr	r3, [pc, #444]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a6e      	ldr	r2, [pc, #440]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007586:	f7fb ff5f 	bl	8003448 <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800758e:	f7fb ff5b 	bl	8003448 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e22b      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075a0:	4b65      	ldr	r3, [pc, #404]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0f0      	beq.n	800758e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ac:	4b62      	ldr	r3, [pc, #392]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	495f      	ldr	r1, [pc, #380]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	604b      	str	r3, [r1, #4]
 80075c0:	e018      	b.n	80075f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075c2:	4b5d      	ldr	r3, [pc, #372]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a5c      	ldr	r2, [pc, #368]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fb ff3b 	bl	8003448 <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d6:	f7fb ff37 	bl	8003448 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e207      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075e8:	4b53      	ldr	r3, [pc, #332]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f0      	bne.n	80075d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d03c      	beq.n	800767a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01c      	beq.n	8007642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007608:	4b4b      	ldr	r3, [pc, #300]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800760a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760e:	4a4a      	ldr	r2, [pc, #296]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007618:	f7fb ff16 	bl	8003448 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007620:	f7fb ff12 	bl	8003448 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e1e2      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0ef      	beq.n	8007620 <HAL_RCC_OscConfig+0x3ec>
 8007640:	e01b      	b.n	800767a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007642:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007648:	4a3b      	ldr	r2, [pc, #236]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007652:	f7fb fef9 	bl	8003448 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800765a:	f7fb fef5 	bl	8003448 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e1c5      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800766c:	4b32      	ldr	r3, [pc, #200]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800766e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1ef      	bne.n	800765a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80a6 	beq.w	80077d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007688:	2300      	movs	r3, #0
 800768a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800768c:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10d      	bne.n	80076b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007698:	4b27      	ldr	r3, [pc, #156]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800769a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800769e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a2:	6593      	str	r3, [r2, #88]	; 0x58
 80076a4:	4b24      	ldr	r3, [pc, #144]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076b0:	2301      	movs	r3, #1
 80076b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076b4:	4b21      	ldr	r3, [pc, #132]	; (800773c <HAL_RCC_OscConfig+0x508>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d118      	bne.n	80076f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076c0:	4b1e      	ldr	r3, [pc, #120]	; (800773c <HAL_RCC_OscConfig+0x508>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1d      	ldr	r2, [pc, #116]	; (800773c <HAL_RCC_OscConfig+0x508>)
 80076c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076cc:	f7fb febc 	bl	8003448 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076d4:	f7fb feb8 	bl	8003448 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e188      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <HAL_RCC_OscConfig+0x508>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d108      	bne.n	800770c <HAL_RCC_OscConfig+0x4d8>
 80076fa:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	4a0d      	ldr	r2, [pc, #52]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800770a:	e029      	b.n	8007760 <HAL_RCC_OscConfig+0x52c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b05      	cmp	r3, #5
 8007712:	d115      	bne.n	8007740 <HAL_RCC_OscConfig+0x50c>
 8007714:	4b08      	ldr	r3, [pc, #32]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	4a07      	ldr	r2, [pc, #28]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800771c:	f043 0304 	orr.w	r3, r3, #4
 8007720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	4a03      	ldr	r2, [pc, #12]	; (8007738 <HAL_RCC_OscConfig+0x504>)
 800772c:	f043 0301 	orr.w	r3, r3, #1
 8007730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007734:	e014      	b.n	8007760 <HAL_RCC_OscConfig+0x52c>
 8007736:	bf00      	nop
 8007738:	40021000 	.word	0x40021000
 800773c:	40007000 	.word	0x40007000
 8007740:	4b91      	ldr	r3, [pc, #580]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007746:	4a90      	ldr	r2, [pc, #576]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007750:	4b8d      	ldr	r3, [pc, #564]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	4a8c      	ldr	r2, [pc, #560]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007758:	f023 0304 	bic.w	r3, r3, #4
 800775c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007768:	f7fb fe6e 	bl	8003448 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800776e:	e00a      	b.n	8007786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007770:	f7fb fe6a 	bl	8003448 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f241 3288 	movw	r2, #5000	; 0x1388
 800777e:	4293      	cmp	r3, r2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e138      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007786:	4b80      	ldr	r3, [pc, #512]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ed      	beq.n	8007770 <HAL_RCC_OscConfig+0x53c>
 8007794:	e015      	b.n	80077c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007796:	f7fb fe57 	bl	8003448 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800779c:	e00a      	b.n	80077b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779e:	f7fb fe53 	bl	8003448 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d901      	bls.n	80077b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e121      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077b4:	4b74      	ldr	r3, [pc, #464]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1ed      	bne.n	800779e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d105      	bne.n	80077d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077c8:	4b6f      	ldr	r3, [pc, #444]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	4a6e      	ldr	r2, [pc, #440]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80077ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 810c 	beq.w	80079f6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	f040 80d4 	bne.w	8007990 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80077e8:	4b67      	ldr	r3, [pc, #412]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f003 0203 	and.w	r2, r3, #3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d130      	bne.n	800785e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	3b01      	subs	r3, #1
 8007808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d127      	bne.n	800785e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800781a:	429a      	cmp	r2, r3
 800781c:	d11f      	bne.n	800785e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007828:	2a07      	cmp	r2, #7
 800782a:	bf14      	ite	ne
 800782c:	2201      	movne	r2, #1
 800782e:	2200      	moveq	r2, #0
 8007830:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007832:	4293      	cmp	r3, r2
 8007834:	d113      	bne.n	800785e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	3b01      	subs	r3, #1
 8007844:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007846:	429a      	cmp	r2, r3
 8007848:	d109      	bne.n	800785e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	3b01      	subs	r3, #1
 8007858:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800785a:	429a      	cmp	r2, r3
 800785c:	d06e      	beq.n	800793c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b0c      	cmp	r3, #12
 8007862:	d069      	beq.n	8007938 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007864:	4b48      	ldr	r3, [pc, #288]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007870:	4b45      	ldr	r3, [pc, #276]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e0bb      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007880:	4b41      	ldr	r3, [pc, #260]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a40      	ldr	r2, [pc, #256]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800788a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800788c:	f7fb fddc 	bl	8003448 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007894:	f7fb fdd8 	bl	8003448 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e0a8      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078a6:	4b38      	ldr	r3, [pc, #224]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f0      	bne.n	8007894 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078b2:	4b35      	ldr	r3, [pc, #212]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	4b35      	ldr	r3, [pc, #212]	; (800798c <HAL_RCC_OscConfig+0x758>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80078c2:	3a01      	subs	r2, #1
 80078c4:	0112      	lsls	r2, r2, #4
 80078c6:	4311      	orrs	r1, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078cc:	0212      	lsls	r2, r2, #8
 80078ce:	4311      	orrs	r1, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078d4:	0852      	lsrs	r2, r2, #1
 80078d6:	3a01      	subs	r2, #1
 80078d8:	0552      	lsls	r2, r2, #21
 80078da:	4311      	orrs	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078e0:	0852      	lsrs	r2, r2, #1
 80078e2:	3a01      	subs	r2, #1
 80078e4:	0652      	lsls	r2, r2, #25
 80078e6:	4311      	orrs	r1, r2
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078ec:	0912      	lsrs	r2, r2, #4
 80078ee:	0452      	lsls	r2, r2, #17
 80078f0:	430a      	orrs	r2, r1
 80078f2:	4925      	ldr	r1, [pc, #148]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80078f8:	4b23      	ldr	r3, [pc, #140]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 80078fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4a1f      	ldr	r2, [pc, #124]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800790a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800790e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007910:	f7fb fd9a 	bl	8003448 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007918:	f7fb fd96 	bl	8003448 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e066      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800792a:	4b17      	ldr	r3, [pc, #92]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007936:	e05e      	b.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e05d      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800793c:	4b12      	ldr	r3, [pc, #72]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d156      	bne.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a0e      	ldr	r2, [pc, #56]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800794e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a0b      	ldr	r2, [pc, #44]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800795a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800795e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007960:	f7fb fd72 	bl	8003448 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007968:	f7fb fd6e 	bl	8003448 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e03e      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <HAL_RCC_OscConfig+0x754>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x734>
 8007986:	e036      	b.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
 8007988:	40021000 	.word	0x40021000
 800798c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d02d      	beq.n	80079f2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 800799c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80079a2:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80079ae:	4b14      	ldr	r3, [pc, #80]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80079ba:	4b11      	ldr	r3, [pc, #68]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fb fd3d 	bl	8003448 <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d2:	f7fb fd39 	bl	8003448 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e009      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <HAL_RCC_OscConfig+0x7cc>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f0      	bne.n	80079d2 <HAL_RCC_OscConfig+0x79e>
 80079f0:	e001      	b.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40021000 	.word	0x40021000

08007a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0c8      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a18:	4b66      	ldr	r3, [pc, #408]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0307 	and.w	r3, r3, #7
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d910      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a26:	4b63      	ldr	r3, [pc, #396]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 0207 	bic.w	r2, r3, #7
 8007a2e:	4961      	ldr	r1, [pc, #388]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b5f      	ldr	r3, [pc, #380]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0b0      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d04c      	beq.n	8007aee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d107      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a5c:	4b56      	ldr	r3, [pc, #344]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d121      	bne.n	8007aac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09e      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d107      	bne.n	8007a84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a74:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d115      	bne.n	8007aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e092      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a8c:	4b4a      	ldr	r3, [pc, #296]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e086      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a9c:	4b46      	ldr	r3, [pc, #280]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e07e      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aac:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f023 0203 	bic.w	r2, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	493f      	ldr	r1, [pc, #252]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007abe:	f7fb fcc3 	bl	8003448 <HAL_GetTick>
 8007ac2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac4:	e00a      	b.n	8007adc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac6:	f7fb fcbf 	bl	8003448 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e066      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 020c 	and.w	r2, r3, #12
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d1eb      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007afa:	4b2f      	ldr	r3, [pc, #188]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	492c      	ldr	r1, [pc, #176]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b0c:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d210      	bcs.n	8007b3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1a:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f023 0207 	bic.w	r2, r3, #7
 8007b22:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <HAL_RCC_ClockConfig+0x1b0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e036      	b.n	8007baa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4918      	ldr	r1, [pc, #96]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4910      	ldr	r1, [pc, #64]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b7a:	f000 f825 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <HAL_RCC_ClockConfig+0x1b4>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	490c      	ldr	r1, [pc, #48]	; (8007bbc <HAL_RCC_ClockConfig+0x1b8>)
 8007b8c:	5ccb      	ldrb	r3, [r1, r3]
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	fa22 f303 	lsr.w	r3, r2, r3
 8007b96:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fb fc02 	bl	80033a8 <HAL_InitTick>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40022000 	.word	0x40022000
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	0800acdc 	.word	0x0800acdc
 8007bc0:	2000ac74 	.word	0x2000ac74
 8007bc4:	2000acb0 	.word	0x2000acb0

08007bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b089      	sub	sp, #36	; 0x24
 8007bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bd6:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 030c 	and.w	r3, r3, #12
 8007bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007be0:	4b3b      	ldr	r3, [pc, #236]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_RCC_GetSysClockFreq+0x34>
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d121      	bne.n	8007c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11e      	bne.n	8007c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007bfc:	4b34      	ldr	r3, [pc, #208]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c08:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	e005      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c18:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c24:	4a2b      	ldr	r2, [pc, #172]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10d      	bne.n	8007c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c38:	e00a      	b.n	8007c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c40:	4b25      	ldr	r3, [pc, #148]	; (8007cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e004      	b.n	8007c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d101      	bne.n	8007c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c4c:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8007c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b0c      	cmp	r3, #12
 8007c54:	d134      	bne.n	8007cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c56:	4b1e      	ldr	r3, [pc, #120]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d003      	beq.n	8007c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0xac>
 8007c6c:	e005      	b.n	8007c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c6e:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c70:	617b      	str	r3, [r7, #20]
      break;
 8007c72:	e005      	b.n	8007c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c74:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8007c76:	617b      	str	r3, [r7, #20]
      break;
 8007c78:	e002      	b.n	8007c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	617b      	str	r3, [r7, #20]
      break;
 8007c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007c8e:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	fb03 f202 	mul.w	r2, r3, r2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	0e5b      	lsrs	r3, r3, #25
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3724      	adds	r7, #36	; 0x24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	0800acf4 	.word	0x0800acf4
 8007cd8:	00f42400 	.word	0x00f42400
 8007cdc:	007a1200 	.word	0x007a1200

08007ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce4:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	2000ac74 	.word	0x2000ac74

08007cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cfc:	f7ff fff0 	bl	8007ce0 <HAL_RCC_GetHCLKFreq>
 8007d00:	4602      	mov	r2, r0
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	4904      	ldr	r1, [pc, #16]	; (8007d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d0e:	5ccb      	ldrb	r3, [r1, r3]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40021000 	.word	0x40021000
 8007d20:	0800acec 	.word	0x0800acec

08007d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d28:	f7ff ffda 	bl	8007ce0 <HAL_RCC_GetHCLKFreq>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	0adb      	lsrs	r3, r3, #11
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	4904      	ldr	r1, [pc, #16]	; (8007d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d3a:	5ccb      	ldrb	r3, [r1, r3]
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	0800acec 	.word	0x0800acec

08007d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d58:	2300      	movs	r3, #0
 8007d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d68:	f7fe fd00 	bl	800676c <HAL_PWREx_GetVoltageRange>
 8007d6c:	6178      	str	r0, [r7, #20]
 8007d6e:	e014      	b.n	8007d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d74:	4a24      	ldr	r2, [pc, #144]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d7c:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d88:	f7fe fcf0 	bl	800676c <HAL_PWREx_GetVoltageRange>
 8007d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d8e:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da0:	d10b      	bne.n	8007dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d919      	bls.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2ba0      	cmp	r3, #160	; 0xa0
 8007dac:	d902      	bls.n	8007db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007dae:	2302      	movs	r3, #2
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e013      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007db4:	2301      	movs	r3, #1
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	e010      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d902      	bls.n	8007dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	e00a      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b80      	cmp	r3, #128	; 0x80
 8007dca:	d102      	bne.n	8007dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007dcc:	2302      	movs	r3, #2
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e004      	b.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b70      	cmp	r3, #112	; 0x70
 8007dd6:	d101      	bne.n	8007ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007dd8:	2301      	movs	r3, #1
 8007dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f023 0207 	bic.w	r2, r3, #7
 8007de4:	4909      	ldr	r1, [pc, #36]	; (8007e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d001      	beq.n	8007dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	40022000 	.word	0x40022000

08007e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e18:	2300      	movs	r3, #0
 8007e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d041      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e34:	d02a      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e3a:	d824      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e40:	d008      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e46:	d81e      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e50:	d010      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e52:	e018      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e54:	4b86      	ldr	r3, [pc, #536]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	4a85      	ldr	r2, [pc, #532]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e60:	e015      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3304      	adds	r3, #4
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 f919 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e72:	e00c      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3320      	adds	r3, #32
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fa04 	bl	8009288 <RCCEx_PLLSAI2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e84:	e003      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	74fb      	strb	r3, [r7, #19]
      break;
 8007e8a:	e000      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8e:	7cfb      	ldrb	r3, [r7, #19]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e94:	4b76      	ldr	r3, [pc, #472]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea2:	4973      	ldr	r1, [pc, #460]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007eaa:	e001      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	7cfb      	ldrb	r3, [r7, #19]
 8007eae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d041      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ec4:	d02a      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007eca:	d824      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	d008      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed6:	d81e      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ee0:	d010      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ee2:	e018      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007ee4:	4b62      	ldr	r3, [pc, #392]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4a61      	ldr	r2, [pc, #388]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ef0:	e015      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f8d1 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007f02:	e00c      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3320      	adds	r3, #32
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 f9bc 	bl	8009288 <RCCEx_PLLSAI2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007f14:	e003      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	74fb      	strb	r3, [r7, #19]
      break;
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1e:	7cfb      	ldrb	r3, [r7, #19]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f24:	4b52      	ldr	r3, [pc, #328]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f32:	494f      	ldr	r1, [pc, #316]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f3a:	e001      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80a0 	beq.w	800808e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f52:	4b47      	ldr	r3, [pc, #284]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00d      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f68:	4b41      	ldr	r3, [pc, #260]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	4a40      	ldr	r2, [pc, #256]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f72:	6593      	str	r3, [r2, #88]	; 0x58
 8007f74:	4b3e      	ldr	r3, [pc, #248]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f80:	2301      	movs	r3, #1
 8007f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f84:	4b3b      	ldr	r3, [pc, #236]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a3a      	ldr	r2, [pc, #232]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f90:	f7fb fa5a 	bl	8003448 <HAL_GetTick>
 8007f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f96:	e009      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f98:	f7fb fa56 	bl	8003448 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d902      	bls.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8007faa:	e005      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007fac:	4b31      	ldr	r3, [pc, #196]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0ef      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007fb8:	7cfb      	ldrb	r3, [r7, #19]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d15c      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007fbe:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01f      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d019      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fdc:	4b24      	ldr	r3, [pc, #144]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fe8:	4b21      	ldr	r3, [pc, #132]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fee:	4a20      	ldr	r2, [pc, #128]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffe:	4a1c      	ldr	r2, [pc, #112]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008008:	4a19      	ldr	r2, [pc, #100]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d016      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801a:	f7fb fa15 	bl	8003448 <HAL_GetTick>
 800801e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008020:	e00b      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fb fa11 	bl	8003448 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d902      	bls.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	74fb      	strb	r3, [r7, #19]
            break;
 8008038:	e006      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800803a:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0ec      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008048:	7cfb      	ldrb	r3, [r7, #19]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805e:	4904      	ldr	r1, [pc, #16]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008066:	e009      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008068:	7cfb      	ldrb	r3, [r7, #19]
 800806a:	74bb      	strb	r3, [r7, #18]
 800806c:	e006      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800806e:	bf00      	nop
 8008070:	40021000 	.word	0x40021000
 8008074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800807c:	7c7b      	ldrb	r3, [r7, #17]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d105      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008082:	4b9e      	ldr	r3, [pc, #632]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	4a9d      	ldr	r2, [pc, #628]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800809a:	4b98      	ldr	r3, [pc, #608]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f023 0203 	bic.w	r2, r3, #3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	4994      	ldr	r1, [pc, #592]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080bc:	4b8f      	ldr	r3, [pc, #572]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f023 020c 	bic.w	r2, r3, #12
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ca:	498c      	ldr	r1, [pc, #560]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080de:	4b87      	ldr	r3, [pc, #540]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	4983      	ldr	r1, [pc, #524]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008100:	4b7e      	ldr	r3, [pc, #504]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	497b      	ldr	r1, [pc, #492]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008122:	4b76      	ldr	r3, [pc, #472]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008130:	4972      	ldr	r1, [pc, #456]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008144:	4b6d      	ldr	r3, [pc, #436]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008152:	496a      	ldr	r1, [pc, #424]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008166:	4b65      	ldr	r3, [pc, #404]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008174:	4961      	ldr	r1, [pc, #388]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008188:	4b5c      	ldr	r3, [pc, #368]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	4959      	ldr	r1, [pc, #356]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008198:	4313      	orrs	r3, r2
 800819a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081aa:	4b54      	ldr	r3, [pc, #336]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b8:	4950      	ldr	r1, [pc, #320]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081cc:	4b4b      	ldr	r3, [pc, #300]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	4948      	ldr	r1, [pc, #288]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081ee:	4b43      	ldr	r3, [pc, #268]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fc:	493f      	ldr	r1, [pc, #252]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d028      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008210:	4b3a      	ldr	r3, [pc, #232]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821e:	4937      	ldr	r1, [pc, #220]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822e:	d106      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008230:	4b32      	ldr	r3, [pc, #200]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	4a31      	ldr	r2, [pc, #196]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800823a:	60d3      	str	r3, [r2, #12]
 800823c:	e011      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008246:	d10c      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff26 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008258:	7cfb      	ldrb	r3, [r7, #19]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800825e:	7cfb      	ldrb	r3, [r7, #19]
 8008260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d028      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800826e:	4b23      	ldr	r3, [pc, #140]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008274:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	491f      	ldr	r1, [pc, #124]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800827e:	4313      	orrs	r3, r2
 8008280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800828c:	d106      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800828e:	4b1b      	ldr	r3, [pc, #108]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	4a1a      	ldr	r2, [pc, #104]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008298:	60d3      	str	r3, [r2, #12]
 800829a:	e011      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fef7 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082b6:	7cfb      	ldrb	r3, [r7, #19]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d02b      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082da:	4908      	ldr	r1, [pc, #32]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ea:	d109      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	4a02      	ldr	r2, [pc, #8]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f6:	60d3      	str	r3, [r2, #12]
 80082f8:	e014      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80082fa:	bf00      	nop
 80082fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008308:	d10c      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3304      	adds	r3, #4
 800830e:	2101      	movs	r1, #1
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fec5 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 8008316:	4603      	mov	r3, r0
 8008318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800831a:	7cfb      	ldrb	r3, [r7, #19]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008320:	7cfb      	ldrb	r3, [r7, #19]
 8008322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d02f      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008330:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800833e:	4928      	ldr	r1, [pc, #160]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800834a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800834e:	d10d      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	2102      	movs	r1, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fea2 	bl	80090a0 <RCCEx_PLLSAI1_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d014      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008366:	7cfb      	ldrb	r3, [r7, #19]
 8008368:	74bb      	strb	r3, [r7, #18]
 800836a:	e011      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008374:	d10c      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3320      	adds	r3, #32
 800837a:	2102      	movs	r1, #2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 ff83 	bl	8009288 <RCCEx_PLLSAI2_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008386:	7cfb      	ldrb	r3, [r7, #19]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800838c:	7cfb      	ldrb	r3, [r7, #19]
 800838e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800839c:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083aa:	490d      	ldr	r1, [pc, #52]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083be:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80083c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ce:	4904      	ldr	r1, [pc, #16]	; (80083e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40021000 	.word	0x40021000

080083e4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a73      	ldr	r2, [pc, #460]	; (80085bc <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 80083f0:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80083f2:	4b73      	ldr	r3, [pc, #460]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f003 0203 	and.w	r2, r3, #3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80083fe:	4b70      	ldr	r3, [pc, #448]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	091b      	lsrs	r3, r3, #4
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800840e:	4b6c      	ldr	r3, [pc, #432]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800841c:	4b68      	ldr	r3, [pc, #416]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	0c5b      	lsrs	r3, r3, #17
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	1dda      	adds	r2, r3, #7
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800842e:	4b64      	ldr	r3, [pc, #400]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	0d5b      	lsrs	r3, r3, #21
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	3301      	adds	r3, #1
 800843a:	005a      	lsls	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008440:	4b5f      	ldr	r3, [pc, #380]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	0e5b      	lsrs	r3, r3, #25
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	3301      	adds	r3, #1
 800844c:	005a      	lsls	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008462:	4b57      	ldr	r3, [pc, #348]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008470:	4b53      	ldr	r3, [pc, #332]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	0c5b      	lsrs	r3, r3, #17
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	1dda      	adds	r2, r3, #7
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008482:	4b4f      	ldr	r3, [pc, #316]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	0e5b      	lsrs	r3, r3, #25
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	3301      	adds	r3, #1
 800848e:	005a      	lsls	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008494:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	f003 0203 	and.w	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 80084a2:	4b47      	ldr	r3, [pc, #284]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	f003 020c 	and.w	r2, r3, #12
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 80084b0:	4b43      	ldr	r3, [pc, #268]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80084be:	4b40      	ldr	r3, [pc, #256]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 80084cc:	4b3c      	ldr	r3, [pc, #240]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80084da:	4b39      	ldr	r3, [pc, #228]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80084e8:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ee:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80084f6:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8008504:	4b2e      	ldr	r3, [pc, #184]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008512:	4b2b      	ldr	r3, [pc, #172]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008518:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008520:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008526:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800852e:	4b24      	ldr	r3, [pc, #144]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800853c:	4b20      	ldr	r3, [pc, #128]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008542:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800854a:	4b1d      	ldr	r3, [pc, #116]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008550:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800855a:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008560:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858a:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008598:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	000fffff 	.word	0x000fffff
 80085c0:	40021000 	.word	0x40021000

080085c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d6:	d13e      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80085d8:	4bb2      	ldr	r3, [pc, #712]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80085da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ea:	d028      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f2:	f200 8542 	bhi.w	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d005      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008604:	d00e      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8008606:	f000 bd38 	b.w	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800860a:	4ba6      	ldr	r3, [pc, #664]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	f040 8532 	bne.w	800907e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	61fb      	str	r3, [r7, #28]
      break;
 8008620:	f000 bd2d 	b.w	800907e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008624:	4b9f      	ldr	r3, [pc, #636]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b02      	cmp	r3, #2
 8008630:	f040 8527 	bne.w	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8008634:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008638:	61fb      	str	r3, [r7, #28]
      break;
 800863a:	f000 bd22 	b.w	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800863e:	4b99      	ldr	r3, [pc, #612]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800864a:	f040 851c 	bne.w	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800864e:	4b96      	ldr	r3, [pc, #600]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008650:	61fb      	str	r3, [r7, #28]
      break;
 8008652:	f000 bd18 	b.w	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008656:	4b93      	ldr	r3, [pc, #588]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d036      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d840      	bhi.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d003      	beq.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d020      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008678:	e039      	b.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800867a:	4b8a      	ldr	r3, [pc, #552]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b02      	cmp	r3, #2
 8008684:	d116      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008686:	4b87      	ldr	r3, [pc, #540]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008692:	4b84      	ldr	r3, [pc, #528]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	091b      	lsrs	r3, r3, #4
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	e005      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800869e:	4b81      	ldr	r3, [pc, #516]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80086a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	f003 030f 	and.w	r3, r3, #15
 80086aa:	4a80      	ldr	r2, [pc, #512]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80086ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80086b2:	e01f      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61bb      	str	r3, [r7, #24]
      break;
 80086b8:	e01c      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086ba:	4b7a      	ldr	r3, [pc, #488]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80086c8:	4b79      	ldr	r3, [pc, #484]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80086ca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80086cc:	e012      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61bb      	str	r3, [r7, #24]
      break;
 80086d2:	e00f      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086d4:	4b73      	ldr	r3, [pc, #460]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e0:	d102      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80086e2:	4b74      	ldr	r3, [pc, #464]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80086e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80086e6:	e005      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61bb      	str	r3, [r7, #24]
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61bb      	str	r3, [r7, #24]
      break;
 80086f2:	bf00      	nop
    }

    switch(PeriphClk)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086fa:	f000 80dd 	beq.w	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008704:	f200 84c1 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800870e:	f000 80d3 	beq.w	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008718:	f200 84b7 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008722:	f000 835f 	beq.w	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872c:	f200 84ad 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008736:	f000 847e 	beq.w	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008740:	f200 84a3 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874a:	f000 82cd 	beq.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008754:	f200 8499 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875e:	f000 80ab 	beq.w	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008768:	f200 848f 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008772:	f000 8090 	beq.w	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877c:	f200 8485 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008786:	d07f      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800878e:	f200 847c 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008798:	f000 8403 	beq.w	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a2:	f200 8472 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ac:	f000 83af 	beq.w	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b6:	f200 8468 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	f000 8379 	beq.w	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ca:	f200 845e 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b80      	cmp	r3, #128	; 0x80
 80087d2:	f000 8344 	beq.w	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b80      	cmp	r3, #128	; 0x80
 80087da:	f200 8456 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d84b      	bhi.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 844f 	beq.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	2b1f      	cmp	r3, #31
 80087f2:	f200 844a 	bhi.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	080089e5 	.word	0x080089e5
 8008800:	08008a53 	.word	0x08008a53
 8008804:	0800908b 	.word	0x0800908b
 8008808:	08008ae7 	.word	0x08008ae7
 800880c:	0800908b 	.word	0x0800908b
 8008810:	0800908b 	.word	0x0800908b
 8008814:	0800908b 	.word	0x0800908b
 8008818:	08008b6d 	.word	0x08008b6d
 800881c:	0800908b 	.word	0x0800908b
 8008820:	0800908b 	.word	0x0800908b
 8008824:	0800908b 	.word	0x0800908b
 8008828:	0800908b 	.word	0x0800908b
 800882c:	0800908b 	.word	0x0800908b
 8008830:	0800908b 	.word	0x0800908b
 8008834:	0800908b 	.word	0x0800908b
 8008838:	08008be5 	.word	0x08008be5
 800883c:	0800908b 	.word	0x0800908b
 8008840:	0800908b 	.word	0x0800908b
 8008844:	0800908b 	.word	0x0800908b
 8008848:	0800908b 	.word	0x0800908b
 800884c:	0800908b 	.word	0x0800908b
 8008850:	0800908b 	.word	0x0800908b
 8008854:	0800908b 	.word	0x0800908b
 8008858:	0800908b 	.word	0x0800908b
 800885c:	0800908b 	.word	0x0800908b
 8008860:	0800908b 	.word	0x0800908b
 8008864:	0800908b 	.word	0x0800908b
 8008868:	0800908b 	.word	0x0800908b
 800886c:	0800908b 	.word	0x0800908b
 8008870:	0800908b 	.word	0x0800908b
 8008874:	0800908b 	.word	0x0800908b
 8008878:	08008c67 	.word	0x08008c67
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	f000 82c1 	beq.w	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008884:	f000 bc01 	b.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008888:	69b9      	ldr	r1, [r7, #24]
 800888a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800888e:	f000 fdd9 	bl	8009444 <RCCEx_GetSAIxPeriphCLKFreq>
 8008892:	61f8      	str	r0, [r7, #28]
      break;
 8008894:	e3fa      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008896:	69b9      	ldr	r1, [r7, #24]
 8008898:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800889c:	f000 fdd2 	bl	8009444 <RCCEx_GetSAIxPeriphCLKFreq>
 80088a0:	61f8      	str	r0, [r7, #28]
      break;
 80088a2:	e3f3      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80088a4:	40021000 	.word	0x40021000
 80088a8:	0003d090 	.word	0x0003d090
 80088ac:	0800acf4 	.word	0x0800acf4
 80088b0:	00f42400 	.word	0x00f42400
 80088b4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80088b8:	4ba9      	ldr	r3, [pc, #676]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088ca:	d00c      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088d2:	d87f      	bhi.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088da:	d04e      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e2:	d01d      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80088e4:	e076      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80088e6:	4b9e      	ldr	r3, [pc, #632]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d172      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80088f2:	4b9b      	ldr	r3, [pc, #620]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80088fe:	4b98      	ldr	r3, [pc, #608]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	091b      	lsrs	r3, r3, #4
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	e005      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800890a:	4b95      	ldr	r3, [pc, #596]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800890c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	4a93      	ldr	r2, [pc, #588]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800891c:	61fb      	str	r3, [r7, #28]
          break;
 800891e:	e05b      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008920:	4b8f      	ldr	r3, [pc, #572]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800892c:	d156      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800892e:	4b8c      	ldr	r3, [pc, #560]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893a:	d14f      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800893c:	4b88      	ldr	r3, [pc, #544]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008946:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	fb03 f202 	mul.w	r2, r3, r2
 8008950:	4b83      	ldr	r3, [pc, #524]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	091b      	lsrs	r3, r3, #4
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	3301      	adds	r3, #1
 800895c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008960:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008962:	4b7f      	ldr	r3, [pc, #508]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	0d5b      	lsrs	r3, r3, #21
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	3301      	adds	r3, #1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	fbb2 f3f3 	udiv	r3, r2, r3
 8008976:	61fb      	str	r3, [r7, #28]
          break;
 8008978:	e030      	b.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800897a:	4b79      	ldr	r3, [pc, #484]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008986:	d12b      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008988:	4b75      	ldr	r3, [pc, #468]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008994:	d124      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008996:	4b72      	ldr	r3, [pc, #456]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	fb03 f202 	mul.w	r2, r3, r2
 80089aa:	4b6d      	ldr	r3, [pc, #436]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	091b      	lsrs	r3, r3, #4
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	3301      	adds	r3, #1
 80089b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80089bc:	4b68      	ldr	r3, [pc, #416]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	0d5b      	lsrs	r3, r3, #21
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	3301      	adds	r3, #1
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d0:	61fb      	str	r3, [r7, #28]
          break;
 80089d2:	e005      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80089d4:	bf00      	nop
 80089d6:	e359      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80089d8:	bf00      	nop
 80089da:	e357      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80089dc:	bf00      	nop
 80089de:	e355      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80089e0:	bf00      	nop
        break;
 80089e2:	e353      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80089e4:	4b5e      	ldr	r3, [pc, #376]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d827      	bhi.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a15 	.word	0x08008a15
 8008a04:	08008a1d 	.word	0x08008a1d
 8008a08:	08008a31 	.word	0x08008a31
          frequency = HAL_RCC_GetPCLK2Freq();
 8008a0c:	f7ff f98a 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 8008a10:	61f8      	str	r0, [r7, #28]
          break;
 8008a12:	e01d      	b.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a14:	f7ff f8d8 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008a18:	61f8      	str	r0, [r7, #28]
          break;
 8008a1a:	e019      	b.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a1c:	4b50      	ldr	r3, [pc, #320]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d10f      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8008a2a:	4b4f      	ldr	r3, [pc, #316]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008a2c:	61fb      	str	r3, [r7, #28]
          break;
 8008a2e:	e00c      	b.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a30:	4b4b      	ldr	r3, [pc, #300]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d107      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8008a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a42:	61fb      	str	r3, [r7, #28]
          break;
 8008a44:	e003      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8008a46:	bf00      	nop
 8008a48:	e320      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008a4a:	bf00      	nop
 8008a4c:	e31e      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008a4e:	bf00      	nop
        break;
 8008a50:	e31c      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008a52:	4b43      	ldr	r3, [pc, #268]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a58:	f003 030c 	and.w	r3, r3, #12
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b0c      	cmp	r3, #12
 8008a62:	d83a      	bhi.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008adb 	.word	0x08008adb
 8008a74:	08008adb 	.word	0x08008adb
 8008a78:	08008adb 	.word	0x08008adb
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	08008adb 	.word	0x08008adb
 8008a84:	08008adb 	.word	0x08008adb
 8008a88:	08008adb 	.word	0x08008adb
 8008a8c:	08008ab1 	.word	0x08008ab1
 8008a90:	08008adb 	.word	0x08008adb
 8008a94:	08008adb 	.word	0x08008adb
 8008a98:	08008adb 	.word	0x08008adb
 8008a9c:	08008ac5 	.word	0x08008ac5
          frequency = HAL_RCC_GetPCLK1Freq();
 8008aa0:	f7ff f92a 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008aa4:	61f8      	str	r0, [r7, #28]
          break;
 8008aa6:	e01d      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008aa8:	f7ff f88e 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008aac:	61f8      	str	r0, [r7, #28]
          break;
 8008aae:	e019      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ab0:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008abc:	d10f      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008ac0:	61fb      	str	r3, [r7, #28]
          break;
 8008ac2:	e00c      	b.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ac4:	4b26      	ldr	r3, [pc, #152]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8008ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad6:	61fb      	str	r3, [r7, #28]
          break;
 8008ad8:	e003      	b.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8008ada:	bf00      	nop
 8008adc:	e2d6      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ade:	bf00      	nop
 8008ae0:	e2d4      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ae2:	bf00      	nop
        break;
 8008ae4:	e2d2      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008ae6:	4b1e      	ldr	r3, [pc, #120]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b30      	cmp	r3, #48	; 0x30
 8008af6:	d021      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b30      	cmp	r3, #48	; 0x30
 8008afc:	d829      	bhi.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d011      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d823      	bhi.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d004      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8008b16:	e01c      	b.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7ff f8ee 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	61f8      	str	r0, [r7, #28]
          break;
 8008b1e:	e01d      	b.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b20:	f7ff f852 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008b24:	61f8      	str	r0, [r7, #28]
          break;
 8008b26:	e019      	b.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b34:	d10f      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008b38:	61fb      	str	r3, [r7, #28]
          break;
 8008b3a:	e00c      	b.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d107      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8008b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4e:	61fb      	str	r3, [r7, #28]
          break;
 8008b50:	e003      	b.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8008b52:	bf00      	nop
 8008b54:	e29a      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008b56:	bf00      	nop
 8008b58:	e298      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008b5a:	bf00      	nop
        break;
 8008b5c:	e296      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008b5e:	bf00      	nop
 8008b60:	40021000 	.word	0x40021000
 8008b64:	0800acf4 	.word	0x0800acf4
 8008b68:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b6c:	4b9b      	ldr	r3, [pc, #620]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b7c:	d021      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2bc0      	cmp	r3, #192	; 0xc0
 8008b82:	d829      	bhi.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b80      	cmp	r3, #128	; 0x80
 8008b88:	d011      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b80      	cmp	r3, #128	; 0x80
 8008b8e:	d823      	bhi.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d004      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8008b9c:	e01c      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b9e:	f7ff f8ab 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008ba2:	61f8      	str	r0, [r7, #28]
          break;
 8008ba4:	e01d      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ba6:	f7ff f80f 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008baa:	61f8      	str	r0, [r7, #28]
          break;
 8008bac:	e019      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bae:	4b8b      	ldr	r3, [pc, #556]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bba:	d10f      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8008bbc:	4b88      	ldr	r3, [pc, #544]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008bbe:	61fb      	str	r3, [r7, #28]
          break;
 8008bc0:	e00c      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008bc2:	4b86      	ldr	r3, [pc, #536]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d107      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8008bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bd4:	61fb      	str	r3, [r7, #28]
          break;
 8008bd6:	e003      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8008bd8:	bf00      	nop
 8008bda:	e257      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008bdc:	bf00      	nop
 8008bde:	e255      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008be0:	bf00      	nop
        break;
 8008be2:	e253      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008be4:	4b7d      	ldr	r3, [pc, #500]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf6:	d025      	beq.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bfe:	d82c      	bhi.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	d013      	beq.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c0e:	d824      	bhi.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1c:	d004      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8008c1e:	e01c      	b.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c20:	f7ff f86a 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008c24:	61f8      	str	r0, [r7, #28]
          break;
 8008c26:	e01d      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c28:	f7fe ffce 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008c2c:	61f8      	str	r0, [r7, #28]
          break;
 8008c2e:	e019      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c30:	4b6a      	ldr	r3, [pc, #424]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3c:	d10f      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8008c3e:	4b68      	ldr	r3, [pc, #416]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008c40:	61fb      	str	r3, [r7, #28]
          break;
 8008c42:	e00c      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c44:	4b65      	ldr	r3, [pc, #404]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d107      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8008c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c56:	61fb      	str	r3, [r7, #28]
          break;
 8008c58:	e003      	b.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8008c5a:	bf00      	nop
 8008c5c:	e216      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008c5e:	bf00      	nop
 8008c60:	e214      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008c62:	bf00      	nop
        break;
 8008c64:	e212      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c66:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c78:	d025      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c80:	d82c      	bhi.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c88:	d013      	beq.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c90:	d824      	bhi.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9e:	d004      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8008ca0:	e01c      	b.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ca2:	f7ff f829 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008ca6:	61f8      	str	r0, [r7, #28]
          break;
 8008ca8:	e01d      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8008caa:	f7fe ff8d 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008cae:	61f8      	str	r0, [r7, #28]
          break;
 8008cb0:	e019      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb2:	4b4a      	ldr	r3, [pc, #296]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cbe:	d10f      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008cc0:	4b47      	ldr	r3, [pc, #284]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008cc2:	61fb      	str	r3, [r7, #28]
          break;
 8008cc4:	e00c      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008cc6:	4b45      	ldr	r3, [pc, #276]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8008cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd8:	61fb      	str	r3, [r7, #28]
          break;
 8008cda:	e003      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008cdc:	bf00      	nop
 8008cde:	e1d5      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ce0:	bf00      	nop
 8008ce2:	e1d3      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ce4:	bf00      	nop
        break;
 8008ce6:	e1d1      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ce8:	4b3c      	ldr	r3, [pc, #240]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cfa:	d00c      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d02:	d864      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d0a:	d008      	beq.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d12:	d030      	beq.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8008d14:	e05b      	b.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d16:	f7fe ff57 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008d1a:	61f8      	str	r0, [r7, #28]
          break;
 8008d1c:	e05c      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d2a:	d152      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8008d2c:	4b2b      	ldr	r3, [pc, #172]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d04c      	beq.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008d38:	4b28      	ldr	r3, [pc, #160]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	0a1b      	lsrs	r3, r3, #8
 8008d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d42:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	fb03 f202 	mul.w	r2, r3, r2
 8008d4c:	4b23      	ldr	r3, [pc, #140]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	3301      	adds	r3, #1
 8008d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008d5e:	4b1f      	ldr	r3, [pc, #124]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	0e5b      	lsrs	r3, r3, #25
 8008d64:	f003 0303 	and.w	r3, r3, #3
 8008d68:	3301      	adds	r3, #1
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	61fb      	str	r3, [r7, #28]
          break;
 8008d74:	e02d      	b.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d82:	d128      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008d84:	4b15      	ldr	r3, [pc, #84]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d022      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008d90:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	fb03 f202 	mul.w	r2, r3, r2
 8008da4:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	091b      	lsrs	r3, r3, #4
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	3301      	adds	r3, #1
 8008db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	0e5b      	lsrs	r3, r3, #25
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	61fb      	str	r3, [r7, #28]
          break;
 8008dcc:	e003      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008dce:	bf00      	nop
 8008dd0:	e15c      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008dd2:	bf00      	nop
 8008dd4:	e15a      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008dd6:	bf00      	nop
        break;
 8008dd8:	e158      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008dda:	bf00      	nop
 8008ddc:	40021000 	.word	0x40021000
 8008de0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008de4:	4b9d      	ldr	r3, [pc, #628]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008df6:	f7fe ff95 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 8008dfa:	61f8      	str	r0, [r7, #28]
        break;
 8008dfc:	e146      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dfe:	f7fe fee3 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008e02:	61f8      	str	r0, [r7, #28]
        break;
 8008e04:	e142      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008e06:	4b95      	ldr	r3, [pc, #596]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e18:	d013      	beq.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e20:	d819      	bhi.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2e:	d004      	beq.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8008e30:	e011      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e32:	f7fe ff61 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008e36:	61f8      	str	r0, [r7, #28]
          break;
 8008e38:	e010      	b.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e3a:	f7fe fec5 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008e3e:	61f8      	str	r0, [r7, #28]
          break;
 8008e40:	e00c      	b.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e42:	4b86      	ldr	r3, [pc, #536]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e4e:	d104      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8008e50:	4b83      	ldr	r3, [pc, #524]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008e52:	61fb      	str	r3, [r7, #28]
          break;
 8008e54:	e001      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8008e56:	bf00      	nop
 8008e58:	e118      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008e5a:	bf00      	nop
        break;
 8008e5c:	e116      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008e5e:	4b7f      	ldr	r3, [pc, #508]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e70:	d013      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e78:	d819      	bhi.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e86:	d004      	beq.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8008e88:	e011      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e8a:	f7fe ff35 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008e8e:	61f8      	str	r0, [r7, #28]
          break;
 8008e90:	e010      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e92:	f7fe fe99 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008e96:	61f8      	str	r0, [r7, #28]
          break;
 8008e98:	e00c      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e9a:	4b70      	ldr	r3, [pc, #448]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea6:	d104      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8008ea8:	4b6d      	ldr	r3, [pc, #436]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008eaa:	61fb      	str	r3, [r7, #28]
          break;
 8008eac:	e001      	b.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8008eae:	bf00      	nop
 8008eb0:	e0ec      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008eb2:	bf00      	nop
        break;
 8008eb4:	e0ea      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008eb6:	4b69      	ldr	r3, [pc, #420]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ec0:	613b      	str	r3, [r7, #16]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec8:	d013      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed0:	d819      	bhi.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ede:	d004      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8008ee0:	e011      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ee2:	f7fe ff09 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008ee6:	61f8      	str	r0, [r7, #28]
          break;
 8008ee8:	e010      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8008eea:	f7fe fe6d 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 8008eee:	61f8      	str	r0, [r7, #28]
          break;
 8008ef0:	e00c      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ef2:	4b5a      	ldr	r3, [pc, #360]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008efe:	d104      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8008f00:	4b57      	ldr	r3, [pc, #348]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008f02:	61fb      	str	r3, [r7, #28]
          break;
 8008f04:	e001      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8008f06:	bf00      	nop
 8008f08:	e0c0      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f0a:	bf00      	nop
        break;
 8008f0c:	e0be      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008f0e:	4b53      	ldr	r3, [pc, #332]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f20:	d02c      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f28:	d833      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f30:	d01a      	beq.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f38:	d82b      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f46:	d004      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8008f48:	e023      	b.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f4a:	f7fe fed5 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008f4e:	61f8      	str	r0, [r7, #28]
          break;
 8008f50:	e026      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008f52:	4b42      	ldr	r3, [pc, #264]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d11a      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8008f60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008f64:	61fb      	str	r3, [r7, #28]
          break;
 8008f66:	e016      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f68:	4b3c      	ldr	r3, [pc, #240]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f74:	d111      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8008f76:	4b3a      	ldr	r3, [pc, #232]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008f78:	61fb      	str	r3, [r7, #28]
          break;
 8008f7a:	e00e      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f7c:	4b37      	ldr	r3, [pc, #220]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d109      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8008f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f8e:	61fb      	str	r3, [r7, #28]
          break;
 8008f90:	e005      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8008f92:	bf00      	nop
 8008f94:	e07a      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f96:	bf00      	nop
 8008f98:	e078      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f9a:	bf00      	nop
 8008f9c:	e076      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f9e:	bf00      	nop
        break;
 8008fa0:	e074      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008fa2:	4b2e      	ldr	r3, [pc, #184]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fb4:	d02c      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fbc:	d833      	bhi.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc4:	d01a      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fcc:	d82b      	bhi.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fda:	d004      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8008fdc:	e023      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fde:	f7fe fe8b 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8008fe2:	61f8      	str	r0, [r7, #28]
          break;
 8008fe4:	e026      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d11a      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8008ff4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ff8:	61fb      	str	r3, [r7, #28]
          break;
 8008ffa:	e016      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ffc:	4b17      	ldr	r3, [pc, #92]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009008:	d111      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800900c:	61fb      	str	r3, [r7, #28]
          break;
 800900e:	e00e      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009010:	4b12      	ldr	r3, [pc, #72]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b02      	cmp	r3, #2
 800901c:	d109      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009022:	61fb      	str	r3, [r7, #28]
          break;
 8009024:	e005      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8009026:	bf00      	nop
 8009028:	e030      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800902a:	bf00      	nop
 800902c:	e02e      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800902e:	bf00      	nop
 8009030:	e02c      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009032:	bf00      	nop
        break;
 8009034:	e02a      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d009      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8009050:	e012      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009052:	f7fe fe51 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 8009056:	61f8      	str	r0, [r7, #28]
          break;
 8009058:	e00e      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800905a:	bf00      	nop
 800905c:	40021000 	.word	0x40021000
 8009060:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009070:	d101      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8009072:	4b0a      	ldr	r3, [pc, #40]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8009074:	61fb      	str	r3, [r7, #28]
          break;
 8009076:	bf00      	nop
        break;
 8009078:	e008      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800907a:	bf00      	nop
 800907c:	e006      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800907e:	bf00      	nop
 8009080:	e004      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009082:	bf00      	nop
 8009084:	e002      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009086:	bf00      	nop
 8009088:	e000      	b.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800908a:	bf00      	nop
    }
  }

  return(frequency);
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	40021000 	.word	0x40021000
 800909c:	00f42400 	.word	0x00f42400

080090a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80090ae:	4b75      	ldr	r3, [pc, #468]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80090ba:	4b72      	ldr	r3, [pc, #456]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0203 	and.w	r2, r3, #3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d10d      	bne.n	80090e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
       ||
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80090d2:	4b6c      	ldr	r3, [pc, #432]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	091b      	lsrs	r3, r3, #4
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
       ||
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d047      	beq.n	8009176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]
 80090ea:	e044      	b.n	8009176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d018      	beq.n	8009126 <RCCEx_PLLSAI1_Config+0x86>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d825      	bhi.n	8009144 <RCCEx_PLLSAI1_Config+0xa4>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d002      	beq.n	8009102 <RCCEx_PLLSAI1_Config+0x62>
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d009      	beq.n	8009114 <RCCEx_PLLSAI1_Config+0x74>
 8009100:	e020      	b.n	8009144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009102:	4b60      	ldr	r3, [pc, #384]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11d      	bne.n	800914a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009112:	e01a      	b.n	800914a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009114:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800911c:	2b00      	cmp	r3, #0
 800911e:	d116      	bne.n	800914e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009124:	e013      	b.n	800914e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009126:	4b57      	ldr	r3, [pc, #348]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10f      	bne.n	8009152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009132:	4b54      	ldr	r3, [pc, #336]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d109      	bne.n	8009152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009142:	e006      	b.n	8009152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
      break;
 8009148:	e004      	b.n	8009154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009152:	bf00      	nop
    }

    if(status == HAL_OK)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800915a:	4b4a      	ldr	r3, [pc, #296]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6819      	ldr	r1, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	3b01      	subs	r3, #1
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	430b      	orrs	r3, r1
 8009170:	4944      	ldr	r1, [pc, #272]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009172:	4313      	orrs	r3, r2
 8009174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d17d      	bne.n	8009278 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800917c:	4b41      	ldr	r3, [pc, #260]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a40      	ldr	r2, [pc, #256]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009188:	f7fa f95e 	bl	8003448 <HAL_GetTick>
 800918c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800918e:	e009      	b.n	80091a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009190:	f7fa f95a 	bl	8003448 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d902      	bls.n	80091a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
        break;
 80091a2:	e005      	b.n	80091b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091a4:	4b37      	ldr	r3, [pc, #220]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1ef      	bne.n	8009190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d160      	bne.n	8009278 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d111      	bne.n	80091e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091bc:	4b31      	ldr	r3, [pc, #196]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80091c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6892      	ldr	r2, [r2, #8]
 80091cc:	0211      	lsls	r1, r2, #8
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68d2      	ldr	r2, [r2, #12]
 80091d2:	0912      	lsrs	r2, r2, #4
 80091d4:	0452      	lsls	r2, r2, #17
 80091d6:	430a      	orrs	r2, r1
 80091d8:	492a      	ldr	r1, [pc, #168]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	610b      	str	r3, [r1, #16]
 80091de:	e027      	b.n	8009230 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d112      	bne.n	800920c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091e6:	4b27      	ldr	r3, [pc, #156]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80091ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6892      	ldr	r2, [r2, #8]
 80091f6:	0211      	lsls	r1, r2, #8
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6912      	ldr	r2, [r2, #16]
 80091fc:	0852      	lsrs	r2, r2, #1
 80091fe:	3a01      	subs	r2, #1
 8009200:	0552      	lsls	r2, r2, #21
 8009202:	430a      	orrs	r2, r1
 8009204:	491f      	ldr	r1, [pc, #124]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009206:	4313      	orrs	r3, r2
 8009208:	610b      	str	r3, [r1, #16]
 800920a:	e011      	b.n	8009230 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800920c:	4b1d      	ldr	r3, [pc, #116]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009214:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6892      	ldr	r2, [r2, #8]
 800921c:	0211      	lsls	r1, r2, #8
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6952      	ldr	r2, [r2, #20]
 8009222:	0852      	lsrs	r2, r2, #1
 8009224:	3a01      	subs	r2, #1
 8009226:	0652      	lsls	r2, r2, #25
 8009228:	430a      	orrs	r2, r1
 800922a:	4916      	ldr	r1, [pc, #88]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800922c:	4313      	orrs	r3, r2
 800922e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009230:	4b14      	ldr	r3, [pc, #80]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a13      	ldr	r2, [pc, #76]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800923a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923c:	f7fa f904 	bl	8003448 <HAL_GetTick>
 8009240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009242:	e009      	b.n	8009258 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009244:	f7fa f900 	bl	8003448 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d902      	bls.n	8009258 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	73fb      	strb	r3, [r7, #15]
          break;
 8009256:	e005      	b.n	8009264 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0ef      	beq.n	8009244 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	4904      	ldr	r1, [pc, #16]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009274:	4313      	orrs	r3, r2
 8009276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40021000 	.word	0x40021000

08009288 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009296:	4b6a      	ldr	r3, [pc, #424]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d018      	beq.n	80092d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80092a2:	4b67      	ldr	r3, [pc, #412]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0203 	and.w	r2, r3, #3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d10d      	bne.n	80092ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
       ||
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80092ba:	4b61      	ldr	r3, [pc, #388]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
       ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d047      	beq.n	800935e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	e044      	b.n	800935e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d018      	beq.n	800930e <RCCEx_PLLSAI2_Config+0x86>
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d825      	bhi.n	800932c <RCCEx_PLLSAI2_Config+0xa4>
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d002      	beq.n	80092ea <RCCEx_PLLSAI2_Config+0x62>
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d009      	beq.n	80092fc <RCCEx_PLLSAI2_Config+0x74>
 80092e8:	e020      	b.n	800932c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092ea:	4b55      	ldr	r3, [pc, #340]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d11d      	bne.n	8009332 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092fa:	e01a      	b.n	8009332 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092fc:	4b50      	ldr	r3, [pc, #320]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009304:	2b00      	cmp	r3, #0
 8009306:	d116      	bne.n	8009336 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800930c:	e013      	b.n	8009336 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800930e:	4b4c      	ldr	r3, [pc, #304]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10f      	bne.n	800933a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800931a:	4b49      	ldr	r3, [pc, #292]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800932a:	e006      	b.n	800933a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
      break;
 8009330:	e004      	b.n	800933c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800933a:	bf00      	nop
    }

    if(status == HAL_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009342:	4b3f      	ldr	r3, [pc, #252]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	3b01      	subs	r3, #1
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	430b      	orrs	r3, r1
 8009358:	4939      	ldr	r1, [pc, #228]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800935a:	4313      	orrs	r3, r2
 800935c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d167      	bne.n	8009434 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009364:	4b36      	ldr	r3, [pc, #216]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a35      	ldr	r2, [pc, #212]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800936a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800936e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009370:	f7fa f86a 	bl	8003448 <HAL_GetTick>
 8009374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009376:	e009      	b.n	800938c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009378:	f7fa f866 	bl	8003448 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d902      	bls.n	800938c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
        break;
 800938a:	e005      	b.n	8009398 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800938c:	4b2c      	ldr	r3, [pc, #176]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1ef      	bne.n	8009378 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d14a      	bne.n	8009434 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d111      	bne.n	80093c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80093a4:	4b26      	ldr	r3, [pc, #152]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6892      	ldr	r2, [r2, #8]
 80093b4:	0211      	lsls	r1, r2, #8
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	68d2      	ldr	r2, [r2, #12]
 80093ba:	0912      	lsrs	r2, r2, #4
 80093bc:	0452      	lsls	r2, r2, #17
 80093be:	430a      	orrs	r2, r1
 80093c0:	491f      	ldr	r1, [pc, #124]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	614b      	str	r3, [r1, #20]
 80093c6:	e011      	b.n	80093ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80093c8:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6892      	ldr	r2, [r2, #8]
 80093d8:	0211      	lsls	r1, r2, #8
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6912      	ldr	r2, [r2, #16]
 80093de:	0852      	lsrs	r2, r2, #1
 80093e0:	3a01      	subs	r2, #1
 80093e2:	0652      	lsls	r2, r2, #25
 80093e4:	430a      	orrs	r2, r1
 80093e6:	4916      	ldr	r1, [pc, #88]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80093ec:	4b14      	ldr	r3, [pc, #80]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a13      	ldr	r2, [pc, #76]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80093f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f8:	f7fa f826 	bl	8003448 <HAL_GetTick>
 80093fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80093fe:	e009      	b.n	8009414 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009400:	f7fa f822 	bl	8003448 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b02      	cmp	r3, #2
 800940c:	d902      	bls.n	8009414 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	73fb      	strb	r3, [r7, #15]
          break;
 8009412:	e005      	b.n	8009420 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009414:	4b0a      	ldr	r3, [pc, #40]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0ef      	beq.n	8009400 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009426:	4b06      	ldr	r3, [pc, #24]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009428:	695a      	ldr	r2, [r3, #20]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	4904      	ldr	r1, [pc, #16]	; (8009440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009430:	4313      	orrs	r3, r2
 8009432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	40021000 	.word	0x40021000

08009444 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009444:	b480      	push	{r7}
 8009446:	b089      	sub	sp, #36	; 0x24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009460:	d10c      	bne.n	800947c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009462:	4b6e      	ldr	r3, [pc, #440]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009468:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800946c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009474:	d112      	bne.n	800949c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009476:	4b6a      	ldr	r3, [pc, #424]	; (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	e00f      	b.n	800949c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	d10b      	bne.n	800949c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009484:	4b65      	ldr	r3, [pc, #404]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800948e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009496:	d101      	bne.n	800949c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009498:	4b61      	ldr	r3, [pc, #388]	; (8009620 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800949a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 80b4 	bne.w	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094ae:	d003      	beq.n	80094b8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094b6:	d135      	bne.n	8009524 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80094b8:	4b58      	ldr	r3, [pc, #352]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094c4:	f040 80a1 	bne.w	800960a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80094c8:	4b54      	ldr	r3, [pc, #336]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 809a 	beq.w	800960a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80094d6:	4b51      	ldr	r3, [pc, #324]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	091b      	lsrs	r3, r3, #4
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	3301      	adds	r3, #1
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80094ea:	4b4c      	ldr	r3, [pc, #304]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80094fc:	4b47      	ldr	r3, [pc, #284]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009508:	2311      	movs	r3, #17
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e001      	b.n	8009512 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800950e:	2307      	movs	r3, #7
 8009510:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	fb03 f202 	mul.w	r2, r3, r2
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009520:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009522:	e072      	b.n	800960a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d133      	bne.n	8009592 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800952a:	4b3c      	ldr	r3, [pc, #240]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009536:	d169      	bne.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009538:	4b38      	ldr	r3, [pc, #224]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d063      	beq.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009544:	4b35      	ldr	r3, [pc, #212]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	3301      	adds	r3, #1
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	fbb2 f3f3 	udiv	r3, r2, r3
 8009556:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009558:	4b30      	ldr	r3, [pc, #192]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	0a1b      	lsrs	r3, r3, #8
 800955e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009562:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800956a:	4b2c      	ldr	r3, [pc, #176]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8009576:	2311      	movs	r3, #17
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	e001      	b.n	8009580 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800957c:	2307      	movs	r3, #7
 800957e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	fb03 f202 	mul.w	r2, r3, r2
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	e03c      	b.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009598:	d003      	beq.n	80095a2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095a0:	d134      	bne.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ae:	d12d      	bne.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80095b0:	4b1a      	ldr	r3, [pc, #104]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d027      	beq.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80095bc:	4b17      	ldr	r3, [pc, #92]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	091b      	lsrs	r3, r3, #4
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	3301      	adds	r3, #1
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80095d0:	4b12      	ldr	r3, [pc, #72]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80095ee:	2311      	movs	r3, #17
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	e001      	b.n	80095f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80095f4:	2307      	movs	r3, #7
 80095f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	fb03 f202 	mul.w	r2, r3, r2
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	fbb2 f3f3 	udiv	r3, r2, r3
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e000      	b.n	800960c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800960a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800960c:	69fb      	ldr	r3, [r7, #28]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3724      	adds	r7, #36	; 0x24
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40021000 	.word	0x40021000
 8009620:	001fff68 	.word	0x001fff68

08009624 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d06c      	beq.n	8009710 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7f7 fdda 	bl	8001204 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	22ca      	movs	r2, #202	; 0xca
 800965e:	625a      	str	r2, [r3, #36]	; 0x24
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2253      	movs	r2, #83	; 0x53
 8009666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f87c 	bl	8009766 <RTC_EnterInitMode>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d14b      	bne.n	8009710 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	6812      	ldr	r2, [r2, #0]
 8009682:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6899      	ldr	r1, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68d2      	ldr	r2, [r2, #12]
 80096b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6919      	ldr	r1, [r3, #16]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	041a      	lsls	r2, r3, #16
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f87f 	bl	80097cc <RTC_ExitInitMode>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11b      	bne.n	8009710 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 0203 	bic.w	r2, r2, #3
 80096e6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69da      	ldr	r2, [r3, #28]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	22ff      	movs	r2, #255	; 0xff
 8009706:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009730:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009732:	f7f9 fe89 	bl	8003448 <HAL_GetTick>
 8009736:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009738:	e009      	b.n	800974e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800973a:	f7f9 fe85 	bl	8003448 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009748:	d901      	bls.n	800974e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e007      	b.n	800975e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0ee      	beq.n	800973a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977c:	2b00      	cmp	r3, #0
 800977e:	d120      	bne.n	80097c2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f04f 32ff 	mov.w	r2, #4294967295
 8009788:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800978a:	f7f9 fe5d 	bl	8003448 <HAL_GetTick>
 800978e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009790:	e00d      	b.n	80097ae <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009792:	f7f9 fe59 	bl	8003448 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a0:	d905      	bls.n	80097ae <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2203      	movs	r2, #3
 80097aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <RTC_EnterInitMode+0x5c>
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d1e7      	bne.n	8009792 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80097d8:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <RTC_ExitInitMode+0x78>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	4a19      	ldr	r2, [pc, #100]	; (8009844 <RTC_ExitInitMode+0x78>)
 80097de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <RTC_ExitInitMode+0x78>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0320 	and.w	r3, r3, #32
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10c      	bne.n	800980a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ff92 	bl	800971a <HAL_RTC_WaitForSynchro>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01e      	beq.n	800983a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2203      	movs	r2, #3
 8009800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	73fb      	strb	r3, [r7, #15]
 8009808:	e017      	b.n	800983a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800980a:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <RTC_ExitInitMode+0x78>)
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <RTC_ExitInitMode+0x78>)
 8009810:	f023 0320 	bic.w	r3, r3, #32
 8009814:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ff7f 	bl	800971a <HAL_RTC_WaitForSynchro>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2203      	movs	r2, #3
 8009826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <RTC_ExitInitMode+0x78>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	4a04      	ldr	r2, [pc, #16]	; (8009844 <RTC_ExitInitMode+0x78>)
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	6093      	str	r3, [r2, #8]
  }

  return status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40002800 	.word	0x40002800

08009848 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d904      	bls.n	8009866 <HAL_SAI_InitProtocol+0x1e>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	3b03      	subs	r3, #3
 8009860:	2b01      	cmp	r3, #1
 8009862:	d812      	bhi.n	800988a <HAL_SAI_InitProtocol+0x42>
 8009864:	e008      	b.n	8009878 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fb99 	bl	8009fa4 <SAI_InitI2S>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]
      break;
 8009876:	e00b      	b.n	8009890 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fc42 	bl	800a108 <SAI_InitPCM>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
      break;
 8009888:	e002      	b.n	8009890 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	bf00      	nop
  }

  if (status == HAL_OK)
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d104      	bne.n	80098a0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f808 	bl	80098ac <HAL_SAI_Init>
 800989c:	4603      	mov	r3, r0
 800989e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e155      	b.n	8009b6a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fd26 	bl	8001324 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc97 	bl	800a20c <SAI_Disable>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e140      	b.n	8009b6a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d00c      	beq.n	8009912 <HAL_SAI_Init+0x66>
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d80d      	bhi.n	8009918 <HAL_SAI_Init+0x6c>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <HAL_SAI_Init+0x5a>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d003      	beq.n	800990c <HAL_SAI_Init+0x60>
 8009904:	e008      	b.n	8009918 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
      break;
 800990a:	e008      	b.n	800991e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800990c:	2310      	movs	r3, #16
 800990e:	61fb      	str	r3, [r7, #28]
      break;
 8009910:	e005      	b.n	800991e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009912:	2320      	movs	r3, #32
 8009914:	61fb      	str	r3, [r7, #28]
      break;
 8009916:	e002      	b.n	800991e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	61fb      	str	r3, [r7, #28]
      break;
 800991c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b03      	cmp	r3, #3
 8009924:	d81d      	bhi.n	8009962 <HAL_SAI_Init+0xb6>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <HAL_SAI_Init+0x80>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	0800993d 	.word	0x0800993d
 8009930:	08009943 	.word	0x08009943
 8009934:	0800994b 	.word	0x0800994b
 8009938:	08009953 	.word	0x08009953
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
      break;
 8009940:	e012      	b.n	8009968 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009946:	617b      	str	r3, [r7, #20]
      break;
 8009948:	e00e      	b.n	8009968 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800994a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800994e:	617b      	str	r3, [r7, #20]
      break;
 8009950:	e00a      	b.n	8009968 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009956:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
      break;
 8009960:	e002      	b.n	8009968 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	617b      	str	r3, [r7, #20]
      break;
 8009966:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a81      	ldr	r2, [pc, #516]	; (8009b74 <HAL_SAI_Init+0x2c8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <HAL_SAI_Init+0xd0>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a80      	ldr	r2, [pc, #512]	; (8009b78 <HAL_SAI_Init+0x2cc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d103      	bne.n	8009984 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800997c:	4a7f      	ldr	r2, [pc, #508]	; (8009b7c <HAL_SAI_Init+0x2d0>)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	e002      	b.n	800998a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009984:	4a7e      	ldr	r2, [pc, #504]	; (8009b80 <HAL_SAI_Init+0x2d4>)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d041      	beq.n	8009a16 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a77      	ldr	r2, [pc, #476]	; (8009b74 <HAL_SAI_Init+0x2c8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d004      	beq.n	80099a6 <HAL_SAI_Init+0xfa>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a75      	ldr	r2, [pc, #468]	; (8009b78 <HAL_SAI_Init+0x2cc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d105      	bne.n	80099b2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80099a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099aa:	f7fe fe0b 	bl	80085c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80099ae:	6138      	str	r0, [r7, #16]
 80099b0:	e004      	b.n	80099bc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80099b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80099b6:	f7fe fe05 	bl	80085c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80099ba:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	461a      	mov	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	025b      	lsls	r3, r3, #9
 80099ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a6b      	ldr	r2, [pc, #428]	; (8009b84 <HAL_SAI_Init+0x2d8>)
 80099d8:	fba2 2303 	umull	r2, r3, r2, r3
 80099dc:	08da      	lsrs	r2, r3, #3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80099e2:	68f9      	ldr	r1, [r7, #12]
 80099e4:	4b67      	ldr	r3, [pc, #412]	; (8009b84 <HAL_SAI_Init+0x2d8>)
 80099e6:	fba3 2301 	umull	r2, r3, r3, r1
 80099ea:	08da      	lsrs	r2, r3, #3
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	1aca      	subs	r2, r1, r3
 80099f6:	2a08      	cmp	r2, #8
 80099f8:	d904      	bls.n	8009a04 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d104      	bne.n	8009a16 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	085a      	lsrs	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_SAI_Init+0x17a>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d109      	bne.n	8009a3a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_SAI_Init+0x186>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e001      	b.n	8009a36 <HAL_SAI_Init+0x18a>
 8009a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	e008      	b.n	8009a4c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d102      	bne.n	8009a48 <HAL_SAI_Init+0x19c>
 8009a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a46:	e000      	b.n	8009a4a <HAL_SAI_Init+0x19e>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6819      	ldr	r1, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b4c      	ldr	r3, [pc, #304]	; (8009b88 <HAL_SAI_Init+0x2dc>)
 8009a58:	400b      	ands	r3, r1
 8009a5a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6819      	ldr	r1, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a70:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	431a      	orrs	r2, r3
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8009a84:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a90:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	051b      	lsls	r3, r3, #20
 8009a98:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ab0:	f023 030f 	bic.w	r3, r3, #15
 8009ab4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6859      	ldr	r1, [r3, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6899      	ldr	r1, [r3, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b2b      	ldr	r3, [pc, #172]	; (8009b8c <HAL_SAI_Init+0x2e0>)
 8009ae0:	400b      	ands	r3, r1
 8009ae2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6899      	ldr	r1, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009af4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009afa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009b00:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	3b01      	subs	r3, #1
 8009b08:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009b0a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68d9      	ldr	r1, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009b22:	400b      	ands	r3, r1
 8009b24:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68d9      	ldr	r1, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b34:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b3c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	3b01      	subs	r3, #1
 8009b44:	021b      	lsls	r3, r3, #8
 8009b46:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40015404 	.word	0x40015404
 8009b78:	40015424 	.word	0x40015424
 8009b7c:	40015400 	.word	0x40015400
 8009b80:	40015800 	.word	0x40015800
 8009b84:	cccccccd 	.word	0xcccccccd
 8009b88:	ff05c010 	.word	0xff05c010
 8009b8c:	fff88000 	.word	0xfff88000

08009b90 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_SAI_Abort+0x1a>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e053      	b.n	8009c52 <HAL_SAI_Abort+0xc2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bc0:	d125      	bne.n	8009c0e <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009bd0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b12      	cmp	r3, #18
 8009bdc:	d108      	bne.n	8009bf0 <HAL_SAI_Abort+0x60>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d004      	beq.n	8009bf0 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fb f9bc 	bl	8004f68 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b22      	cmp	r3, #34	; 0x22
 8009bfa:	d108      	bne.n	8009c0e <HAL_SAI_Abort+0x7e>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fb f9ad 	bl	8004f68 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 faf3 	bl	800a20c <SAI_Disable>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0208 	orr.w	r2, r2, #8
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 8192 	beq.w	8009f96 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d009      	beq.n	8009ca8 <HAL_SAI_IRQHandler+0x4c>
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	4798      	blx	r3
 8009ca6:	e176      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01e      	beq.n	8009cf0 <HAL_SAI_IRQHandler+0x94>
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d019      	beq.n	8009cf0 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b22      	cmp	r3, #34	; 0x22
 8009cce:	d101      	bne.n	8009cd4 <HAL_SAI_IRQHandler+0x78>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e000      	b.n	8009cd6 <HAL_SAI_IRQHandler+0x7a>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7f8 f9dd 	bl	80020a8 <HAL_SAI_ErrorCallback>
 8009cee:	e152      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d011      	beq.n	8009d1e <HAL_SAI_IRQHandler+0xc2>
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00c      	beq.n	8009d1e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8140 	beq.w	8009f96 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8009d1c:	e13b      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f003 0320 	and.w	r3, r3, #32
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d055      	beq.n	8009dd4 <HAL_SAI_IRQHandler+0x178>
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d050      	beq.n	8009dd4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2220      	movs	r2, #32
 8009d38:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d40:	f043 0204 	orr.w	r2, r3, #4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d038      	beq.n	8009dc6 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d016      	beq.n	8009d8a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d60:	4a8f      	ldr	r2, [pc, #572]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fb f93b 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7f8 f98f 	bl	80020a8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 80fc 	beq.w	8009f8c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a81      	ldr	r2, [pc, #516]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fb f91f 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 80ef 	beq.w	8009f8c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7f8 f972 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009dc4:	e0e2      	b.n	8009f8c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff fee2 	bl	8009b90 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7f8 f96b 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009dd2:	e0db      	b.n	8009f8c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d055      	beq.n	8009e8a <HAL_SAI_IRQHandler+0x22e>
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d050      	beq.n	8009e8a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2240      	movs	r2, #64	; 0x40
 8009dee:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df6:	f043 0208 	orr.w	r2, r3, #8
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d038      	beq.n	8009e7c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e16:	4a62      	ldr	r2, [pc, #392]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009e18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fb f8e0 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7f8 f934 	bl	80020a8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 80a3 	beq.w	8009f90 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4e:	4a54      	ldr	r2, [pc, #336]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fb f8c4 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8096 	beq.w	8009f90 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7f8 f917 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e7a:	e089      	b.n	8009f90 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff fe87 	bl	8009b90 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7f8 f910 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e88:	e082      	b.n	8009f90 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d061      	beq.n	8009f58 <HAL_SAI_IRQHandler+0x2fc>
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d05c      	beq.n	8009f58 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eac:	f043 0220 	orr.w	r2, r3, #32
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d036      	beq.n	8009f2e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d016      	beq.n	8009ef6 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ecc:	4a34      	ldr	r2, [pc, #208]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fb f885 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ee6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7f8 f8d9 	bl	80020a8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d04a      	beq.n	8009f94 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f02:	4a27      	ldr	r2, [pc, #156]	; (8009fa0 <HAL_SAI_IRQHandler+0x344>)
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fb f86a 	bl	8004fe4 <HAL_DMA_Abort_IT>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d03e      	beq.n	8009f94 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7f8 f8be 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f2c:	e032      	b.n	8009f94 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2200      	movs	r2, #0
 8009f34:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7f8 f8a9 	bl	80020a8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f56:	e01d      	b.n	8009f94 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d019      	beq.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d014      	beq.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2210      	movs	r2, #16
 8009f72:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f7a:	f043 0210 	orr.w	r2, r3, #16
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7f8 f88f 	bl	80020a8 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8009f8a:	e004      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f8c:	bf00      	nop
 8009f8e:	e002      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f94:	bf00      	nop
}
 8009f96:	bf00      	nop
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	0800a281 	.word	0x0800a281

08009fa4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <SAI_InitI2S+0x2e>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d103      	bne.n	8009fda <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8009fd8:	e002      	b.n	8009fe0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009fe6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e077      	b.n	800a0fa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d107      	bne.n	800a020 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a01c:	651a      	str	r2, [r3, #80]	; 0x50
 800a01e:	e006      	b.n	800a02e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a026:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d84f      	bhi.n	800a0d4 <SAI_InitI2S+0x130>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <SAI_InitI2S+0x98>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a04d 	.word	0x0800a04d
 800a040:	0800a06f 	.word	0x0800a06f
 800a044:	0800a091 	.word	0x0800a091
 800a048:	0800a0b3 	.word	0x0800a0b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2280      	movs	r2, #128	; 0x80
 800a050:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	011a      	lsls	r2, r3, #4
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2240      	movs	r2, #64	; 0x40
 800a06a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a06c:	e035      	b.n	800a0da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2280      	movs	r2, #128	; 0x80
 800a072:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	019a      	lsls	r2, r3, #6
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2280      	movs	r2, #128	; 0x80
 800a08c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a08e:	e024      	b.n	800a0da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	22c0      	movs	r2, #192	; 0xc0
 800a094:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	019a      	lsls	r2, r3, #6
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	085b      	lsrs	r3, r3, #1
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2280      	movs	r2, #128	; 0x80
 800a0ae:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a0b0:	e013      	b.n	800a0da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	22e0      	movs	r2, #224	; 0xe0
 800a0b6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	019a      	lsls	r2, r3, #6
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	085b      	lsrs	r3, r3, #1
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2280      	movs	r2, #128	; 0x80
 800a0d0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a0d2:	e002      	b.n	800a0da <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d10b      	bne.n	800a0f8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d102      	bne.n	800a0ec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d102      	bne.n	800a0f8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2208      	movs	r2, #8
 800a0f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop

0800a108 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <SAI_InitPCM+0x2e>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d103      	bne.n	800a13e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2201      	movs	r2, #1
 800a13a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a13c:	e002      	b.n	800a144 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a150:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a158:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a16c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d103      	bne.n	800a17c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	645a      	str	r2, [r3, #68]	; 0x44
 800a17a:	e002      	b.n	800a182 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	220d      	movs	r2, #13
 800a180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d837      	bhi.n	800a1f8 <SAI_InitPCM+0xf0>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <SAI_InitPCM+0x88>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1a1 	.word	0x0800a1a1
 800a194:	0800a1b7 	.word	0x0800a1b7
 800a198:	0800a1cd 	.word	0x0800a1cd
 800a19c:	0800a1e3 	.word	0x0800a1e3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2280      	movs	r2, #128	; 0x80
 800a1a4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	011a      	lsls	r2, r3, #4
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2240      	movs	r2, #64	; 0x40
 800a1b2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a1b4:	e023      	b.n	800a1fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2280      	movs	r2, #128	; 0x80
 800a1ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2280      	movs	r2, #128	; 0x80
 800a1c8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a1ca:	e018      	b.n	800a1fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	22c0      	movs	r2, #192	; 0xc0
 800a1d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2280      	movs	r2, #128	; 0x80
 800a1de:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a1e0:	e00d      	b.n	800a1fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22e0      	movs	r2, #224	; 0xe0
 800a1e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2280      	movs	r2, #128	; 0x80
 800a1f4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a1f6:	e002      	b.n	800a1fe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fc:	bf00      	nop
  }

  return status;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a200:	4618      	mov	r0, r3
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a214:	4b18      	ldr	r3, [pc, #96]	; (800a278 <SAI_Disable+0x6c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a18      	ldr	r2, [pc, #96]	; (800a27c <SAI_Disable+0x70>)
 800a21a:	fba2 2303 	umull	r2, r3, r2, r3
 800a21e:	0b1b      	lsrs	r3, r3, #12
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a236:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	72fb      	strb	r3, [r7, #11]
      break;
 800a252:	e009      	b.n	800a268 <SAI_Disable+0x5c>
    }
    count--;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3b01      	subs	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e7      	bne.n	800a238 <SAI_Disable+0x2c>

  return status;
 800a268:	7afb      	ldrb	r3, [r7, #11]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	2000ac74 	.word	0x2000ac74
 800a27c:	95cbec1b 	.word	0x95cbec1b

0800a280 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a29c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d00a      	beq.n	800a2d0 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff ffa6 	bl	800a20c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0208 	orr.w	r2, r2, #8
 800a2ce:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7f7 fee1 	bl	80020a8 <HAL_SAI_ErrorCallback>
#endif
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e040      	b.n	800a382 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7f6 ffa9 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2224      	movs	r2, #36	; 0x24
 800a31a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 0201 	bic.w	r2, r2, #1
 800a32a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f82d 	bl	800a38c <UART_SetConfig>
 800a332:	4603      	mov	r3, r0
 800a334:	2b01      	cmp	r3, #1
 800a336:	d101      	bne.n	800a33c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e022      	b.n	800a382 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fad9 	bl	800a8fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a358:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a368:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f042 0201 	orr.w	r2, r2, #1
 800a378:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fb60 	bl	800aa40 <UART_CheckIdleState>
 800a380:	4603      	mov	r3, r0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a38c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a390:	b08a      	sub	sp, #40	; 0x28
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4ba4      	ldr	r3, [pc, #656]	; (800a64c <UART_SetConfig+0x2c0>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a99      	ldr	r2, [pc, #612]	; (800a650 <UART_SetConfig+0x2c4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d004      	beq.n	800a3f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a408:	430a      	orrs	r2, r1
 800a40a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a90      	ldr	r2, [pc, #576]	; (800a654 <UART_SetConfig+0x2c8>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d126      	bne.n	800a464 <UART_SetConfig+0xd8>
 800a416:	4b90      	ldr	r3, [pc, #576]	; (800a658 <UART_SetConfig+0x2cc>)
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d81b      	bhi.n	800a45c <UART_SetConfig+0xd0>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <UART_SetConfig+0xa0>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a44d 	.word	0x0800a44d
 800a434:	0800a445 	.word	0x0800a445
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a442:	e116      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a444:	2302      	movs	r3, #2
 800a446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a44a:	e112      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a44c:	2304      	movs	r3, #4
 800a44e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a452:	e10e      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a454:	2308      	movs	r3, #8
 800a456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a45a:	e10a      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a45c:	2310      	movs	r3, #16
 800a45e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a462:	e106      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a7c      	ldr	r2, [pc, #496]	; (800a65c <UART_SetConfig+0x2d0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d138      	bne.n	800a4e0 <UART_SetConfig+0x154>
 800a46e:	4b7a      	ldr	r3, [pc, #488]	; (800a658 <UART_SetConfig+0x2cc>)
 800a470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a474:	f003 030c 	and.w	r3, r3, #12
 800a478:	2b0c      	cmp	r3, #12
 800a47a:	d82d      	bhi.n	800a4d8 <UART_SetConfig+0x14c>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <UART_SetConfig+0xf8>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a4b9 	.word	0x0800a4b9
 800a488:	0800a4d9 	.word	0x0800a4d9
 800a48c:	0800a4d9 	.word	0x0800a4d9
 800a490:	0800a4d9 	.word	0x0800a4d9
 800a494:	0800a4c9 	.word	0x0800a4c9
 800a498:	0800a4d9 	.word	0x0800a4d9
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4d9 	.word	0x0800a4d9
 800a4a4:	0800a4c1 	.word	0x0800a4c1
 800a4a8:	0800a4d9 	.word	0x0800a4d9
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4d1 	.word	0x0800a4d1
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4be:	e0d8      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4c6:	e0d4      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ce:	e0d0      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4d6:	e0cc      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4de:	e0c8      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a5e      	ldr	r2, [pc, #376]	; (800a660 <UART_SetConfig+0x2d4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d125      	bne.n	800a536 <UART_SetConfig+0x1aa>
 800a4ea:	4b5b      	ldr	r3, [pc, #364]	; (800a658 <UART_SetConfig+0x2cc>)
 800a4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4f4:	2b30      	cmp	r3, #48	; 0x30
 800a4f6:	d016      	beq.n	800a526 <UART_SetConfig+0x19a>
 800a4f8:	2b30      	cmp	r3, #48	; 0x30
 800a4fa:	d818      	bhi.n	800a52e <UART_SetConfig+0x1a2>
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d00a      	beq.n	800a516 <UART_SetConfig+0x18a>
 800a500:	2b20      	cmp	r3, #32
 800a502:	d814      	bhi.n	800a52e <UART_SetConfig+0x1a2>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <UART_SetConfig+0x182>
 800a508:	2b10      	cmp	r3, #16
 800a50a:	d008      	beq.n	800a51e <UART_SetConfig+0x192>
 800a50c:	e00f      	b.n	800a52e <UART_SetConfig+0x1a2>
 800a50e:	2300      	movs	r3, #0
 800a510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a514:	e0ad      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a516:	2302      	movs	r3, #2
 800a518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a51c:	e0a9      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a51e:	2304      	movs	r3, #4
 800a520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a524:	e0a5      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a526:	2308      	movs	r3, #8
 800a528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a52c:	e0a1      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a52e:	2310      	movs	r3, #16
 800a530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a534:	e09d      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a4a      	ldr	r2, [pc, #296]	; (800a664 <UART_SetConfig+0x2d8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d125      	bne.n	800a58c <UART_SetConfig+0x200>
 800a540:	4b45      	ldr	r3, [pc, #276]	; (800a658 <UART_SetConfig+0x2cc>)
 800a542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a54a:	2bc0      	cmp	r3, #192	; 0xc0
 800a54c:	d016      	beq.n	800a57c <UART_SetConfig+0x1f0>
 800a54e:	2bc0      	cmp	r3, #192	; 0xc0
 800a550:	d818      	bhi.n	800a584 <UART_SetConfig+0x1f8>
 800a552:	2b80      	cmp	r3, #128	; 0x80
 800a554:	d00a      	beq.n	800a56c <UART_SetConfig+0x1e0>
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d814      	bhi.n	800a584 <UART_SetConfig+0x1f8>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <UART_SetConfig+0x1d8>
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d008      	beq.n	800a574 <UART_SetConfig+0x1e8>
 800a562:	e00f      	b.n	800a584 <UART_SetConfig+0x1f8>
 800a564:	2300      	movs	r3, #0
 800a566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a56a:	e082      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a56c:	2302      	movs	r3, #2
 800a56e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a572:	e07e      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a574:	2304      	movs	r3, #4
 800a576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a57a:	e07a      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a57c:	2308      	movs	r3, #8
 800a57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a582:	e076      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a584:	2310      	movs	r3, #16
 800a586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a58a:	e072      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a35      	ldr	r2, [pc, #212]	; (800a668 <UART_SetConfig+0x2dc>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d12a      	bne.n	800a5ec <UART_SetConfig+0x260>
 800a596:	4b30      	ldr	r3, [pc, #192]	; (800a658 <UART_SetConfig+0x2cc>)
 800a598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5a4:	d01a      	beq.n	800a5dc <UART_SetConfig+0x250>
 800a5a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5aa:	d81b      	bhi.n	800a5e4 <UART_SetConfig+0x258>
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b0:	d00c      	beq.n	800a5cc <UART_SetConfig+0x240>
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b6:	d815      	bhi.n	800a5e4 <UART_SetConfig+0x258>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <UART_SetConfig+0x238>
 800a5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c0:	d008      	beq.n	800a5d4 <UART_SetConfig+0x248>
 800a5c2:	e00f      	b.n	800a5e4 <UART_SetConfig+0x258>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5ca:	e052      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5d2:	e04e      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5da:	e04a      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5e2:	e046      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5ea:	e042      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a17      	ldr	r2, [pc, #92]	; (800a650 <UART_SetConfig+0x2c4>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d13a      	bne.n	800a66c <UART_SetConfig+0x2e0>
 800a5f6:	4b18      	ldr	r3, [pc, #96]	; (800a658 <UART_SetConfig+0x2cc>)
 800a5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a604:	d01a      	beq.n	800a63c <UART_SetConfig+0x2b0>
 800a606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a60a:	d81b      	bhi.n	800a644 <UART_SetConfig+0x2b8>
 800a60c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a610:	d00c      	beq.n	800a62c <UART_SetConfig+0x2a0>
 800a612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a616:	d815      	bhi.n	800a644 <UART_SetConfig+0x2b8>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <UART_SetConfig+0x298>
 800a61c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a620:	d008      	beq.n	800a634 <UART_SetConfig+0x2a8>
 800a622:	e00f      	b.n	800a644 <UART_SetConfig+0x2b8>
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a62a:	e022      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a62c:	2302      	movs	r3, #2
 800a62e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a632:	e01e      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a63a:	e01a      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a642:	e016      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a64a:	e012      	b.n	800a672 <UART_SetConfig+0x2e6>
 800a64c:	efff69f3 	.word	0xefff69f3
 800a650:	40008000 	.word	0x40008000
 800a654:	40013800 	.word	0x40013800
 800a658:	40021000 	.word	0x40021000
 800a65c:	40004400 	.word	0x40004400
 800a660:	40004800 	.word	0x40004800
 800a664:	40004c00 	.word	0x40004c00
 800a668:	40005000 	.word	0x40005000
 800a66c:	2310      	movs	r3, #16
 800a66e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a9f      	ldr	r2, [pc, #636]	; (800a8f4 <UART_SetConfig+0x568>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d17a      	bne.n	800a772 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a67c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a680:	2b08      	cmp	r3, #8
 800a682:	d824      	bhi.n	800a6ce <UART_SetConfig+0x342>
 800a684:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <UART_SetConfig+0x300>)
 800a686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68a:	bf00      	nop
 800a68c:	0800a6b1 	.word	0x0800a6b1
 800a690:	0800a6cf 	.word	0x0800a6cf
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6cf 	.word	0x0800a6cf
 800a69c:	0800a6bf 	.word	0x0800a6bf
 800a6a0:	0800a6cf 	.word	0x0800a6cf
 800a6a4:	0800a6cf 	.word	0x0800a6cf
 800a6a8:	0800a6cf 	.word	0x0800a6cf
 800a6ac:	0800a6c7 	.word	0x0800a6c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6b0:	f7fd fb22 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 800a6b4:	61f8      	str	r0, [r7, #28]
        break;
 800a6b6:	e010      	b.n	800a6da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6b8:	4b8f      	ldr	r3, [pc, #572]	; (800a8f8 <UART_SetConfig+0x56c>)
 800a6ba:	61fb      	str	r3, [r7, #28]
        break;
 800a6bc:	e00d      	b.n	800a6da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6be:	f7fd fa83 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 800a6c2:	61f8      	str	r0, [r7, #28]
        break;
 800a6c4:	e009      	b.n	800a6da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ca:	61fb      	str	r3, [r7, #28]
        break;
 800a6cc:	e005      	b.n	800a6da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a6d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 80fb 	beq.w	800a8d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d305      	bcc.n	800a6fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6f8:	69fa      	ldr	r2, [r7, #28]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d903      	bls.n	800a706 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a704:	e0e8      	b.n	800a8d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	2200      	movs	r2, #0
 800a70a:	461c      	mov	r4, r3
 800a70c:	4615      	mov	r5, r2
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	f04f 0300 	mov.w	r3, #0
 800a716:	022b      	lsls	r3, r5, #8
 800a718:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a71c:	0222      	lsls	r2, r4, #8
 800a71e:	68f9      	ldr	r1, [r7, #12]
 800a720:	6849      	ldr	r1, [r1, #4]
 800a722:	0849      	lsrs	r1, r1, #1
 800a724:	2000      	movs	r0, #0
 800a726:	4688      	mov	r8, r1
 800a728:	4681      	mov	r9, r0
 800a72a:	eb12 0a08 	adds.w	sl, r2, r8
 800a72e:	eb43 0b09 	adc.w	fp, r3, r9
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	603b      	str	r3, [r7, #0]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a740:	4650      	mov	r0, sl
 800a742:	4659      	mov	r1, fp
 800a744:	f7f5 fd40 	bl	80001c8 <__aeabi_uldivmod>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4613      	mov	r3, r2
 800a74e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a756:	d308      	bcc.n	800a76a <UART_SetConfig+0x3de>
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75e:	d204      	bcs.n	800a76a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	60da      	str	r2, [r3, #12]
 800a768:	e0b6      	b.n	800a8d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a770:	e0b2      	b.n	800a8d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a77a:	d15e      	bne.n	800a83a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a77c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a780:	2b08      	cmp	r3, #8
 800a782:	d828      	bhi.n	800a7d6 <UART_SetConfig+0x44a>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <UART_SetConfig+0x400>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7b1 	.word	0x0800a7b1
 800a790:	0800a7b9 	.word	0x0800a7b9
 800a794:	0800a7c1 	.word	0x0800a7c1
 800a798:	0800a7d7 	.word	0x0800a7d7
 800a79c:	0800a7c7 	.word	0x0800a7c7
 800a7a0:	0800a7d7 	.word	0x0800a7d7
 800a7a4:	0800a7d7 	.word	0x0800a7d7
 800a7a8:	0800a7d7 	.word	0x0800a7d7
 800a7ac:	0800a7cf 	.word	0x0800a7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7b0:	f7fd faa2 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 800a7b4:	61f8      	str	r0, [r7, #28]
        break;
 800a7b6:	e014      	b.n	800a7e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7b8:	f7fd fab4 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 800a7bc:	61f8      	str	r0, [r7, #28]
        break;
 800a7be:	e010      	b.n	800a7e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7c0:	4b4d      	ldr	r3, [pc, #308]	; (800a8f8 <UART_SetConfig+0x56c>)
 800a7c2:	61fb      	str	r3, [r7, #28]
        break;
 800a7c4:	e00d      	b.n	800a7e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c6:	f7fd f9ff 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 800a7ca:	61f8      	str	r0, [r7, #28]
        break;
 800a7cc:	e009      	b.n	800a7e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d2:	61fb      	str	r3, [r7, #28]
        break;
 800a7d4:	e005      	b.n	800a7e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a7e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d077      	beq.n	800a8d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	005a      	lsls	r2, r3, #1
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	085b      	lsrs	r3, r3, #1
 800a7f2:	441a      	add	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2b0f      	cmp	r3, #15
 800a802:	d916      	bls.n	800a832 <UART_SetConfig+0x4a6>
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a80a:	d212      	bcs.n	800a832 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f023 030f 	bic.w	r3, r3, #15
 800a814:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	b29a      	uxth	r2, r3
 800a822:	8afb      	ldrh	r3, [r7, #22]
 800a824:	4313      	orrs	r3, r2
 800a826:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	8afa      	ldrh	r2, [r7, #22]
 800a82e:	60da      	str	r2, [r3, #12]
 800a830:	e052      	b.n	800a8d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a838:	e04e      	b.n	800a8d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a83a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a83e:	2b08      	cmp	r3, #8
 800a840:	d827      	bhi.n	800a892 <UART_SetConfig+0x506>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <UART_SetConfig+0x4bc>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a86d 	.word	0x0800a86d
 800a84c:	0800a875 	.word	0x0800a875
 800a850:	0800a87d 	.word	0x0800a87d
 800a854:	0800a893 	.word	0x0800a893
 800a858:	0800a883 	.word	0x0800a883
 800a85c:	0800a893 	.word	0x0800a893
 800a860:	0800a893 	.word	0x0800a893
 800a864:	0800a893 	.word	0x0800a893
 800a868:	0800a88b 	.word	0x0800a88b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a86c:	f7fd fa44 	bl	8007cf8 <HAL_RCC_GetPCLK1Freq>
 800a870:	61f8      	str	r0, [r7, #28]
        break;
 800a872:	e014      	b.n	800a89e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a874:	f7fd fa56 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 800a878:	61f8      	str	r0, [r7, #28]
        break;
 800a87a:	e010      	b.n	800a89e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a87c:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <UART_SetConfig+0x56c>)
 800a87e:	61fb      	str	r3, [r7, #28]
        break;
 800a880:	e00d      	b.n	800a89e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a882:	f7fd f9a1 	bl	8007bc8 <HAL_RCC_GetSysClockFreq>
 800a886:	61f8      	str	r0, [r7, #28]
        break;
 800a888:	e009      	b.n	800a89e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a88e:	61fb      	str	r3, [r7, #28]
        break;
 800a890:	e005      	b.n	800a89e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a89c:	bf00      	nop
    }

    if (pclk != 0U)
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d019      	beq.n	800a8d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	085a      	lsrs	r2, r3, #1
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	2b0f      	cmp	r3, #15
 800a8bc:	d909      	bls.n	800a8d2 <UART_SetConfig+0x546>
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c4:	d205      	bcs.n	800a8d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60da      	str	r2, [r3, #12]
 800a8d0:	e002      	b.n	800a8d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a8e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3728      	adds	r7, #40	; 0x28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8f2:	bf00      	nop
 800a8f4:	40008000 	.word	0x40008000
 800a8f8:	00f42400 	.word	0x00f42400

0800a8fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00a      	beq.n	800a96a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	f003 0308 	and.w	r3, r3, #8
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	430a      	orrs	r2, r1
 800a98a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	f003 0320 	and.w	r3, r3, #32
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01a      	beq.n	800aa12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9fa:	d10a      	bne.n	800aa12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	605a      	str	r2, [r3, #4]
  }
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa50:	f7f8 fcfa 	bl	8003448 <HAL_GetTick>
 800aa54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0308 	and.w	r3, r3, #8
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d10e      	bne.n	800aa82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f82d 	bl	800aad2 <UART_WaitOnFlagUntilTimeout>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e023      	b.n	800aaca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d10e      	bne.n	800aaae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f817 	bl	800aad2 <UART_WaitOnFlagUntilTimeout>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e00d      	b.n	800aaca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b09c      	sub	sp, #112	; 0x70
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	603b      	str	r3, [r7, #0]
 800aade:	4613      	mov	r3, r2
 800aae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae2:	e0a5      	b.n	800ac30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	f000 80a1 	beq.w	800ac30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaee:	f7f8 fcab 	bl	8003448 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d302      	bcc.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x32>
 800aafe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d13e      	bne.n	800ab82 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab18:	667b      	str	r3, [r7, #100]	; 0x64
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e6      	bne.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	f023 0301 	bic.w	r3, r3, #1
 800ab4c:	663b      	str	r3, [r7, #96]	; 0x60
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab56:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e5      	bne.n	800ab36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e067      	b.n	800ac52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d04f      	beq.n	800ac30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab9e:	d147      	bne.n	800ac30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aba8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
 800abca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e6      	bne.n	800abaa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3308      	adds	r3, #8
 800abe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	613b      	str	r3, [r7, #16]
   return(result);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f023 0301 	bic.w	r3, r3, #1
 800abf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3308      	adds	r3, #8
 800abfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abfc:	623a      	str	r2, [r7, #32]
 800abfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac00:	69f9      	ldr	r1, [r7, #28]
 800ac02:	6a3a      	ldr	r2, [r7, #32]
 800ac04:	e841 2300 	strex	r3, r2, [r1]
 800ac08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e5      	bne.n	800abdc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2220      	movs	r2, #32
 800ac14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2220      	movs	r2, #32
 800ac20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e010      	b.n	800ac52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69da      	ldr	r2, [r3, #28]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4013      	ands	r3, r2
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	bf0c      	ite	eq
 800ac40:	2301      	moveq	r3, #1
 800ac42:	2300      	movne	r3, #0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	f43f af4a 	beq.w	800aae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3770      	adds	r7, #112	; 0x70
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <__libc_init_array>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	4d0d      	ldr	r5, [pc, #52]	; (800ac94 <__libc_init_array+0x38>)
 800ac60:	4c0d      	ldr	r4, [pc, #52]	; (800ac98 <__libc_init_array+0x3c>)
 800ac62:	1b64      	subs	r4, r4, r5
 800ac64:	10a4      	asrs	r4, r4, #2
 800ac66:	2600      	movs	r6, #0
 800ac68:	42a6      	cmp	r6, r4
 800ac6a:	d109      	bne.n	800ac80 <__libc_init_array+0x24>
 800ac6c:	4d0b      	ldr	r5, [pc, #44]	; (800ac9c <__libc_init_array+0x40>)
 800ac6e:	4c0c      	ldr	r4, [pc, #48]	; (800aca0 <__libc_init_array+0x44>)
 800ac70:	f000 f820 	bl	800acb4 <_init>
 800ac74:	1b64      	subs	r4, r4, r5
 800ac76:	10a4      	asrs	r4, r4, #2
 800ac78:	2600      	movs	r6, #0
 800ac7a:	42a6      	cmp	r6, r4
 800ac7c:	d105      	bne.n	800ac8a <__libc_init_array+0x2e>
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac84:	4798      	blx	r3
 800ac86:	3601      	adds	r6, #1
 800ac88:	e7ee      	b.n	800ac68 <__libc_init_array+0xc>
 800ac8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac8e:	4798      	blx	r3
 800ac90:	3601      	adds	r6, #1
 800ac92:	e7f2      	b.n	800ac7a <__libc_init_array+0x1e>
 800ac94:	0800ad74 	.word	0x0800ad74
 800ac98:	0800ad74 	.word	0x0800ad74
 800ac9c:	0800ad74 	.word	0x0800ad74
 800aca0:	0800ad78 	.word	0x0800ad78

0800aca4 <memset>:
 800aca4:	4402      	add	r2, r0
 800aca6:	4603      	mov	r3, r0
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d100      	bne.n	800acae <memset+0xa>
 800acac:	4770      	bx	lr
 800acae:	f803 1b01 	strb.w	r1, [r3], #1
 800acb2:	e7f9      	b.n	800aca8 <memset+0x4>

0800acb4 <_init>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	bf00      	nop
 800acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acba:	bc08      	pop	{r3}
 800acbc:	469e      	mov	lr, r3
 800acbe:	4770      	bx	lr

0800acc0 <_fini>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr
