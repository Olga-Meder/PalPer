
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2ec  0800b2ec  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2f4  0800b2f4  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f4  0800b2f4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800b2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b174  20000044  0800b340  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b1b8  0800b340  0002b1b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002104b  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2e  00000000  00000000  000410bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00044cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  00046858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca87  00000000  00000000  00048260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eec0  00000000  00000000  00074ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116040  00000000  00000000  00093ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074cc  00000000  00000000  001a9c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b22c 	.word	0x0800b22c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	0800b22c 	.word	0x0800b22c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AudioPlay_Error_CallBack>:
  uint32_t   SubChunk2Size;    /* 40 */
} WavHeaderTypeDef;


void AudioPlay_Error_CallBack(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 80004d0:	f000 fc46 	bl	8000d60 <Error_Handler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <AudioPlay_TransferComplete_CallBack>:
/* Address (in Flash memory) of the first audio sample to play */
static uint16_t *pAudioSample;


void AudioPlay_TransferComplete_CallBack()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  uint32_t replay = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]

  if (AudioDemo == AUDIO_DEMO_PLAYBACK)
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <AudioPlay_TransferComplete_CallBack+0x78>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d12e      	bne.n	8000548 <AudioPlay_TransferComplete_CallBack+0x70>
  {
    /* Update the current pointer position */
    pAudioSample += DMA_MAX(RemainingAudioSamplesNb);
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <AudioPlay_TransferComplete_CallBack+0x7c>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <AudioPlay_TransferComplete_CallBack+0x80>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004f6:	d203      	bcs.n	8000500 <AudioPlay_TransferComplete_CallBack+0x28>
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <AudioPlay_TransferComplete_CallBack+0x80>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	e000      	b.n	8000502 <AudioPlay_TransferComplete_CallBack+0x2a>
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <AudioPlay_TransferComplete_CallBack+0x84>)
 8000502:	4413      	add	r3, r2
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <AudioPlay_TransferComplete_CallBack+0x7c>)
 8000506:	6013      	str	r3, [r2, #0]

    /* Update the remaining number of data to be played */
    RemainingAudioSamplesNb = (AUDIO_END_ADDRESS - (uint32_t)pAudioSample)/1;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <AudioPlay_TransferComplete_CallBack+0x7c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f5c3 432c 	rsb	r3, r3, #44032	; 0xac00
 8000510:	33c0      	adds	r3, #192	; 0xc0
 8000512:	461a      	mov	r2, r3
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <AudioPlay_TransferComplete_CallBack+0x80>)
 8000516:	601a      	str	r2, [r3, #0]

    if (RemainingAudioSamplesNb > 0)
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <AudioPlay_TransferComplete_CallBack+0x80>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	dd13      	ble.n	8000548 <AudioPlay_TransferComplete_CallBack+0x70>
    {
      /* Replay from the current position */
      if (BSP_AUDIO_OUT_ChangeBuffer(pAudioSample,
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <AudioPlay_TransferComplete_CallBack+0x7c>)
 8000522:	681b      	ldr	r3, [r3, #0]
                                     DMA_MAX(RemainingAudioSamplesNb)) != 0)
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <AudioPlay_TransferComplete_CallBack+0x80>)
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052e:	428a      	cmp	r2, r1
 8000530:	bf28      	it	cs
 8000532:	460a      	movcs	r2, r1
      if (BSP_AUDIO_OUT_ChangeBuffer(pAudioSample,
 8000534:	b292      	uxth	r2, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fd15 	bl	8001f68 <BSP_AUDIO_OUT_ChangeBuffer>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <AudioPlay_TransferComplete_CallBack+0x70>
      {
        Error_Handler();
 8000544:	f000 fc0c 	bl	8000d60 <Error_Handler>
      }
    }
  }
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000064 	.word	0x20000064
 8000554:	2000006c 	.word	0x2000006c
 8000558:	20000068 	.word	0x20000068
 800055c:	0001fffe 	.word	0x0001fffe

08000560 <HAL_ADC_ConvCpltCallback>:
  {
	//  pBuffer[tmpIndex] = hex_array[petla];
  }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_ADC_ConvCpltCallback+0x20>)
 800056a:	f003 fb0d 	bl	8003b88 <HAL_ADC_GetValue>
 800056e:	4603      	mov	r3, r0
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_ADC_ConvCpltCallback+0x24>)
 8000574:	701a      	strb	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000070 	.word	0x20000070
 8000584:	2000034c 	.word	0x2000034c

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f002 ff37 	bl	8003400 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f88d 	bl	80006b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000596:	f000 f8df 	bl	8000758 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fb05 	bl	8000ba8 <MX_GPIO_Init>
  MX_LCD_Init();
 800059e:	f000 f9f7 	bl	8000990 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80005a2:	f000 fa2f 	bl	8000a04 <MX_QUADSPI_Init>
  MX_DFSDM1_Init();
 80005a6:	f000 f97b 	bl	80008a0 <MX_DFSDM1_Init>
  MX_RTC_Init();
 80005aa:	f000 fa51 	bl	8000a50 <MX_RTC_Init>
  MX_I2C1_Init();
 80005ae:	f000 f9af 	bl	8000910 <MX_I2C1_Init>
  MX_DMA_Init();
 80005b2:	f000 fadb 	bl	8000b6c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005b6:	f000 faa9 	bl	8000b0c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80005ba:	f000 fa71 	bl	8000aa0 <MX_SAI1_Init>
  MX_ADC1_Init();
 80005be:	f000 f8f9 	bl	80007b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 80005c2:	f001 fefd 	bl	80023c0 <BSP_LCD_GLASS_Init>

 // BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_HIGH);

  static QSPI_Info pQSPI_Info;
  uint8_t status;
  status = BSP_QSPI_Init();
 80005c6:	f002 fcef 	bl	8002fa8 <BSP_QSPI_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

  if (status == QSPI_OK) {
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10e      	bne.n	80005f2 <main+0x6a>
	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <main+0xfc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <main+0xfc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <main+0xfc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <main+0xfc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0xfc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
//  for (uint32_t i = 0; i < 44144; i++){                        //1.clap -> 44144    2.tom -> 44144
//	  Fill_Buffer(qspi_aTxBuffer, BUFFER_SIZE,i);
//	  BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR+(BUFFER_SIZE*i), BUFFER_SIZE);
//  }

  HAL_GPIO_TogglePin(LED4_GPIO_PORT, LED4_PIN);
 80005f2:	2104      	movs	r1, #4
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <main+0x100>)
 80005f6:	f005 fa09 	bl	8005a0c <HAL_GPIO_TogglePin>
  BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, 4);
 80005fa:	2204      	movs	r2, #4
 80005fc:	2150      	movs	r1, #80	; 0x50
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <main+0x104>)
 8000600:	f002 fd28 	bl	8003054 <BSP_QSPI_Read>
  BSP_LCD_GLASS_DisplayString((uint8_t *) qspi_aRxBuffer);
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <main+0x104>)
 8000606:	f001 ff15 	bl	8002434 <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f002 ff73 	bl	80034f8 <HAL_Delay>


  /* Audio playback demo is running */
  AudioDemo = AUDIO_DEMO_PLAYBACK;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0x108>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]

  /* Set the remaining number of data to be played */
  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 1);
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <main+0x10c>)
 800061a:	f64a 4270 	movw	r2, #44144	; 0xac70
 800061e:	601a      	str	r2, [r3, #0]

  /* Set the pointer to the first audio sample to play */
  pAudioSample = (uint16_t *) AUDIO_START_ADDRESS;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <main+0x110>)
 8000622:	2250      	movs	r2, #80	; 0x50
 8000624:	601a      	str	r2, [r3, #0]


  if(BSP_AUDIO_OUT_Init(2,
 8000626:	f64a 4244 	movw	r2, #44100	; 0xac44
 800062a:	215a      	movs	r1, #90	; 0x5a
 800062c:	2002      	movs	r0, #2
 800062e:	f001 fc17 	bl	8001e60 <BSP_AUDIO_OUT_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d004      	beq.n	8000642 <main+0xba>
                        90,
                        44100) != 0)
  {
	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 1");
 8000638:	4818      	ldr	r0, [pc, #96]	; (800069c <main+0x114>)
 800063a:	f001 fefb 	bl	8002434 <BSP_LCD_GLASS_DisplayString>
		  Error_Handler();
 800063e:	f000 fb8f 	bl	8000d60 <Error_Handler>
  }

  BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <main+0x118>)
 8000644:	2100      	movs	r1, #0
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <main+0x11c>)
 8000648:	f001 fcc6 	bl	8001fd8 <BSP_AUDIO_OUT_RegisterCallbacks>
                                  NULL,
                                  AudioPlay_TransferComplete_CallBack);

  if(BSP_AUDIO_OUT_SetVolume(90) != 0)
 800064c:	205a      	movs	r0, #90	; 0x5a
 800064e:	f001 fcab 	bl	8001fa8 <BSP_AUDIO_OUT_SetVolume>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <main+0xda>
  {
	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 2");
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <main+0x120>)
 800065a:	f001 feeb 	bl	8002434 <BSP_LCD_GLASS_DisplayString>
	  Error_Handler();
 800065e:	f000 fb7f 	bl	8000d60 <Error_Handler>
  }


  if(BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb) != AUDIO_OK)
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <main+0x110>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <main+0x10c>)
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fc41 	bl	8001ef4 <BSP_AUDIO_OUT_Play>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d004      	beq.n	8000682 <main+0xfa>
	   {
	 	  BSP_LCD_GLASS_DisplayString((uint8_t *)"UMI 3");
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0x124>)
 800067a:	f001 fedb 	bl	8002434 <BSP_LCD_GLASS_DisplayString>
	 	  Error_Handler();
 800067e:	f000 fb6f 	bl	8000d60 <Error_Handler>
	   }



   while (1)
 8000682:	e7fe      	b.n	8000682 <main+0xfa>
 8000684:	20000350 	.word	0x20000350
 8000688:	48000400 	.word	0x48000400
 800068c:	20000060 	.word	0x20000060
 8000690:	20000064 	.word	0x20000064
 8000694:	20000068 	.word	0x20000068
 8000698:	2000006c 	.word	0x2000006c
 800069c:	0800b244 	.word	0x0800b244
 80006a0:	080004d9 	.word	0x080004d9
 80006a4:	080004cd 	.word	0x080004cd
 80006a8:	0800b24c 	.word	0x0800b24c
 80006ac:	0800b254 	.word	0x0800b254

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00a fdac 	bl	800b21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d6:	f006 f9c5 	bl	8006a64 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 fb3e 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006e4:	230a      	movs	r3, #10
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000702:	230a      	movs	r3, #10
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fefa 	bl	8007510 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000722:	f000 fb1d 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f007 face 	bl	8007ce0 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074a:	f000 fb09 	bl	8000d60 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3758      	adds	r7, #88	; 0x58
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0a2      	sub	sp, #136	; 0x88
 800075c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2288      	movs	r2, #136	; 0x88
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00a fd59 	bl	800b21c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 800076a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800076e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000770:	2300      	movs	r3, #0
 8000772:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000778:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <PeriphCommonClock_Config+0x58>)
 8000794:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4618      	mov	r0, r3
 800079a:	f007 fca7 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80007a4:	f000 fadc 	bl	8000d60 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3788      	adds	r7, #136	; 0x88
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	01010000 	.word	0x01010000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007d8:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <MX_ADC1_Init+0xe4>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_ADC1_Init+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000808:	2201      	movs	r2, #1
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_ADC1_Init+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_ADC1_Init+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000836:	4817      	ldr	r0, [pc, #92]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000838:	f003 f850 	bl	80038dc <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 fa8d 	bl	8000d60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_ADC1_Init+0xe0>)
 8000852:	f004 f81d 	bl	8004890 <HAL_ADCEx_MultiModeConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 fa80 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_ADC1_Init+0xe8>)
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000864:	2306      	movs	r3, #6
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000868:	2306      	movs	r3, #6
 800086a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800086c:	237f      	movs	r3, #127	; 0x7f
 800086e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000870:	2304      	movs	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_ADC1_Init+0xe0>)
 800087e:	f003 fbbf 	bl	8004000 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 fa6a 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000070 	.word	0x20000070
 8000898:	50040000 	.word	0x50040000
 800089c:	21800100 	.word	0x21800100

080008a0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_Init 0 */
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */
  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <MX_DFSDM1_Init+0x6c>)
 80008a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_DFSDM1_Init+0x68>)
 80008f6:	f004 f9bf 	bl	8004c78 <HAL_DFSDM_ChannelInit>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000900:	f000 fa2e 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */
  /* USER CODE END DFSDM1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000d4 	.word	0x200000d4
 800090c:	40016000 	.word	0x40016000

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_I2C1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_I2C1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_I2C1_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_I2C1_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_I2C1_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <MX_I2C1_Init+0x74>)
 800094c:	f005 f878 	bl	8005a40 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 fa03 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <MX_I2C1_Init+0x74>)
 800095e:	f005 fe0f 	bl	8006580 <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 f9fa 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C1_Init+0x74>)
 8000970:	f005 fe51 	bl	8006616 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f9f1 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000010c 	.word	0x2000010c
 8000988:	40005400 	.word	0x40005400
 800098c:	10909cec 	.word	0x10909cec

08000990 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_LCD_Init+0x6c>)
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <MX_LCD_Init+0x70>)
 8000998:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_LCD_Init+0x6c>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_LCD_Init+0x6c>)
 80009a2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80009a6:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_LCD_Init+0x6c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_LCD_Init+0x6c>)
 80009b0:	2240      	movs	r2, #64	; 0x40
 80009b2:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_LCD_Init+0x6c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_LCD_Init+0x6c>)
 80009bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_LCD_Init+0x6c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_LCD_Init+0x6c>)
 80009ca:	2240      	movs	r2, #64	; 0x40
 80009cc:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_LCD_Init+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_LCD_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_LCD_Init+0x6c>)
 80009dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_LCD_Init+0x6c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_LCD_Init+0x6c>)
 80009ea:	f005 fe61 	bl	80066b0 <HAL_LCD_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 80009f4:	f000 f9b4 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000158 	.word	0x20000158
 8000a00:	40002400 	.word	0x40002400

08000a04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_QUADSPI_Init+0x48>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a22:	2218      	movs	r2, #24
 8000a24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_QUADSPI_Init+0x44>)
 8000a34:	f006 f88c 	bl	8006b50 <HAL_QSPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a3e:	f000 f98f 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000194 	.word	0x20000194
 8000a4c:	a0001000 	.word	0xa0001000

08000a50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <MX_RTC_Init+0x4c>)
 8000a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a62:	227f      	movs	r2, #127	; 0x7f
 8000a64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a68:	22ff      	movs	r2, #255	; 0xff
 8000a6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_RTC_Init+0x48>)
 8000a86:	f008 ff3b 	bl	8009900 <HAL_RTC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a90:	f000 f966 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	40002800 	.word	0x40002800

08000aa0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_SAI1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000aca:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ace:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ae8:	2302      	movs	r3, #2
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_SAI1_Init+0x64>)
 8000af0:	f009 f818 	bl	8009b24 <HAL_SAI_InitProtocol>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f000 f931 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001fc 	.word	0x200001fc
 8000b08:	40015404 	.word	0x40015404

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART3_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b50:	f009 fe89 	bl	800a866 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f901 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200002c8 	.word	0x200002c8
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2038      	movs	r0, #56	; 0x38
 8000b90:	f004 f82d 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000b94:	2038      	movs	r0, #56	; 0x38
 8000b96:	f004 f846 	bl	8004c26 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a64      	ldr	r2, [pc, #400]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b53      	ldr	r3, [pc, #332]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a52      	ldr	r2, [pc, #328]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b47      	ldr	r3, [pc, #284]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a46      	ldr	r2, [pc, #280]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4841      	ldr	r0, [pc, #260]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000c54:	f004 fec2 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f004 febc 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f004 feb6 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	4839      	ldr	r0, [pc, #228]	; (8000d5c <MX_GPIO_Init+0x1b4>)
 8000c76:	f004 feb1 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	4835      	ldr	r0, [pc, #212]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000c82:	f004 feab 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000c86:	2308      	movs	r3, #8
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	482e      	ldr	r0, [pc, #184]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000c9e:	f004 fbff 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000caa:	2302      	movs	r3, #2
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f004 fbf2 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f004 fbe3 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_Y2_Pin;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIGITIZER_IN_Y2_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f004 fbd6 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f004 fbc7 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000d12:	2304      	movs	r3, #4
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_GPIO_Init+0x1b4>)
 8000d2a:	f004 fbb9 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000d48:	f004 fbaa 	bl	80054a0 <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48001000 	.word	0x48001000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_ADC_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_ADC_MspInit+0x88>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000e06:	2308      	movs	r3, #8
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f004 fb40 	bl	80054a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2012      	movs	r0, #18
 8000e26:	f003 fee2 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e2a:	2012      	movs	r0, #18
 8000e2c:	f003 fefb 	bl	8004c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a f9db 	bl	800b21c <memset>
  if(hi2c->Instance==I2C1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <HAL_I2C_MspInit+0xb0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13a      	bne.n	8000ee6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f007 f935 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff ff6a 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_I2C_MspInit+0xb8>)
 8000eca:	f004 fae9 	bl	80054a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_I2C_MspInit+0xb4>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	37b0      	adds	r7, #176	; 0xb0
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000400 	.word	0x48000400

08000efc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_I2C_MspDeInit+0x38>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10d      	bne.n	8000f2a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_I2C_MspDeInit+0x3c>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <HAL_I2C_MspDeInit+0x3c>)
 8000f14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <HAL_I2C_MspDeInit+0x40>)
 8000f1e:	f004 fc69 	bl	80057f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_I2C_MspDeInit+0x40>)
 8000f26:	f004 fc65 	bl	80057f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ae      	sub	sp, #184	; 0xb8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2288      	movs	r2, #136	; 0x88
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00a f95b 	bl	800b21c <memset>
  if(hlcd->Instance==LCD)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_LCD_MspInit+0x188>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	f040 80a6 	bne.w	80010be <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 f8b1 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000f90:	f7ff fee6 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4a34      	ldr	r2, [pc, #208]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <HAL_LCD_MspInit+0x18c>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 800100c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001026:	230b      	movs	r3, #11
 8001028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001030:	4619      	mov	r1, r3
 8001032:	4827      	ldr	r0, [pc, #156]	; (80010d0 <HAL_LCD_MspInit+0x190>)
 8001034:	f004 fa34 	bl	80054a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8001038:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800103c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001052:	230b      	movs	r3, #11
 8001054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f004 fa1d 	bl	80054a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8001066:	f24f 2333 	movw	r3, #62003	; 0xf233
 800106a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001080:	230b      	movs	r3, #11
 8001082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800108a:	4619      	mov	r1, r3
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <HAL_LCD_MspInit+0x194>)
 800108e:	f004 fa07 	bl	80054a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8001092:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010ac:	230b      	movs	r3, #11
 80010ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <HAL_LCD_MspInit+0x198>)
 80010ba:	f004 f9f1 	bl	80054a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	37b8      	adds	r7, #184	; 0xb8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40002400 	.word	0x40002400
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000c00 	.word	0x48000c00

080010dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_QSPI_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d128      	bne.n	8001150 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_QSPI_MspInit+0x80>)
 8001100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_QSPI_MspInit+0x80>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6513      	str	r3, [r2, #80]	; 0x50
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_QSPI_MspInit+0x80>)
 800110c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_QSPI_MspInit+0x80>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_QSPI_MspInit+0x80>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_QSPI_MspInit+0x80>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 800112e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001132:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001140:	230a      	movs	r3, #10
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_QSPI_MspInit+0x84>)
 800114c:	f004 f9a8 	bl	80054a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	a0001000 	.word	0xa0001000
 800115c:	40021000 	.word	0x40021000
 8001160:	48001000 	.word	0x48001000

08001164 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_QSPI_MspDeInit+0x30>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10a      	bne.n	800118c <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_QSPI_MspDeInit+0x34>)
 8001178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_QSPI_MspDeInit+0x34>)
 800117c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001180:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001182:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_QSPI_MspDeInit+0x38>)
 8001188:	f004 fb34 	bl	80057f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	a0001000 	.word	0xa0001000
 8001198:	40021000 	.word	0x40021000
 800119c:	48001000 	.word	0x48001000

080011a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a4      	sub	sp, #144	; 0x90
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2288      	movs	r2, #136	; 0x88
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00a f833 	bl	800b21c <memset>
  if(hrtc->Instance==RTC)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_RTC_MspInit+0x5c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d118      	bne.n	80011f2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 ff8a 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011de:	f7ff fdbf 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_RTC_MspInit+0x60>)
 80011e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_RTC_MspInit+0x60>)
 80011ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3790      	adds	r7, #144	; 0x90
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40002800 	.word	0x40002800
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	; 0xb0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2288      	movs	r2, #136	; 0x88
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f009 fff9 	bl	800b21c <memset>
  if(huart->Instance==USART3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_UART_MspInit+0xb0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d13b      	bne.n	80012ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001234:	2304      	movs	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f006 ff53 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800124c:	f7ff fd88 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001280:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800129a:	2307      	movs	r3, #7
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_UART_MspInit+0xb8>)
 80012a8:	f004 f8fa 	bl	80054a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	37b0      	adds	r7, #176	; 0xb0
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40004800 	.word	0x40004800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f002 f8d4 	bl	80034b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <ADC1_2_IRQHandler+0x10>)
 800131a:	f002 fc43 	bl	8003ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000070 	.word	0x20000070

08001328 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA2_Channel1_IRQHandler+0x10>)
 800132e:	f003 ffd8 	bl	80052e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000280 	.word	0x20000280

0800133c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <SAI1_IRQHandler+0x10>)
 8001342:	f008 fea9 	bl	800a098 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001fc 	.word	0x200001fc

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f009 ff17 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff f8ef 	bl	8000588 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80013b8:	0800b2fc 	.word	0x0800b2fc
  ldr r2, =_sbss
 80013bc:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80013c0:	2000b1b8 	.word	0x2000b1b8

080013c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC3_IRQHandler>
	...

080013c8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4603      	mov	r3, r0
 80013d2:	81fb      	strh	r3, [r7, #14]
 80013d4:	460b      	mov	r3, r1
 80013d6:	81bb      	strh	r3, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80013e0:	f000 fc96 	bl	8001d10 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	2102      	movs	r1, #2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fb01 	bl	80019f4 <CODEC_IO_Write>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	4413      	add	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80013fc:	89bb      	ldrh	r3, [r7, #12]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2b03      	cmp	r3, #3
 8001402:	d81b      	bhi.n	800143c <cs43l22_Init+0x74>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <cs43l22_Init+0x44>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001425 	.word	0x08001425
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001435 	.word	0x08001435
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800141c:	4b5b      	ldr	r3, [pc, #364]	; (800158c <cs43l22_Init+0x1c4>)
 800141e:	22fa      	movs	r2, #250	; 0xfa
 8001420:	701a      	strb	r2, [r3, #0]
    break;
 8001422:	e00f      	b.n	8001444 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <cs43l22_Init+0x1c4>)
 8001426:	22af      	movs	r2, #175	; 0xaf
 8001428:	701a      	strb	r2, [r3, #0]
    break;
 800142a:	e00b      	b.n	8001444 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <cs43l22_Init+0x1c4>)
 800142e:	22aa      	movs	r2, #170	; 0xaa
 8001430:	701a      	strb	r2, [r3, #0]
    break;
 8001432:	e007      	b.n	8001444 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001434:	4b55      	ldr	r3, [pc, #340]	; (800158c <cs43l22_Init+0x1c4>)
 8001436:	2205      	movs	r2, #5
 8001438:	701a      	strb	r2, [r3, #0]
    break;    
 800143a:	e003      	b.n	8001444 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <cs43l22_Init+0x1c4>)
 800143e:	2205      	movs	r2, #5
 8001440:	701a      	strb	r2, [r3, #0]
    break;    
 8001442:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4a50      	ldr	r2, [pc, #320]	; (800158c <cs43l22_Init+0x1c4>)
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f000 facf 	bl	80019f4 <CODEC_IO_Write>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2281      	movs	r2, #129	; 0x81
 8001466:	2105      	movs	r1, #5
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fac3 	bl	80019f4 <CODEC_IO_Write>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2204      	movs	r2, #4
 800147e:	2106      	movs	r1, #6
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fab7 	bl	80019f4 <CODEC_IO_Write>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001490:	7afa      	ldrb	r2, [r7, #11]
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f964 	bl	8001764 <cs43l22_SetVolume>
 800149c:	4602      	mov	r2, r0
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80014a4:	89bb      	ldrh	r3, [r7, #12]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d023      	beq.n	80014f2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2206      	movs	r2, #6
 80014b0:	210f      	movs	r1, #15
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fa9e 	bl	80019f4 <CODEC_IO_Write>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	2124      	movs	r1, #36	; 0x24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fa92 	bl	80019f4 <CODEC_IO_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	2125      	movs	r1, #37	; 0x25
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fa86 	bl	80019f4 <CODEC_IO_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2200      	movs	r2, #0
 80014f8:	210a      	movs	r1, #10
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fa7a 	bl	80019f4 <CODEC_IO_Write>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4413      	add	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2204      	movs	r2, #4
 8001510:	210e      	movs	r1, #14
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fa6e 	bl	80019f4 <CODEC_IO_Write>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2200      	movs	r2, #0
 8001528:	2127      	movs	r1, #39	; 0x27
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fa62 	bl	80019f4 <CODEC_IO_Write>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	220f      	movs	r2, #15
 8001540:	211f      	movs	r1, #31
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fa56 	bl	80019f4 <CODEC_IO_Write>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4413      	add	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	220a      	movs	r2, #10
 8001558:	211a      	movs	r1, #26
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fa4a 	bl	80019f4 <CODEC_IO_Write>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	220a      	movs	r2, #10
 8001570:	211b      	movs	r1, #27
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fa3e 	bl	80019f4 <CODEC_IO_Write>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4413      	add	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001582:	697b      	ldr	r3, [r7, #20]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000364 	.word	0x20000364

08001590 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001594:	f000 fbf2 	bl	8001d7c <AUDIO_IO_DeInit>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80015a6:	f000 fbb3 	bl	8001d10 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fc3a 	bl	8001e2a <AUDIO_IO_Read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f023 0307 	bic.w	r3, r3, #7
 80015c0:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <cs43l22_Play+0x70>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d123      	bne.n	8001630 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2206      	movs	r2, #6
 80015ee:	210e      	movs	r1, #14
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f9ff 	bl	80019f4 <CODEC_IO_Write>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f919 	bl	800183c <cs43l22_SetMute>
 800160a:	4602      	mov	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	229e      	movs	r2, #158	; 0x9e
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f9ea 	bl	80019f4 <CODEC_IO_Write>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <cs43l22_Play+0x70>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001630:	68fb      	ldr	r3, [r7, #12]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000034 	.word	0x20000034

08001640 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f8f2 	bl	800183c <cs43l22_SetMute>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2201      	movs	r2, #1
 8001666:	2102      	movs	r1, #2
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f9c3 	bl	80019f4 <CODEC_IO_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f8ce 	bl	800183c <cs43l22_SetMute>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	e002      	b.n	80016b4 <cs43l22_Resume+0x30>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2bfe      	cmp	r3, #254	; 0xfe
 80016b8:	d9f9      	bls.n	80016ae <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <cs43l22_Resume+0x74>)
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	2104      	movs	r1, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f994 	bl	80019f4 <CODEC_IO_Write>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	229e      	movs	r2, #158	; 0x9e
 80016dc:	2102      	movs	r1, #2
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f988 	bl	80019f4 <CODEC_IO_Write>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000364 	.word	0x20000364

080016fc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	2101      	movs	r1, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f893 	bl	800183c <cs43l22_SetMute>
 8001716:	4602      	mov	r2, r0
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2204      	movs	r2, #4
 8001724:	210e      	movs	r1, #14
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f964 	bl	80019f4 <CODEC_IO_Write>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	229f      	movs	r2, #159	; 0x9f
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f958 	bl	80019f4 <CODEC_IO_Write>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <cs43l22_Stop+0x64>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001754:	68fb      	ldr	r3, [r7, #12]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000034 	.word	0x20000034

08001764 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001778:	797b      	ldrb	r3, [r7, #5]
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d80b      	bhi.n	8001796 <cs43l22_SetVolume+0x32>
 800177e:	797a      	ldrb	r2, [r7, #5]
 8001780:	4613      	mov	r3, r2
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	4a25      	ldr	r2, [pc, #148]	; (800181c <cs43l22_SetVolume+0xb8>)
 8001788:	fb82 1203 	smull	r1, r2, r2, r3
 800178c:	1152      	asrs	r2, r2, #5
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	e000      	b.n	8001798 <cs43l22_SetVolume+0x34>
 8001796:	23ff      	movs	r3, #255	; 0xff
 8001798:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	2be6      	cmp	r3, #230	; 0xe6
 800179e:	d91c      	bls.n	80017da <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2d8      	uxtb	r0, r3
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	3319      	adds	r3, #25
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	2120      	movs	r1, #32
 80017ae:	f000 f921 	bl	80019f4 <CODEC_IO_Write>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	b2d8      	uxtb	r0, r3
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	3319      	adds	r3, #25
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	2121      	movs	r1, #33	; 0x21
 80017ca:	f000 f913 	bl	80019f4 <CODEC_IO_Write>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e01b      	b.n	8001812 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	b2d8      	uxtb	r0, r3
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	3319      	adds	r3, #25
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	2120      	movs	r1, #32
 80017e8:	f000 f904 	bl	80019f4 <CODEC_IO_Write>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	b2d8      	uxtb	r0, r3
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	3319      	adds	r3, #25
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	2121      	movs	r1, #33	; 0x21
 8001804:	f000 f8f6 	bl	80019f4 <CODEC_IO_Write>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	51eb851f 	.word	0x51eb851f

08001820 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d124      	bne.n	800189c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f8ca 	bl	80019f4 <CODEC_IO_Write>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2201      	movs	r2, #1
 8001870:	2122      	movs	r1, #34	; 0x22
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f8be 	bl	80019f4 <CODEC_IO_Write>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2201      	movs	r2, #1
 8001888:	2123      	movs	r1, #35	; 0x23
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f8b2 	bl	80019f4 <CODEC_IO_Write>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e025      	b.n	80018e8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	2122      	movs	r1, #34	; 0x22
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8a5 	bl	80019f4 <CODEC_IO_Write>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2200      	movs	r2, #0
 80018ba:	2123      	movs	r1, #35	; 0x23
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f899 	bl	80019f4 <CODEC_IO_Write>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <cs43l22_SetMute+0xb8>)
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	2104      	movs	r1, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f88b 	bl	80019f4 <CODEC_IO_Write>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80018e8:	68fb      	ldr	r3, [r7, #12]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000364 	.word	0x20000364

080018f8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4613      	mov	r3, r2
 8001906:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	3b01      	subs	r3, #1
 8001910:	2b03      	cmp	r3, #3
 8001912:	d84b      	bhi.n	80019ac <cs43l22_SetOutputMode+0xb4>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <cs43l22_SetOutputMode+0x24>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800196d 	.word	0x0800196d
 8001928:	0800198d 	.word	0x0800198d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	22fa      	movs	r2, #250	; 0xfa
 8001932:	2104      	movs	r1, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f85d 	bl	80019f4 <CODEC_IO_Write>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <cs43l22_SetOutputMode+0xe0>)
 8001946:	22fa      	movs	r2, #250	; 0xfa
 8001948:	701a      	strb	r2, [r3, #0]
      break;
 800194a:	e03f      	b.n	80019cc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	22af      	movs	r2, #175	; 0xaf
 8001952:	2104      	movs	r1, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f84d 	bl	80019f4 <CODEC_IO_Write>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <cs43l22_SetOutputMode+0xe0>)
 8001966:	22af      	movs	r2, #175	; 0xaf
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e02f      	b.n	80019cc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	22aa      	movs	r2, #170	; 0xaa
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f83d 	bl	80019f4 <CODEC_IO_Write>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <cs43l22_SetOutputMode+0xe0>)
 8001986:	22aa      	movs	r2, #170	; 0xaa
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e01f      	b.n	80019cc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2205      	movs	r2, #5
 8001992:	2104      	movs	r1, #4
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f82d 	bl	80019f4 <CODEC_IO_Write>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <cs43l22_SetOutputMode+0xe0>)
 80019a6:	2205      	movs	r2, #5
 80019a8:	701a      	strb	r2, [r3, #0]
      break;    
 80019aa:	e00f      	b.n	80019cc <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2205      	movs	r2, #5
 80019b2:	2104      	movs	r1, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f81d 	bl	80019f4 <CODEC_IO_Write>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <cs43l22_SetOutputMode+0xe0>)
 80019c6:	2205      	movs	r2, #5
 80019c8:	701a      	strb	r2, [r3, #0]
      break;
 80019ca:	bf00      	nop
  }  
  return counter;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000364 	.word	0x20000364

080019dc <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	460b      	mov	r3, r1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001a0a:	797a      	ldrb	r2, [r7, #5]
 8001a0c:	79b9      	ldrb	r1, [r7, #6]
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f9f3 	bl	8001dfc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	b2db      	uxtb	r3, r3
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <I2C1_Init+0x50>)
 8001a2a:	f004 faf5 	bl	8006018 <HAL_I2C_GetState>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11d      	bne.n	8001a70 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <I2C1_Init+0x50>)
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <I2C1_Init+0x50>)
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <I2C1_Init+0x50>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <I2C1_Init+0x50>)
 8001a66:	f000 f80b 	bl	8001a80 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001a6a:	4802      	ldr	r0, [pc, #8]	; (8001a74 <I2C1_Init+0x50>)
 8001a6c:	f003 ffe8 	bl	8005a40 <HAL_I2C_Init>
  }
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000368 	.word	0x20000368
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	90112626 	.word	0x90112626

08001a80 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ae      	sub	sp, #184	; 0xb8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a39      	ldr	r2, [pc, #228]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001aa0:	f005 f836 	bl	8006b10 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <I2C1_MspInit+0xf8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d15e      	bne.n	8001b6c <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 fb15 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001af8:	2312      	movs	r3, #18
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4819      	ldr	r0, [pc, #100]	; (8001b7c <I2C1_MspInit+0xfc>)
 8001b18:	f003 fcc2 	bl	80054a0 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <I2C1_MspInit+0xf4>)
 8001b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	201f      	movs	r0, #31
 8001b52:	f003 f84c 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001b56:	201f      	movs	r0, #31
 8001b58:	f003 f865 	bl	8004c26 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2020      	movs	r0, #32
 8001b62:	f003 f844 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001b66:	2020      	movs	r0, #32
 8001b68:	f003 f85d 	bl	8004c26 <HAL_NVIC_EnableIRQ>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	37b8      	adds	r7, #184	; 0xb8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	48000400 	.word	0x48000400

08001b80 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <I2C1_DeInit+0x20>)
 8001b86:	f004 fa47 	bl	8006018 <HAL_I2C_GetState>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <I2C1_DeInit+0x20>)
 8001b92:	f003 ffe4 	bl	8005b5e <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <I2C1_DeInit+0x20>)
 8001b98:	f000 f804 	bl	8001ba4 <I2C1_MspDeInit>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000368 	.word	0x20000368

08001ba4 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <I2C1_MspDeInit+0xa0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d141      	bne.n	8001c3a <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001be6:	21c0      	movs	r1, #192	; 0xc0
 8001be8:	4818      	ldr	r0, [pc, #96]	; (8001c4c <I2C1_MspDeInit+0xa8>)
 8001bea:	f003 fe03 	bl	80057f4 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf8:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c04:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001c12:	201f      	movs	r0, #31
 8001c14:	f003 f815 	bl	8004c42 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001c18:	2020      	movs	r0, #32
 8001c1a:	f003 f812 	bl	8004c42 <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <I2C1_MspDeInit+0xa4>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001c36:	f004 ff7b 	bl	8006b30 <HAL_PWREx_DisableVddIO2>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005400 	.word	0x40005400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400

08001c50 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	4603      	mov	r3, r0
 8001c5a:	81fb      	strh	r3, [r7, #14]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	81bb      	strh	r3, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <I2C1_WriteBuffer+0x4c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	8978      	ldrh	r0, [r7, #10]
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	89f9      	ldrh	r1, [r7, #14]
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	8c3b      	ldrh	r3, [r7, #32]
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <I2C1_WriteBuffer+0x50>)
 8001c80:	f003 ff9c 	bl	8005bbc <HAL_I2C_Mem_Write>
 8001c84:	4603      	mov	r3, r0
 8001c86:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001c8e:	f000 f833 	bl	8001cf8 <I2C1_Error>
  }
  return status;
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000038 	.word	0x20000038
 8001ca0:	20000368 	.word	0x20000368

08001ca4 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	4603      	mov	r3, r0
 8001cae:	81fb      	strh	r3, [r7, #14]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	81bb      	strh	r3, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <I2C1_ReadBuffer+0x4c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	8978      	ldrh	r0, [r7, #10]
 8001cc2:	89ba      	ldrh	r2, [r7, #12]
 8001cc4:	89f9      	ldrh	r1, [r7, #14]
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	8c3b      	ldrh	r3, [r7, #32]
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <I2C1_ReadBuffer+0x50>)
 8001cd4:	f004 f886 	bl	8005de4 <HAL_I2C_Mem_Read>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001ce2:	f000 f809 	bl	8001cf8 <I2C1_Error>
  }
  return status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000038 	.word	0x20000038
 8001cf4:	20000368 	.word	0x20000368

08001cf8 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <I2C1_Error+0x14>)
 8001cfe:	f003 ff2e 	bl	8005b5e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001d02:	f7ff fe8f 	bl	8001a24 <I2C1_Init>
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000368 	.word	0x20000368

08001d10 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <AUDIO_IO_Init+0x64>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <AUDIO_IO_Init+0x64>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <AUDIO_IO_Init+0x64>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	480d      	ldr	r0, [pc, #52]	; (8001d78 <AUDIO_IO_Init+0x68>)
 8001d44:	f003 fbac 	bl	80054a0 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001d48:	f7ff fe6c 	bl	8001a24 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2108      	movs	r1, #8
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <AUDIO_IO_Init+0x68>)
 8001d52:	f003 fe43 	bl	80059dc <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001d56:	2005      	movs	r0, #5
 8001d58:	f001 fbce 	bl	80034f8 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2108      	movs	r1, #8
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <AUDIO_IO_Init+0x68>)
 8001d62:	f003 fe3b 	bl	80059dc <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001d66:	2005      	movs	r0, #5
 8001d68:	f001 fbc6 	bl	80034f8 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48001000 	.word	0x48001000

08001d7c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <AUDIO_IO_DeInit+0x78>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <AUDIO_IO_DeInit+0x78>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <AUDIO_IO_DeInit+0x78>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001d9e:	237c      	movs	r3, #124	; 0x7c
 8001da0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001da2:	2302      	movs	r3, #2
 8001da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4812      	ldr	r0, [pc, #72]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001db0:	f003 fb76 	bl	80054a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2104      	movs	r1, #4
 8001db8:	480f      	ldr	r0, [pc, #60]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001dba:	f003 fe0f 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001dc4:	f003 fe0a 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2110      	movs	r1, #16
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001dce:	f003 fe05 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	4808      	ldr	r0, [pc, #32]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001dd8:	f003 fe00 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <AUDIO_IO_DeInit+0x7c>)
 8001de2:	f003 fdfb 	bl	80059dc <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001de6:	f7ff fecb 	bl	8001b80 <I2C1_DeInit>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48001000 	.word	0x48001000

08001dfc <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	460b      	mov	r3, r1
 8001e08:	71bb      	strb	r3, [r7, #6]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	b298      	uxth	r0, r3
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	b299      	uxth	r1, r3
 8001e16:	1d7b      	adds	r3, r7, #5
 8001e18:	2201      	movs	r2, #1
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff ff17 	bl	8001c50 <I2C1_WriteBuffer>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af02      	add	r7, sp, #8
 8001e30:	4603      	mov	r3, r0
 8001e32:	460a      	mov	r2, r1
 8001e34:	71fb      	strb	r3, [r7, #7]
 8001e36:	4613      	mov	r3, r2
 8001e38:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	b298      	uxth	r0, r3
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	b299      	uxth	r1, r3
 8001e46:	f107 030f 	add.w	r3, r7, #15
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f7ff ff28 	bl	8001ca4 <I2C1_ReadBuffer>

  return Read_Value;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t Volume,
                           uint32_t AudioFreq)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	603a      	str	r2, [r7, #0]
 8001e6a:	80fb      	strh	r3, [r7, #6]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs43l22_drv;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <BSP_AUDIO_OUT_Init+0x8c>)
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <BSP_AUDIO_OUT_Init+0x90>)
 8001e74:	601a      	str	r2, [r3, #0]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <BSP_AUDIO_OUT_Init+0x8c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <BSP_AUDIO_OUT_Init+0x8c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <BSP_AUDIO_OUT_Init+0x8c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]

  /* Configure the SAI PLL according to the requested audio frequency */
  if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f000 fa59 	bl	8002340 <AUDIO_SAIPLLConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <BSP_AUDIO_OUT_Init+0x38>
  {
    return AUDIO_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e024      	b.n	8001ee2 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* SAI data transfer preparation: prepare the Media to be used for the audio
     transfer from memory to SAI peripheral. */
  if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f000 f8eb 	bl	8002074 <AUDIO_SAIx_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <BSP_AUDIO_OUT_Init+0x48>
  {
    return AUDIO_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e01c      	b.n	8001ee2 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Retrieve audio codec identifier */
  if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) != CS43L22_ID)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <BSP_AUDIO_OUT_Init+0x90>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2094      	movs	r0, #148	; 0x94
 8001eae:	4798      	blx	r3
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2be0      	cmp	r3, #224	; 0xe0
 8001eb4:	d001      	beq.n	8001eba <BSP_AUDIO_OUT_Init+0x5a>
  {
    return AUDIO_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e013      	b.n	8001ee2 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Reset the audio codec Registers */
  AUDIO_CODEC_Reset();
 8001eba:	f000 f9fb 	bl	80022b4 <AUDIO_CODEC_Reset>

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <BSP_AUDIO_OUT_Init+0x8c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681c      	ldr	r4, [r3, #0]
 8001ec4:	797a      	ldrb	r2, [r7, #5]
 8001ec6:	88f9      	ldrh	r1, [r7, #6]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2094      	movs	r0, #148	; 0x94
 8001ecc:	47a0      	blx	r4
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <BSP_AUDIO_OUT_Init+0x78>
                               OutputDevice,
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e004      	b.n	8001ee2 <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Set the requested volume */
  BSP_AUDIO_OUT_SetVolume(Volume);
 8001ed8:	797b      	ldrb	r3, [r7, #5]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f864 	bl	8001fa8 <BSP_AUDIO_OUT_SetVolume>

  return AUDIO_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000b024 	.word	0x2000b024
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data BYTES.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */

	BSP_QSPI_Read(Music_buffor,(uint32_t) pData, DMA_MAX(Size));
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f06:	4293      	cmp	r3, r2
 8001f08:	bf28      	it	cs
 8001f0a:	4613      	movcs	r3, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4813      	ldr	r0, [pc, #76]	; (8001f5c <BSP_AUDIO_OUT_Play+0x68>)
 8001f10:	f001 f8a0 	bl	8003054 <BSP_QSPI_Read>
	if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai, Music_buffor ,DMA_MAX(Size)) != HAL_OK)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	bf28      	it	cs
 8001f1e:	4613      	movcs	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	490d      	ldr	r1, [pc, #52]	; (8001f5c <BSP_AUDIO_OUT_Play+0x68>)
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <BSP_AUDIO_OUT_Play+0x6c>)
 8001f28:	f008 f806 	bl	8009f38 <HAL_SAI_Transmit_DMA>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <BSP_AUDIO_OUT_Play+0x42>
	{
		return AUDIO_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00d      	b.n	8001f52 <BSP_AUDIO_OUT_Play+0x5e>
	}

  /* Call the audio Codec Play function */
	if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) Music_buffor, Size) != 0)
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <BSP_AUDIO_OUT_Play+0x70>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <BSP_AUDIO_OUT_Play+0x68>)
 8001f42:	2094      	movs	r0, #148	; 0x94
 8001f44:	4798      	blx	r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <BSP_AUDIO_OUT_Play+0x5c>
	{
		return AUDIO_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <BSP_AUDIO_OUT_Play+0x5e>
	}

	return AUDIO_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003b4 	.word	0x200003b4
 8001f60:	2000b07c 	.word	0x2000b07c
 8001f64:	2000b024 	.word	0x2000b024

08001f68 <BSP_AUDIO_OUT_ChangeBuffer>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: number of data to be written
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */

	BSP_QSPI_Read(Music_buffor, (uint32_t)pData, Size);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <BSP_AUDIO_OUT_ChangeBuffer+0x38>)
 8001f7c:	f001 f86a 	bl	8003054 <BSP_QSPI_Read>
	if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai, Music_buffor, Size) != HAL_OK)
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <BSP_AUDIO_OUT_ChangeBuffer+0x38>)
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <BSP_AUDIO_OUT_ChangeBuffer+0x3c>)
 8001f88:	f007 ffd6 	bl	8009f38 <HAL_SAI_Transmit_DMA>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <BSP_AUDIO_OUT_ChangeBuffer+0x2e>
	{
		return AUDIO_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <BSP_AUDIO_OUT_ChangeBuffer+0x30>
	}

  return AUDIO_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200003b4 	.word	0x200003b4
 8001fa4:	2000b07c 	.word	0x2000b07c

08001fa8 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (hAudioOut.AudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	2094      	movs	r0, #148	; 0x94
 8001fbe:	4798      	blx	r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <BSP_AUDIO_OUT_SetVolume+0x24>
  }

  return AUDIO_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000b024 	.word	0x2000b024

08001fd8 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6053      	str	r3, [r2, #4]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 8001fea:	4a06      	ldr	r2, [pc, #24]	; (8002004 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6093      	str	r3, [r2, #8]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60d3      	str	r3, [r2, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000b024 	.word	0x2000b024

08002008 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'TransferComplete' function (if any) */
  if (hAudioOut.CbTransferComplete != (Audio_CallbackTypeDef)NULL)
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_SAI_TxCpltCallback+0x20>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_SAI_TxCpltCallback+0x16>
  {
    hAudioOut.CbTransferComplete();
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_SAI_TxCpltCallback+0x20>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4798      	blx	r3
  }
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000b024 	.word	0x2000b024

0800202c <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_SAI_TxHalfCpltCallback+0x20>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_SAI_TxHalfCpltCallback+0x20>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4798      	blx	r3
  }
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000b024 	.word	0x2000b024

08002050 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_SAI_ErrorCallback+0x20>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_SAI_ErrorCallback+0x20>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4798      	blx	r3
  }
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000b024 	.word	0x2000b024

08002074 <AUDIO_SAIx_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai);
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800208a:	601a      	str	r2, [r3, #0]

  /* Initialize the BSP_AUDIO_hSai Instance parameter */
  BSP_AUDIO_hSai.Instance = AUDIO_SAIx;
 800208c:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800208e:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <AUDIO_SAIx_Init+0x140>)
 8002090:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8002098:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80020c4:	d029      	beq.n	800211a <AUDIO_SAIx_Init+0xa6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <AUDIO_SAIx_Init+0xa2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80020d6:	d01c      	beq.n	8002112 <AUDIO_SAIx_Init+0x9e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f245 6222 	movw	r2, #22050	; 0x5622
 80020de:	4293      	cmp	r3, r2
 80020e0:	d015      	beq.n	800210e <AUDIO_SAIx_Init+0x9a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80020e8:	d00f      	beq.n	800210a <AUDIO_SAIx_Init+0x96>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d008      	beq.n	8002106 <AUDIO_SAIx_Init+0x92>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <AUDIO_SAIx_Init+0x8e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e00c      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 8002102:	2301      	movs	r3, #1
 8002104:	e00a      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 8002106:	2300      	movs	r3, #0
 8002108:	e008      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 800210a:	2303      	movs	r3, #3
 800210c:	e006      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 800210e:	2301      	movs	r3, #1
 8002110:	e004      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 8002112:	2306      	movs	r3, #6
 8002114:	e002      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 8002116:	2302      	movs	r3, #2
 8002118:	e000      	b.n	800211c <AUDIO_SAIx_Init+0xa8>
 800211a:	230c      	movs	r3, #12
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800211e:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002128:	2200      	movs	r2, #0
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800212e:	2200      	movs	r2, #0
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai.Init.DataSize       = SAI_DATASIZE_16;
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002146:	2200      	movs	r2, #0
 8002148:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai.FrameInit.FrameLength = 32;
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800214c:	2220      	movs	r2, #32
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai.FrameInit.ActiveFrameLength = 16;
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002152:	2210      	movs	r2, #16
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800215c:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002160:	2200      	movs	r2, #0
 8002162:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002166:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800216a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai.SlotInit.FirstBitOffset = 0;
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002174:	2200      	movs	r2, #0
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai.SlotInit.SlotNumber = 2;
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800217a:	2202      	movs	r2, #2
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002180:	2203      	movs	r2, #3
 8002182:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai) != HAL_OK)
 8002184:	480a      	ldr	r0, [pc, #40]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002186:	f007 fcff 	bl	8009b88 <HAL_SAI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <AUDIO_SAIx_Init+0x120>
  {
    return AUDIO_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e008      	b.n	80021a6 <AUDIO_SAIx_Init+0x132>
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai);
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <AUDIO_SAIx_Init+0x13c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a2:	601a      	str	r2, [r3, #0]

  return AUDIO_OK;
 80021a4:	2300      	movs	r3, #0

}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000b07c 	.word	0x2000b07c
 80021b4:	40015404 	.word	0x40015404

080021b8 <HAL_SAI_MspInit>:
  * @brief  SAI MSP Init
  * @param  hsai : pointer to a SAI_HandleTypeDef structure
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable SAI clock */
  AUDIO_SAIx_CLK_ENABLE();
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	4a36      	ldr	r2, [pc, #216]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ca:	6613      	str	r3, [r2, #96]	; 0x60
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_SAIx_MCK_SCK_SD_FS_ENABLE();
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021de:	f043 0310 	orr.w	r3, r3, #16
 80021e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_SAIx_FS_PIN | AUDIO_SAIx_SCK_PIN | AUDIO_SAIx_SD_PIN | AUDIO_SAIx_MCK_PIN;
 80021f0:	2374      	movs	r3, #116	; 0x74
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_SAIx_MCK_SCK_SD_FS_AF;
 8002200:	230d      	movs	r3, #13
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_SAIx_MCK_SCK_SD_FS_GPIO_PORT, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4826      	ldr	r0, [pc, #152]	; (80022a4 <HAL_SAI_MspInit+0xec>)
 800220c:	f003 f948 	bl	80054a0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_SAIx_DMAx_CLK_ENABLE();
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	6493      	str	r3, [r2, #72]	; 0x48
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_SAI_MspInit+0xe8>)
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

  if (hsai->Instance == AUDIO_SAIx)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_SAI_MspInit+0xf0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d129      	bne.n	8002286 <HAL_SAI_MspInit+0xce>
  {
    /* Configure the hDmaSai handle parameters */
    hDmaSai.Init.Request             = DMA_REQUEST_1;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002234:	2201      	movs	r2, #1
 8002236:	605a      	str	r2, [r3, #4]
    hDmaSai.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 800223a:	2210      	movs	r2, #16
 800223c:	609a      	str	r2, [r3, #8]
    hDmaSai.Init.PeriphInc           = DMA_PINC_DISABLE;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
    hDmaSai.Init.MemInc              = DMA_MINC_ENABLE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	611a      	str	r2, [r3, #16]
    hDmaSai.Init.PeriphDataAlignment = AUDIO_SAIx_DMAx_PERIPH_DATA_SIZE;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 800224c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002250:	615a      	str	r2, [r3, #20]
    hDmaSai.Init.MemDataAlignment    = AUDIO_SAIx_DMAx_MEM_DATA_SIZE;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002258:	619a      	str	r2, [r3, #24]
    hDmaSai.Init.Mode                = DMA_NORMAL;
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
    hDmaSai.Init.Priority            = DMA_PRIORITY_HIGH;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002266:	621a      	str	r2, [r3, #32]

    hDmaSai.Instance = AUDIO_SAIx_DMAx_CHANNEL;
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_SAI_MspInit+0xf8>)
 800226c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hDmaSai);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002272:	66da      	str	r2, [r3, #108]	; 0x6c
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6293      	str	r3, [r2, #40]	; 0x28

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hDmaSai);
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 800227c:	f002 fec0 	bl	8005000 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hDmaSai);
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <HAL_SAI_MspInit+0xf4>)
 8002282:	f002 fe05 	bl	8004e90 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2105      	movs	r1, #5
 800228a:	2038      	movs	r0, #56	; 0x38
 800228c:	f002 fcaf 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_SAIx_DMAx_IRQ);
 8002290:	2038      	movs	r0, #56	; 0x38
 8002292:	f002 fcc8 	bl	8004c26 <HAL_NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	48001000 	.word	0x48001000
 80022a8:	40015404 	.word	0x40015404
 80022ac:	2000b034 	.word	0x2000b034
 80022b0:	40020408 	.word	0x40020408

080022b4 <AUDIO_CODEC_Reset>:
  * @brief  Resets the audio codec. It restores the default configuration of the
  *         codec (this function shall be called before initializing the codec).
  * @retval None
  */
static void AUDIO_CODEC_Reset(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Initialize the audio driver structure */
  hAudioOut.AudioDrv = &cs43l22_drv;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <AUDIO_CODEC_Reset+0x18>)
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <AUDIO_CODEC_Reset+0x1c>)
 80022bc:	601a      	str	r2, [r3, #0]

  hAudioOut.AudioDrv->Reset(AUDIO_I2C_ADDRESS);
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <AUDIO_CODEC_Reset+0x18>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2094      	movs	r0, #148	; 0x94
 80022c6:	4798      	blx	r3
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000b024 	.word	0x2000b024
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initializes the DFSDM channel MSP.
  * @param  hdfsdm_channel : DFSDM channel handle.
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6613      	str	r3, [r2, #96]	; 0x60
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_CLK_ENABLE();
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_DFSDM_ChannelMspInit+0x64>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN | AUDIO_DFSDMx_DMIC_DATIN_PIN;
 800230c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_DMIC_DATIN_AF;
 800231e:	2306      	movs	r3, #6
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4804      	ldr	r0, [pc, #16]	; (800233c <HAL_DFSDM_ChannelMspInit+0x68>)
 800232a:	f003 f8b9 	bl	80054a0 <HAL_GPIO_Init>
}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	48001000 	.word	0x48001000

08002340 <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0a4      	sub	sp, #144	; 0x90
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	4618      	mov	r0, r3
 800234e:	f006 f9b7 	bl	80086c0 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002358:	4293      	cmp	r3, r2
 800235a:	d009      	beq.n	8002370 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f64a 4244 	movw	r2, #44100	; 0xac44
 800236c:	4293      	cmp	r3, r2
 800236e:	d10c      	bne.n	800238a <AUDIO_SAIPLLConfig+0x4a>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8002370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002374:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 24;
 8002376:	2318      	movs	r3, #24
 8002378:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 800237a:	2311      	movs	r3, #17
 800237c:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800237e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002384:	2300      	movs	r3, #0
 8002386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002388:	e00b      	b.n	80023a2 <AUDIO_SAIPLLConfig+0x62>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800238a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800238e:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 43;
 8002390:	232b      	movs	r3, #43	; 0x2b
 8002392:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 8002394:	2307      	movs	r3, #7
 8002396:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8002398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 800239e:	2300      	movs	r3, #0
 80023a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 fea0 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <AUDIO_SAIPLLConfig+0x76>
  {
    return AUDIO_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <AUDIO_SAIPLLConfig+0x78>
  }

  return AUDIO_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3790      	adds	r7, #144	; 0x90
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <BSP_LCD_GLASS_Init+0x70>)
 80023c8:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023d6:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80023f0:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 8002400:	2200      	movs	r2, #0
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 8002406:	2200      	movs	r2, #0
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 800240c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 800241a:	f000 f839 	bl	8002490 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <BSP_LCD_GLASS_Init+0x6c>)
 8002420:	f004 f946 	bl	80066b0 <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8002424:	f000 f82a 	bl	800247c <BSP_LCD_GLASS_Clear>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000b100 	.word	0x2000b100
 8002430:	40002400 	.word	0x40002400

08002434 <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8002440:	e00b      	b.n	800245a <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fa2d 	bl	80028a8 <WriteChar>

    /* Point on the next character */
    ptr++;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3301      	adds	r3, #1
 8002452:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	3301      	adds	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <BSP_LCD_GLASS_DisplayString+0x34>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d9ec      	bls.n	8002442 <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <BSP_LCD_GLASS_DisplayString+0x44>)
 800246a:	f004 fa92 	bl	8006992 <HAL_LCD_UpdateDisplayRequest>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000b100 	.word	0x2000b100

0800247c <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <BSP_LCD_GLASS_Clear+0x10>)
 8002482:	f004 fa30 	bl	80068e6 <HAL_LCD_Clear>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000b100 	.word	0x2000b100

08002490 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0c0      	sub	sp, #256	; 0x100
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002498:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80024a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024ac:	2244      	movs	r2, #68	; 0x44
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f008 feb3 	bl	800b21c <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	2288      	movs	r2, #136	; 0x88
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 feac 	bl	800b21c <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <LCD_MspInit+0x17c>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a50      	ldr	r2, [pc, #320]	; (800260c <LCD_MspInit+0x17c>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <LCD_MspInit+0x17c>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80024dc:	2304      	movs	r3, #4
 80024de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80024ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 f80c 	bl	8007510 <HAL_RCC_OscConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <LCD_MspInit+0x70>
  {
    while (1);
 80024fe:	e7fe      	b.n	80024fe <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002504:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fdea 	bl	80080ec <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <LCD_MspInit+0x17c>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	4a3b      	ldr	r2, [pc, #236]	; (800260c <LCD_MspInit+0x17c>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <LCD_MspInit+0x17c>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <LCD_MspInit+0x17c>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	4a35      	ldr	r2, [pc, #212]	; (800260c <LCD_MspInit+0x17c>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <LCD_MspInit+0x17c>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <LCD_MspInit+0x17c>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <LCD_MspInit+0x17c>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <LCD_MspInit+0x17c>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <LCD_MspInit+0x17c>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <LCD_MspInit+0x17c>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <LCD_MspInit+0x17c>)
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002578:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800257c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8002592:	230b      	movs	r3, #11
 8002594:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002598:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800259c:	4619      	mov	r1, r3
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f002 ff7d 	bl	80054a0 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80025a6:	f24f 2333 	movw	r3, #62003	; 0xf233
 80025aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80025ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025b2:	4619      	mov	r1, r3
 80025b4:	4816      	ldr	r0, [pc, #88]	; (8002610 <LCD_MspInit+0x180>)
 80025b6:	f002 ff73 	bl	80054a0 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80025ba:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80025be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80025c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c6:	4619      	mov	r1, r3
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <LCD_MspInit+0x184>)
 80025ca:	f002 ff69 	bl	80054a0 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80025ce:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80025d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80025d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025da:	4619      	mov	r1, r3
 80025dc:	480e      	ldr	r0, [pc, #56]	; (8002618 <LCD_MspInit+0x188>)
 80025de:	f002 ff5f 	bl	80054a0 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80025e2:	2002      	movs	r0, #2
 80025e4:	f000 ff88 	bl	80034f8 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <LCD_MspInit+0x17c>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <LCD_MspInit+0x17c>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <LCD_MspInit+0x17c>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
}
 8002600:	bf00      	nop
 8002602:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	48000400 	.word	0x48000400
 8002614:	48000800 	.word	0x48000800
 8002618:	48000c00 	.word	0x48000c00

0800261c <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
 8002628:	4613      	mov	r3, r2
 800262a:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 800262c:	2300      	movs	r3, #0
 800262e:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	737b      	strb	r3, [r7, #13]
 8002634:	2300      	movs	r3, #0
 8002636:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b6e      	cmp	r3, #110	; 0x6e
 800263e:	f300 80a9 	bgt.w	8002794 <Convert+0x178>
 8002642:	2b20      	cmp	r3, #32
 8002644:	f2c0 80dd 	blt.w	8002802 <Convert+0x1e6>
 8002648:	3b20      	subs	r3, #32
 800264a:	2b4e      	cmp	r3, #78	; 0x4e
 800264c:	f200 80d9 	bhi.w	8002802 <Convert+0x1e6>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <Convert+0x3c>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	0800279b 	.word	0x0800279b
 800265c:	08002803 	.word	0x08002803
 8002660:	08002803 	.word	0x08002803
 8002664:	08002803 	.word	0x08002803
 8002668:	08002803 	.word	0x08002803
 800266c:	080027e3 	.word	0x080027e3
 8002670:	08002803 	.word	0x08002803
 8002674:	08002803 	.word	0x08002803
 8002678:	080027a9 	.word	0x080027a9
 800267c:	080027af 	.word	0x080027af
 8002680:	080027a1 	.word	0x080027a1
 8002684:	080027d5 	.word	0x080027d5
 8002688:	08002803 	.word	0x08002803
 800268c:	080027cd 	.word	0x080027cd
 8002690:	08002803 	.word	0x08002803
 8002694:	080027dd 	.word	0x080027dd
 8002698:	080027f3 	.word	0x080027f3
 800269c:	080027f3 	.word	0x080027f3
 80026a0:	080027f3 	.word	0x080027f3
 80026a4:	080027f3 	.word	0x080027f3
 80026a8:	080027f3 	.word	0x080027f3
 80026ac:	080027f3 	.word	0x080027f3
 80026b0:	080027f3 	.word	0x080027f3
 80026b4:	080027f3 	.word	0x080027f3
 80026b8:	080027f3 	.word	0x080027f3
 80026bc:	080027f3 	.word	0x080027f3
 80026c0:	08002803 	.word	0x08002803
 80026c4:	08002803 	.word	0x08002803
 80026c8:	08002803 	.word	0x08002803
 80026cc:	08002803 	.word	0x08002803
 80026d0:	08002803 	.word	0x08002803
 80026d4:	08002803 	.word	0x08002803
 80026d8:	08002803 	.word	0x08002803
 80026dc:	08002803 	.word	0x08002803
 80026e0:	08002803 	.word	0x08002803
 80026e4:	08002803 	.word	0x08002803
 80026e8:	08002803 	.word	0x08002803
 80026ec:	08002803 	.word	0x08002803
 80026f0:	08002803 	.word	0x08002803
 80026f4:	08002803 	.word	0x08002803
 80026f8:	08002803 	.word	0x08002803
 80026fc:	08002803 	.word	0x08002803
 8002700:	08002803 	.word	0x08002803
 8002704:	08002803 	.word	0x08002803
 8002708:	08002803 	.word	0x08002803
 800270c:	08002803 	.word	0x08002803
 8002710:	08002803 	.word	0x08002803
 8002714:	08002803 	.word	0x08002803
 8002718:	08002803 	.word	0x08002803
 800271c:	08002803 	.word	0x08002803
 8002720:	08002803 	.word	0x08002803
 8002724:	08002803 	.word	0x08002803
 8002728:	08002803 	.word	0x08002803
 800272c:	08002803 	.word	0x08002803
 8002730:	08002803 	.word	0x08002803
 8002734:	08002803 	.word	0x08002803
 8002738:	08002803 	.word	0x08002803
 800273c:	08002803 	.word	0x08002803
 8002740:	08002803 	.word	0x08002803
 8002744:	08002803 	.word	0x08002803
 8002748:	08002803 	.word	0x08002803
 800274c:	08002803 	.word	0x08002803
 8002750:	08002803 	.word	0x08002803
 8002754:	08002803 	.word	0x08002803
 8002758:	08002803 	.word	0x08002803
 800275c:	08002803 	.word	0x08002803
 8002760:	08002803 	.word	0x08002803
 8002764:	08002803 	.word	0x08002803
 8002768:	080027b5 	.word	0x080027b5
 800276c:	08002803 	.word	0x08002803
 8002770:	08002803 	.word	0x08002803
 8002774:	08002803 	.word	0x08002803
 8002778:	08002803 	.word	0x08002803
 800277c:	08002803 	.word	0x08002803
 8002780:	08002803 	.word	0x08002803
 8002784:	08002803 	.word	0x08002803
 8002788:	08002803 	.word	0x08002803
 800278c:	080027bd 	.word	0x080027bd
 8002790:	080027c5 	.word	0x080027c5
 8002794:	2bff      	cmp	r3, #255	; 0xff
 8002796:	d028      	beq.n	80027ea <Convert+0x1ce>
 8002798:	e033      	b.n	8002802 <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	81fb      	strh	r3, [r7, #14]
      break;
 800279e:	e04f      	b.n	8002840 <Convert+0x224>

    case '*':
      ch = C_STAR;
 80027a0:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 80027a4:	81fb      	strh	r3, [r7, #14]
      break;
 80027a6:	e04b      	b.n	8002840 <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 80027a8:	2328      	movs	r3, #40	; 0x28
 80027aa:	81fb      	strh	r3, [r7, #14]
      break;
 80027ac:	e048      	b.n	8002840 <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 80027ae:	2311      	movs	r3, #17
 80027b0:	81fb      	strh	r3, [r7, #14]
      break;
 80027b2:	e045      	b.n	8002840 <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 80027b4:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80027b8:	81fb      	strh	r3, [r7, #14]
      break;
 80027ba:	e041      	b.n	8002840 <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 80027bc:	f24b 2310 	movw	r3, #45584	; 0xb210
 80027c0:	81fb      	strh	r3, [r7, #14]
      break;
 80027c2:	e03d      	b.n	8002840 <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 80027c4:	f242 2310 	movw	r3, #8720	; 0x2210
 80027c8:	81fb      	strh	r3, [r7, #14]
      break;
 80027ca:	e039      	b.n	8002840 <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 80027cc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027d0:	81fb      	strh	r3, [r7, #14]
      break;
 80027d2:	e035      	b.n	8002840 <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 80027d4:	f24a 0314 	movw	r3, #40980	; 0xa014
 80027d8:	81fb      	strh	r3, [r7, #14]
      break;
 80027da:	e031      	b.n	8002840 <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	81fb      	strh	r3, [r7, #14]
      break;
 80027e0:	e02e      	b.n	8002840 <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 80027e2:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 80027e6:	81fb      	strh	r3, [r7, #14]
      break;
 80027e8:	e02a      	b.n	8002840 <Convert+0x224>
    case 255 :
      ch = C_FULL;
 80027ea:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 80027ee:	81fb      	strh	r3, [r7, #14]
      break ;
 80027f0:	e026      	b.n	8002840 <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	3b30      	subs	r3, #48	; 0x30
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <Convert+0x280>)
 80027fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027fe:	81fb      	strh	r3, [r7, #14]
      break;
 8002800:	e01e      	b.n	8002840 <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b5a      	cmp	r3, #90	; 0x5a
 8002808:	d80a      	bhi.n	8002820 <Convert+0x204>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d906      	bls.n	8002820 <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3b41      	subs	r3, #65	; 0x41
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <Convert+0x284>)
 800281a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800281e:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b7a      	cmp	r3, #122	; 0x7a
 8002826:	d80a      	bhi.n	800283e <Convert+0x222>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d906      	bls.n	800283e <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	3b61      	subs	r3, #97	; 0x61
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <Convert+0x284>)
 8002838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283c:	81fb      	strh	r3, [r7, #14]
      }
      break;
 800283e:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d103      	bne.n	800284e <Convert+0x232>
  {
    ch |= 0x0002;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 800284e:	78bb      	ldrb	r3, [r7, #2]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d103      	bne.n	800285c <Convert+0x240>
  {
    ch |= 0x0020;
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 800285c:	230c      	movs	r3, #12
 800285e:	737b      	strb	r3, [r7, #13]
 8002860:	2300      	movs	r3, #0
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	e010      	b.n	8002888 <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8002866:	89fa      	ldrh	r2, [r7, #14]
 8002868:	7b7b      	ldrb	r3, [r7, #13]
 800286a:	fa42 f303 	asr.w	r3, r2, r3
 800286e:	461a      	mov	r2, r3
 8002870:	7b3b      	ldrb	r3, [r7, #12]
 8002872:	f002 020f 	and.w	r2, r2, #15
 8002876:	490b      	ldr	r1, [pc, #44]	; (80028a4 <Convert+0x288>)
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 800287c:	7b7b      	ldrb	r3, [r7, #13]
 800287e:	3b04      	subs	r3, #4
 8002880:	737b      	strb	r3, [r7, #13]
 8002882:	7b3b      	ldrb	r3, [r7, #12]
 8002884:	3301      	adds	r3, #1
 8002886:	733b      	strb	r3, [r7, #12]
 8002888:	7b3b      	ldrb	r3, [r7, #12]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d9eb      	bls.n	8002866 <Convert+0x24a>
  }
}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	0800b2d8 	.word	0x0800b2d8
 80028a0:	0800b2a4 	.word	0x0800b2a4
 80028a4:	2000b13c 	.word	0x2000b13c

080028a8 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	70fb      	strb	r3, [r7, #3]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70bb      	strb	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 80028c6:	78ba      	ldrb	r2, [r7, #2]
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fea5 	bl	800261c <Convert>

  switch (Position)
 80028d2:	787b      	ldrb	r3, [r7, #1]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	f200 835b 	bhi.w	8002f90 <WriteChar+0x6e8>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <WriteChar+0x38>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	080028f9 	.word	0x080028f9
 80028e4:	080029f3 	.word	0x080029f3
 80028e8:	08002b0d 	.word	0x08002b0d
 80028ec:	08002c0f 	.word	0x08002c0f
 80028f0:	08002d3d 	.word	0x08002d3d
 80028f4:	08002e87 	.word	0x08002e87
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <WriteChar+0x254>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	f003 0210 	and.w	r2, r3, #16
 8002902:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <WriteChar+0x254>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	05db      	lsls	r3, r3, #23
 800290a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290e:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002910:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <WriteChar+0x254>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	059b      	lsls	r3, r3, #22
 8002918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291c:	431a      	orrs	r2, r3
 800291e:	4b77      	ldr	r3, [pc, #476]	; (8002afc <WriteChar+0x254>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a74      	ldr	r2, [pc, #464]	; (8002b00 <WriteChar+0x258>)
 800292e:	2100      	movs	r1, #0
 8002930:	4874      	ldr	r0, [pc, #464]	; (8002b04 <WriteChar+0x25c>)
 8002932:	f003 ff7d 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002936:	4b71      	ldr	r3, [pc, #452]	; (8002afc <WriteChar+0x254>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	f003 0210 	and.w	r2, r3, #16
 8002940:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <WriteChar+0x254>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294c:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800294e:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <WriteChar+0x254>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	059b      	lsls	r3, r3, #22
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	431a      	orrs	r2, r3
 800295c:	4b67      	ldr	r3, [pc, #412]	; (8002afc <WriteChar+0x254>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <WriteChar+0x258>)
 800296c:	2102      	movs	r1, #2
 800296e:	4865      	ldr	r0, [pc, #404]	; (8002b04 <WriteChar+0x25c>)
 8002970:	f003 ff5e 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <WriteChar+0x254>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	f003 0210 	and.w	r2, r3, #16
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <WriteChar+0x254>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	05db      	lsls	r3, r3, #23
 8002986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298a:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <WriteChar+0x254>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	059b      	lsls	r3, r3, #22
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	431a      	orrs	r2, r3
 800299a:	4b58      	ldr	r3, [pc, #352]	; (8002afc <WriteChar+0x254>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <WriteChar+0x258>)
 80029aa:	2104      	movs	r1, #4
 80029ac:	4855      	ldr	r0, [pc, #340]	; (8002b04 <WriteChar+0x25c>)
 80029ae:	f003 ff3f 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <WriteChar+0x254>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	f003 0210 	and.w	r2, r3, #16
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <WriteChar+0x254>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	05db      	lsls	r3, r3, #23
 80029c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c8:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <WriteChar+0x254>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	059b      	lsls	r3, r3, #22
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	431a      	orrs	r2, r3
 80029d8:	4b48      	ldr	r3, [pc, #288]	; (8002afc <WriteChar+0x254>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <WriteChar+0x258>)
 80029e8:	2106      	movs	r1, #6
 80029ea:	4846      	ldr	r0, [pc, #280]	; (8002b04 <WriteChar+0x25c>)
 80029ec:	f003 ff20 	bl	8006830 <HAL_LCD_Write>
      break;
 80029f0:	e2cf      	b.n	8002f92 <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <WriteChar+0x254>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	019b      	lsls	r3, r3, #6
 80029f8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <WriteChar+0x254>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	035b      	lsls	r3, r3, #13
 8002a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a08:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <WriteChar+0x254>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	031b      	lsls	r3, r3, #12
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	431a      	orrs	r2, r3
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <WriteChar+0x254>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <WriteChar+0x260>)
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4835      	ldr	r0, [pc, #212]	; (8002b04 <WriteChar+0x25c>)
 8002a30:	f003 fefe 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <WriteChar+0x254>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <WriteChar+0x254>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	035b      	lsls	r3, r3, #13
 8002a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4a:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <WriteChar+0x254>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <WriteChar+0x254>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	015b      	lsls	r3, r3, #5
 8002a62:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <WriteChar+0x260>)
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4824      	ldr	r0, [pc, #144]	; (8002b04 <WriteChar+0x25c>)
 8002a72:	f003 fedd 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <WriteChar+0x254>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	019b      	lsls	r3, r3, #6
 8002a7c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <WriteChar+0x254>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	035b      	lsls	r3, r3, #13
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <WriteChar+0x254>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	031b      	lsls	r3, r3, #12
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <WriteChar+0x254>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	015b      	lsls	r3, r3, #5
 8002aa4:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <WriteChar+0x260>)
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4814      	ldr	r0, [pc, #80]	; (8002b04 <WriteChar+0x25c>)
 8002ab4:	f003 febc 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <WriteChar+0x254>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <WriteChar+0x254>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	035b      	lsls	r3, r3, #13
 8002aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ace:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <WriteChar+0x254>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002adc:	431a      	orrs	r2, r3
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <WriteChar+0x254>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	015b      	lsls	r3, r3, #5
 8002ae6:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <WriteChar+0x260>)
 8002af2:	2106      	movs	r1, #6
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <WriteChar+0x25c>)
 8002af6:	f003 fe9b 	bl	8006830 <HAL_LCD_Write>
      break;
 8002afa:	e24a      	b.n	8002f92 <WriteChar+0x6ea>
 8002afc:	2000b13c 	.word	0x2000b13c
 8002b00:	ff3fffe7 	.word	0xff3fffe7
 8002b04:	2000b100 	.word	0x2000b100
 8002b08:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <WriteChar+0x488>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	03db      	lsls	r3, r3, #15
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b86      	ldr	r3, [pc, #536]	; (8002d30 <WriteChar+0x488>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	075b      	lsls	r3, r3, #29
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b20:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002b22:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <WriteChar+0x488>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <WriteChar+0x488>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	039b      	lsls	r3, r3, #14
 8002b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a7c      	ldr	r2, [pc, #496]	; (8002d34 <WriteChar+0x48c>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	487c      	ldr	r0, [pc, #496]	; (8002d38 <WriteChar+0x490>)
 8002b48:	f003 fe72 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b4c:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <WriteChar+0x488>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	03db      	lsls	r3, r3, #15
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <WriteChar+0x488>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	075b      	lsls	r3, r3, #29
 8002b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b60:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002b62:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <WriteChar+0x488>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <WriteChar+0x488>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	039b      	lsls	r3, r3, #14
 8002b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a6c      	ldr	r2, [pc, #432]	; (8002d34 <WriteChar+0x48c>)
 8002b84:	2102      	movs	r1, #2
 8002b86:	486c      	ldr	r0, [pc, #432]	; (8002d38 <WriteChar+0x490>)
 8002b88:	f003 fe52 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <WriteChar+0x488>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	03db      	lsls	r3, r3, #15
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <WriteChar+0x488>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	075b      	lsls	r3, r3, #29
 8002b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba0:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <WriteChar+0x488>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <WriteChar+0x488>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	039b      	lsls	r3, r3, #14
 8002bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <WriteChar+0x48c>)
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	485c      	ldr	r0, [pc, #368]	; (8002d38 <WriteChar+0x490>)
 8002bc8:	f003 fe32 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <WriteChar+0x488>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	03db      	lsls	r3, r3, #15
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <WriteChar+0x488>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	075b      	lsls	r3, r3, #29
 8002bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be0:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002be2:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <WriteChar+0x488>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	071b      	lsls	r3, r3, #28
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <WriteChar+0x488>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	039b      	lsls	r3, r3, #14
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <WriteChar+0x48c>)
 8002c04:	2106      	movs	r1, #6
 8002c06:	484c      	ldr	r0, [pc, #304]	; (8002d38 <WriteChar+0x490>)
 8002c08:	f003 fe12 	bl	8006830 <HAL_LCD_Write>
      break;
 8002c0c:	e1c1      	b.n	8002f92 <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c0e:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <WriteChar+0x488>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	07da      	lsls	r2, r3, #31
 8002c14:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <WriteChar+0x488>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	079b      	lsls	r3, r3, #30
 8002c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4842      	ldr	r0, [pc, #264]	; (8002d38 <WriteChar+0x490>)
 8002c2e:	f003 fdff 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <WriteChar+0x488>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0202 	and.w	r2, r3, #2
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <WriteChar+0x488>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f06f 0203 	mvn.w	r2, #3
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4839      	ldr	r0, [pc, #228]	; (8002d38 <WriteChar+0x490>)
 8002c52:	f003 fded 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <WriteChar+0x488>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	07da      	lsls	r2, r3, #31
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <WriteChar+0x488>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	079b      	lsls	r3, r3, #30
 8002c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002c72:	2102      	movs	r1, #2
 8002c74:	4830      	ldr	r0, [pc, #192]	; (8002d38 <WriteChar+0x490>)
 8002c76:	f003 fddb 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <WriteChar+0x488>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0202 	and.w	r2, r3, #2
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <WriteChar+0x488>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f06f 0203 	mvn.w	r2, #3
 8002c96:	2103      	movs	r1, #3
 8002c98:	4827      	ldr	r0, [pc, #156]	; (8002d38 <WriteChar+0x490>)
 8002c9a:	f003 fdc9 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <WriteChar+0x488>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	07da      	lsls	r2, r3, #31
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <WriteChar+0x488>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	079b      	lsls	r3, r3, #30
 8002cac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002cba:	2104      	movs	r1, #4
 8002cbc:	481e      	ldr	r0, [pc, #120]	; (8002d38 <WriteChar+0x490>)
 8002cbe:	f003 fdb7 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <WriteChar+0x488>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0202 	and.w	r2, r3, #2
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <WriteChar+0x488>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f06f 0203 	mvn.w	r2, #3
 8002cde:	2105      	movs	r1, #5
 8002ce0:	4815      	ldr	r0, [pc, #84]	; (8002d38 <WriteChar+0x490>)
 8002ce2:	f003 fda5 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <WriteChar+0x488>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	07da      	lsls	r2, r3, #31
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <WriteChar+0x488>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	079b      	lsls	r3, r3, #30
 8002cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002d02:	2106      	movs	r1, #6
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <WriteChar+0x490>)
 8002d06:	f003 fd93 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <WriteChar+0x488>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0202 	and.w	r2, r3, #2
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <WriteChar+0x488>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f06f 0203 	mvn.w	r2, #3
 8002d26:	2107      	movs	r1, #7
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <WriteChar+0x490>)
 8002d2a:	f003 fd81 	bl	8006830 <HAL_LCD_Write>
      break;
 8002d2e:	e130      	b.n	8002f92 <WriteChar+0x6ea>
 8002d30:	2000b13c 	.word	0x2000b13c
 8002d34:	cfff3fff 	.word	0xcfff3fff
 8002d38:	2000b100 	.word	0x2000b100

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002d3c:	4b97      	ldr	r3, [pc, #604]	; (8002f9c <WriteChar+0x6f4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	065b      	lsls	r3, r3, #25
 8002d44:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002d48:	4b94      	ldr	r3, [pc, #592]	; (8002f9c <WriteChar+0x6f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002d5e:	2100      	movs	r1, #0
 8002d60:	488f      	ldr	r0, [pc, #572]	; (8002fa0 <WriteChar+0x6f8>)
 8002d62:	f003 fd65 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <WriteChar+0x6f4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	f003 0208 	and.w	r2, r3, #8
 8002d70:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <WriteChar+0x6f4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f06f 020c 	mvn.w	r2, #12
 8002d86:	2101      	movs	r1, #1
 8002d88:	4885      	ldr	r0, [pc, #532]	; (8002fa0 <WriteChar+0x6f8>)
 8002d8a:	f003 fd51 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002d8e:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <WriteChar+0x6f4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	065b      	lsls	r3, r3, #25
 8002d96:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002d9a:	4b80      	ldr	r3, [pc, #512]	; (8002f9c <WriteChar+0x6f4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002db0:	2102      	movs	r1, #2
 8002db2:	487b      	ldr	r0, [pc, #492]	; (8002fa0 <WriteChar+0x6f8>)
 8002db4:	f003 fd3c 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002db8:	4b78      	ldr	r3, [pc, #480]	; (8002f9c <WriteChar+0x6f4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	f003 0208 	and.w	r2, r3, #8
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <WriteChar+0x6f4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f06f 020c 	mvn.w	r2, #12
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4871      	ldr	r0, [pc, #452]	; (8002fa0 <WriteChar+0x6f8>)
 8002ddc:	f003 fd28 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <WriteChar+0x6f4>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	065b      	lsls	r3, r3, #25
 8002de8:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002dec:	4b6b      	ldr	r3, [pc, #428]	; (8002f9c <WriteChar+0x6f4>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002e02:	2104      	movs	r1, #4
 8002e04:	4866      	ldr	r0, [pc, #408]	; (8002fa0 <WriteChar+0x6f8>)
 8002e06:	f003 fd13 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002e0a:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <WriteChar+0x6f4>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	f003 0208 	and.w	r2, r3, #8
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <WriteChar+0x6f4>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f06f 020c 	mvn.w	r2, #12
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	485c      	ldr	r0, [pc, #368]	; (8002fa0 <WriteChar+0x6f8>)
 8002e2e:	f003 fcff 	bl	8006830 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002e32:	4b5a      	ldr	r3, [pc, #360]	; (8002f9c <WriteChar+0x6f4>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	065b      	lsls	r3, r3, #25
 8002e3a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <WriteChar+0x6f4>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002e54:	2106      	movs	r1, #6
 8002e56:	4852      	ldr	r0, [pc, #328]	; (8002fa0 <WriteChar+0x6f8>)
 8002e58:	f003 fcea 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002e5c:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <WriteChar+0x6f4>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	f003 0208 	and.w	r2, r3, #8
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <WriteChar+0x6f4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f06f 020c 	mvn.w	r2, #12
 8002e7c:	2107      	movs	r1, #7
 8002e7e:	4848      	ldr	r0, [pc, #288]	; (8002fa0 <WriteChar+0x6f8>)
 8002e80:	f003 fcd6 	bl	8006830 <HAL_LCD_Write>
      break;
 8002e84:	e085      	b.n	8002f92 <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <WriteChar+0x6f4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	045b      	lsls	r3, r3, #17
 8002e8c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <WriteChar+0x6f4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <WriteChar+0x6f4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	025b      	lsls	r3, r3, #9
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <WriteChar+0x6f4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <WriteChar+0x6fc>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4837      	ldr	r0, [pc, #220]	; (8002fa0 <WriteChar+0x6f8>)
 8002ec4:	f003 fcb4 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <WriteChar+0x6f4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	045b      	lsls	r3, r3, #17
 8002ece:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <WriteChar+0x6f4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <WriteChar+0x6f4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eec:	431a      	orrs	r2, r3
 8002eee:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <WriteChar+0x6f4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <WriteChar+0x6fc>)
 8002f02:	2102      	movs	r1, #2
 8002f04:	4826      	ldr	r0, [pc, #152]	; (8002fa0 <WriteChar+0x6f8>)
 8002f06:	f003 fc93 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <WriteChar+0x6f4>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	045b      	lsls	r3, r3, #17
 8002f10:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <WriteChar+0x6f4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <WriteChar+0x6f4>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <WriteChar+0x6f4>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	069b      	lsls	r3, r3, #26
 8002f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <WriteChar+0x6fc>)
 8002f44:	2104      	movs	r1, #4
 8002f46:	4816      	ldr	r0, [pc, #88]	; (8002fa0 <WriteChar+0x6f8>)
 8002f48:	f003 fc72 	bl	8006830 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <WriteChar+0x6f4>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	045b      	lsls	r3, r3, #17
 8002f52:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <WriteChar+0x6f4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <WriteChar+0x6f4>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f70:	431a      	orrs	r2, r3
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <WriteChar+0x6f4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	08db      	lsrs	r3, r3, #3
 8002f78:	069b      	lsls	r3, r3, #26
 8002f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <WriteChar+0x6fc>)
 8002f86:	2106      	movs	r1, #6
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <WriteChar+0x6f8>)
 8002f8a:	f003 fc51 	bl	8006830 <HAL_LCD_Write>
      break;
 8002f8e:	e000      	b.n	8002f92 <WriteChar+0x6ea>

    default:
      break;
 8002f90:	bf00      	nop
  }
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000b13c 	.word	0x2000b13c
 8002fa0:	2000b100 	.word	0x2000b100
 8002fa4:	fbfdfcff 	.word	0xfbfdfcff

08002fa8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002fae:	4b27      	ldr	r3, [pc, #156]	; (800304c <BSP_QSPI_Init+0xa4>)
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <BSP_QSPI_Init+0xa8>)
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002fb4:	4825      	ldr	r0, [pc, #148]	; (800304c <BSP_QSPI_Init+0xa4>)
 8002fb6:	f003 fe41 	bl	8006c3c <HAL_QSPI_DeInit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e03f      	b.n	8003044 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 8002fc4:	f000 f888 	bl	80030d8 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <BSP_QSPI_Init+0xa4>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <BSP_QSPI_Init+0xa4>)
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <BSP_QSPI_Init+0xa4>)
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fde:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002ffe:	3b01      	subs	r3, #1
 8003000:	461a      	mov	r2, r3
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <BSP_QSPI_Init+0xa4>)
 8003004:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <BSP_QSPI_Init+0xa4>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <BSP_QSPI_Init+0xa4>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003012:	480e      	ldr	r0, [pc, #56]	; (800304c <BSP_QSPI_Init+0xa4>)
 8003014:	f003 fd9c 	bl	8006b50 <HAL_QSPI_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e010      	b.n	8003044 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8003022:	480a      	ldr	r0, [pc, #40]	; (800304c <BSP_QSPI_Init+0xa4>)
 8003024:	f000 f8a4 	bl	8003170 <QSPI_ResetMemory>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800302e:	2304      	movs	r3, #4
 8003030:	e008      	b.n	8003044 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <BSP_QSPI_Init+0xa4>)
 8003034:	f000 f8e0 	bl	80031f8 <QSPI_DummyCyclesCfg>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 800303e:	2304      	movs	r3, #4
 8003040:	e000      	b.n	8003044 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	2000b14c 	.word	0x2000b14c
 8003050:	a0001000 	.word	0xa0001000

08003054 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b092      	sub	sp, #72	; 0x48
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003066:	23eb      	movs	r3, #235	; 0xeb
 8003068:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800306a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003074:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800307e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003084:	230a      	movs	r3, #10
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4619      	mov	r1, r3
 80030a2:	480c      	ldr	r0, [pc, #48]	; (80030d4 <BSP_QSPI_Read+0x80>)
 80030a4:	f003 fdee 	bl	8006c84 <HAL_QSPI_Command>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00b      	b.n	80030ca <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <BSP_QSPI_Read+0x80>)
 80030ba:	f003 fed8 	bl	8006e6e <HAL_QSPI_Receive>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3748      	adds	r7, #72	; 0x48
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000b14c 	.word	0x2000b14c

080030d8 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <QSPI_MspInit+0x90>)
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <QSPI_MspInit+0x90>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6513      	str	r3, [r2, #80]	; 0x50
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <QSPI_MspInit+0x90>)
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80030f6:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <QSPI_MspInit+0x90>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <QSPI_MspInit+0x90>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <QSPI_MspInit+0x90>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <QSPI_MspInit+0x90>)
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <QSPI_MspInit+0x90>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <QSPI_MspInit+0x90>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <QSPI_MspInit+0x90>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 8003126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800312a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003130:	2301      	movs	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003138:	230a      	movs	r3, #10
 800313a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4619      	mov	r1, r3
 8003142:	480a      	ldr	r0, [pc, #40]	; (800316c <QSPI_MspInit+0x94>)
 8003144:	f002 f9ac 	bl	80054a0 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003148:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800314c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4619      	mov	r1, r3
 8003158:	4804      	ldr	r0, [pc, #16]	; (800316c <QSPI_MspInit+0x94>)
 800315a:	f002 f9a1 	bl	80054a0 <HAL_GPIO_Init>
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	48001000 	.word	0x48001000

08003170 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b090      	sub	sp, #64	; 0x40
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800317c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800317e:	2366      	movs	r3, #102	; 0x66
 8003180:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003196:	2300      	movs	r3, #0
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800319a:	2300      	movs	r3, #0
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4619      	mov	r1, r3
 80031a8:	4812      	ldr	r0, [pc, #72]	; (80031f4 <QSPI_ResetMemory+0x84>)
 80031aa:	f003 fd6b 	bl	8006c84 <HAL_QSPI_Command>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e019      	b.n	80031ec <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80031b8:	2399      	movs	r3, #153	; 0x99
 80031ba:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4619      	mov	r1, r3
 80031c6:	480b      	ldr	r0, [pc, #44]	; (80031f4 <QSPI_ResetMemory+0x84>)
 80031c8:	f003 fd5c 	bl	8006c84 <HAL_QSPI_Command>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00a      	b.n	80031ec <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80031d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <QSPI_ResetMemory+0x84>)
 80031dc:	f000 f8d6 	bl	800338c <QSPI_AutoPollingMemReady>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3740      	adds	r7, #64	; 0x40
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000b14c 	.word	0x2000b14c

080031f8 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b094      	sub	sp, #80	; 0x50
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8003206:	2385      	movs	r3, #133	; 0x85
 8003208:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 800321c:	2301      	movs	r3, #1
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003224:	2300      	movs	r3, #0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4619      	mov	r1, r3
 8003236:	482e      	ldr	r0, [pc, #184]	; (80032f0 <QSPI_DummyCyclesCfg+0xf8>)
 8003238:	f003 fd24 	bl	8006c84 <HAL_QSPI_Command>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e04f      	b.n	80032e6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003246:	f107 030b 	add.w	r3, r7, #11
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4619      	mov	r1, r3
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <QSPI_DummyCyclesCfg+0xf8>)
 8003252:	f003 fe0c 	bl	8006e6e <HAL_QSPI_Receive>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e042      	b.n	80032e6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003260:	4823      	ldr	r0, [pc, #140]	; (80032f0 <QSPI_DummyCyclesCfg+0xf8>)
 8003262:	f000 f847 	bl	80032f4 <QSPI_WriteEnable>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e03a      	b.n	80032e6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003270:	2381      	movs	r3, #129	; 0x81
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003274:	7afb      	ldrb	r3, [r7, #11]
 8003276:	b25b      	sxtb	r3, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b25a      	sxtb	r2, r3
 800327e:	23f0      	movs	r3, #240	; 0xf0
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800328a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4619      	mov	r1, r3
 80032a2:	230a      	movs	r3, #10
 80032a4:	408b      	lsls	r3, r1
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b25b      	sxtb	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4619      	mov	r1, r3
 80032ba:	480d      	ldr	r0, [pc, #52]	; (80032f0 <QSPI_DummyCyclesCfg+0xf8>)
 80032bc:	f003 fce2 	bl	8006c84 <HAL_QSPI_Command>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00d      	b.n	80032e6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032ca:	f107 030b 	add.w	r3, r7, #11
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4619      	mov	r1, r3
 80032d4:	4806      	ldr	r0, [pc, #24]	; (80032f0 <QSPI_DummyCyclesCfg+0xf8>)
 80032d6:	f003 fd33 	bl	8006d40 <HAL_QSPI_Transmit>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3750      	adds	r7, #80	; 0x50
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000b14c 	.word	0x2000b14c

080032f4 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b096      	sub	sp, #88	; 0x58
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8003302:	2306      	movs	r3, #6
 8003304:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800330a:	2300      	movs	r3, #0
 800330c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800331a:	2300      	movs	r3, #0
 800331c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800331e:	2300      	movs	r3, #0
 8003320:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003322:	f107 0320 	add.w	r3, r7, #32
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4619      	mov	r1, r3
 800332c:	4816      	ldr	r0, [pc, #88]	; (8003388 <QSPI_WriteEnable+0x94>)
 800332e:	f003 fca9 	bl	8006c84 <HAL_QSPI_Command>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e020      	b.n	800337e <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 800333c:	2302      	movs	r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8003340:	2302      	movs	r3, #2
 8003342:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800334c:	2310      	movs	r3, #16
 800334e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003354:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8003356:	2305      	movs	r3, #5
 8003358:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800335a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003360:	f107 0208 	add.w	r2, r7, #8
 8003364:	f107 0120 	add.w	r1, r7, #32
 8003368:	f241 3388 	movw	r3, #5000	; 0x1388
 800336c:	4806      	ldr	r0, [pc, #24]	; (8003388 <QSPI_WriteEnable+0x94>)
 800336e:	f003 fe20 	bl	8006fb2 <HAL_QSPI_AutoPolling>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3758      	adds	r7, #88	; 0x58
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000b14c 	.word	0x2000b14c

0800338c <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b096      	sub	sp, #88	; 0x58
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800339c:	2305      	movs	r3, #5
 800339e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80033a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033b6:	2300      	movs	r3, #0
 80033b8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033ba:	2300      	movs	r3, #0
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80033ce:	2310      	movs	r3, #16
 80033d0:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80033d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033d6:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80033d8:	f107 0208 	add.w	r2, r7, #8
 80033dc:	f107 0120 	add.w	r1, r7, #32
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4806      	ldr	r0, [pc, #24]	; (80033fc <QSPI_AutoPollingMemReady+0x70>)
 80033e4:	f003 fde5 	bl	8006fb2 <HAL_QSPI_AutoPolling>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3758      	adds	r7, #88	; 0x58
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000b14c 	.word	0x2000b14c

08003400 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_Init+0x3c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <HAL_Init+0x3c>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003416:	2003      	movs	r0, #3
 8003418:	f001 fbde 	bl	8004bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800341c:	2000      	movs	r0, #0
 800341e:	f000 f80f 	bl	8003440 <HAL_InitTick>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	71fb      	strb	r3, [r7, #7]
 800342c:	e001      	b.n	8003432 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800342e:	f7fd fc9d 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003432:	79fb      	ldrb	r3, [r7, #7]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40022000 	.word	0x40022000

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_InitTick+0x6c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d023      	beq.n	800349c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_InitTick+0x70>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_InitTick+0x6c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003462:	fbb3 f3f1 	udiv	r3, r3, r1
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fbf7 	bl	8004c5e <HAL_SYSTICK_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d809      	bhi.n	8003490 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347c:	2200      	movs	r2, #0
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f001 fbb3 	bl	8004bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_InitTick+0x74>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e007      	b.n	80034a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e004      	b.n	80034a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e001      	b.n	80034a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000040 	.word	0x20000040
 80034b0:	20000000 	.word	0x20000000
 80034b4:	2000003c 	.word	0x2000003c

080034b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_IncTick+0x20>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x24>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <HAL_IncTick+0x24>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000040 	.word	0x20000040
 80034dc:	2000b190 	.word	0x2000b190

080034e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return uwTick;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_GetTick+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000b190 	.word	0x2000b190

080034f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff ffee 	bl	80034e0 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d005      	beq.n	800351e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_Delay+0x44>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800351e:	bf00      	nop
 8003520:	f7ff ffde 	bl	80034e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8f7      	bhi.n	8003520 <HAL_Delay+0x28>
  {
  }
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000040 	.word	0x20000040

08003540 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LL_ADC_SetOffset+0x44>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	03fff000 	.word	0x03fff000

080035f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	461a      	mov	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3360      	adds	r3, #96	; 0x60
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3330      	adds	r3, #48	; 0x30
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	4413      	add	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	211f      	movs	r1, #31
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	f003 011f 	and.w	r1, r3, #31
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	431a      	orrs	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3314      	adds	r3, #20
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0e5b      	lsrs	r3, r3, #25
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0d1b      	lsrs	r3, r3, #20
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2107      	movs	r1, #7
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0d1b      	lsrs	r3, r3, #20
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	431a      	orrs	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0318 	and.w	r3, r3, #24
 800376e:	4908      	ldr	r1, [pc, #32]	; (8003790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003770:	40d9      	lsrs	r1, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	400b      	ands	r3, r1
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	0007ffff 	.word	0x0007ffff

08003794 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6093      	str	r3, [r2, #8]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003804:	d101      	bne.n	800380a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800382c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003854:	d101      	bne.n	800385a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <LL_ADC_IsEnabled+0x18>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <LL_ADC_IsEnabled+0x1a>
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d101      	bne.n	80038a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d101      	bne.n	80038cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e136      	b.n	8003b64 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fd fa55 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff67 	bl	80037f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff4d 	bl	80037cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff82 	bl	8003840 <LL_ADC_IsInternalRegulatorEnabled>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d115      	bne.n	800396e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff66 	bl	8003818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800394c:	4b87      	ldr	r3, [pc, #540]	; (8003b6c <HAL_ADC_Init+0x290>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	4a87      	ldr	r2, [pc, #540]	; (8003b70 <HAL_ADC_Init+0x294>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003960:	e002      	b.n	8003968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff64 	bl	8003840 <LL_ADC_IsInternalRegulatorEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff75 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 80039a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 80cf 	bne.w	8003b52 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 80cb 	bne.w	8003b52 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff49 	bl	8003868 <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d115      	bne.n	8003a08 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039dc:	4865      	ldr	r0, [pc, #404]	; (8003b74 <HAL_ADC_Init+0x298>)
 80039de:	f7ff ff43 	bl	8003868 <LL_ADC_IsEnabled>
 80039e2:	4604      	mov	r4, r0
 80039e4:	4864      	ldr	r0, [pc, #400]	; (8003b78 <HAL_ADC_Init+0x29c>)
 80039e6:	f7ff ff3f 	bl	8003868 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	431c      	orrs	r4, r3
 80039ee:	4863      	ldr	r0, [pc, #396]	; (8003b7c <HAL_ADC_Init+0x2a0>)
 80039f0:	f7ff ff3a 	bl	8003868 <LL_ADC_IsEnabled>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4323      	orrs	r3, r4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4619      	mov	r1, r3
 8003a02:	485f      	ldr	r0, [pc, #380]	; (8003b80 <HAL_ADC_Init+0x2a4>)
 8003a04:	f7ff fd9c 	bl	8003540 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e5b      	ldrb	r3, [r3, #25]
 8003a0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	045b      	lsls	r3, r3, #17
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_ADC_Init+0x2a8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff08 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003a7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff15 	bl	80038b4 <LL_ADC_INJ_IsConversionOngoing>
 8003a8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13d      	bne.n	8003b0e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d13a      	bne.n	8003b0e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aa4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003aee:	430a      	orrs	r2, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	611a      	str	r2, [r3, #16]
 8003afc:	e007      	b.n	8003b0e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d10c      	bne.n	8003b30 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f023 010f 	bic.w	r1, r3, #15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2e:	e007      	b.n	8003b40 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020f 	bic.w	r2, r2, #15
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f023 0303 	bic.w	r3, r3, #3
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
 8003b50:	e007      	b.n	8003b62 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3724      	adds	r7, #36	; 0x24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	053e2d63 	.word	0x053e2d63
 8003b74:	50040000 	.word	0x50040000
 8003b78:	50040100 	.word	0x50040100
 8003b7c:	50040200 	.word	0x50040200
 8003b80:	50040300 	.word	0x50040300
 8003b84:	fff0c007 	.word	0xfff0c007

08003b88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc0:	4882      	ldr	r0, [pc, #520]	; (8003dcc <HAL_ADC_IRQHandler+0x228>)
 8003bc2:	f7ff fde7 	bl	8003794 <LL_ADC_GetMultimode>
 8003bc6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x5e>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fe41 	bl	800487c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x72>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8083 	beq.w	8003d28 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d07d      	beq.n	8003d28 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fd02 	bl	8003652 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d062      	beq.n	8003d1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_ADC_IRQHandler+0x22c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d002      	beq.n	8003c64 <HAL_ADC_IRQHandler+0xc0>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e000      	b.n	8003c66 <HAL_ADC_IRQHandler+0xc2>
 8003c64:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d008      	beq.n	8003c80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d002      	beq.n	8003c80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d104      	bne.n	8003c8a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	e00c      	b.n	8003ca4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_ADC_IRQHandler+0x22c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d002      	beq.n	8003c9a <HAL_ADC_IRQHandler+0xf6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e000      	b.n	8003c9c <HAL_ADC_IRQHandler+0xf8>
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003c9c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d135      	bne.n	8003d1a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d12e      	bne.n	8003d1a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fde4 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11a      	bne.n	8003d02 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020c 	bic.w	r2, r2, #12
 8003cda:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d112      	bne.n	8003d1a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
 8003d00:	e00b      	b.n	8003d1a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f043 0210 	orr.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fc fc20 	bl	8000560 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	220c      	movs	r2, #12
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_ADC_IRQHandler+0x198>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 809f 	beq.w	8003e86 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8099 	beq.w	8003e86 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fcad 	bl	80036d0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fc68 	bl	8003652 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <HAL_ADC_IRQHandler+0x22c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d002      	beq.n	8003d94 <HAL_ADC_IRQHandler+0x1f0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_IRQHandler+0x1f2>
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_ADC_IRQHandler+0x230>)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d008      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d002      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b07      	cmp	r3, #7
 8003dae:	d104      	bne.n	8003dba <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	e013      	b.n	8003de2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_ADC_IRQHandler+0x22c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x234>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	e007      	b.n	8003dda <HAL_ADC_IRQHandler+0x236>
 8003dca:	bf00      	nop
 8003dcc:	50040300 	.word	0x50040300
 8003dd0:	50040100 	.word	0x50040100
 8003dd4:	50040000 	.word	0x50040000
 8003dd8:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <HAL_ADC_IRQHandler+0x42c>)
 8003dda:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d047      	beq.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_ADC_IRQHandler+0x25e>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03f      	beq.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d13a      	bne.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d133      	bne.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d12e      	bne.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fd48 	bl	80038b4 <LL_ADC_INJ_IsConversionOngoing>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11a      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d112      	bne.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
 8003e5e:	e00b      	b.n	8003e78 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fcd7 	bl	800482c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2260      	movs	r2, #96	; 0x60
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d011      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x310>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f896 	bl	8003fd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <HAL_ADC_IRQHandler+0x340>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fcbd 	bl	8004854 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x370>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fcaf 	bl	8004868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d036      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x3e8>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d031      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003f30:	2301      	movs	r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e014      	b.n	8003f60 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f3c:	4825      	ldr	r0, [pc, #148]	; (8003fd4 <HAL_ADC_IRQHandler+0x430>)
 8003f3e:	f7ff fc37 	bl	80037b0 <LL_ADC_GetMultiDMATransfer>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e008      	b.n	8003f60 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10e      	bne.n	8003f84 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f834 	bl	8003fec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x424>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f043 0208 	orr.w	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fc3c 	bl	8004840 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003fc8:	bf00      	nop
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	50040000 	.word	0x50040000
 8003fd4:	50040300 	.word	0x50040300

08003fd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b0b6      	sub	sp, #216	; 0xd8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x22>
 800401e:	2302      	movs	r3, #2
 8004020:	e3c7      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x7b2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fc2d 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 83a8 	bne.w	800478c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b05      	cmp	r3, #5
 8004042:	d824      	bhi.n	800408e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	3b02      	subs	r3, #2
 800404a:	2b03      	cmp	r3, #3
 800404c:	d81b      	bhi.n	8004086 <HAL_ADC_ConfigChannel+0x86>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <HAL_ADC_ConfigChannel+0x54>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	0800406d 	.word	0x0800406d
 800405c:	08004075 	.word	0x08004075
 8004060:	0800407d 	.word	0x0800407d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	220c      	movs	r2, #12
 8004068:	605a      	str	r2, [r3, #4]
          break;
 800406a:	e011      	b.n	8004090 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2212      	movs	r2, #18
 8004070:	605a      	str	r2, [r3, #4]
          break;
 8004072:	e00d      	b.n	8004090 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2218      	movs	r2, #24
 8004078:	605a      	str	r2, [r3, #4]
          break;
 800407a:	e009      	b.n	8004090 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004082:	605a      	str	r2, [r3, #4]
          break;
 8004084:	e004      	b.n	8004090 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2206      	movs	r2, #6
 800408a:	605a      	str	r2, [r3, #4]
          break;
 800408c:	e000      	b.n	8004090 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800408e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	f7ff faeb 	bl	8003678 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fbf1 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 80040ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fbfd 	bl	80038b4 <LL_ADC_INJ_IsConversionOngoing>
 80040ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 81a6 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 81a1 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7ff fb09 	bl	80036f6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00a      	beq.n	800411c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004116:	f7ff fa47 	bl	80035a8 <LL_ADC_SetOffset>
 800411a:	e17b      	b.n	8004414 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fa64 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x148>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fa59 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	e01e      	b.n	8004186 <HAL_ADC_ConfigChannel+0x186>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fa4e 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800416a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800416e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e004      	b.n	8004184 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 800417a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_ConfigChannel+0x19e>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	e018      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x1d0>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80041b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80041ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e004      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80041c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d106      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fa1d 	bl	800361c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fa01 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_ADC_ConfigChannel+0x20e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff f9f6 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	e01e      	b.n	800424c <HAL_ADC_ConfigChannel+0x24c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f9eb 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800422c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e004      	b.n	800424a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x264>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0e9b      	lsrs	r3, r3, #26
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	e018      	b.n	8004296 <HAL_ADC_ConfigChannel+0x296>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004278:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e004      	b.n	8004296 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800428c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004296:	429a      	cmp	r2, r3
 8004298:	d106      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f9ba 	bl	800361c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2102      	movs	r1, #2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f99e 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x2d4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f993 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 80042ca:	4603      	mov	r3, r0
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	e01e      	b.n	8004312 <HAL_ADC_ConfigChannel+0x312>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f988 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_ADC_ConfigChannel+0x32a>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	e016      	b.n	8004358 <HAL_ADC_ConfigChannel+0x358>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800433c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800433e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800434e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f959 	bl	800361c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2103      	movs	r1, #3
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f93d 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 8004376:	4603      	mov	r3, r0
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x396>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2103      	movs	r1, #3
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f932 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	0e9b      	lsrs	r3, r3, #26
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	e017      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x3c6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2103      	movs	r1, #3
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f927 	bl	80035f0 <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80043ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80043b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80043bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_ADC_ConfigChannel+0x3de>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	0e9b      	lsrs	r3, r3, #26
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	e011      	b.n	8004402 <HAL_ADC_ConfigChannel+0x402>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e003      	b.n	8004402 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80043fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2103      	movs	r1, #3
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f904 	bl	800361c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fa25 	bl	8003868 <LL_ADC_IsEnabled>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 813f 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f7ff f98a 	bl	800374c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a8e      	ldr	r2, [pc, #568]	; (8004678 <HAL_ADC_ConfigChannel+0x678>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f040 8130 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_ADC_ConfigChannel+0x46c>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	3301      	adds	r3, #1
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2b09      	cmp	r3, #9
 8004462:	bf94      	ite	ls
 8004464:	2301      	movls	r3, #1
 8004466:	2300      	movhi	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e019      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x4a0>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800447a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800447e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e003      	b.n	8004490 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2b09      	cmp	r3, #9
 8004498:	bf94      	ite	ls
 800449a:	2301      	movls	r3, #1
 800449c:	2300      	movhi	r3, #0
 800449e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d079      	beq.n	8004598 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x4c0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0e9b      	lsrs	r3, r3, #26
 80044b6:	3301      	adds	r3, #1
 80044b8:	069b      	lsls	r3, r3, #26
 80044ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044be:	e015      	b.n	80044ec <HAL_ADC_ConfigChannel+0x4ec>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80044d8:	2320      	movs	r3, #32
 80044da:	e003      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80044dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	069b      	lsls	r3, r3, #26
 80044e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_ADC_ConfigChannel+0x50c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	3301      	adds	r3, #1
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	e017      	b.n	800453c <HAL_ADC_ConfigChannel+0x53c>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800451a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004524:	2320      	movs	r3, #32
 8004526:	e003      	b.n	8004530 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3301      	adds	r3, #1
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	ea42 0103 	orr.w	r1, r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x562>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	3301      	adds	r3, #1
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	051b      	lsls	r3, r3, #20
 8004560:	e018      	b.n	8004594 <HAL_ADC_ConfigChannel+0x594>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e003      	b.n	8004586 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3301      	adds	r3, #1
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004594:	430b      	orrs	r3, r1
 8004596:	e080      	b.n	800469a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x5b4>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	069b      	lsls	r3, r3, #26
 80045ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b2:	e015      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x5e0>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	069b      	lsls	r3, r3, #26
 80045dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x600>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	3301      	adds	r3, #1
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	e017      	b.n	8004630 <HAL_ADC_ConfigChannel+0x630>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	61fb      	str	r3, [r7, #28]
  return result;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10d      	bne.n	800465c <HAL_ADC_ConfigChannel+0x65c>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0e9b      	lsrs	r3, r3, #26
 8004646:	3301      	adds	r3, #1
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	3b1e      	subs	r3, #30
 8004654:	051b      	lsls	r3, r3, #20
 8004656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800465a:	e01d      	b.n	8004698 <HAL_ADC_ConfigChannel+0x698>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	613b      	str	r3, [r7, #16]
  return result;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e005      	b.n	8004684 <HAL_ADC_ConfigChannel+0x684>
 8004678:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f003 021f 	and.w	r2, r3, #31
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	3b1e      	subs	r3, #30
 8004692:	051b      	lsls	r3, r3, #20
 8004694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004698:	430b      	orrs	r3, r1
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	4619      	mov	r1, r3
 80046a0:	f7ff f829 	bl	80036f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b44      	ldr	r3, [pc, #272]	; (80047bc <HAL_ADC_ConfigChannel+0x7bc>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d07a      	beq.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046b0:	4843      	ldr	r0, [pc, #268]	; (80047c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80046b2:	f7fe ff6b 	bl	800358c <LL_ADC_GetCommonPathInternalCh>
 80046b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d12c      	bne.n	800471e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d126      	bne.n	800471e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x6e4>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <HAL_ADC_ConfigChannel+0x7cc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d15d      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046ec:	4619      	mov	r1, r3
 80046ee:	4834      	ldr	r0, [pc, #208]	; (80047c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80046f0:	f7fe ff39 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_ADC_ConfigChannel+0x7d0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	4a36      	ldr	r2, [pc, #216]	; (80047d4 <HAL_ADC_ConfigChannel+0x7d4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	4613      	mov	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800470e:	e002      	b.n	8004716 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3b01      	subs	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f9      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800471c:	e040      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2d      	ldr	r2, [pc, #180]	; (80047d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d118      	bne.n	800475a <HAL_ADC_ConfigChannel+0x75a>
 8004728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800472c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d112      	bne.n	800475a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <HAL_ADC_ConfigChannel+0x7c8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x748>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_ADC_ConfigChannel+0x7cc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d12d      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800474c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004750:	4619      	mov	r1, r3
 8004752:	481b      	ldr	r0, [pc, #108]	; (80047c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004754:	f7fe ff07 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004758:	e024      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <HAL_ADC_ConfigChannel+0x7dc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d120      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11a      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <HAL_ADC_ConfigChannel+0x7c8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d115      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800477a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800477e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004782:	4619      	mov	r1, r3
 8004784:	480e      	ldr	r0, [pc, #56]	; (80047c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004786:	f7fe feee 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
 800478a:	e00c      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	37d8      	adds	r7, #216	; 0xd8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	80080000 	.word	0x80080000
 80047c0:	50040300 	.word	0x50040300
 80047c4:	c7520000 	.word	0xc7520000
 80047c8:	50040000 	.word	0x50040000
 80047cc:	50040200 	.word	0x50040200
 80047d0:	20000000 	.word	0x20000000
 80047d4:	053e2d63 	.word	0x053e2d63
 80047d8:	cb840000 	.word	0xcb840000
 80047dc:	80000001 	.word	0x80000001

080047e0 <LL_ADC_IsEnabled>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <LL_ADC_IsEnabled+0x18>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <LL_ADC_IsEnabled+0x1a>
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_ADC_REG_IsConversionOngoing>:
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d101      	bne.n	800481e <LL_ADC_REG_IsConversionOngoing+0x18>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b09f      	sub	sp, #124	; 0x7c
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e093      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80048b6:	2300      	movs	r3, #0
 80048b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80048ba:	2300      	movs	r3, #0
 80048bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a47      	ldr	r2, [pc, #284]	; (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d102      	bne.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048c8:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	e001      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e072      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff87 	bl	8004806 <LL_ADC_REG_IsConversionOngoing>
 80048f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff ff81 	bl	8004806 <LL_ADC_REG_IsConversionOngoing>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d154      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800490a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490c:	2b00      	cmp	r3, #0
 800490e:	d151      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004912:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d02c      	beq.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800492e:	035b      	lsls	r3, r3, #13
 8004930:	430b      	orrs	r3, r1
 8004932:	431a      	orrs	r2, r3
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004938:	4829      	ldr	r0, [pc, #164]	; (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800493a:	f7ff ff51 	bl	80047e0 <LL_ADC_IsEnabled>
 800493e:	4604      	mov	r4, r0
 8004940:	4828      	ldr	r0, [pc, #160]	; (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004942:	f7ff ff4d 	bl	80047e0 <LL_ADC_IsEnabled>
 8004946:	4603      	mov	r3, r0
 8004948:	431c      	orrs	r4, r3
 800494a:	4828      	ldr	r0, [pc, #160]	; (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800494c:	f7ff ff48 	bl	80047e0 <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	4323      	orrs	r3, r4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d137      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004960:	f023 030f 	bic.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	6811      	ldr	r1, [r2, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6892      	ldr	r2, [r2, #8]
 800496c:	430a      	orrs	r2, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004974:	e028      	b.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004982:	4817      	ldr	r0, [pc, #92]	; (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004984:	f7ff ff2c 	bl	80047e0 <LL_ADC_IsEnabled>
 8004988:	4604      	mov	r4, r0
 800498a:	4816      	ldr	r0, [pc, #88]	; (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800498c:	f7ff ff28 	bl	80047e0 <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	431c      	orrs	r4, r3
 8004994:	4815      	ldr	r0, [pc, #84]	; (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004996:	f7ff ff23 	bl	80047e0 <LL_ADC_IsEnabled>
 800499a:	4603      	mov	r3, r0
 800499c:	4323      	orrs	r3, r4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d112      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049aa:	f023 030f 	bic.w	r3, r3, #15
 80049ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b2:	e009      	b.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80049c6:	e000      	b.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	377c      	adds	r7, #124	; 0x7c
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	bf00      	nop
 80049e0:	50040000 	.word	0x50040000
 80049e4:	50040100 	.word	0x50040100
 80049e8:	50040300 	.word	0x50040300
 80049ec:	50040200 	.word	0x50040200

080049f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	60d3      	str	r3, [r2, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__NVIC_GetPriorityGrouping+0x18>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 0307 	and.w	r3, r3, #7
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db0b      	blt.n	8004a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <__NVIC_EnableIRQ+0x38>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2001      	movs	r0, #1
 8004a76:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	db12      	blt.n	8004ac8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <__NVIC_DisableIRQ+0x44>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004abc:	f3bf 8f4f 	dsb	sy
}
 8004ac0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ac2:	f3bf 8f6f 	isb	sy
}
 8004ac6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	; (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	; (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba4:	d301      	bcc.n	8004baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00f      	b.n	8004bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <SysTick_Config+0x40>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f7ff ff8e 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <SysTick_Config+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bc2:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <SysTick_Config+0x40>)
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000e010 	.word	0xe000e010

08004bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff05 	bl	80049f0 <__NVIC_SetPriorityGrouping>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c00:	f7ff ff1a 	bl	8004a38 <__NVIC_GetPriorityGrouping>
 8004c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff8e 	bl	8004b2c <NVIC_EncodePriority>
 8004c10:	4602      	mov	r2, r0
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff5d 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff0d 	bl	8004a54 <__NVIC_EnableIRQ>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff1d 	bl	8004a90 <__NVIC_DisableIRQ>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff ff94 	bl	8004b94 <SysTick_Config>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0ac      	b.n	8004de4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f8b2 	bl	8004df8 <DFSDM_GetChannelFromInstance>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a55      	ldr	r2, [pc, #340]	; (8004dec <HAL_DFSDM_ChannelInit+0x174>)
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e09f      	b.n	8004de4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fd fb15 	bl	80022d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004caa:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <HAL_DFSDM_ChannelInit+0x178>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	4a4f      	ldr	r2, [pc, #316]	; (8004df0 <HAL_DFSDM_ChannelInit+0x178>)
 8004cb2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004cb4:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <HAL_DFSDM_ChannelInit+0x178>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d125      	bne.n	8004d08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a4c      	ldr	r2, [pc, #304]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004cc8:	4b4a      	ldr	r3, [pc, #296]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4948      	ldr	r1, [pc, #288]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004cd6:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a46      	ldr	r2, [pc, #280]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cdc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	791b      	ldrb	r3, [r3, #4]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004cea:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	493f      	ldr	r1, [pc, #252]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004cfc:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	; (8004df4 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004d16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 020f 	bic.w	r2, r2, #15
 8004d44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6819      	ldr	r1, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004d6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 0207 	and.w	r2, r2, #7
 8004d98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f810 	bl	8004df8 <DFSDM_GetChannelFromInstance>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4904      	ldr	r1, [pc, #16]	; (8004dec <HAL_DFSDM_ChannelInit+0x174>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	2000b198 	.word	0x2000b198
 8004df0:	2000b194 	.word	0x2000b194
 8004df4:	40016000 	.word	0x40016000

08004df8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <DFSDM_GetChannelFromInstance+0x7c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d102      	bne.n	8004e0e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e02b      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <DFSDM_GetChannelFromInstance+0x80>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d102      	bne.n	8004e1c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e024      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <DFSDM_GetChannelFromInstance+0x84>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d102      	bne.n	8004e2a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004e24:	2302      	movs	r3, #2
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e01d      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <DFSDM_GetChannelFromInstance+0x88>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d102      	bne.n	8004e38 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004e32:	2304      	movs	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e016      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <DFSDM_GetChannelFromInstance+0x8c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d102      	bne.n	8004e46 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004e40:	2305      	movs	r3, #5
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e00f      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <DFSDM_GetChannelFromInstance+0x90>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d102      	bne.n	8004e54 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004e4e:	2306      	movs	r3, #6
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e008      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <DFSDM_GetChannelFromInstance+0x94>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d102      	bne.n	8004e62 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004e5c:	2307      	movs	r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e001      	b.n	8004e66 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004e62:	2303      	movs	r3, #3
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40016000 	.word	0x40016000
 8004e78:	40016020 	.word	0x40016020
 8004e7c:	40016040 	.word	0x40016040
 8004e80:	40016080 	.word	0x40016080
 8004e84:	400160a0 	.word	0x400160a0
 8004e88:	400160c0 	.word	0x400160c0
 8004e8c:	400160e0 	.word	0x400160e0

08004e90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e098      	b.n	8004fd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b4d      	ldr	r3, [pc, #308]	; (8004fe0 <HAL_DMA_Init+0x150>)
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d80f      	bhi.n	8004ece <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_DMA_Init+0x154>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4a4b      	ldr	r2, [pc, #300]	; (8004fe8 <HAL_DMA_Init+0x158>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_DMA_Init+0x15c>)
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
 8004ecc:	e00e      	b.n	8004eec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <HAL_DMA_Init+0x160>)
 8004ed6:	4413      	add	r3, r2
 8004ed8:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <HAL_DMA_Init+0x158>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	009a      	lsls	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a42      	ldr	r2, [pc, #264]	; (8004ff4 <HAL_DMA_Init+0x164>)
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f46:	d039      	beq.n	8004fbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	4a27      	ldr	r2, [pc, #156]	; (8004fec <HAL_DMA_Init+0x15c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d11a      	bne.n	8004f88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f52:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_DMA_Init+0x168>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f003 031c 	and.w	r3, r3, #28
 8004f5e:	210f      	movs	r1, #15
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	4924      	ldr	r1, [pc, #144]	; (8004ff8 <HAL_DMA_Init+0x168>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <HAL_DMA_Init+0x168>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	f003 031c 	and.w	r3, r3, #28
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	491d      	ldr	r1, [pc, #116]	; (8004ff8 <HAL_DMA_Init+0x168>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
 8004f86:	e019      	b.n	8004fbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_DMA_Init+0x16c>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f90:	f003 031c 	and.w	r3, r3, #28
 8004f94:	210f      	movs	r1, #15
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	4917      	ldr	r1, [pc, #92]	; (8004ffc <HAL_DMA_Init+0x16c>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fa2:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <HAL_DMA_Init+0x16c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f003 031c 	and.w	r3, r3, #28
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	4911      	ldr	r1, [pc, #68]	; (8004ffc <HAL_DMA_Init+0x16c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40020407 	.word	0x40020407
 8004fe4:	bffdfff8 	.word	0xbffdfff8
 8004fe8:	cccccccd 	.word	0xcccccccd
 8004fec:	40020000 	.word	0x40020000
 8004ff0:	bffdfbf8 	.word	0xbffdfbf8
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	400200a8 	.word	0x400200a8
 8004ffc:	400204a8 	.word	0x400204a8

08005000 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e072      	b.n	80050f8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_DMA_DeInit+0x104>)
 800502a:	429a      	cmp	r2, r3
 800502c:	d80f      	bhi.n	800504e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <HAL_DMA_DeInit+0x108>)
 8005036:	4413      	add	r3, r2
 8005038:	4a34      	ldr	r2, [pc, #208]	; (800510c <HAL_DMA_DeInit+0x10c>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	009a      	lsls	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a31      	ldr	r2, [pc, #196]	; (8005110 <HAL_DMA_DeInit+0x110>)
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
 800504c:	e00e      	b.n	800506c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_DMA_DeInit+0x114>)
 8005056:	4413      	add	r3, r2
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <HAL_DMA_DeInit+0x10c>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	009a      	lsls	r2, r3, #2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2b      	ldr	r2, [pc, #172]	; (8005118 <HAL_DMA_DeInit+0x118>)
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	f003 021c 	and.w	r2, r3, #28
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f202 	lsl.w	r2, r1, r2
 8005086:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_DMA_DeInit+0x110>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10d      	bne.n	80050ae <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_DMA_DeInit+0x11c>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f003 031c 	and.w	r3, r3, #28
 800509e:	210f      	movs	r1, #15
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	491d      	ldr	r1, [pc, #116]	; (800511c <HAL_DMA_DeInit+0x11c>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
 80050ac:	e00c      	b.n	80050c8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80050ae:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <HAL_DMA_DeInit+0x120>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f003 031c 	and.w	r3, r3, #28
 80050ba:	210f      	movs	r1, #15
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	4917      	ldr	r1, [pc, #92]	; (8005120 <HAL_DMA_DeInit+0x120>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40020407 	.word	0x40020407
 8005108:	bffdfff8 	.word	0xbffdfff8
 800510c:	cccccccd 	.word	0xcccccccd
 8005110:	40020000 	.word	0x40020000
 8005114:	bffdfbf8 	.word	0xbffdfbf8
 8005118:	40020400 	.word	0x40020400
 800511c:	400200a8 	.word	0x400200a8
 8005120:	400204a8 	.word	0x400204a8

08005124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Start_IT+0x20>
 8005140:	2302      	movs	r3, #2
 8005142:	e04b      	b.n	80051dc <HAL_DMA_Start_IT+0xb8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d13a      	bne.n	80051ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f95f 	bl	8005440 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 020e 	orr.w	r2, r2, #14
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e00f      	b.n	80051bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0204 	bic.w	r2, r2, #4
 80051aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 020a 	orr.w	r2, r2, #10
 80051ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e005      	b.n	80051da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e022      	b.n	8005254 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 020e 	bic.w	r2, r2, #14
 800521c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f003 021c 	and.w	r2, r3, #28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f202 	lsl.w	r2, r1, r2
 8005240:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d005      	beq.n	8005284 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2204      	movs	r2, #4
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	e029      	b.n	80052d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 020e 	bic.w	r2, r2, #14
 8005292:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f003 021c 	and.w	r2, r3, #28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f202 	lsl.w	r2, r1, r2
 80052b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
    }
  }
  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f003 031c 	and.w	r3, r3, #28
 8005302:	2204      	movs	r2, #4
 8005304:	409a      	lsls	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d026      	beq.n	800535c <HAL_DMA_IRQHandler+0x7a>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d021      	beq.n	800535c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0204 	bic.w	r2, r2, #4
 8005334:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f003 021c 	and.w	r2, r3, #28
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2104      	movs	r1, #4
 8005344:	fa01 f202 	lsl.w	r2, r1, r2
 8005348:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	2b00      	cmp	r3, #0
 8005350:	d071      	beq.n	8005436 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800535a:	e06c      	b.n	8005436 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f003 031c 	and.w	r3, r3, #28
 8005364:	2202      	movs	r2, #2
 8005366:	409a      	lsls	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02e      	beq.n	80053ce <HAL_DMA_IRQHandler+0xec>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d029      	beq.n	80053ce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 020a 	bic.w	r2, r2, #10
 8005396:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f003 021c 	and.w	r2, r3, #28
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2102      	movs	r1, #2
 80053ae:	fa01 f202 	lsl.w	r2, r1, r2
 80053b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d038      	beq.n	8005436 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053cc:	e033      	b.n	8005436 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f003 031c 	and.w	r3, r3, #28
 80053d6:	2208      	movs	r2, #8
 80053d8:	409a      	lsls	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d02a      	beq.n	8005438 <HAL_DMA_IRQHandler+0x156>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d025      	beq.n	8005438 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 020e 	bic.w	r2, r2, #14
 80053fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f003 021c 	and.w	r2, r3, #28
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	2101      	movs	r1, #1
 800540a:	fa01 f202 	lsl.w	r2, r1, r2
 800540e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005436:	bf00      	nop
 8005438:	bf00      	nop
}
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	f003 021c 	and.w	r2, r3, #28
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2101      	movs	r1, #1
 800545c:	fa01 f202 	lsl.w	r2, r1, r2
 8005460:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b10      	cmp	r3, #16
 8005470:	d108      	bne.n	8005484 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005482:	e007      	b.n	8005494 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ae:	e17f      	b.n	80057b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8171 	beq.w	80057aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d005      	beq.n	80054e0 <HAL_GPIO_Init+0x40>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d130      	bne.n	8005542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2203      	movs	r2, #3
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4013      	ands	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005516:	2201      	movs	r2, #1
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	f003 0201 	and.w	r2, r3, #1
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b03      	cmp	r3, #3
 800554c:	d118      	bne.n	8005580 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005554:	2201      	movs	r2, #1
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f003 0201 	and.w	r2, r3, #1
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d017      	beq.n	80055bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d123      	bne.n	8005610 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	08da      	lsrs	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3208      	adds	r2, #8
 80055d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	220f      	movs	r2, #15
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	08da      	lsrs	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3208      	adds	r2, #8
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0203 	and.w	r2, r3, #3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80ac 	beq.w	80057aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005652:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <HAL_GPIO_Init+0x330>)
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	4a5e      	ldr	r2, [pc, #376]	; (80057d0 <HAL_GPIO_Init+0x330>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6613      	str	r3, [r2, #96]	; 0x60
 800565e:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <HAL_GPIO_Init+0x330>)
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800566a:	4a5a      	ldr	r2, [pc, #360]	; (80057d4 <HAL_GPIO_Init+0x334>)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	3302      	adds	r3, #2
 8005672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005676:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	220f      	movs	r2, #15
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4013      	ands	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005694:	d025      	beq.n	80056e2 <HAL_GPIO_Init+0x242>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_GPIO_Init+0x338>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01f      	beq.n	80056de <HAL_GPIO_Init+0x23e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <HAL_GPIO_Init+0x33c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d019      	beq.n	80056da <HAL_GPIO_Init+0x23a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a4d      	ldr	r2, [pc, #308]	; (80057e0 <HAL_GPIO_Init+0x340>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_GPIO_Init+0x236>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a4c      	ldr	r2, [pc, #304]	; (80057e4 <HAL_GPIO_Init+0x344>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00d      	beq.n	80056d2 <HAL_GPIO_Init+0x232>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <HAL_GPIO_Init+0x348>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <HAL_GPIO_Init+0x22e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <HAL_GPIO_Init+0x34c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_GPIO_Init+0x22a>
 80056c6:	2306      	movs	r3, #6
 80056c8:	e00c      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056ca:	2307      	movs	r3, #7
 80056cc:	e00a      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056ce:	2305      	movs	r3, #5
 80056d0:	e008      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e006      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056d6:	2303      	movs	r3, #3
 80056d8:	e004      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056da:	2302      	movs	r3, #2
 80056dc:	e002      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056e2:	2300      	movs	r3, #0
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	f002 0203 	and.w	r2, r2, #3
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	4093      	lsls	r3, r2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056f4:	4937      	ldr	r1, [pc, #220]	; (80057d4 <HAL_GPIO_Init+0x334>)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	3302      	adds	r3, #2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005702:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <HAL_GPIO_Init+0x350>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	43db      	mvns	r3, r3
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4013      	ands	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005726:	4a32      	ldr	r2, [pc, #200]	; (80057f0 <HAL_GPIO_Init+0x350>)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800572c:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <HAL_GPIO_Init+0x350>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	43db      	mvns	r3, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_GPIO_Init+0x350>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <HAL_GPIO_Init+0x350>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	43db      	mvns	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_GPIO_Init+0x350>)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <HAL_GPIO_Init+0x350>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057a4:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <HAL_GPIO_Init+0x350>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	3301      	adds	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f47f ae78 	bne.w	80054b0 <HAL_GPIO_Init+0x10>
  }
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40010000 	.word	0x40010000
 80057d8:	48000400 	.word	0x48000400
 80057dc:	48000800 	.word	0x48000800
 80057e0:	48000c00 	.word	0x48000c00
 80057e4:	48001000 	.word	0x48001000
 80057e8:	48001400 	.word	0x48001400
 80057ec:	48001800 	.word	0x48001800
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005802:	e0cd      	b.n	80059a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005804:	2201      	movs	r2, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80c0 	beq.w	800599a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800581a:	4a68      	ldr	r2, [pc, #416]	; (80059bc <HAL_GPIO_DeInit+0x1c8>)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	3302      	adds	r3, #2
 8005822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005826:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005842:	d025      	beq.n	8005890 <HAL_GPIO_DeInit+0x9c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a5e      	ldr	r2, [pc, #376]	; (80059c0 <HAL_GPIO_DeInit+0x1cc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d01f      	beq.n	800588c <HAL_GPIO_DeInit+0x98>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a5d      	ldr	r2, [pc, #372]	; (80059c4 <HAL_GPIO_DeInit+0x1d0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d019      	beq.n	8005888 <HAL_GPIO_DeInit+0x94>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <HAL_GPIO_DeInit+0x1d4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_GPIO_DeInit+0x90>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a5b      	ldr	r2, [pc, #364]	; (80059cc <HAL_GPIO_DeInit+0x1d8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00d      	beq.n	8005880 <HAL_GPIO_DeInit+0x8c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_GPIO_DeInit+0x1dc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d007      	beq.n	800587c <HAL_GPIO_DeInit+0x88>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a59      	ldr	r2, [pc, #356]	; (80059d4 <HAL_GPIO_DeInit+0x1e0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_GPIO_DeInit+0x84>
 8005874:	2306      	movs	r3, #6
 8005876:	e00c      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 8005878:	2307      	movs	r3, #7
 800587a:	e00a      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 800587c:	2305      	movs	r3, #5
 800587e:	e008      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 8005880:	2304      	movs	r3, #4
 8005882:	e006      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 8005884:	2303      	movs	r3, #3
 8005886:	e004      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 8005888:	2302      	movs	r3, #2
 800588a:	e002      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_GPIO_DeInit+0x9e>
 8005890:	2300      	movs	r3, #0
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f002 0203 	and.w	r2, r2, #3
 8005898:	0092      	lsls	r2, r2, #2
 800589a:	4093      	lsls	r3, r2
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d132      	bne.n	8005908 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80058a2:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	494b      	ldr	r1, [pc, #300]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80058b0:	4b49      	ldr	r3, [pc, #292]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	4947      	ldr	r1, [pc, #284]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80058be:	4b46      	ldr	r3, [pc, #280]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	4944      	ldr	r1, [pc, #272]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80058cc:	4b42      	ldr	r3, [pc, #264]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	4940      	ldr	r1, [pc, #256]	; (80059d8 <HAL_GPIO_DeInit+0x1e4>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	220f      	movs	r2, #15
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058ea:	4a34      	ldr	r2, [pc, #208]	; (80059bc <HAL_GPIO_DeInit+0x1c8>)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	4830      	ldr	r0, [pc, #192]	; (80059bc <HAL_GPIO_DeInit+0x1c8>)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	400a      	ands	r2, r1
 8005902:	3302      	adds	r3, #2
 8005904:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2103      	movs	r1, #3
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	08da      	lsrs	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3208      	adds	r2, #8
 8005924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	220f      	movs	r2, #15
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	08d2      	lsrs	r2, r2, #3
 800593c:	4019      	ands	r1, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3208      	adds	r2, #8
 8005942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	2103      	movs	r1, #3
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	2101      	movs	r1, #1
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	fa01 f303 	lsl.w	r3, r1, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	401a      	ands	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	2103      	movs	r1, #3
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	401a      	ands	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	2101      	movs	r1, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	401a      	ands	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3301      	adds	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f af2b 	bne.w	8005804 <HAL_GPIO_DeInit+0x10>
  }
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40010000 	.word	0x40010000
 80059c0:	48000400 	.word	0x48000400
 80059c4:	48000800 	.word	0x48000800
 80059c8:	48000c00 	.word	0x48000c00
 80059cc:	48001000 	.word	0x48001000
 80059d0:	48001400 	.word	0x48001400
 80059d4:	48001800 	.word	0x48001800
 80059d8:	40010400 	.word	0x40010400

080059dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059ec:	787b      	ldrb	r3, [r7, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059f2:	887a      	ldrh	r2, [r7, #2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059f8:	e002      	b.n	8005a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4013      	ands	r3, r2
 8005a24:	041a      	lsls	r2, r3, #16
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43d9      	mvns	r1, r3
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	619a      	str	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e081      	b.n	8005b56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb f9ea 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	; 0x24
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	e006      	b.n	8005ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d104      	bne.n	8005ada <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e021      	b.n	8005bb4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	; 0x24
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb f9b7 	bl	8000efc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	817b      	strh	r3, [r7, #10]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	813b      	strh	r3, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	f040 80f9 	bne.w	8005dd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x34>
 8005bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0ed      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_I2C_Mem_Write+0x4e>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0e6      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c12:	f7fd fc65 	bl	80034e0 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2319      	movs	r3, #25
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fad1 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0d1      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5c:	88f8      	ldrh	r0, [r7, #6]
 8005c5e:	893a      	ldrh	r2, [r7, #8]
 8005c60:	8979      	ldrh	r1, [r7, #10]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f9e1 	bl	8006034 <I2C_RequestMemoryWrite>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0a9      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2bff      	cmp	r3, #255	; 0xff
 8005c8c:	d90e      	bls.n	8005cac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	22ff      	movs	r2, #255	; 0xff
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	8979      	ldrh	r1, [r7, #10]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fc39 	bl	800651c <I2C_TransferConfig>
 8005caa:	e00f      	b.n	8005ccc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fc28 	bl	800651c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fabb 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e07b      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d034      	beq.n	8005d84 <HAL_I2C_Mem_Write+0x1c8>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d130      	bne.n	8005d84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fa4d 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e04d      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2bff      	cmp	r3, #255	; 0xff
 8005d44:	d90e      	bls.n	8005d64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	22ff      	movs	r2, #255	; 0xff
 8005d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	8979      	ldrh	r1, [r7, #10]
 8005d54:	2300      	movs	r3, #0
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fbdd 	bl	800651c <I2C_TransferConfig>
 8005d62:	e00f      	b.n	8005d84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fbcc 	bl	800651c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d19e      	bne.n	8005ccc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa9a 	bl	80062cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e01a      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2220      	movs	r2, #32
 8005da8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <HAL_I2C_Mem_Write+0x224>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e000      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
  }
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	fe00e800 	.word	0xfe00e800

08005de4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	817b      	strh	r3, [r7, #10]
 8005df6:	460b      	mov	r3, r1
 8005df8:	813b      	strh	r3, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	f040 80fd 	bne.w	8006006 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_I2C_Mem_Read+0x34>
 8005e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0f1      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2C_Mem_Read+0x4e>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e0ea      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e3a:	f7fd fb51 	bl	80034e0 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2319      	movs	r3, #25
 8005e46:	2201      	movs	r2, #1
 8005e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f9bd 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0d5      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2222      	movs	r2, #34	; 0x22
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2240      	movs	r2, #64	; 0x40
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e84:	88f8      	ldrh	r0, [r7, #6]
 8005e86:	893a      	ldrh	r2, [r7, #8]
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4603      	mov	r3, r0
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f921 	bl	80060dc <I2C_RequestMemoryRead>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0ad      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2bff      	cmp	r3, #255	; 0xff
 8005eb4:	d90e      	bls.n	8005ed4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	22ff      	movs	r2, #255	; 0xff
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	8979      	ldrh	r1, [r7, #10]
 8005ec4:	4b52      	ldr	r3, [pc, #328]	; (8006010 <HAL_I2C_Mem_Read+0x22c>)
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fb25 	bl	800651c <I2C_TransferConfig>
 8005ed2:	e00f      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	8979      	ldrh	r1, [r7, #10]
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_I2C_Mem_Read+0x22c>)
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fb14 	bl	800651c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2200      	movs	r2, #0
 8005efc:	2104      	movs	r1, #4
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f964 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e07c      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d034      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x1d0>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d130      	bne.n	8005fb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f935 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e04d      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2bff      	cmp	r3, #255	; 0xff
 8005f74:	d90e      	bls.n	8005f94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	22ff      	movs	r2, #255	; 0xff
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	8979      	ldrh	r1, [r7, #10]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fac5 	bl	800651c <I2C_TransferConfig>
 8005f92:	e00f      	b.n	8005fb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	8979      	ldrh	r1, [r7, #10]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fab4 	bl	800651c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d19a      	bne.n	8005ef4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f982 	bl	80062cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e01a      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6859      	ldr	r1, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_I2C_Mem_Read+0x230>)
 8005fe6:	400b      	ands	r3, r1
 8005fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	80002400 	.word	0x80002400
 8006014:	fe00e800 	.word	0xfe00e800

08006018 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	4603      	mov	r3, r0
 8006044:	817b      	strh	r3, [r7, #10]
 8006046:	460b      	mov	r3, r1
 8006048:	813b      	strh	r3, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	8979      	ldrh	r1, [r7, #10]
 8006054:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <I2C_RequestMemoryWrite+0xa4>)
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fa5d 	bl	800651c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f8f0 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e02c      	b.n	80060d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	629a      	str	r2, [r3, #40]	; 0x28
 8006086:	e015      	b.n	80060b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006088:	893b      	ldrh	r3, [r7, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	b29b      	uxth	r3, r3
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	69b9      	ldr	r1, [r7, #24]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f8d6 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e012      	b.n	80060d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060aa:	893b      	ldrh	r3, [r7, #8]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2200      	movs	r2, #0
 80060bc:	2180      	movs	r1, #128	; 0x80
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f884 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	80002000 	.word	0x80002000

080060dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	817b      	strh	r3, [r7, #10]
 80060ee:	460b      	mov	r3, r1
 80060f0:	813b      	strh	r3, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	8979      	ldrh	r1, [r7, #10]
 80060fc:	4b20      	ldr	r3, [pc, #128]	; (8006180 <I2C_RequestMemoryRead+0xa4>)
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa0a 	bl	800651c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f89d 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e02c      	b.n	8006176 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006122:	893b      	ldrh	r3, [r7, #8]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
 800612c:	e015      	b.n	800615a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800612e:	893b      	ldrh	r3, [r7, #8]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	b29b      	uxth	r3, r3
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	69b9      	ldr	r1, [r7, #24]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f883 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e012      	b.n	8006176 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006150:	893b      	ldrh	r3, [r7, #8]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2200      	movs	r2, #0
 8006162:	2140      	movs	r1, #64	; 0x40
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f831 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	80002000 	.word	0x80002000

08006184 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d103      	bne.n	80061a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d007      	beq.n	80061c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	619a      	str	r2, [r3, #24]
  }
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061dc:	e022      	b.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d01e      	beq.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e6:	f7fd f97b 	bl	80034e0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d113      	bne.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e00f      	b.n	8006244 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4013      	ands	r3, r2
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	429a      	cmp	r2, r3
 8006240:	d0cd      	beq.n	80061de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006258:	e02c      	b.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f870 	bl	8006344 <I2C_IsErrorOccurred>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e02a      	b.n	80062c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d01e      	beq.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fd f933 	bl	80034e0 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d113      	bne.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e007      	b.n	80062c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d1cb      	bne.n	800625a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d8:	e028      	b.n	800632c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f830 	bl	8006344 <I2C_IsErrorOccurred>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e026      	b.n	800633c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ee:	f7fd f8f7 	bl	80034e0 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d113      	bne.n	800632c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e007      	b.n	800633c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b20      	cmp	r3, #32
 8006338:	d1cf      	bne.n	80062da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	d075      	beq.n	800645c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2210      	movs	r2, #16
 8006376:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006378:	e056      	b.n	8006428 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d052      	beq.n	8006428 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fd f8ad 	bl	80034e0 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_IsErrorOccurred+0x54>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d147      	bne.n	8006428 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ba:	d12e      	bne.n	800641a <I2C_IsErrorOccurred+0xd6>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c2:	d02a      	beq.n	800641a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d027      	beq.n	800641a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063da:	f7fd f881 	bl	80034e0 <HAL_GetTick>
 80063de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063e0:	e01b      	b.n	800641a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063e2:	f7fd f87d 	bl	80034e0 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b19      	cmp	r3, #25
 80063ee:	d914      	bls.n	800641a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b20      	cmp	r3, #32
 8006426:	d1dc      	bne.n	80063e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d003      	beq.n	800643e <I2C_IsErrorOccurred+0xfa>
 8006436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800643a:	2b00      	cmp	r3, #0
 800643c:	d09d      	beq.n	800637a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800643e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2220      	movs	r2, #32
 800644c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f043 0304 	orr.w	r3, r3, #4
 8006454:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800647e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	f043 0308 	orr.w	r3, r3, #8
 8006496:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80064ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01c      	beq.n	800650c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff fe56 	bl	8006184 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <I2C_IsErrorOccurred+0x1d4>)
 80064e4:	400b      	ands	r3, r1
 80064e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800650c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006510:	4618      	mov	r0, r3
 8006512:	3728      	adds	r7, #40	; 0x28
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	fe00e800 	.word	0xfe00e800

0800651c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	607b      	str	r3, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	817b      	strh	r3, [r7, #10]
 800652a:	4613      	mov	r3, r2
 800652c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800652e:	897b      	ldrh	r3, [r7, #10]
 8006530:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006534:	7a7b      	ldrb	r3, [r7, #9]
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800653c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	4313      	orrs	r3, r2
 8006546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800654a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	0d5b      	lsrs	r3, r3, #21
 8006556:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <I2C_TransferConfig+0x60>)
 800655c:	430b      	orrs	r3, r1
 800655e:	43db      	mvns	r3, r3
 8006560:	ea02 0103 	and.w	r1, r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	03ff63ff 	.word	0x03ff63ff

08006580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	d138      	bne.n	8006608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e032      	b.n	800660a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	; 0x24
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	e000      	b.n	800660a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006608:	2302      	movs	r3, #2
  }
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b20      	cmp	r3, #32
 800662a:	d139      	bne.n	80066a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006636:	2302      	movs	r3, #2
 8006638:	e033      	b.n	80066a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2224      	movs	r2, #36	; 0x24
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0af      	b.n	8006822 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fa fc32 	bl	8000f40 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e00a      	b.n	8006710 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	3304      	adds	r3, #4
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	2200      	movs	r2, #0
 8006708:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3301      	adds	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9f1      	bls.n	80066fa <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0204 	orr.w	r2, r2, #4
 8006724:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b3f      	ldr	r3, [pc, #252]	; (800682c <HAL_LCD_Init+0x17c>)
 800672e:	4013      	ands	r3, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6851      	ldr	r1, [r2, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6892      	ldr	r2, [r2, #8]
 8006738:	4311      	orrs	r1, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800673e:	4311      	orrs	r1, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006744:	4311      	orrs	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	69d2      	ldr	r2, [r2, #28]
 800674a:	4311      	orrs	r1, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6a12      	ldr	r2, [r2, #32]
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6992      	ldr	r2, [r2, #24]
 8006756:	4311      	orrs	r1, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800675c:	4311      	orrs	r1, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	430b      	orrs	r3, r1
 8006764:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f94c 	bl	8006a04 <LCD_WaitForSynchro>
 800676c:	4603      	mov	r3, r0
 800676e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006770:	7cfb      	ldrb	r3, [r7, #19]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_LCD_Init+0xca>
  {
    return status;
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	e053      	b.n	8006822 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80067b2:	f7fc fe95 	bl	80034e0 <HAL_GetTick>
 80067b6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80067b8:	e00c      	b.n	80067d4 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80067ba:	f7fc fe91 	bl	80034e0 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c8:	d904      	bls.n	80067d4 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2208      	movs	r2, #8
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e026      	b.n	8006822 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d1eb      	bne.n	80067ba <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80067e2:	f7fc fe7d 	bl	80034e0 <HAL_GetTick>
 80067e6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80067e8:	e00c      	b.n	8006804 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80067ea:	f7fc fe79 	bl	80034e0 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f8:	d904      	bls.n	8006804 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2210      	movs	r2, #16
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e00e      	b.n	8006822 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d1eb      	bne.n	80067ea <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8006820:	7cfb      	ldrb	r3, [r7, #19]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	fc00000e 	.word	0xfc00000e

08006830 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006844:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d002      	beq.n	8006852 <HAL_LCD_Write+0x22>
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d144      	bne.n	80068dc <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b01      	cmp	r3, #1
 800685c:	d12a      	bne.n	80068b4 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_LCD_Write+0x3c>
 8006868:	2302      	movs	r3, #2
 800686a:	e038      	b.n	80068de <HAL_LCD_Write+0xae>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 800687c:	f7fc fe30 	bl	80034e0 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006882:	e010      	b.n	80068a6 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006884:	f7fc fe2c 	bl	80034e0 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006892:	d908      	bls.n	80068a6 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2202      	movs	r2, #2
 8006898:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e01b      	b.n	80068de <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d0e7      	beq.n	8006884 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	3304      	adds	r3, #4
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	401a      	ands	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3304      	adds	r3, #4
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068f8:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 80068fa:	7cbb      	ldrb	r3, [r7, #18]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d002      	beq.n	8006906 <HAL_LCD_Clear+0x20>
 8006900:	7cbb      	ldrb	r3, [r7, #18]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d140      	bne.n	8006988 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_LCD_Clear+0x2e>
 8006910:	2302      	movs	r3, #2
 8006912:	e03a      	b.n	800698a <HAL_LCD_Clear+0xa4>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006924:	f7fc fddc 	bl	80034e0 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800692a:	e010      	b.n	800694e <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800692c:	f7fc fdd8 	bl	80034e0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693a:	d908      	bls.n	800694e <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e01d      	b.n	800698a <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d0e7      	beq.n	800692c <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e00a      	b.n	8006978 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	3304      	adds	r3, #4
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	2200      	movs	r2, #0
 8006970:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	3301      	adds	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d9f1      	bls.n	8006962 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f807 	bl	8006992 <HAL_LCD_UpdateDisplayRequest>
 8006984:	4603      	mov	r3, r0
 8006986:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8006988:	7cfb      	ldrb	r3, [r7, #19]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2208      	movs	r2, #8
 80069a0:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0204 	orr.w	r2, r2, #4
 80069b0:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80069b2:	f7fc fd95 	bl	80034e0 <HAL_GetTick>
 80069b6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80069b8:	e010      	b.n	80069dc <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80069ba:	f7fc fd91 	bl	80034e0 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c8:	d908      	bls.n	80069dc <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e00f      	b.n	80069fc <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d1e7      	bne.n	80069ba <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006a0c:	f7fc fd68 	bl	80034e0 <HAL_GetTick>
 8006a10:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006a12:	e00c      	b.n	8006a2e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006a14:	f7fc fd64 	bl	80034e0 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a22:	d904      	bls.n	8006a2e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e007      	b.n	8006a3e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d1eb      	bne.n	8006a14 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40007000 	.word	0x40007000

08006a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a72:	d130      	bne.n	8006ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a74:	4b23      	ldr	r3, [pc, #140]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a80:	d038      	beq.n	8006af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2232      	movs	r2, #50	; 0x32
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0c9b      	lsrs	r3, r3, #18
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aa8:	e002      	b.n	8006ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ab0:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006abc:	d102      	bne.n	8006ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f2      	bne.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad0:	d110      	bne.n	8006af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e00f      	b.n	8006af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d007      	beq.n	8006af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ae4:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aec:	4a05      	ldr	r2, [pc, #20]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40007000 	.word	0x40007000
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	431bde83 	.word	0x431bde83

08006b10 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b1e:	6053      	str	r3, [r2, #4]
}
 8006b20:	bf00      	nop
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40007000 	.word	0x40007000

08006b30 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_PWREx_DisableVddIO2+0x1c>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a04      	ldr	r2, [pc, #16]	; (8006b4c <HAL_PWREx_DisableVddIO2+0x1c>)
 8006b3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b3e:	6053      	str	r3, [r2, #4]
}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40007000 	.word	0x40007000

08006b50 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b58:	f7fc fcc2 	bl	80034e0 <HAL_GetTick>
 8006b5c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e063      	b.n	8006c30 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fa faad 	bl	80010dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006b82:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 faf7 	bl	800717a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	021a      	lsls	r2, r3, #8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2120      	movs	r1, #32
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 faef 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d131      	bne.n	8006c26 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6852      	ldr	r2, [r2, #4]
 8006bd4:	0611      	lsls	r1, r2, #24
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68d2      	ldr	r2, [r2, #12]
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <HAL_QSPI_Init+0xe8>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6912      	ldr	r2, [r2, #16]
 8006bf2:	0411      	lsls	r1, r2, #16
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6952      	ldr	r2, [r2, #20]
 8006bf8:	4311      	orrs	r1, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6992      	ldr	r2, [r2, #24]
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	ffe0f8fe 	.word	0xffe0f8fe

08006c3c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e016      	b.n	8006c7c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fa80 	bl	8001164 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c90:	f7fc fc26 	bl	80034e0 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_QSPI_Command+0x22>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e048      	b.n	8006d38 <HAL_QSPI_Command+0xb4>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d137      	bne.n	8006d2a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fa5f 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d125      	bne.n	8006d2e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fa8c 	bl	8007204 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d115      	bne.n	8006d20 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa49 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2202      	movs	r2, #2
 8006d14:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006d1e:	e006      	b.n	8006d2e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006d28:	e001      	b.n	8006d2e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006d50:	f7fc fbc6 	bl	80034e0 <HAL_GetTick>
 8006d54:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3320      	adds	r3, #32
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_QSPI_Transmit+0x2e>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e07b      	b.n	8006e66 <HAL_QSPI_Transmit+0x126>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d16a      	bne.n	8006e58 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d05b      	beq.n	8006e46 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2212      	movs	r2, #18
 8006d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006dc2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006dc4:	e01b      	b.n	8006dfe <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2104      	movs	r1, #4
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f9e0 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d113      	bne.n	8006e08 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1df      	bne.n	8006dc6 <HAL_QSPI_Transmit+0x86>
 8006e06:	e000      	b.n	8006e0a <HAL_QSPI_Transmit+0xca>
          break;
 8006e08:	bf00      	nop
      }

      if (status == HAL_OK)
 8006e0a:	7ffb      	ldrb	r3, [r7, #31]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d115      	bne.n	8006e3c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2201      	movs	r2, #1
 8006e18:	2102      	movs	r1, #2
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f9bb 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d108      	bne.n	8006e3c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f934 	bl	80070a0 <HAL_QSPI_Abort>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006e44:	e00a      	b.n	8006e5c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	f043 0208 	orr.w	r2, r3, #8
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e001      	b.n	8006e5c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08a      	sub	sp, #40	; 0x28
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006e7e:	f7fc fb2f 	bl	80034e0 <HAL_GetTick>
 8006e82:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3320      	adds	r3, #32
 8006e92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_QSPI_Receive+0x36>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e082      	b.n	8006faa <HAL_QSPI_Receive+0x13c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d171      	bne.n	8006f9c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d062      	beq.n	8006f8a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2222      	movs	r2, #34	; 0x22
 8006ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006efc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006f06:	e01c      	b.n	8006f42 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2106      	movs	r1, #6
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f93f 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006f1c:	7ffb      	ldrb	r3, [r7, #31]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d114      	bne.n	8006f4c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1de      	bne.n	8006f08 <HAL_QSPI_Receive+0x9a>
 8006f4a:	e000      	b.n	8006f4e <HAL_QSPI_Receive+0xe0>
          break;
 8006f4c:	bf00      	nop
      }

      if (status == HAL_OK)
 8006f4e:	7ffb      	ldrb	r3, [r7, #31]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d115      	bne.n	8006f80 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f919 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006f68:	7ffb      	ldrb	r3, [r7, #31]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d108      	bne.n	8006f80 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2202      	movs	r2, #2
 8006f74:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f892 	bl	80070a0 <HAL_QSPI_Abort>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006f88:	e00a      	b.n	8006fa0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8e:	f043 0208 	orr.w	r2, r3, #8
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	77fb      	strb	r3, [r7, #31]
 8006f9a:	e001      	b.n	8006fa0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b088      	sub	sp, #32
 8006fb6:	af02      	add	r7, sp, #8
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006fc0:	f7fc fa8e 	bl	80034e0 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_QSPI_AutoPolling+0x24>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e060      	b.n	8007098 <HAL_QSPI_AutoPolling+0xe6>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d14f      	bne.n	800708a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2242      	movs	r2, #66	; 0x42
 8006ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2200      	movs	r2, #0
 8007000:	2120      	movs	r1, #32
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f8c7 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d13d      	bne.n	800708e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6852      	ldr	r2, [r2, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6892      	ldr	r2, [r2, #8]
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	431a      	orrs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007048:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f8d3 	bl	8007204 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2201      	movs	r2, #1
 8007066:	2108      	movs	r1, #8
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f894 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2208      	movs	r2, #8
 800707e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007088:	e001      	b.n	800708e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800708a:	2302      	movs	r3, #2
 800708c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80070ac:	f7fc fa18 	bl	80034e0 <HAL_GetTick>
 80070b0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d056      	beq.n	8007170 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0204 	bic.w	r2, r2, #4
 80070e6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe f879 	bl	80051e4 <HAL_DMA_Abort>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0202 	orr.w	r2, r2, #2
 8007116:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2201      	movs	r2, #1
 8007122:	2102      	movs	r1, #2
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f836 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10e      	bne.n	8007152 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2202      	movs	r2, #2
 800713a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	2120      	movs	r1, #32
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f824 	bl	8007196 <QSPI_WaitFlagStateUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007166:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80071a6:	e01a      	b.n	80071de <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d016      	beq.n	80071de <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b0:	f7fc f996 	bl	80034e0 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d302      	bcc.n	80071c6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2204      	movs	r2, #4
 80071ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	f043 0201 	orr.w	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e00e      	b.n	80071fc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d1d6      	bne.n	80071a8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <QSPI_Config+0x28>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800721e:	d005      	beq.n	800722c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3a01      	subs	r2, #1
 800722a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80b9 	beq.w	80073a8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d05f      	beq.n	80072fe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	6892      	ldr	r2, [r2, #8]
 8007246:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d031      	beq.n	80072b4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	431a      	orrs	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	431a      	orrs	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	431a      	orrs	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	049b      	lsls	r3, r3, #18
 800726c:	431a      	orrs	r2, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	431a      	orrs	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	431a      	orrs	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	431a      	orrs	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	431a      	orrs	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	431a      	orrs	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	ea42 0103 	orr.w	r1, r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	430a      	orrs	r2, r1
 800729c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80072a4:	f000 812e 	beq.w	8007504 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	6852      	ldr	r2, [r2, #4]
 80072b0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80072b2:	e127      	b.n	8007504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	431a      	orrs	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	049b      	lsls	r3, r3, #18
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	431a      	orrs	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	ea42 0103 	orr.w	r1, r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	615a      	str	r2, [r3, #20]
}
 80072fc:	e102      	b.n	8007504 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02e      	beq.n	8007364 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	431a      	orrs	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	431a      	orrs	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	431a      	orrs	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	049b      	lsls	r3, r3, #18
 8007322:	431a      	orrs	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	431a      	orrs	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	431a      	orrs	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	431a      	orrs	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	431a      	orrs	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	ea42 0103 	orr.w	r1, r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	430a      	orrs	r2, r1
 800734c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007354:	f000 80d6 	beq.w	8007504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	6852      	ldr	r2, [r2, #4]
 8007360:	619a      	str	r2, [r3, #24]
}
 8007362:	e0cf      	b.n	8007504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	431a      	orrs	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	431a      	orrs	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	431a      	orrs	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	049b      	lsls	r3, r3, #18
 8007380:	431a      	orrs	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	431a      	orrs	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	431a      	orrs	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	ea42 0103 	orr.w	r1, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	615a      	str	r2, [r3, #20]
}
 80073a6:	e0ad      	b.n	8007504 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d058      	beq.n	8007462 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6892      	ldr	r2, [r2, #8]
 80073b8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d02d      	beq.n	800741e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	431a      	orrs	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	431a      	orrs	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	049b      	lsls	r3, r3, #18
 80073de:	431a      	orrs	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	ea42 0103 	orr.w	r1, r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	430a      	orrs	r2, r1
 8007408:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007410:	d078      	beq.n	8007504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	6852      	ldr	r2, [r2, #4]
 800741a:	619a      	str	r2, [r3, #24]
}
 800741c:	e072      	b.n	8007504 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	431a      	orrs	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	431a      	orrs	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	431a      	orrs	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	049b      	lsls	r3, r3, #18
 800743a:	431a      	orrs	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	431a      	orrs	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	431a      	orrs	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	431a      	orrs	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	ea42 0103 	orr.w	r1, r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	430a      	orrs	r2, r1
 800745e:	615a      	str	r2, [r3, #20]
}
 8007460:	e050      	b.n	8007504 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d02a      	beq.n	80074c0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	431a      	orrs	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	431a      	orrs	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	431a      	orrs	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	049b      	lsls	r3, r3, #18
 8007486:	431a      	orrs	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	431a      	orrs	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	431a      	orrs	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	431a      	orrs	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	ea42 0103 	orr.w	r1, r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074b2:	d027      	beq.n	8007504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	6852      	ldr	r2, [r2, #4]
 80074bc:	619a      	str	r2, [r3, #24]
}
 80074be:	e021      	b.n	8007504 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01d      	beq.n	8007504 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	431a      	orrs	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	049b      	lsls	r3, r3, #18
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	ea42 0103 	orr.w	r1, r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	430a      	orrs	r2, r1
 8007502:	615a      	str	r2, [r3, #20]
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e3d8      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007522:	4b97      	ldr	r3, [pc, #604]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 030c 	and.w	r3, r3, #12
 800752a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800752c:	4b94      	ldr	r3, [pc, #592]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80e4 	beq.w	800770c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_RCC_OscConfig+0x4a>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b0c      	cmp	r3, #12
 800754e:	f040 808b 	bne.w	8007668 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 8087 	bne.w	8007668 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800755a:	4b89      	ldr	r3, [pc, #548]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_RCC_OscConfig+0x62>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e3b0      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	4b82      	ldr	r3, [pc, #520]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <HAL_RCC_OscConfig+0x7c>
 8007582:	4b7f      	ldr	r3, [pc, #508]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800758a:	e005      	b.n	8007598 <HAL_RCC_OscConfig+0x88>
 800758c:	4b7c      	ldr	r3, [pc, #496]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800758e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007598:	4293      	cmp	r3, r2
 800759a:	d223      	bcs.n	80075e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fd43 	bl	800802c <RCC_SetFlashLatencyFromMSIRange>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e391      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075b0:	4b73      	ldr	r3, [pc, #460]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a72      	ldr	r2, [pc, #456]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075b6:	f043 0308 	orr.w	r3, r3, #8
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	4b70      	ldr	r3, [pc, #448]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	496d      	ldr	r1, [pc, #436]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075ce:	4b6c      	ldr	r3, [pc, #432]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	4968      	ldr	r1, [pc, #416]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	604b      	str	r3, [r1, #4]
 80075e2:	e025      	b.n	8007630 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075e4:	4b66      	ldr	r3, [pc, #408]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a65      	ldr	r2, [pc, #404]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075ea:	f043 0308 	orr.w	r3, r3, #8
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b63      	ldr	r3, [pc, #396]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	4960      	ldr	r1, [pc, #384]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007602:	4b5f      	ldr	r3, [pc, #380]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	495b      	ldr	r1, [pc, #364]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007612:	4313      	orrs	r3, r2
 8007614:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d109      	bne.n	8007630 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fd03 	bl	800802c <RCC_SetFlashLatencyFromMSIRange>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e351      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007630:	f000 fc38 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8007634:	4602      	mov	r2, r0
 8007636:	4b52      	ldr	r3, [pc, #328]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	4950      	ldr	r1, [pc, #320]	; (8007784 <HAL_RCC_OscConfig+0x274>)
 8007642:	5ccb      	ldrb	r3, [r1, r3]
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	4a4e      	ldr	r2, [pc, #312]	; (8007788 <HAL_RCC_OscConfig+0x278>)
 800764e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007650:	4b4e      	ldr	r3, [pc, #312]	; (800778c <HAL_RCC_OscConfig+0x27c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4618      	mov	r0, r3
 8007656:	f7fb fef3 	bl	8003440 <HAL_InitTick>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d052      	beq.n	800770a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	e335      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d032      	beq.n	80076d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007670:	4b43      	ldr	r3, [pc, #268]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a42      	ldr	r2, [pc, #264]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800767c:	f7fb ff30 	bl	80034e0 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007684:	f7fb ff2c 	bl	80034e0 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e31e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007696:	4b3a      	ldr	r3, [pc, #232]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f0      	beq.n	8007684 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076a2:	4b37      	ldr	r3, [pc, #220]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a36      	ldr	r2, [pc, #216]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076a8:	f043 0308 	orr.w	r3, r3, #8
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	4b34      	ldr	r3, [pc, #208]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	4931      	ldr	r1, [pc, #196]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076c0:	4b2f      	ldr	r3, [pc, #188]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	492c      	ldr	r1, [pc, #176]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	604b      	str	r3, [r1, #4]
 80076d4:	e01a      	b.n	800770c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a29      	ldr	r2, [pc, #164]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076e2:	f7fb fefd 	bl	80034e0 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076ea:	f7fb fef9 	bl	80034e0 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e2eb      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076fc:	4b20      	ldr	r3, [pc, #128]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f0      	bne.n	80076ea <HAL_RCC_OscConfig+0x1da>
 8007708:	e000      	b.n	800770c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800770a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d074      	beq.n	8007802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b08      	cmp	r3, #8
 800771c:	d005      	beq.n	800772a <HAL_RCC_OscConfig+0x21a>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d10e      	bne.n	8007742 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b03      	cmp	r3, #3
 8007728:	d10b      	bne.n	8007742 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d064      	beq.n	8007800 <HAL_RCC_OscConfig+0x2f0>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d160      	bne.n	8007800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e2c8      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774a:	d106      	bne.n	800775a <HAL_RCC_OscConfig+0x24a>
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0b      	ldr	r2, [pc, #44]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e026      	b.n	80077a8 <HAL_RCC_OscConfig+0x298>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007762:	d115      	bne.n	8007790 <HAL_RCC_OscConfig+0x280>
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a05      	ldr	r2, [pc, #20]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 800776a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a02      	ldr	r2, [pc, #8]	; (8007780 <HAL_RCC_OscConfig+0x270>)
 8007776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e014      	b.n	80077a8 <HAL_RCC_OscConfig+0x298>
 800777e:	bf00      	nop
 8007780:	40021000 	.word	0x40021000
 8007784:	0800b25c 	.word	0x0800b25c
 8007788:	20000000 	.word	0x20000000
 800778c:	2000003c 	.word	0x2000003c
 8007790:	4ba0      	ldr	r3, [pc, #640]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a9f      	ldr	r2, [pc, #636]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4b9d      	ldr	r3, [pc, #628]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a9c      	ldr	r2, [pc, #624]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80077a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d013      	beq.n	80077d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fb fe96 	bl	80034e0 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077b8:	f7fb fe92 	bl	80034e0 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b64      	cmp	r3, #100	; 0x64
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e284      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ca:	4b92      	ldr	r3, [pc, #584]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0x2a8>
 80077d6:	e014      	b.n	8007802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fb fe82 	bl	80034e0 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e0:	f7fb fe7e 	bl	80034e0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e270      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077f2:	4b88      	ldr	r3, [pc, #544]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0x2d0>
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d060      	beq.n	80078d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b04      	cmp	r3, #4
 8007812:	d005      	beq.n	8007820 <HAL_RCC_OscConfig+0x310>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d119      	bne.n	800784e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d116      	bne.n	800784e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007820:	4b7c      	ldr	r3, [pc, #496]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_RCC_OscConfig+0x328>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e24d      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007838:	4b76      	ldr	r3, [pc, #472]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	061b      	lsls	r3, r3, #24
 8007846:	4973      	ldr	r1, [pc, #460]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007848:	4313      	orrs	r3, r2
 800784a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800784c:	e040      	b.n	80078d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d023      	beq.n	800789e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007856:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a6e      	ldr	r2, [pc, #440]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800785c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007862:	f7fb fe3d 	bl	80034e0 <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800786a:	f7fb fe39 	bl	80034e0 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e22b      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800787c:	4b65      	ldr	r3, [pc, #404]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0f0      	beq.n	800786a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007888:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	495f      	ldr	r1, [pc, #380]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007898:	4313      	orrs	r3, r2
 800789a:	604b      	str	r3, [r1, #4]
 800789c:	e018      	b.n	80078d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800789e:	4b5d      	ldr	r3, [pc, #372]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a5c      	ldr	r2, [pc, #368]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078aa:	f7fb fe19 	bl	80034e0 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078b0:	e008      	b.n	80078c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b2:	f7fb fe15 	bl	80034e0 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e207      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078c4:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f0      	bne.n	80078b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d03c      	beq.n	8007956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01c      	beq.n	800791e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e4:	4b4b      	ldr	r3, [pc, #300]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80078e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ea:	4a4a      	ldr	r2, [pc, #296]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f4:	f7fb fdf4 	bl	80034e0 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078fc:	f7fb fdf0 	bl	80034e0 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e1e2      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800790e:	4b41      	ldr	r3, [pc, #260]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0ef      	beq.n	80078fc <HAL_RCC_OscConfig+0x3ec>
 800791c:	e01b      	b.n	8007956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800791e:	4b3d      	ldr	r3, [pc, #244]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007924:	4a3b      	ldr	r2, [pc, #236]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7fb fdd7 	bl	80034e0 <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007934:	e008      	b.n	8007948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007936:	f7fb fdd3 	bl	80034e0 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e1c5      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800794a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1ef      	bne.n	8007936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80a6 	beq.w	8007ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007968:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800796a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007974:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 800797a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797e:	6593      	str	r3, [r2, #88]	; 0x58
 8007980:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007990:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <HAL_RCC_OscConfig+0x508>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007998:	2b00      	cmp	r3, #0
 800799a:	d118      	bne.n	80079ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <HAL_RCC_OscConfig+0x508>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_RCC_OscConfig+0x508>)
 80079a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a8:	f7fb fd9a 	bl	80034e0 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b0:	f7fb fd96 	bl	80034e0 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e188      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <HAL_RCC_OscConfig+0x508>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d108      	bne.n	80079e8 <HAL_RCC_OscConfig+0x4d8>
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80079d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079dc:	4a0d      	ldr	r2, [pc, #52]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80079de:	f043 0301 	orr.w	r3, r3, #1
 80079e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079e6:	e029      	b.n	8007a3c <HAL_RCC_OscConfig+0x52c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b05      	cmp	r3, #5
 80079ee:	d115      	bne.n	8007a1c <HAL_RCC_OscConfig+0x50c>
 80079f0:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f6:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 80079f8:	f043 0304 	orr.w	r3, r3, #4
 80079fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	4a03      	ldr	r2, [pc, #12]	; (8007a14 <HAL_RCC_OscConfig+0x504>)
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a10:	e014      	b.n	8007a3c <HAL_RCC_OscConfig+0x52c>
 8007a12:	bf00      	nop
 8007a14:	40021000 	.word	0x40021000
 8007a18:	40007000 	.word	0x40007000
 8007a1c:	4b91      	ldr	r3, [pc, #580]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	4a90      	ldr	r2, [pc, #576]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a2c:	4b8d      	ldr	r3, [pc, #564]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a32:	4a8c      	ldr	r2, [pc, #560]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d016      	beq.n	8007a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a44:	f7fb fd4c 	bl	80034e0 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a4a:	e00a      	b.n	8007a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a4c:	f7fb fd48 	bl	80034e0 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e138      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a62:	4b80      	ldr	r3, [pc, #512]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0ed      	beq.n	8007a4c <HAL_RCC_OscConfig+0x53c>
 8007a70:	e015      	b.n	8007a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a72:	f7fb fd35 	bl	80034e0 <HAL_GetTick>
 8007a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a78:	e00a      	b.n	8007a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7fb fd31 	bl	80034e0 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e121      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a90:	4b74      	ldr	r3, [pc, #464]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1ed      	bne.n	8007a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a9e:	7ffb      	ldrb	r3, [r7, #31]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d105      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa4:	4b6f      	ldr	r3, [pc, #444]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa8:	4a6e      	ldr	r2, [pc, #440]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 810c 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	f040 80d4 	bne.w	8007c6c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ac4:	4b67      	ldr	r3, [pc, #412]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f003 0203 	and.w	r2, r3, #3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d130      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d127      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d11f      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b04:	2a07      	cmp	r2, #7
 8007b06:	bf14      	ite	ne
 8007b08:	2201      	movne	r2, #1
 8007b0a:	2200      	moveq	r2, #0
 8007b0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d113      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d109      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	085b      	lsrs	r3, r3, #1
 8007b32:	3b01      	subs	r3, #1
 8007b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d06e      	beq.n	8007c18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	d069      	beq.n	8007c14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b40:	4b48      	ldr	r3, [pc, #288]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007b4c:	4b45      	ldr	r3, [pc, #276]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0bb      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b5c:	4b41      	ldr	r3, [pc, #260]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a40      	ldr	r2, [pc, #256]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b68:	f7fb fcba 	bl	80034e0 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fb fcb6 	bl	80034e0 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0a8      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b82:	4b38      	ldr	r3, [pc, #224]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b8e:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	4b35      	ldr	r3, [pc, #212]	; (8007c68 <HAL_RCC_OscConfig+0x758>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	0112      	lsls	r2, r2, #4
 8007ba2:	4311      	orrs	r1, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ba8:	0212      	lsls	r2, r2, #8
 8007baa:	4311      	orrs	r1, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bb0:	0852      	lsrs	r2, r2, #1
 8007bb2:	3a01      	subs	r2, #1
 8007bb4:	0552      	lsls	r2, r2, #21
 8007bb6:	4311      	orrs	r1, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bbc:	0852      	lsrs	r2, r2, #1
 8007bbe:	3a01      	subs	r2, #1
 8007bc0:	0652      	lsls	r2, r2, #25
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bc8:	0912      	lsrs	r2, r2, #4
 8007bca:	0452      	lsls	r2, r2, #17
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	4925      	ldr	r1, [pc, #148]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a22      	ldr	r2, [pc, #136]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007be0:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a1f      	ldr	r2, [pc, #124]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bec:	f7fb fc78 	bl	80034e0 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fb fc74 	bl	80034e0 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e066      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c06:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f0      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c12:	e05e      	b.n	8007cd2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e05d      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d156      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a0e      	ldr	r2, [pc, #56]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c30:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c3c:	f7fb fc50 	bl	80034e0 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fb fc4c 	bl	80034e0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e03e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <HAL_RCC_OscConfig+0x754>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0x734>
 8007c62:	e036      	b.n	8007cd2 <HAL_RCC_OscConfig+0x7c2>
 8007c64:	40021000 	.word	0x40021000
 8007c68:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d02d      	beq.n	8007cce <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c72:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007c7e:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007c8a:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c90:	f023 0303 	bic.w	r3, r3, #3
 8007c94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007c9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca6:	f7fb fc1b 	bl	80034e0 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cae:	f7fb fc17 	bl	80034e0 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e009      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <HAL_RCC_OscConfig+0x7cc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f0      	bne.n	8007cae <HAL_RCC_OscConfig+0x79e>
 8007ccc:	e001      	b.n	8007cd2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40021000 	.word	0x40021000

08007ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0c8      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b66      	ldr	r3, [pc, #408]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d910      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b63      	ldr	r3, [pc, #396]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 0207 	bic.w	r2, r3, #7
 8007d0a:	4961      	ldr	r1, [pc, #388]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b5f      	ldr	r3, [pc, #380]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0b0      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d04c      	beq.n	8007dca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d107      	bne.n	8007d48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d38:	4b56      	ldr	r3, [pc, #344]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d121      	bne.n	8007d88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e09e      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d107      	bne.n	8007d60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d50:	4b50      	ldr	r3, [pc, #320]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d115      	bne.n	8007d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e092      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d107      	bne.n	8007d78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d68:	4b4a      	ldr	r3, [pc, #296]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e086      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d78:	4b46      	ldr	r3, [pc, #280]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e07e      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d88:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f023 0203 	bic.w	r2, r3, #3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	493f      	ldr	r1, [pc, #252]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9a:	f7fb fba1 	bl	80034e0 <HAL_GetTick>
 8007d9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da0:	e00a      	b.n	8007db8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da2:	f7fb fb9d 	bl	80034e0 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e066      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db8:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 020c 	and.w	r2, r3, #12
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d1eb      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dd6:	4b2f      	ldr	r3, [pc, #188]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	492c      	ldr	r1, [pc, #176]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de8:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d210      	bcs.n	8007e18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df6:	4b26      	ldr	r3, [pc, #152]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f023 0207 	bic.w	r2, r3, #7
 8007dfe:	4924      	ldr	r1, [pc, #144]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e06:	4b22      	ldr	r3, [pc, #136]	; (8007e90 <HAL_RCC_ClockConfig+0x1b0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e036      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	4918      	ldr	r1, [pc, #96]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e42:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	4910      	ldr	r1, [pc, #64]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e56:	f000 f825 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <HAL_RCC_ClockConfig+0x1b4>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	490c      	ldr	r1, [pc, #48]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e68:	5ccb      	ldrb	r3, [r1, r3]
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb fae0 	bl	8003440 <HAL_InitTick>
 8007e80:	4603      	mov	r3, r0
 8007e82:	72fb      	strb	r3, [r7, #11]

  return status;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40022000 	.word	0x40022000
 8007e94:	40021000 	.word	0x40021000
 8007e98:	0800b25c 	.word	0x0800b25c
 8007e9c:	20000000 	.word	0x20000000
 8007ea0:	2000003c 	.word	0x2000003c

08007ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb2:	4b3e      	ldr	r3, [pc, #248]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 030c 	and.w	r3, r3, #12
 8007eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ebc:	4b3b      	ldr	r3, [pc, #236]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b0c      	cmp	r3, #12
 8007ed0:	d121      	bne.n	8007f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d11e      	bne.n	8007f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ed8:	4b34      	ldr	r3, [pc, #208]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d107      	bne.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ee4:	4b31      	ldr	r3, [pc, #196]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e005      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f00:	4a2b      	ldr	r2, [pc, #172]	; (8007fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10d      	bne.n	8007f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f14:	e00a      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d102      	bne.n	8007f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f1c:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	e004      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d101      	bne.n	8007f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f28:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b0c      	cmp	r3, #12
 8007f30:	d134      	bne.n	8007f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f32:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d003      	beq.n	8007f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d003      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0xac>
 8007f48:	e005      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f4a:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f4c:	617b      	str	r3, [r7, #20]
      break;
 8007f4e:	e005      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f50:	4b19      	ldr	r3, [pc, #100]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f52:	617b      	str	r3, [r7, #20]
      break;
 8007f54:	e002      	b.n	8007f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	617b      	str	r3, [r7, #20]
      break;
 8007f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f5c:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	3301      	adds	r3, #1
 8007f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f6a:	4b10      	ldr	r3, [pc, #64]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	fb03 f202 	mul.w	r2, r3, r2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <HAL_RCC_GetSysClockFreq+0x108>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	0e5b      	lsrs	r3, r3, #25
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3724      	adds	r7, #36	; 0x24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	0800b274 	.word	0x0800b274
 8007fb4:	00f42400 	.word	0x00f42400
 8007fb8:	007a1200 	.word	0x007a1200

08007fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fc0:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000000 	.word	0x20000000

08007fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fd8:	f7ff fff0 	bl	8007fbc <HAL_RCC_GetHCLKFreq>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	0a1b      	lsrs	r3, r3, #8
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	4904      	ldr	r1, [pc, #16]	; (8007ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fea:	5ccb      	ldrb	r3, [r1, r3]
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40021000 	.word	0x40021000
 8007ffc:	0800b26c 	.word	0x0800b26c

08008000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008004:	f7ff ffda 	bl	8007fbc <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	0adb      	lsrs	r3, r3, #11
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40021000 	.word	0x40021000
 8008028:	0800b26c 	.word	0x0800b26c

0800802c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008038:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800803a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008044:	f7fe fd00 	bl	8006a48 <HAL_PWREx_GetVoltageRange>
 8008048:	6178      	str	r0, [r7, #20]
 800804a:	e014      	b.n	8008076 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800804c:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008056:	6593      	str	r3, [r2, #88]	; 0x58
 8008058:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800805a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008064:	f7fe fcf0 	bl	8006a48 <HAL_PWREx_GetVoltageRange>
 8008068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800806a:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008074:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807c:	d10b      	bne.n	8008096 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d919      	bls.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2ba0      	cmp	r3, #160	; 0xa0
 8008088:	d902      	bls.n	8008090 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800808a:	2302      	movs	r3, #2
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	e013      	b.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008090:	2301      	movs	r3, #1
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e010      	b.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b80      	cmp	r3, #128	; 0x80
 800809a:	d902      	bls.n	80080a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800809c:	2303      	movs	r3, #3
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e00a      	b.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d102      	bne.n	80080ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080a8:	2302      	movs	r3, #2
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	e004      	b.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b70      	cmp	r3, #112	; 0x70
 80080b2:	d101      	bne.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080b4:	2301      	movs	r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080b8:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f023 0207 	bic.w	r2, r3, #7
 80080c0:	4909      	ldr	r1, [pc, #36]	; (80080e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d001      	beq.n	80080da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40022000 	.word	0x40022000

080080ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080f4:	2300      	movs	r3, #0
 80080f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080f8:	2300      	movs	r3, #0
 80080fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008104:	2b00      	cmp	r3, #0
 8008106:	d041      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008110:	d02a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008116:	d824      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800811c:	d008      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800811e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008122:	d81e      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800812c:	d010      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800812e:	e018      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008130:	4b86      	ldr	r3, [pc, #536]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	4a85      	ldr	r2, [pc, #532]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800813a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800813c:	e015      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3304      	adds	r3, #4
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f001 f919 	bl	800937c <RCCEx_PLLSAI1_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800814e:	e00c      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3320      	adds	r3, #32
 8008154:	2100      	movs	r1, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f001 fa04 	bl	8009564 <RCCEx_PLLSAI2_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008160:	e003      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	74fb      	strb	r3, [r7, #19]
      break;
 8008166:	e000      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816a:	7cfb      	ldrb	r3, [r7, #19]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008170:	4b76      	ldr	r3, [pc, #472]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817e:	4973      	ldr	r1, [pc, #460]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008186:	e001      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	7cfb      	ldrb	r3, [r7, #19]
 800818a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d041      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800819c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081a0:	d02a      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80081a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081a6:	d824      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ac:	d008      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081b2:	d81e      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80081b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081bc:	d010      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80081be:	e018      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081c0:	4b62      	ldr	r3, [pc, #392]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4a61      	ldr	r2, [pc, #388]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081cc:	e015      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 f8d1 	bl	800937c <RCCEx_PLLSAI1_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081de:	e00c      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3320      	adds	r3, #32
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f9bc 	bl	8009564 <RCCEx_PLLSAI2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081f0:	e003      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	74fb      	strb	r3, [r7, #19]
      break;
 80081f6:	e000      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80081f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081fa:	7cfb      	ldrb	r3, [r7, #19]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10b      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008200:	4b52      	ldr	r3, [pc, #328]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008206:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800820e:	494f      	ldr	r1, [pc, #316]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008216:	e001      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	7cfb      	ldrb	r3, [r7, #19]
 800821a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80a0 	beq.w	800836a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800822a:	2300      	movs	r3, #0
 800822c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800822e:	4b47      	ldr	r3, [pc, #284]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008244:	4b41      	ldr	r3, [pc, #260]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008248:	4a40      	ldr	r2, [pc, #256]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800824e:	6593      	str	r3, [r2, #88]	; 0x58
 8008250:	4b3e      	ldr	r3, [pc, #248]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800825c:	2301      	movs	r3, #1
 800825e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008260:	4b3b      	ldr	r3, [pc, #236]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a3a      	ldr	r2, [pc, #232]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800826a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800826c:	f7fb f938 	bl	80034e0 <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008272:	e009      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008274:	f7fb f934 	bl	80034e0 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d902      	bls.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	74fb      	strb	r3, [r7, #19]
        break;
 8008286:	e005      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008288:	4b31      	ldr	r3, [pc, #196]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0ef      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008294:	7cfb      	ldrb	r3, [r7, #19]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d15c      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800829a:	4b2c      	ldr	r3, [pc, #176]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01f      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d019      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082b8:	4b24      	ldr	r3, [pc, #144]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082c4:	4b21      	ldr	r3, [pc, #132]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ca:	4a20      	ldr	r2, [pc, #128]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082d4:	4b1d      	ldr	r3, [pc, #116]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082e4:	4a19      	ldr	r2, [pc, #100]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d016      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f6:	f7fb f8f3 	bl	80034e0 <HAL_GetTick>
 80082fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fc:	e00b      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fe:	f7fb f8ef 	bl	80034e0 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	f241 3288 	movw	r2, #5000	; 0x1388
 800830c:	4293      	cmp	r3, r2
 800830e:	d902      	bls.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	74fb      	strb	r3, [r7, #19]
            break;
 8008314:	e006      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008316:	4b0d      	ldr	r3, [pc, #52]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0ec      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008324:	7cfb      	ldrb	r3, [r7, #19]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800832a:	4b08      	ldr	r3, [pc, #32]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833a:	4904      	ldr	r1, [pc, #16]	; (800834c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800833c:	4313      	orrs	r3, r2
 800833e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008342:	e009      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008344:	7cfb      	ldrb	r3, [r7, #19]
 8008346:	74bb      	strb	r3, [r7, #18]
 8008348:	e006      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000
 8008350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008354:	7cfb      	ldrb	r3, [r7, #19]
 8008356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008358:	7c7b      	ldrb	r3, [r7, #17]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d105      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800835e:	4b9e      	ldr	r3, [pc, #632]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	4a9d      	ldr	r2, [pc, #628]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008376:	4b98      	ldr	r3, [pc, #608]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800837c:	f023 0203 	bic.w	r2, r3, #3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	4994      	ldr	r1, [pc, #592]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008398:	4b8f      	ldr	r3, [pc, #572]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	f023 020c 	bic.w	r2, r3, #12
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	498c      	ldr	r1, [pc, #560]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083ba:	4b87      	ldr	r3, [pc, #540]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	4983      	ldr	r1, [pc, #524]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083dc:	4b7e      	ldr	r3, [pc, #504]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ea:	497b      	ldr	r1, [pc, #492]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083fe:	4b76      	ldr	r3, [pc, #472]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840c:	4972      	ldr	r1, [pc, #456]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0320 	and.w	r3, r3, #32
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008420:	4b6d      	ldr	r3, [pc, #436]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842e:	496a      	ldr	r1, [pc, #424]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008430:	4313      	orrs	r3, r2
 8008432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008442:	4b65      	ldr	r3, [pc, #404]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008450:	4961      	ldr	r1, [pc, #388]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008464:	4b5c      	ldr	r3, [pc, #368]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008472:	4959      	ldr	r1, [pc, #356]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008486:	4b54      	ldr	r3, [pc, #336]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	4950      	ldr	r1, [pc, #320]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084a8:	4b4b      	ldr	r3, [pc, #300]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	4948      	ldr	r1, [pc, #288]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084ca:	4b43      	ldr	r3, [pc, #268]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d8:	493f      	ldr	r1, [pc, #252]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d028      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084ec:	4b3a      	ldr	r3, [pc, #232]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fa:	4937      	ldr	r1, [pc, #220]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800850a:	d106      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800850c:	4b32      	ldr	r3, [pc, #200]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	4a31      	ldr	r2, [pc, #196]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008516:	60d3      	str	r3, [r2, #12]
 8008518:	e011      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008522:	d10c      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	2101      	movs	r1, #1
 800852a:	4618      	mov	r0, r3
 800852c:	f000 ff26 	bl	800937c <RCCEx_PLLSAI1_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008534:	7cfb      	ldrb	r3, [r7, #19]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800853a:	7cfb      	ldrb	r3, [r7, #19]
 800853c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d028      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800854a:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008558:	491f      	ldr	r1, [pc, #124]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008568:	d106      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008574:	60d3      	str	r3, [r2, #12]
 8008576:	e011      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008580:	d10c      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3304      	adds	r3, #4
 8008586:	2101      	movs	r1, #1
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fef7 	bl	800937c <RCCEx_PLLSAI1_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008592:	7cfb      	ldrb	r3, [r7, #19]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d02b      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b6:	4908      	ldr	r1, [pc, #32]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085c6:	d109      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085c8:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a02      	ldr	r2, [pc, #8]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085d2:	60d3      	str	r3, [r2, #12]
 80085d4:	e014      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80085d6:	bf00      	nop
 80085d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085e4:	d10c      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2101      	movs	r1, #1
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fec5 	bl	800937c <RCCEx_PLLSAI1_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085f6:	7cfb      	ldrb	r3, [r7, #19]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80085fc:	7cfb      	ldrb	r3, [r7, #19]
 80085fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d02f      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800860c:	4b2b      	ldr	r3, [pc, #172]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800861a:	4928      	ldr	r1, [pc, #160]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800861c:	4313      	orrs	r3, r2
 800861e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862a:	d10d      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3304      	adds	r3, #4
 8008630:	2102      	movs	r1, #2
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fea2 	bl	800937c <RCCEx_PLLSAI1_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800863c:	7cfb      	ldrb	r3, [r7, #19]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d014      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008642:	7cfb      	ldrb	r3, [r7, #19]
 8008644:	74bb      	strb	r3, [r7, #18]
 8008646:	e011      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800864c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008650:	d10c      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3320      	adds	r3, #32
 8008656:	2102      	movs	r1, #2
 8008658:	4618      	mov	r0, r3
 800865a:	f000 ff83 	bl	8009564 <RCCEx_PLLSAI2_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008662:	7cfb      	ldrb	r3, [r7, #19]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008668:	7cfb      	ldrb	r3, [r7, #19]
 800866a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800867a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008686:	490d      	ldr	r1, [pc, #52]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800869a:	4b08      	ldr	r3, [pc, #32]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086aa:	4904      	ldr	r1, [pc, #16]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80086b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40021000 	.word	0x40021000

080086c0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a73      	ldr	r2, [pc, #460]	; (8008898 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 80086cc:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80086ce:	4b73      	ldr	r3, [pc, #460]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0203 	and.w	r2, r3, #3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80086da:	4b70      	ldr	r3, [pc, #448]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	091b      	lsrs	r3, r3, #4
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80086ea:	4b6c      	ldr	r3, [pc, #432]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 80086f8:	4b68      	ldr	r3, [pc, #416]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	0c5b      	lsrs	r3, r3, #17
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	1dda      	adds	r2, r3, #7
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800870a:	4b64      	ldr	r3, [pc, #400]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	0d5b      	lsrs	r3, r3, #21
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	3301      	adds	r3, #1
 8008716:	005a      	lsls	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800871c:	4b5f      	ldr	r3, [pc, #380]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	0e5b      	lsrs	r3, r3, #25
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	3301      	adds	r3, #1
 8008728:	005a      	lsls	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800873e:	4b57      	ldr	r3, [pc, #348]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800874c:	4b53      	ldr	r3, [pc, #332]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	0c5b      	lsrs	r3, r3, #17
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	1dda      	adds	r2, r3, #7
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800875e:	4b4f      	ldr	r3, [pc, #316]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	0e5b      	lsrs	r3, r3, #25
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	3301      	adds	r3, #1
 800876a:	005a      	lsls	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008770:	4b4a      	ldr	r3, [pc, #296]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008776:	f003 0203 	and.w	r2, r3, #3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800877e:	4b47      	ldr	r3, [pc, #284]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008784:	f003 020c 	and.w	r2, r3, #12
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800878c:	4b43      	ldr	r3, [pc, #268]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800878e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008792:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800879a:	4b40      	ldr	r3, [pc, #256]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 80087a8:	4b3c      	ldr	r3, [pc, #240]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ae:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80087b6:	4b39      	ldr	r3, [pc, #228]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087bc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80087c4:	4b35      	ldr	r3, [pc, #212]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ca:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80087d2:	4b32      	ldr	r3, [pc, #200]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 80087e0:	4b2e      	ldr	r3, [pc, #184]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 80087ee:	4b2b      	ldr	r3, [pc, #172]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f4:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 80087fc:	4b27      	ldr	r3, [pc, #156]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008802:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008826:	4b1d      	ldr	r3, [pc, #116]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008836:	4b19      	ldr	r3, [pc, #100]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008844:	4b15      	ldr	r3, [pc, #84]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008858:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008866:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008874:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800887e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008882:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	000fffff 	.word	0x000fffff
 800889c:	40021000 	.word	0x40021000

080088a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b2:	d13e      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80088b4:	4bb2      	ldr	r3, [pc, #712]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c6:	d028      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088ce:	f200 8542 	bhi.w	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d8:	d005      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e0:	d00e      	beq.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80088e2:	f000 bd38 	b.w	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80088e6:	4ba6      	ldr	r3, [pc, #664]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f040 8532 	bne.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80088f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088fa:	61fb      	str	r3, [r7, #28]
      break;
 80088fc:	f000 bd2d 	b.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008900:	4b9f      	ldr	r3, [pc, #636]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b02      	cmp	r3, #2
 800890c:	f040 8527 	bne.w	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8008910:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008914:	61fb      	str	r3, [r7, #28]
      break;
 8008916:	f000 bd22 	b.w	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800891a:	4b99      	ldr	r3, [pc, #612]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008926:	f040 851c 	bne.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800892a:	4b96      	ldr	r3, [pc, #600]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800892c:	61fb      	str	r3, [r7, #28]
      break;
 800892e:	f000 bd18 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008932:	4b93      	ldr	r3, [pc, #588]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d036      	beq.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d840      	bhi.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d003      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d020      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008954:	e039      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008956:	4b8a      	ldr	r3, [pc, #552]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b02      	cmp	r3, #2
 8008960:	d116      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008962:	4b87      	ldr	r3, [pc, #540]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d005      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800896e:	4b84      	ldr	r3, [pc, #528]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	e005      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800897a:	4b81      	ldr	r3, [pc, #516]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800897c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	4a80      	ldr	r2, [pc, #512]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800898e:	e01f      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	61bb      	str	r3, [r7, #24]
      break;
 8008994:	e01c      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008996:	4b7a      	ldr	r3, [pc, #488]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800899e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a2:	d102      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80089a4:	4b79      	ldr	r3, [pc, #484]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80089a6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80089a8:	e012      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
      break;
 80089ae:	e00f      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089b0:	4b73      	ldr	r3, [pc, #460]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089bc:	d102      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80089c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80089c2:	e005      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
      break;
 80089c8:	e002      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61bb      	str	r3, [r7, #24]
      break;
 80089ce:	bf00      	nop
    }

    switch(PeriphClk)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089d6:	f000 80dd 	beq.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089e0:	f200 84c1 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089ea:	f000 80d3 	beq.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089f4:	f200 84b7 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fe:	f000 835f 	beq.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a08:	f200 84ad 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a12:	f000 847e 	beq.w	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1c:	f200 84a3 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a26:	f000 82cd 	beq.w	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a30:	f200 8499 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3a:	f000 80ab 	beq.w	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	f200 848f 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	f000 8090 	beq.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	f200 8485 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a62:	d07f      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	f200 847c 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a74:	f000 8403 	beq.w	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7e:	f200 8472 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a88:	f000 83af 	beq.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a92:	f200 8468 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9c:	f000 8379 	beq.w	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa6:	f200 845e 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b80      	cmp	r3, #128	; 0x80
 8008aae:	f000 8344 	beq.w	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b80      	cmp	r3, #128	; 0x80
 8008ab6:	f200 8456 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d84b      	bhi.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 844f 	beq.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	2b1f      	cmp	r3, #31
 8008ace:	f200 844a 	bhi.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008cc1 	.word	0x08008cc1
 8008adc:	08008d2f 	.word	0x08008d2f
 8008ae0:	08009367 	.word	0x08009367
 8008ae4:	08008dc3 	.word	0x08008dc3
 8008ae8:	08009367 	.word	0x08009367
 8008aec:	08009367 	.word	0x08009367
 8008af0:	08009367 	.word	0x08009367
 8008af4:	08008e49 	.word	0x08008e49
 8008af8:	08009367 	.word	0x08009367
 8008afc:	08009367 	.word	0x08009367
 8008b00:	08009367 	.word	0x08009367
 8008b04:	08009367 	.word	0x08009367
 8008b08:	08009367 	.word	0x08009367
 8008b0c:	08009367 	.word	0x08009367
 8008b10:	08009367 	.word	0x08009367
 8008b14:	08008ec1 	.word	0x08008ec1
 8008b18:	08009367 	.word	0x08009367
 8008b1c:	08009367 	.word	0x08009367
 8008b20:	08009367 	.word	0x08009367
 8008b24:	08009367 	.word	0x08009367
 8008b28:	08009367 	.word	0x08009367
 8008b2c:	08009367 	.word	0x08009367
 8008b30:	08009367 	.word	0x08009367
 8008b34:	08009367 	.word	0x08009367
 8008b38:	08009367 	.word	0x08009367
 8008b3c:	08009367 	.word	0x08009367
 8008b40:	08009367 	.word	0x08009367
 8008b44:	08009367 	.word	0x08009367
 8008b48:	08009367 	.word	0x08009367
 8008b4c:	08009367 	.word	0x08009367
 8008b50:	08009367 	.word	0x08009367
 8008b54:	08008f43 	.word	0x08008f43
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	f000 82c1 	beq.w	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008b60:	f000 bc01 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008b64:	69b9      	ldr	r1, [r7, #24]
 8008b66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008b6a:	f000 fdd9 	bl	8009720 <RCCEx_GetSAIxPeriphCLKFreq>
 8008b6e:	61f8      	str	r0, [r7, #28]
      break;
 8008b70:	e3fa      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008b78:	f000 fdd2 	bl	8009720 <RCCEx_GetSAIxPeriphCLKFreq>
 8008b7c:	61f8      	str	r0, [r7, #28]
      break;
 8008b7e:	e3f3      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008b80:	40021000 	.word	0x40021000
 8008b84:	0003d090 	.word	0x0003d090
 8008b88:	0800b274 	.word	0x0800b274
 8008b8c:	00f42400 	.word	0x00f42400
 8008b90:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008b94:	4ba9      	ldr	r3, [pc, #676]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ba6:	d00c      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008bae:	d87f      	bhi.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bb6:	d04e      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bbe:	d01d      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8008bc0:	e076      	b.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008bc2:	4b9e      	ldr	r3, [pc, #632]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d172      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008bce:	4b9b      	ldr	r3, [pc, #620]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8008bda:	4b98      	ldr	r3, [pc, #608]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	e005      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8008be6:	4b95      	ldr	r3, [pc, #596]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	4a93      	ldr	r2, [pc, #588]	; (8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf8:	61fb      	str	r3, [r7, #28]
          break;
 8008bfa:	e05b      	b.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008bfc:	4b8f      	ldr	r3, [pc, #572]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c08:	d156      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008c0a:	4b8c      	ldr	r3, [pc, #560]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c16:	d14f      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c18:	4b88      	ldr	r3, [pc, #544]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	0a1b      	lsrs	r3, r3, #8
 8008c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c22:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	fb03 f202 	mul.w	r2, r3, r2
 8008c2c:	4b83      	ldr	r3, [pc, #524]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	091b      	lsrs	r3, r3, #4
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	3301      	adds	r3, #1
 8008c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008c3e:	4b7f      	ldr	r3, [pc, #508]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	0d5b      	lsrs	r3, r3, #21
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	61fb      	str	r3, [r7, #28]
          break;
 8008c54:	e030      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008c56:	4b79      	ldr	r3, [pc, #484]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c62:	d12b      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008c64:	4b75      	ldr	r3, [pc, #468]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c70:	d124      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c72:	4b72      	ldr	r3, [pc, #456]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	fb03 f202 	mul.w	r2, r3, r2
 8008c86:	4b6d      	ldr	r3, [pc, #436]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	091b      	lsrs	r3, r3, #4
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	3301      	adds	r3, #1
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008c98:	4b68      	ldr	r3, [pc, #416]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	0d5b      	lsrs	r3, r3, #21
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cac:	61fb      	str	r3, [r7, #28]
          break;
 8008cae:	e005      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8008cb0:	bf00      	nop
 8008cb2:	e359      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008cb4:	bf00      	nop
 8008cb6:	e357      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008cb8:	bf00      	nop
 8008cba:	e355      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008cbc:	bf00      	nop
        break;
 8008cbe:	e353      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cc0:	4b5e      	ldr	r3, [pc, #376]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d827      	bhi.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008cf9 	.word	0x08008cf9
 8008ce4:	08008d0d 	.word	0x08008d0d
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ce8:	f7ff f98a 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 8008cec:	61f8      	str	r0, [r7, #28]
          break;
 8008cee:	e01d      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cf0:	f7ff f8d8 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008cf4:	61f8      	str	r0, [r7, #28]
          break;
 8008cf6:	e019      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cf8:	4b50      	ldr	r3, [pc, #320]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d04:	d10f      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8008d06:	4b4f      	ldr	r3, [pc, #316]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008d08:	61fb      	str	r3, [r7, #28]
          break;
 8008d0a:	e00c      	b.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d0c:	4b4b      	ldr	r3, [pc, #300]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d107      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8008d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1e:	61fb      	str	r3, [r7, #28]
          break;
 8008d20:	e003      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8008d22:	bf00      	nop
 8008d24:	e320      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008d26:	bf00      	nop
 8008d28:	e31e      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008d2a:	bf00      	nop
        break;
 8008d2c:	e31c      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d2e:	4b43      	ldr	r3, [pc, #268]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d34:	f003 030c 	and.w	r3, r3, #12
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b0c      	cmp	r3, #12
 8008d3e:	d83a      	bhi.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d7d 	.word	0x08008d7d
 8008d4c:	08008db7 	.word	0x08008db7
 8008d50:	08008db7 	.word	0x08008db7
 8008d54:	08008db7 	.word	0x08008db7
 8008d58:	08008d85 	.word	0x08008d85
 8008d5c:	08008db7 	.word	0x08008db7
 8008d60:	08008db7 	.word	0x08008db7
 8008d64:	08008db7 	.word	0x08008db7
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	08008db7 	.word	0x08008db7
 8008d70:	08008db7 	.word	0x08008db7
 8008d74:	08008db7 	.word	0x08008db7
 8008d78:	08008da1 	.word	0x08008da1
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f7ff f92a 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8008d80:	61f8      	str	r0, [r7, #28]
          break;
 8008d82:	e01d      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d84:	f7ff f88e 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008d88:	61f8      	str	r0, [r7, #28]
          break;
 8008d8a:	e019      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d8c:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d98:	d10f      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008d9a:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008d9c:	61fb      	str	r3, [r7, #28]
          break;
 8008d9e:	e00c      	b.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008da0:	4b26      	ldr	r3, [pc, #152]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da6:	f003 0302 	and.w	r3, r3, #2
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d107      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8008dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db2:	61fb      	str	r3, [r7, #28]
          break;
 8008db4:	e003      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8008db6:	bf00      	nop
 8008db8:	e2d6      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008dba:	bf00      	nop
 8008dbc:	e2d4      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008dbe:	bf00      	nop
        break;
 8008dc0:	e2d2      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008dc2:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b30      	cmp	r3, #48	; 0x30
 8008dd2:	d021      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2b30      	cmp	r3, #48	; 0x30
 8008dd8:	d829      	bhi.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b20      	cmp	r3, #32
 8008dde:	d011      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d823      	bhi.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b10      	cmp	r3, #16
 8008df0:	d004      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8008df2:	e01c      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008df4:	f7ff f8ee 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8008df8:	61f8      	str	r0, [r7, #28]
          break;
 8008dfa:	e01d      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dfc:	f7ff f852 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008e00:	61f8      	str	r0, [r7, #28]
          break;
 8008e02:	e019      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e04:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e10:	d10f      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008e14:	61fb      	str	r3, [r7, #28]
          break;
 8008e16:	e00c      	b.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e18:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d107      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8008e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2a:	61fb      	str	r3, [r7, #28]
          break;
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8008e2e:	bf00      	nop
 8008e30:	e29a      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008e32:	bf00      	nop
 8008e34:	e298      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008e36:	bf00      	nop
        break;
 8008e38:	e296      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008e3a:	bf00      	nop
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	0800b274 	.word	0x0800b274
 8008e44:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008e48:	4b9b      	ldr	r3, [pc, #620]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e52:	613b      	str	r3, [r7, #16]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2bc0      	cmp	r3, #192	; 0xc0
 8008e58:	d021      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8008e5e:	d829      	bhi.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d011      	beq.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b80      	cmp	r3, #128	; 0x80
 8008e6a:	d823      	bhi.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d004      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8008e78:	e01c      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e7a:	f7ff f8ab 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8008e7e:	61f8      	str	r0, [r7, #28]
          break;
 8008e80:	e01d      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e82:	f7ff f80f 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008e86:	61f8      	str	r0, [r7, #28]
          break;
 8008e88:	e019      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e8a:	4b8b      	ldr	r3, [pc, #556]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e96:	d10f      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8008e98:	4b88      	ldr	r3, [pc, #544]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008e9a:	61fb      	str	r3, [r7, #28]
          break;
 8008e9c:	e00c      	b.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e9e:	4b86      	ldr	r3, [pc, #536]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8008eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eb0:	61fb      	str	r3, [r7, #28]
          break;
 8008eb2:	e003      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8008eb4:	bf00      	nop
 8008eb6:	e257      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008eb8:	bf00      	nop
 8008eba:	e255      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ebc:	bf00      	nop
        break;
 8008ebe:	e253      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008ec0:	4b7d      	ldr	r3, [pc, #500]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed2:	d025      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eda:	d82c      	bhi.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee2:	d013      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eea:	d824      	bhi.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef8:	d004      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8008efa:	e01c      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008efc:	f7ff f86a 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8008f00:	61f8      	str	r0, [r7, #28]
          break;
 8008f02:	e01d      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f04:	f7fe ffce 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008f08:	61f8      	str	r0, [r7, #28]
          break;
 8008f0a:	e019      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f0c:	4b6a      	ldr	r3, [pc, #424]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f18:	d10f      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8008f1a:	4b68      	ldr	r3, [pc, #416]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008f1c:	61fb      	str	r3, [r7, #28]
          break;
 8008f1e:	e00c      	b.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f20:	4b65      	ldr	r3, [pc, #404]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d107      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8008f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f32:	61fb      	str	r3, [r7, #28]
          break;
 8008f34:	e003      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8008f36:	bf00      	nop
 8008f38:	e216      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f3a:	bf00      	nop
 8008f3c:	e214      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008f3e:	bf00      	nop
        break;
 8008f40:	e212      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f42:	4b5d      	ldr	r3, [pc, #372]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f4c:	613b      	str	r3, [r7, #16]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f54:	d025      	beq.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f5c:	d82c      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f64:	d013      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6c:	d824      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7a:	d004      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8008f7c:	e01c      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f7e:	f7ff f829 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8008f82:	61f8      	str	r0, [r7, #28]
          break;
 8008f84:	e01d      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f86:	f7fe ff8d 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008f8a:	61f8      	str	r0, [r7, #28]
          break;
 8008f8c:	e019      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f8e:	4b4a      	ldr	r3, [pc, #296]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f9a:	d10f      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008f9c:	4b47      	ldr	r3, [pc, #284]	; (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008f9e:	61fb      	str	r3, [r7, #28]
          break;
 8008fa0:	e00c      	b.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fa2:	4b45      	ldr	r3, [pc, #276]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d107      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8008fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb4:	61fb      	str	r3, [r7, #28]
          break;
 8008fb6:	e003      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008fb8:	bf00      	nop
 8008fba:	e1d5      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008fbc:	bf00      	nop
 8008fbe:	e1d3      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008fc0:	bf00      	nop
        break;
 8008fc2:	e1d1      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008fc4:	4b3c      	ldr	r3, [pc, #240]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fd6:	d00c      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fde:	d864      	bhi.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe6:	d008      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fee:	d030      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8008ff0:	e05b      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ff2:	f7fe ff57 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8008ff6:	61f8      	str	r0, [r7, #28]
          break;
 8008ff8:	e05c      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008ffa:	4b2f      	ldr	r3, [pc, #188]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009006:	d152      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d04c      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009014:	4b28      	ldr	r3, [pc, #160]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	fb03 f202 	mul.w	r2, r3, r2
 8009028:	4b23      	ldr	r3, [pc, #140]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	091b      	lsrs	r3, r3, #4
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	3301      	adds	r3, #1
 8009034:	fbb2 f3f3 	udiv	r3, r2, r3
 8009038:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800903a:	4b1f      	ldr	r3, [pc, #124]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	0e5b      	lsrs	r3, r3, #25
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	3301      	adds	r3, #1
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	61fb      	str	r3, [r7, #28]
          break;
 8009050:	e02d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8009052:	4b19      	ldr	r3, [pc, #100]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905e:	d128      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8009060:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d022      	beq.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800906c:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	0a1b      	lsrs	r3, r3, #8
 8009072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009076:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	fb03 f202 	mul.w	r2, r3, r2
 8009080:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	091b      	lsrs	r3, r3, #4
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	3301      	adds	r3, #1
 800908c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009090:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	0e5b      	lsrs	r3, r3, #25
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	3301      	adds	r3, #1
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a6:	61fb      	str	r3, [r7, #28]
          break;
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80090aa:	bf00      	nop
 80090ac:	e15c      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090ae:	bf00      	nop
 80090b0:	e15a      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090b2:	bf00      	nop
        break;
 80090b4:	e158      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80090b6:	bf00      	nop
 80090b8:	40021000 	.word	0x40021000
 80090bc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80090c0:	4b9d      	ldr	r3, [pc, #628]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80090c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80090d2:	f7fe ff95 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 80090d6:	61f8      	str	r0, [r7, #28]
        break;
 80090d8:	e146      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80090da:	f7fe fee3 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 80090de:	61f8      	str	r0, [r7, #28]
        break;
 80090e0:	e142      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80090e2:	4b95      	ldr	r3, [pc, #596]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80090e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f4:	d013      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090fc:	d819      	bhi.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910a:	d004      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800910c:	e011      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800910e:	f7fe ff61 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8009112:	61f8      	str	r0, [r7, #28]
          break;
 8009114:	e010      	b.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8009116:	f7fe fec5 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 800911a:	61f8      	str	r0, [r7, #28]
          break;
 800911c:	e00c      	b.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800911e:	4b86      	ldr	r3, [pc, #536]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800912a:	d104      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800912c:	4b83      	ldr	r3, [pc, #524]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800912e:	61fb      	str	r3, [r7, #28]
          break;
 8009130:	e001      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8009132:	bf00      	nop
 8009134:	e118      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009136:	bf00      	nop
        break;
 8009138:	e116      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800913a:	4b7f      	ldr	r3, [pc, #508]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800914c:	d013      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009154:	d819      	bhi.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009162:	d004      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8009164:	e011      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009166:	f7fe ff35 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800916a:	61f8      	str	r0, [r7, #28]
          break;
 800916c:	e010      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800916e:	f7fe fe99 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8009172:	61f8      	str	r0, [r7, #28]
          break;
 8009174:	e00c      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009176:	4b70      	ldr	r3, [pc, #448]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800917e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009182:	d104      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8009184:	4b6d      	ldr	r3, [pc, #436]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009186:	61fb      	str	r3, [r7, #28]
          break;
 8009188:	e001      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800918a:	bf00      	nop
 800918c:	e0ec      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800918e:	bf00      	nop
        break;
 8009190:	e0ea      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009192:	4b69      	ldr	r3, [pc, #420]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800919c:	613b      	str	r3, [r7, #16]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a4:	d013      	beq.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ac:	d819      	bhi.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091ba:	d004      	beq.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80091bc:	e011      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091be:	f7fe ff09 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 80091c2:	61f8      	str	r0, [r7, #28]
          break;
 80091c4:	e010      	b.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80091c6:	f7fe fe6d 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 80091ca:	61f8      	str	r0, [r7, #28]
          break;
 80091cc:	e00c      	b.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091ce:	4b5a      	ldr	r3, [pc, #360]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	d104      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80091dc:	4b57      	ldr	r3, [pc, #348]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80091de:	61fb      	str	r3, [r7, #28]
          break;
 80091e0:	e001      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80091e2:	bf00      	nop
 80091e4:	e0c0      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091e6:	bf00      	nop
        break;
 80091e8:	e0be      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80091ea:	4b53      	ldr	r3, [pc, #332]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091fc:	d02c      	beq.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009204:	d833      	bhi.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800920c:	d01a      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009214:	d82b      	bhi.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009222:	d004      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8009224:	e023      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009226:	f7fe fed5 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800922a:	61f8      	str	r0, [r7, #28]
          break;
 800922c:	e026      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800922e:	4b42      	ldr	r3, [pc, #264]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b02      	cmp	r3, #2
 800923a:	d11a      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800923c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009240:	61fb      	str	r3, [r7, #28]
          break;
 8009242:	e016      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009244:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800924c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009250:	d111      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8009252:	4b3a      	ldr	r3, [pc, #232]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009254:	61fb      	str	r3, [r7, #28]
          break;
 8009256:	e00e      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009258:	4b37      	ldr	r3, [pc, #220]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d109      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8009266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800926a:	61fb      	str	r3, [r7, #28]
          break;
 800926c:	e005      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800926e:	bf00      	nop
 8009270:	e07a      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009272:	bf00      	nop
 8009274:	e078      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009276:	bf00      	nop
 8009278:	e076      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800927a:	bf00      	nop
        break;
 800927c:	e074      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800927e:	4b2e      	ldr	r3, [pc, #184]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009290:	d02c      	beq.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009298:	d833      	bhi.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a0:	d01a      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a8:	d82b      	bhi.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b6:	d004      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80092b8:	e023      	b.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80092ba:	f7fe fe8b 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 80092be:	61f8      	str	r0, [r7, #28]
          break;
 80092c0:	e026      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80092c2:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80092c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d11a      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80092d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80092d4:	61fb      	str	r3, [r7, #28]
          break;
 80092d6:	e016      	b.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e4:	d111      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80092e6:	4b15      	ldr	r3, [pc, #84]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80092e8:	61fb      	str	r3, [r7, #28]
          break;
 80092ea:	e00e      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092ec:	4b12      	ldr	r3, [pc, #72]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80092ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d109      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80092fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092fe:	61fb      	str	r3, [r7, #28]
          break;
 8009300:	e005      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8009302:	bf00      	nop
 8009304:	e030      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009306:	bf00      	nop
 8009308:	e02e      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800930a:	bf00      	nop
 800930c:	e02c      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800930e:	bf00      	nop
        break;
 8009310:	e02a      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932a:	d009      	beq.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800932c:	e012      	b.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800932e:	f7fe fe51 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 8009332:	61f8      	str	r0, [r7, #28]
          break;
 8009334:	e00e      	b.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8009336:	bf00      	nop
 8009338:	40021000 	.word	0x40021000
 800933c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800934c:	d101      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800934e:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8009350:	61fb      	str	r3, [r7, #28]
          break;
 8009352:	bf00      	nop
        break;
 8009354:	e008      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009356:	bf00      	nop
 8009358:	e006      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800935a:	bf00      	nop
 800935c:	e004      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800935e:	bf00      	nop
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009366:	bf00      	nop
    }
  }

  return(frequency);
 8009368:	69fb      	ldr	r3, [r7, #28]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	40021000 	.word	0x40021000
 8009378:	00f42400 	.word	0x00f42400

0800937c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800938a:	4b75      	ldr	r3, [pc, #468]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d018      	beq.n	80093c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009396:	4b72      	ldr	r3, [pc, #456]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f003 0203 	and.w	r2, r3, #3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d10d      	bne.n	80093c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
       ||
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80093ae:	4b6c      	ldr	r3, [pc, #432]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	091b      	lsrs	r3, r3, #4
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
       ||
 80093be:	429a      	cmp	r2, r3
 80093c0:	d047      	beq.n	8009452 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
 80093c6:	e044      	b.n	8009452 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d018      	beq.n	8009402 <RCCEx_PLLSAI1_Config+0x86>
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d825      	bhi.n	8009420 <RCCEx_PLLSAI1_Config+0xa4>
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d002      	beq.n	80093de <RCCEx_PLLSAI1_Config+0x62>
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d009      	beq.n	80093f0 <RCCEx_PLLSAI1_Config+0x74>
 80093dc:	e020      	b.n	8009420 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80093de:	4b60      	ldr	r3, [pc, #384]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d11d      	bne.n	8009426 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093ee:	e01a      	b.n	8009426 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80093f0:	4b5b      	ldr	r3, [pc, #364]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d116      	bne.n	800942a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009400:	e013      	b.n	800942a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009402:	4b57      	ldr	r3, [pc, #348]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10f      	bne.n	800942e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800940e:	4b54      	ldr	r3, [pc, #336]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800941e:	e006      	b.n	800942e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	e004      	b.n	8009430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009426:	bf00      	nop
 8009428:	e002      	b.n	8009430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800942a:	bf00      	nop
 800942c:	e000      	b.n	8009430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800942e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10d      	bne.n	8009452 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009436:	4b4a      	ldr	r3, [pc, #296]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6819      	ldr	r1, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	3b01      	subs	r3, #1
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	430b      	orrs	r3, r1
 800944c:	4944      	ldr	r1, [pc, #272]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800944e:	4313      	orrs	r3, r2
 8009450:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d17d      	bne.n	8009554 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009458:	4b41      	ldr	r3, [pc, #260]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a40      	ldr	r2, [pc, #256]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800945e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009464:	f7fa f83c 	bl	80034e0 <HAL_GetTick>
 8009468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800946a:	e009      	b.n	8009480 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800946c:	f7fa f838 	bl	80034e0 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d902      	bls.n	8009480 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	73fb      	strb	r3, [r7, #15]
        break;
 800947e:	e005      	b.n	800948c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009480:	4b37      	ldr	r3, [pc, #220]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1ef      	bne.n	800946c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d160      	bne.n	8009554 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d111      	bne.n	80094bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009498:	4b31      	ldr	r3, [pc, #196]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80094a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6892      	ldr	r2, [r2, #8]
 80094a8:	0211      	lsls	r1, r2, #8
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	68d2      	ldr	r2, [r2, #12]
 80094ae:	0912      	lsrs	r2, r2, #4
 80094b0:	0452      	lsls	r2, r2, #17
 80094b2:	430a      	orrs	r2, r1
 80094b4:	492a      	ldr	r1, [pc, #168]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	610b      	str	r3, [r1, #16]
 80094ba:	e027      	b.n	800950c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d112      	bne.n	80094e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094c2:	4b27      	ldr	r3, [pc, #156]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80094ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6892      	ldr	r2, [r2, #8]
 80094d2:	0211      	lsls	r1, r2, #8
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6912      	ldr	r2, [r2, #16]
 80094d8:	0852      	lsrs	r2, r2, #1
 80094da:	3a01      	subs	r2, #1
 80094dc:	0552      	lsls	r2, r2, #21
 80094de:	430a      	orrs	r2, r1
 80094e0:	491f      	ldr	r1, [pc, #124]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	610b      	str	r3, [r1, #16]
 80094e6:	e011      	b.n	800950c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094e8:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80094f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6892      	ldr	r2, [r2, #8]
 80094f8:	0211      	lsls	r1, r2, #8
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6952      	ldr	r2, [r2, #20]
 80094fe:	0852      	lsrs	r2, r2, #1
 8009500:	3a01      	subs	r2, #1
 8009502:	0652      	lsls	r2, r2, #25
 8009504:	430a      	orrs	r2, r1
 8009506:	4916      	ldr	r1, [pc, #88]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009508:	4313      	orrs	r3, r2
 800950a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800950c:	4b14      	ldr	r3, [pc, #80]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009516:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009518:	f7f9 ffe2 	bl	80034e0 <HAL_GetTick>
 800951c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800951e:	e009      	b.n	8009534 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009520:	f7f9 ffde 	bl	80034e0 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d902      	bls.n	8009534 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	73fb      	strb	r3, [r7, #15]
          break;
 8009532:	e005      	b.n	8009540 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0ef      	beq.n	8009520 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009548:	691a      	ldr	r2, [r3, #16]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	4904      	ldr	r1, [pc, #16]	; (8009560 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009550:	4313      	orrs	r3, r2
 8009552:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	40021000 	.word	0x40021000

08009564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009572:	4b6a      	ldr	r3, [pc, #424]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d018      	beq.n	80095b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800957e:	4b67      	ldr	r3, [pc, #412]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0203 	and.w	r2, r3, #3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d10d      	bne.n	80095aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
       ||
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009596:	4b61      	ldr	r3, [pc, #388]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	091b      	lsrs	r3, r3, #4
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
       ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d047      	beq.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	73fb      	strb	r3, [r7, #15]
 80095ae:	e044      	b.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d018      	beq.n	80095ea <RCCEx_PLLSAI2_Config+0x86>
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d825      	bhi.n	8009608 <RCCEx_PLLSAI2_Config+0xa4>
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d002      	beq.n	80095c6 <RCCEx_PLLSAI2_Config+0x62>
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d009      	beq.n	80095d8 <RCCEx_PLLSAI2_Config+0x74>
 80095c4:	e020      	b.n	8009608 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80095c6:	4b55      	ldr	r3, [pc, #340]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11d      	bne.n	800960e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095d6:	e01a      	b.n	800960e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80095d8:	4b50      	ldr	r3, [pc, #320]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d116      	bne.n	8009612 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095e8:	e013      	b.n	8009612 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80095ea:	4b4c      	ldr	r3, [pc, #304]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10f      	bne.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80095f6:	4b49      	ldr	r3, [pc, #292]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009606:	e006      	b.n	8009616 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
      break;
 800960c:	e004      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009616:	bf00      	nop
    }

    if(status == HAL_OK)
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10d      	bne.n	800963a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800961e:	4b3f      	ldr	r3, [pc, #252]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	3b01      	subs	r3, #1
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	430b      	orrs	r3, r1
 8009634:	4939      	ldr	r1, [pc, #228]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009636:	4313      	orrs	r3, r2
 8009638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d167      	bne.n	8009710 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009640:	4b36      	ldr	r3, [pc, #216]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a35      	ldr	r2, [pc, #212]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800964a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964c:	f7f9 ff48 	bl	80034e0 <HAL_GetTick>
 8009650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009652:	e009      	b.n	8009668 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009654:	f7f9 ff44 	bl	80034e0 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d902      	bls.n	8009668 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
        break;
 8009666:	e005      	b.n	8009674 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009668:	4b2c      	ldr	r3, [pc, #176]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ef      	bne.n	8009654 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d14a      	bne.n	8009710 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d111      	bne.n	80096a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009680:	4b26      	ldr	r3, [pc, #152]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6892      	ldr	r2, [r2, #8]
 8009690:	0211      	lsls	r1, r2, #8
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68d2      	ldr	r2, [r2, #12]
 8009696:	0912      	lsrs	r2, r2, #4
 8009698:	0452      	lsls	r2, r2, #17
 800969a:	430a      	orrs	r2, r1
 800969c:	491f      	ldr	r1, [pc, #124]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	614b      	str	r3, [r1, #20]
 80096a2:	e011      	b.n	80096c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80096a4:	4b1d      	ldr	r3, [pc, #116]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80096ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6892      	ldr	r2, [r2, #8]
 80096b4:	0211      	lsls	r1, r2, #8
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6912      	ldr	r2, [r2, #16]
 80096ba:	0852      	lsrs	r2, r2, #1
 80096bc:	3a01      	subs	r2, #1
 80096be:	0652      	lsls	r2, r2, #25
 80096c0:	430a      	orrs	r2, r1
 80096c2:	4916      	ldr	r1, [pc, #88]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80096c8:	4b14      	ldr	r3, [pc, #80]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a13      	ldr	r2, [pc, #76]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80096ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d4:	f7f9 ff04 	bl	80034e0 <HAL_GetTick>
 80096d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096da:	e009      	b.n	80096f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80096dc:	f7f9 ff00 	bl	80034e0 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d902      	bls.n	80096f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	73fb      	strb	r3, [r7, #15]
          break;
 80096ee:	e005      	b.n	80096fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0ef      	beq.n	80096dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009702:	4b06      	ldr	r3, [pc, #24]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	4904      	ldr	r1, [pc, #16]	; (800971c <RCCEx_PLLSAI2_Config+0x1b8>)
 800970c:	4313      	orrs	r3, r2
 800970e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40021000 	.word	0x40021000

08009720 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009720:	b480      	push	{r7}
 8009722:	b089      	sub	sp, #36	; 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800973c:	d10c      	bne.n	8009758 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800973e:	4b6e      	ldr	r3, [pc, #440]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009744:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009748:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009750:	d112      	bne.n	8009778 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009752:	4b6a      	ldr	r3, [pc, #424]	; (80098fc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	e00f      	b.n	8009778 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	d10b      	bne.n	8009778 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009760:	4b65      	ldr	r3, [pc, #404]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009766:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800976a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009772:	d101      	bne.n	8009778 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009774:	4b61      	ldr	r3, [pc, #388]	; (80098fc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009776:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 80b4 	bne.w	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800978a:	d003      	beq.n	8009794 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009792:	d135      	bne.n	8009800 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009794:	4b58      	ldr	r3, [pc, #352]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097a0:	f040 80a1 	bne.w	80098e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80097a4:	4b54      	ldr	r3, [pc, #336]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 809a 	beq.w	80098e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80097b2:	4b51      	ldr	r3, [pc, #324]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	091b      	lsrs	r3, r3, #4
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	3301      	adds	r3, #1
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80097c6:	4b4c      	ldr	r3, [pc, #304]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80097d8:	4b47      	ldr	r3, [pc, #284]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80097e4:	2311      	movs	r3, #17
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	e001      	b.n	80097ee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80097ea:	2307      	movs	r3, #7
 80097ec:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	fb03 f202 	mul.w	r2, r3, r2
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097fc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80097fe:	e072      	b.n	80098e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d133      	bne.n	800986e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009806:	4b3c      	ldr	r3, [pc, #240]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800980e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009812:	d169      	bne.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009814:	4b38      	ldr	r3, [pc, #224]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d063      	beq.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009820:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	091b      	lsrs	r3, r3, #4
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	3301      	adds	r3, #1
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009832:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009834:	4b30      	ldr	r3, [pc, #192]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009846:	4b2c      	ldr	r3, [pc, #176]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8009852:	2311      	movs	r3, #17
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e001      	b.n	800985c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009858:	2307      	movs	r3, #7
 800985a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	fb03 f202 	mul.w	r2, r3, r2
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	fbb2 f3f3 	udiv	r3, r2, r3
 800986a:	61fb      	str	r3, [r7, #28]
 800986c:	e03c      	b.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009874:	d003      	beq.n	800987e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800987c:	d134      	bne.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800987e:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800988a:	d12d      	bne.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800988c:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d027      	beq.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009898:	4b17      	ldr	r3, [pc, #92]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	091b      	lsrs	r3, r3, #4
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	3301      	adds	r3, #1
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098aa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80098ac:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	0a1b      	lsrs	r3, r3, #8
 80098b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80098ca:	2311      	movs	r3, #17
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	e001      	b.n	80098d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80098d0:	2307      	movs	r3, #7
 80098d2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	fb03 f202 	mul.w	r2, r3, r2
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	e000      	b.n	80098e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80098e6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80098e8:	69fb      	ldr	r3, [r7, #28]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3724      	adds	r7, #36	; 0x24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40021000 	.word	0x40021000
 80098fc:	001fff68 	.word	0x001fff68

08009900 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d06c      	beq.n	80099ec <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f7 fc3a 	bl	80011a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	22ca      	movs	r2, #202	; 0xca
 800993a:	625a      	str	r2, [r3, #36]	; 0x24
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2253      	movs	r2, #83	; 0x53
 8009942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f87c 	bl	8009a42 <RTC_EnterInitMode>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d14b      	bne.n	80099ec <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6812      	ldr	r2, [r2, #0]
 800995e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009966:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6899      	ldr	r1, [r3, #8]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68d2      	ldr	r2, [r2, #12]
 800998e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6919      	ldr	r1, [r3, #16]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	041a      	lsls	r2, r3, #16
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f87f 	bl	8009aa8 <RTC_ExitInitMode>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11b      	bne.n	80099ec <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0203 	bic.w	r2, r2, #3
 80099c2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69da      	ldr	r2, [r3, #28]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	22ff      	movs	r2, #255	; 0xff
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a0c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009a0e:	f7f9 fd67 	bl	80034e0 <HAL_GetTick>
 8009a12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a14:	e009      	b.n	8009a2a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a16:	f7f9 fd63 	bl	80034e0 <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a24:	d901      	bls.n	8009a2a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e007      	b.n	8009a3a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0ee      	beq.n	8009a16 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d120      	bne.n	8009a9e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a66:	f7f9 fd3b 	bl	80034e0 <HAL_GetTick>
 8009a6a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a6c:	e00d      	b.n	8009a8a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a6e:	f7f9 fd37 	bl	80034e0 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a7c:	d905      	bls.n	8009a8a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2203      	movs	r2, #3
 8009a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <RTC_EnterInitMode+0x5c>
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d1e7      	bne.n	8009a6e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009ab4:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	4a19      	ldr	r2, [pc, #100]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009abe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ac0:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10c      	bne.n	8009ae6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff ff92 	bl	80099f6 <HAL_RTC_WaitForSynchro>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01e      	beq.n	8009b16 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2203      	movs	r2, #3
 8009adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	73fb      	strb	r3, [r7, #15]
 8009ae4:	e017      	b.n	8009b16 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009aec:	f023 0320 	bic.w	r3, r3, #32
 8009af0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff ff7f 	bl	80099f6 <HAL_RTC_WaitForSynchro>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2203      	movs	r2, #3
 8009b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <RTC_ExitInitMode+0x78>)
 8009b10:	f043 0320 	orr.w	r3, r3, #32
 8009b14:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	40002800 	.word	0x40002800

08009b24 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d904      	bls.n	8009b42 <HAL_SAI_InitProtocol+0x1e>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3b03      	subs	r3, #3
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d812      	bhi.n	8009b66 <HAL_SAI_InitProtocol+0x42>
 8009b40:	e008      	b.n	8009b54 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fc49 	bl	800a3e0 <SAI_InitI2S>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]
      break;
 8009b52:	e00b      	b.n	8009b6c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 fcf2 	bl	800a544 <SAI_InitPCM>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
      break;
 8009b64:	e002      	b.n	8009b6c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6a:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 f808 	bl	8009b88 <HAL_SAI_Init>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e155      	b.n	8009e46 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7f8 fb02 	bl	80021b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fd7f 	bl	800a6b8 <SAI_Disable>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e140      	b.n	8009e46 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d00c      	beq.n	8009bee <HAL_SAI_Init+0x66>
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d80d      	bhi.n	8009bf4 <HAL_SAI_Init+0x6c>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_SAI_Init+0x5a>
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d003      	beq.n	8009be8 <HAL_SAI_Init+0x60>
 8009be0:	e008      	b.n	8009bf4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61fb      	str	r3, [r7, #28]
      break;
 8009be6:	e008      	b.n	8009bfa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009be8:	2310      	movs	r3, #16
 8009bea:	61fb      	str	r3, [r7, #28]
      break;
 8009bec:	e005      	b.n	8009bfa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009bee:	2320      	movs	r3, #32
 8009bf0:	61fb      	str	r3, [r7, #28]
      break;
 8009bf2:	e002      	b.n	8009bfa <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]
      break;
 8009bf8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d81d      	bhi.n	8009c3e <HAL_SAI_Init+0xb6>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <HAL_SAI_Init+0x80>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c1f 	.word	0x08009c1f
 8009c10:	08009c27 	.word	0x08009c27
 8009c14:	08009c2f 	.word	0x08009c2f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
      break;
 8009c1c:	e012      	b.n	8009c44 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c22:	617b      	str	r3, [r7, #20]
      break;
 8009c24:	e00e      	b.n	8009c44 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c2a:	617b      	str	r3, [r7, #20]
      break;
 8009c2c:	e00a      	b.n	8009c44 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c32:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	61fb      	str	r3, [r7, #28]
      break;
 8009c3c:	e002      	b.n	8009c44 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
      break;
 8009c42:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a81      	ldr	r2, [pc, #516]	; (8009e50 <HAL_SAI_Init+0x2c8>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d004      	beq.n	8009c58 <HAL_SAI_Init+0xd0>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a80      	ldr	r2, [pc, #512]	; (8009e54 <HAL_SAI_Init+0x2cc>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d103      	bne.n	8009c60 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8009c58:	4a7f      	ldr	r2, [pc, #508]	; (8009e58 <HAL_SAI_Init+0x2d0>)
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e002      	b.n	8009c66 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009c60:	4a7e      	ldr	r2, [pc, #504]	; (8009e5c <HAL_SAI_Init+0x2d4>)
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d041      	beq.n	8009cf2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a77      	ldr	r2, [pc, #476]	; (8009e50 <HAL_SAI_Init+0x2c8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d004      	beq.n	8009c82 <HAL_SAI_Init+0xfa>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a75      	ldr	r2, [pc, #468]	; (8009e54 <HAL_SAI_Init+0x2cc>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d105      	bne.n	8009c8e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009c82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c86:	f7fe fe0b 	bl	80088a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c8a:	6138      	str	r0, [r7, #16]
 8009c8c:	e004      	b.n	8009c98 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009c8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009c92:	f7fe fe05 	bl	80088a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c96:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	025b      	lsls	r3, r3, #9
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4a6b      	ldr	r2, [pc, #428]	; (8009e60 <HAL_SAI_Init+0x2d8>)
 8009cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb8:	08da      	lsrs	r2, r3, #3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	4b67      	ldr	r3, [pc, #412]	; (8009e60 <HAL_SAI_Init+0x2d8>)
 8009cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cc6:	08da      	lsrs	r2, r3, #3
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	1aca      	subs	r2, r1, r3
 8009cd2:	2a08      	cmp	r2, #8
 8009cd4:	d904      	bls.n	8009ce0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d104      	bne.n	8009cf2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	085a      	lsrs	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_SAI_Init+0x17a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d109      	bne.n	8009d16 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d101      	bne.n	8009d0e <HAL_SAI_Init+0x186>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e001      	b.n	8009d12 <HAL_SAI_Init+0x18a>
 8009d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d12:	61bb      	str	r3, [r7, #24]
 8009d14:	e008      	b.n	8009d28 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d102      	bne.n	8009d24 <HAL_SAI_Init+0x19c>
 8009d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d22:	e000      	b.n	8009d26 <HAL_SAI_Init+0x19e>
 8009d24:	2300      	movs	r3, #0
 8009d26:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4b4c      	ldr	r3, [pc, #304]	; (8009e64 <HAL_SAI_Init+0x2dc>)
 8009d34:	400b      	ands	r3, r1
 8009d36:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6819      	ldr	r1, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d4c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	431a      	orrs	r2, r3
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8009d60:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d6c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	051b      	lsls	r3, r3, #20
 8009d74:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6812      	ldr	r2, [r2, #0]
 8009d88:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d8c:	f023 030f 	bic.w	r3, r3, #15
 8009d90:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6859      	ldr	r1, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	431a      	orrs	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6899      	ldr	r1, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	4b2b      	ldr	r3, [pc, #172]	; (8009e68 <HAL_SAI_Init+0x2e0>)
 8009dbc:	400b      	ands	r3, r1
 8009dbe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6899      	ldr	r1, [r3, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009dd0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009dd6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009ddc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de2:	3b01      	subs	r3, #1
 8009de4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009de6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68d9      	ldr	r1, [r3, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009dfe:	400b      	ands	r3, r1
 8009e00:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68d9      	ldr	r1, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e10:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e16:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009e18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3720      	adds	r7, #32
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40015404 	.word	0x40015404
 8009e54:	40015424 	.word	0x40015424
 8009e58:	40015400 	.word	0x40015400
 8009e5c:	40015800 	.word	0x40015800
 8009e60:	cccccccd 	.word	0xcccccccd
 8009e64:	ff05c010 	.word	0xff05c010
 8009e68:	fff88000 	.word	0xfff88000

08009e6c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d101      	bne.n	8009e86 <HAL_SAI_Abort+0x1a>
 8009e82:	2302      	movs	r3, #2
 8009e84:	e053      	b.n	8009f2e <HAL_SAI_Abort+0xc2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9c:	d125      	bne.n	8009eea <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009eac:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b12      	cmp	r3, #18
 8009eb8:	d108      	bne.n	8009ecc <HAL_SAI_Abort+0x60>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d004      	beq.n	8009ecc <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fb f98c 	bl	80051e4 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b22      	cmp	r3, #34	; 0x22
 8009ed6:	d108      	bne.n	8009eea <HAL_SAI_Abort+0x7e>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d004      	beq.n	8009eea <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fb f97d 	bl	80051e4 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fbdb 	bl	800a6b8 <SAI_Disable>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0208 	orr.w	r2, r2, #8
 8009f1a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009f46:	f7f9 facb 	bl	80034e0 <HAL_GetTick>
 8009f4a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <HAL_SAI_Transmit_DMA+0x20>
 8009f52:	88fb      	ldrh	r3, [r7, #6]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e093      	b.n	800a084 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	f040 808c 	bne.w	800a082 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_SAI_Transmit_DMA+0x40>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e085      	b.n	800a084 <HAL_SAI_Transmit_DMA+0x14c>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	88fa      	ldrh	r2, [r7, #6]
 8009f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	88fa      	ldrh	r2, [r7, #6]
 8009f92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2212      	movs	r2, #18
 8009fa2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009faa:	4a38      	ldr	r2, [pc, #224]	; (800a08c <HAL_SAI_Transmit_DMA+0x154>)
 8009fac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb2:	4a37      	ldr	r2, [pc, #220]	; (800a090 <HAL_SAI_Transmit_DMA+0x158>)
 8009fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fba:	4a36      	ldr	r2, [pc, #216]	; (800a094 <HAL_SAI_Transmit_DMA+0x15c>)
 8009fbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	331c      	adds	r3, #28
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fde:	f7fb f8a1 	bl	8005124 <HAL_DMA_Start_IT>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e047      	b.n	800a084 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fb26 	bl	800a648 <SAI_InterruptFlag>
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a01a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a01c:	e015      	b.n	800a04a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a01e:	f7f9 fa5f 	bl	80034e0 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a02c:	d90d      	bls.n	800a04a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e01c      	b.n	800a084 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0e2      	beq.n	800a01e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d107      	bne.n	800a076 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a074:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800a082:	2302      	movs	r3, #2
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0800a78b 	.word	0x0800a78b
 800a090:	0800a72d 	.word	0x0800a72d
 800a094:	0800a7a7 	.word	0x0800a7a7

0800a098 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 8192 	beq.w	800a3d2 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <HAL_SAI_IRQHandler+0x4c>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
 800a0e2:	e176      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01e      	beq.n	800a12c <HAL_SAI_IRQHandler+0x94>
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d019      	beq.n	800a12c <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b22      	cmp	r3, #34	; 0x22
 800a10a:	d101      	bne.n	800a110 <HAL_SAI_IRQHandler+0x78>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <HAL_SAI_IRQHandler+0x7a>
 800a110:	2302      	movs	r3, #2
 800a112:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7f7 ff93 	bl	8002050 <HAL_SAI_ErrorCallback>
 800a12a:	e152      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d011      	beq.n	800a15a <HAL_SAI_IRQHandler+0xc2>
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00c      	beq.n	800a15a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2202      	movs	r2, #2
 800a146:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 8140 	beq.w	800a3d2 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a156:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a158:	e13b      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d055      	beq.n	800a210 <HAL_SAI_IRQHandler+0x178>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d050      	beq.n	800a210 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2220      	movs	r2, #32
 800a174:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a17c:	f043 0204 	orr.w	r2, r3, #4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d038      	beq.n	800a202 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d016      	beq.n	800a1c6 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19c:	4a8f      	ldr	r2, [pc, #572]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a19e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fb f85b 	bl	8005260 <HAL_DMA_Abort_IT>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f7 ff45 	bl	8002050 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80fc 	beq.w	800a3c8 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d4:	4a81      	ldr	r2, [pc, #516]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a1d6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fb f83f 	bl	8005260 <HAL_DMA_Abort_IT>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80ef 	beq.w	800a3c8 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7f7 ff28 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a200:	e0e2      	b.n	800a3c8 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff fe32 	bl	8009e6c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7f7 ff21 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a20e:	e0db      	b.n	800a3c8 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d055      	beq.n	800a2c6 <HAL_SAI_IRQHandler+0x22e>
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	d050      	beq.n	800a2c6 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2240      	movs	r2, #64	; 0x40
 800a22a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a232:	f043 0208 	orr.w	r2, r3, #8
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d038      	beq.n	800a2b8 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a252:	4a62      	ldr	r2, [pc, #392]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a254:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fb f800 	bl	8005260 <HAL_DMA_Abort_IT>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a26c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7f7 feea 	bl	8002050 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 80a3 	beq.w	800a3cc <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28a:	4a54      	ldr	r2, [pc, #336]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a28c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a292:	4618      	mov	r0, r3
 800a294:	f7fa ffe4 	bl	8005260 <HAL_DMA_Abort_IT>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 8096 	beq.w	800a3cc <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7f7 fecd 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a2b6:	e089      	b.n	800a3cc <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff fdd7 	bl	8009e6c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f7 fec6 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a2c4:	e082      	b.n	800a3cc <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d061      	beq.n	800a394 <HAL_SAI_IRQHandler+0x2fc>
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d05c      	beq.n	800a394 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2204      	movs	r2, #4
 800a2e0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2e8:	f043 0220 	orr.w	r2, r3, #32
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d036      	beq.n	800a36a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a300:	2b00      	cmp	r3, #0
 800a302:	d016      	beq.n	800a332 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a308:	4a34      	ldr	r2, [pc, #208]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a310:	4618      	mov	r0, r3
 800a312:	f7fa ffa5 	bl	8005260 <HAL_DMA_Abort_IT>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a322:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7f7 fe8f 	bl	8002050 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04a      	beq.n	800a3d0 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33e:	4a27      	ldr	r2, [pc, #156]	; (800a3dc <HAL_SAI_IRQHandler+0x344>)
 800a340:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a346:	4618      	mov	r0, r3
 800a348:	f7fa ff8a 	bl	8005260 <HAL_DMA_Abort_IT>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d03e      	beq.n	800a3d0 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a358:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f7 fe74 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a368:	e032      	b.n	800a3d0 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2200      	movs	r2, #0
 800a370:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f04f 32ff 	mov.w	r2, #4294967295
 800a37a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7f7 fe5f 	bl	8002050 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a392:	e01d      	b.n	800a3d0 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d019      	beq.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d014      	beq.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b6:	f043 0210 	orr.w	r2, r3, #16
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7f7 fe45 	bl	8002050 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a3c6:	e004      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a3c8:	bf00      	nop
 800a3ca:	e002      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a3cc:	bf00      	nop
 800a3ce:	e000      	b.n	800a3d2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a3d0:	bf00      	nop
}
 800a3d2:	bf00      	nop
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800a7f9 	.word	0x0800a7f9

0800a3e0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <SAI_InitI2S+0x2e>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d103      	bne.n	800a416 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	63da      	str	r2, [r3, #60]	; 0x3c
 800a414:	e002      	b.n	800a41c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a422:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a42a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e077      	b.n	800a536 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d107      	bne.n	800a45c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a458:	651a      	str	r2, [r3, #80]	; 0x50
 800a45a:	e006      	b.n	800a46a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a462:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d84f      	bhi.n	800a510 <SAI_InitI2S+0x130>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <SAI_InitI2S+0x98>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a489 	.word	0x0800a489
 800a47c:	0800a4ab 	.word	0x0800a4ab
 800a480:	0800a4cd 	.word	0x0800a4cd
 800a484:	0800a4ef 	.word	0x0800a4ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2280      	movs	r2, #128	; 0x80
 800a48c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	085b      	lsrs	r3, r3, #1
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	011a      	lsls	r2, r3, #4
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2240      	movs	r2, #64	; 0x40
 800a4a6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a4a8:	e035      	b.n	800a516 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2280      	movs	r2, #128	; 0x80
 800a4ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	019a      	lsls	r2, r3, #6
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	085b      	lsrs	r3, r3, #1
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2280      	movs	r2, #128	; 0x80
 800a4c8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a4ca:	e024      	b.n	800a516 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	22c0      	movs	r2, #192	; 0xc0
 800a4d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	085b      	lsrs	r3, r3, #1
 800a4d6:	019a      	lsls	r2, r3, #6
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	085b      	lsrs	r3, r3, #1
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2280      	movs	r2, #128	; 0x80
 800a4ea:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a4ec:	e013      	b.n	800a516 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	22e0      	movs	r2, #224	; 0xe0
 800a4f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	019a      	lsls	r2, r3, #6
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	085b      	lsrs	r3, r3, #1
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2280      	movs	r2, #128	; 0x80
 800a50c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a50e:	e002      	b.n	800a516 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
      break;
 800a514:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d10b      	bne.n	800a534 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d102      	bne.n	800a528 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2210      	movs	r2, #16
 800a526:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d102      	bne.n	800a534 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2208      	movs	r2, #8
 800a532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop

0800a544 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <SAI_InitPCM+0x2e>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d103      	bne.n	800a57a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	63da      	str	r2, [r3, #60]	; 0x3c
 800a578:	e002      	b.n	800a580 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a58c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a594:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5a8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d103      	bne.n	800a5b8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	645a      	str	r2, [r3, #68]	; 0x44
 800a5b6:	e002      	b.n	800a5be <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	220d      	movs	r2, #13
 800a5bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d837      	bhi.n	800a634 <SAI_InitPCM+0xf0>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <SAI_InitPCM+0x88>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5f3 	.word	0x0800a5f3
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a61f 	.word	0x0800a61f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2280      	movs	r2, #128	; 0x80
 800a5e0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	011a      	lsls	r2, r3, #4
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2240      	movs	r2, #64	; 0x40
 800a5ee:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a5f0:	e023      	b.n	800a63a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2280      	movs	r2, #128	; 0x80
 800a5f6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2280      	movs	r2, #128	; 0x80
 800a604:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a606:	e018      	b.n	800a63a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	22c0      	movs	r2, #192	; 0xc0
 800a60c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2280      	movs	r2, #128	; 0x80
 800a61a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a61c:	e00d      	b.n	800a63a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22e0      	movs	r2, #224	; 0xe0
 800a622:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2280      	movs	r2, #128	; 0x80
 800a630:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a632:	e002      	b.n	800a63a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	75fb      	strb	r3, [r7, #23]
      break;
 800a638:	bf00      	nop
  }

  return status;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a654:	2301      	movs	r3, #1
 800a656:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d103      	bne.n	800a666 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f043 0308 	orr.w	r3, r3, #8
 800a664:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	2b08      	cmp	r3, #8
 800a66c:	d10b      	bne.n	800a686 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a672:	2b03      	cmp	r3, #3
 800a674:	d003      	beq.n	800a67e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d103      	bne.n	800a686 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f043 0310 	orr.w	r3, r3, #16
 800a684:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d003      	beq.n	800a696 <SAI_InterruptFlag+0x4e>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d104      	bne.n	800a6a0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	e003      	b.n	800a6a8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f043 0304 	orr.w	r3, r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a6c0:	4b18      	ldr	r3, [pc, #96]	; (800a724 <SAI_Disable+0x6c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a18      	ldr	r2, [pc, #96]	; (800a728 <SAI_Disable+0x70>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	0b1b      	lsrs	r3, r3, #12
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a6e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	72fb      	strb	r3, [r7, #11]
      break;
 800a6fe:	e009      	b.n	800a714 <SAI_Disable+0x5c>
    }
    count--;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3b01      	subs	r3, #1
 800a704:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e7      	bne.n	800a6e4 <SAI_Disable+0x2c>

  return status;
 800a714:	7afb      	ldrb	r3, [r7, #11]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20000000 	.word	0x20000000
 800a728:	95cbec1b 	.word	0x95cbec1b

0800a72c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	2b20      	cmp	r3, #32
 800a740:	d01c      	beq.n	800a77c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a758:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a75a:	2100      	movs	r1, #0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff ff73 	bl	800a648 <SAI_InterruptFlag>
 800a762:	4603      	mov	r3, r0
 800a764:	43d9      	mvns	r1, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	400a      	ands	r2, r1
 800a772:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7f7 fc43 	bl	8002008 <HAL_SAI_TxCpltCallback>
#endif
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7f7 fc47 	bl	800202c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a7d2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7ff ff6f 	bl	800a6b8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7f7 fc30 	bl	8002050 <HAL_SAI_ErrorCallback>
#endif
}
 800a7f0:	bf00      	nop
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a814:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2200      	movs	r2, #0
 800a81c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f04f 32ff 	mov.w	r2, #4294967295
 800a826:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d00a      	beq.n	800a848 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7ff ff40 	bl	800a6b8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0208 	orr.w	r2, r2, #8
 800a846:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7f7 fbf9 	bl	8002050 <HAL_SAI_ErrorCallback>
#endif
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e040      	b.n	800a8fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7f6 fcbb 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2224      	movs	r2, #36	; 0x24
 800a892:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0201 	bic.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f82d 	bl	800a904 <UART_SetConfig>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e022      	b.n	800a8fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fad9 	bl	800ae74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f042 0201 	orr.w	r2, r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fb60 	bl	800afb8 <UART_CheckIdleState>
 800a8f8:	4603      	mov	r3, r0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a908:	b08a      	sub	sp, #40	; 0x28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	431a      	orrs	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	431a      	orrs	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	4313      	orrs	r3, r2
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4ba4      	ldr	r3, [pc, #656]	; (800abc4 <UART_SetConfig+0x2c0>)
 800a934:	4013      	ands	r3, r2
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a99      	ldr	r2, [pc, #612]	; (800abc8 <UART_SetConfig+0x2c4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d004      	beq.n	800a970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96c:	4313      	orrs	r3, r2
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	430a      	orrs	r2, r1
 800a982:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a90      	ldr	r2, [pc, #576]	; (800abcc <UART_SetConfig+0x2c8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d126      	bne.n	800a9dc <UART_SetConfig+0xd8>
 800a98e:	4b90      	ldr	r3, [pc, #576]	; (800abd0 <UART_SetConfig+0x2cc>)
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d81b      	bhi.n	800a9d4 <UART_SetConfig+0xd0>
 800a99c:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <UART_SetConfig+0xa0>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9b5 	.word	0x0800a9b5
 800a9a8:	0800a9c5 	.word	0x0800a9c5
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800a9cd 	.word	0x0800a9cd
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ba:	e116      	b.n	800abea <UART_SetConfig+0x2e6>
 800a9bc:	2302      	movs	r3, #2
 800a9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9c2:	e112      	b.n	800abea <UART_SetConfig+0x2e6>
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ca:	e10e      	b.n	800abea <UART_SetConfig+0x2e6>
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9d2:	e10a      	b.n	800abea <UART_SetConfig+0x2e6>
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9da:	e106      	b.n	800abea <UART_SetConfig+0x2e6>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a7c      	ldr	r2, [pc, #496]	; (800abd4 <UART_SetConfig+0x2d0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d138      	bne.n	800aa58 <UART_SetConfig+0x154>
 800a9e6:	4b7a      	ldr	r3, [pc, #488]	; (800abd0 <UART_SetConfig+0x2cc>)
 800a9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ec:	f003 030c 	and.w	r3, r3, #12
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	d82d      	bhi.n	800aa50 <UART_SetConfig+0x14c>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0xf8>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa31 	.word	0x0800aa31
 800aa00:	0800aa51 	.word	0x0800aa51
 800aa04:	0800aa51 	.word	0x0800aa51
 800aa08:	0800aa51 	.word	0x0800aa51
 800aa0c:	0800aa41 	.word	0x0800aa41
 800aa10:	0800aa51 	.word	0x0800aa51
 800aa14:	0800aa51 	.word	0x0800aa51
 800aa18:	0800aa51 	.word	0x0800aa51
 800aa1c:	0800aa39 	.word	0x0800aa39
 800aa20:	0800aa51 	.word	0x0800aa51
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	0800aa51 	.word	0x0800aa51
 800aa2c:	0800aa49 	.word	0x0800aa49
 800aa30:	2300      	movs	r3, #0
 800aa32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa36:	e0d8      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa3e:	e0d4      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa40:	2304      	movs	r3, #4
 800aa42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa46:	e0d0      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa4e:	e0cc      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa50:	2310      	movs	r3, #16
 800aa52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa56:	e0c8      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a5e      	ldr	r2, [pc, #376]	; (800abd8 <UART_SetConfig+0x2d4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d125      	bne.n	800aaae <UART_SetConfig+0x1aa>
 800aa62:	4b5b      	ldr	r3, [pc, #364]	; (800abd0 <UART_SetConfig+0x2cc>)
 800aa64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa6c:	2b30      	cmp	r3, #48	; 0x30
 800aa6e:	d016      	beq.n	800aa9e <UART_SetConfig+0x19a>
 800aa70:	2b30      	cmp	r3, #48	; 0x30
 800aa72:	d818      	bhi.n	800aaa6 <UART_SetConfig+0x1a2>
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	d00a      	beq.n	800aa8e <UART_SetConfig+0x18a>
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d814      	bhi.n	800aaa6 <UART_SetConfig+0x1a2>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <UART_SetConfig+0x182>
 800aa80:	2b10      	cmp	r3, #16
 800aa82:	d008      	beq.n	800aa96 <UART_SetConfig+0x192>
 800aa84:	e00f      	b.n	800aaa6 <UART_SetConfig+0x1a2>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa8c:	e0ad      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa94:	e0a9      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa96:	2304      	movs	r3, #4
 800aa98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa9c:	e0a5      	b.n	800abea <UART_SetConfig+0x2e6>
 800aa9e:	2308      	movs	r3, #8
 800aaa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaa4:	e0a1      	b.n	800abea <UART_SetConfig+0x2e6>
 800aaa6:	2310      	movs	r3, #16
 800aaa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaac:	e09d      	b.n	800abea <UART_SetConfig+0x2e6>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a4a      	ldr	r2, [pc, #296]	; (800abdc <UART_SetConfig+0x2d8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d125      	bne.n	800ab04 <UART_SetConfig+0x200>
 800aab8:	4b45      	ldr	r3, [pc, #276]	; (800abd0 <UART_SetConfig+0x2cc>)
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aac2:	2bc0      	cmp	r3, #192	; 0xc0
 800aac4:	d016      	beq.n	800aaf4 <UART_SetConfig+0x1f0>
 800aac6:	2bc0      	cmp	r3, #192	; 0xc0
 800aac8:	d818      	bhi.n	800aafc <UART_SetConfig+0x1f8>
 800aaca:	2b80      	cmp	r3, #128	; 0x80
 800aacc:	d00a      	beq.n	800aae4 <UART_SetConfig+0x1e0>
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d814      	bhi.n	800aafc <UART_SetConfig+0x1f8>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <UART_SetConfig+0x1d8>
 800aad6:	2b40      	cmp	r3, #64	; 0x40
 800aad8:	d008      	beq.n	800aaec <UART_SetConfig+0x1e8>
 800aada:	e00f      	b.n	800aafc <UART_SetConfig+0x1f8>
 800aadc:	2300      	movs	r3, #0
 800aade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aae2:	e082      	b.n	800abea <UART_SetConfig+0x2e6>
 800aae4:	2302      	movs	r3, #2
 800aae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaea:	e07e      	b.n	800abea <UART_SetConfig+0x2e6>
 800aaec:	2304      	movs	r3, #4
 800aaee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaf2:	e07a      	b.n	800abea <UART_SetConfig+0x2e6>
 800aaf4:	2308      	movs	r3, #8
 800aaf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aafa:	e076      	b.n	800abea <UART_SetConfig+0x2e6>
 800aafc:	2310      	movs	r3, #16
 800aafe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab02:	e072      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a35      	ldr	r2, [pc, #212]	; (800abe0 <UART_SetConfig+0x2dc>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d12a      	bne.n	800ab64 <UART_SetConfig+0x260>
 800ab0e:	4b30      	ldr	r3, [pc, #192]	; (800abd0 <UART_SetConfig+0x2cc>)
 800ab10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab1c:	d01a      	beq.n	800ab54 <UART_SetConfig+0x250>
 800ab1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab22:	d81b      	bhi.n	800ab5c <UART_SetConfig+0x258>
 800ab24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab28:	d00c      	beq.n	800ab44 <UART_SetConfig+0x240>
 800ab2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab2e:	d815      	bhi.n	800ab5c <UART_SetConfig+0x258>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <UART_SetConfig+0x238>
 800ab34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab38:	d008      	beq.n	800ab4c <UART_SetConfig+0x248>
 800ab3a:	e00f      	b.n	800ab5c <UART_SetConfig+0x258>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab42:	e052      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab44:	2302      	movs	r3, #2
 800ab46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab4a:	e04e      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab52:	e04a      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab54:	2308      	movs	r3, #8
 800ab56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab5a:	e046      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab5c:	2310      	movs	r3, #16
 800ab5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab62:	e042      	b.n	800abea <UART_SetConfig+0x2e6>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <UART_SetConfig+0x2c4>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d13a      	bne.n	800abe4 <UART_SetConfig+0x2e0>
 800ab6e:	4b18      	ldr	r3, [pc, #96]	; (800abd0 <UART_SetConfig+0x2cc>)
 800ab70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab7c:	d01a      	beq.n	800abb4 <UART_SetConfig+0x2b0>
 800ab7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab82:	d81b      	bhi.n	800abbc <UART_SetConfig+0x2b8>
 800ab84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab88:	d00c      	beq.n	800aba4 <UART_SetConfig+0x2a0>
 800ab8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8e:	d815      	bhi.n	800abbc <UART_SetConfig+0x2b8>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <UART_SetConfig+0x298>
 800ab94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab98:	d008      	beq.n	800abac <UART_SetConfig+0x2a8>
 800ab9a:	e00f      	b.n	800abbc <UART_SetConfig+0x2b8>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aba2:	e022      	b.n	800abea <UART_SetConfig+0x2e6>
 800aba4:	2302      	movs	r3, #2
 800aba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abaa:	e01e      	b.n	800abea <UART_SetConfig+0x2e6>
 800abac:	2304      	movs	r3, #4
 800abae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abb2:	e01a      	b.n	800abea <UART_SetConfig+0x2e6>
 800abb4:	2308      	movs	r3, #8
 800abb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abba:	e016      	b.n	800abea <UART_SetConfig+0x2e6>
 800abbc:	2310      	movs	r3, #16
 800abbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800abc2:	e012      	b.n	800abea <UART_SetConfig+0x2e6>
 800abc4:	efff69f3 	.word	0xefff69f3
 800abc8:	40008000 	.word	0x40008000
 800abcc:	40013800 	.word	0x40013800
 800abd0:	40021000 	.word	0x40021000
 800abd4:	40004400 	.word	0x40004400
 800abd8:	40004800 	.word	0x40004800
 800abdc:	40004c00 	.word	0x40004c00
 800abe0:	40005000 	.word	0x40005000
 800abe4:	2310      	movs	r3, #16
 800abe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a9f      	ldr	r2, [pc, #636]	; (800ae6c <UART_SetConfig+0x568>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d17a      	bne.n	800acea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d824      	bhi.n	800ac46 <UART_SetConfig+0x342>
 800abfc:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <UART_SetConfig+0x300>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac29 	.word	0x0800ac29
 800ac08:	0800ac47 	.word	0x0800ac47
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac47 	.word	0x0800ac47
 800ac14:	0800ac37 	.word	0x0800ac37
 800ac18:	0800ac47 	.word	0x0800ac47
 800ac1c:	0800ac47 	.word	0x0800ac47
 800ac20:	0800ac47 	.word	0x0800ac47
 800ac24:	0800ac3f 	.word	0x0800ac3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac28:	f7fd f9d4 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800ac2c:	61f8      	str	r0, [r7, #28]
        break;
 800ac2e:	e010      	b.n	800ac52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac30:	4b8f      	ldr	r3, [pc, #572]	; (800ae70 <UART_SetConfig+0x56c>)
 800ac32:	61fb      	str	r3, [r7, #28]
        break;
 800ac34:	e00d      	b.n	800ac52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac36:	f7fd f935 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 800ac3a:	61f8      	str	r0, [r7, #28]
        break;
 800ac3c:	e009      	b.n	800ac52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac42:	61fb      	str	r3, [r7, #28]
        break;
 800ac44:	e005      	b.n	800ac52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ac50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80fb 	beq.w	800ae50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4413      	add	r3, r2
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d305      	bcc.n	800ac76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d903      	bls.n	800ac7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ac7c:	e0e8      	b.n	800ae50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	2200      	movs	r2, #0
 800ac82:	461c      	mov	r4, r3
 800ac84:	4615      	mov	r5, r2
 800ac86:	f04f 0200 	mov.w	r2, #0
 800ac8a:	f04f 0300 	mov.w	r3, #0
 800ac8e:	022b      	lsls	r3, r5, #8
 800ac90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ac94:	0222      	lsls	r2, r4, #8
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	6849      	ldr	r1, [r1, #4]
 800ac9a:	0849      	lsrs	r1, r1, #1
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	4688      	mov	r8, r1
 800aca0:	4681      	mov	r9, r0
 800aca2:	eb12 0a08 	adds.w	sl, r2, r8
 800aca6:	eb43 0b09 	adc.w	fp, r3, r9
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	603b      	str	r3, [r7, #0]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb8:	4650      	mov	r0, sl
 800acba:	4659      	mov	r1, fp
 800acbc:	f7f5 fa84 	bl	80001c8 <__aeabi_uldivmod>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4613      	mov	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acce:	d308      	bcc.n	800ace2 <UART_SetConfig+0x3de>
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acd6:	d204      	bcs.n	800ace2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	60da      	str	r2, [r3, #12]
 800ace0:	e0b6      	b.n	800ae50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ace8:	e0b2      	b.n	800ae50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acf2:	d15e      	bne.n	800adb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800acf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d828      	bhi.n	800ad4e <UART_SetConfig+0x44a>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <UART_SetConfig+0x400>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad29 	.word	0x0800ad29
 800ad08:	0800ad31 	.word	0x0800ad31
 800ad0c:	0800ad39 	.word	0x0800ad39
 800ad10:	0800ad4f 	.word	0x0800ad4f
 800ad14:	0800ad3f 	.word	0x0800ad3f
 800ad18:	0800ad4f 	.word	0x0800ad4f
 800ad1c:	0800ad4f 	.word	0x0800ad4f
 800ad20:	0800ad4f 	.word	0x0800ad4f
 800ad24:	0800ad47 	.word	0x0800ad47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad28:	f7fd f954 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800ad2c:	61f8      	str	r0, [r7, #28]
        break;
 800ad2e:	e014      	b.n	800ad5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad30:	f7fd f966 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 800ad34:	61f8      	str	r0, [r7, #28]
        break;
 800ad36:	e010      	b.n	800ad5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad38:	4b4d      	ldr	r3, [pc, #308]	; (800ae70 <UART_SetConfig+0x56c>)
 800ad3a:	61fb      	str	r3, [r7, #28]
        break;
 800ad3c:	e00d      	b.n	800ad5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad3e:	f7fd f8b1 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 800ad42:	61f8      	str	r0, [r7, #28]
        break;
 800ad44:	e009      	b.n	800ad5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad4a:	61fb      	str	r3, [r7, #28]
        break;
 800ad4c:	e005      	b.n	800ad5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ad58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d077      	beq.n	800ae50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	005a      	lsls	r2, r3, #1
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	085b      	lsrs	r3, r3, #1
 800ad6a:	441a      	add	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b0f      	cmp	r3, #15
 800ad7a:	d916      	bls.n	800adaa <UART_SetConfig+0x4a6>
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad82:	d212      	bcs.n	800adaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	f023 030f 	bic.w	r3, r3, #15
 800ad8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	085b      	lsrs	r3, r3, #1
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	8afb      	ldrh	r3, [r7, #22]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	8afa      	ldrh	r2, [r7, #22]
 800ada6:	60da      	str	r2, [r3, #12]
 800ada8:	e052      	b.n	800ae50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800adb0:	e04e      	b.n	800ae50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800adb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d827      	bhi.n	800ae0a <UART_SetConfig+0x506>
 800adba:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <UART_SetConfig+0x4bc>)
 800adbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800adf5 	.word	0x0800adf5
 800adcc:	0800ae0b 	.word	0x0800ae0b
 800add0:	0800adfb 	.word	0x0800adfb
 800add4:	0800ae0b 	.word	0x0800ae0b
 800add8:	0800ae0b 	.word	0x0800ae0b
 800addc:	0800ae0b 	.word	0x0800ae0b
 800ade0:	0800ae03 	.word	0x0800ae03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ade4:	f7fd f8f6 	bl	8007fd4 <HAL_RCC_GetPCLK1Freq>
 800ade8:	61f8      	str	r0, [r7, #28]
        break;
 800adea:	e014      	b.n	800ae16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adec:	f7fd f908 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 800adf0:	61f8      	str	r0, [r7, #28]
        break;
 800adf2:	e010      	b.n	800ae16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adf4:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <UART_SetConfig+0x56c>)
 800adf6:	61fb      	str	r3, [r7, #28]
        break;
 800adf8:	e00d      	b.n	800ae16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adfa:	f7fd f853 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 800adfe:	61f8      	str	r0, [r7, #28]
        break;
 800ae00:	e009      	b.n	800ae16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae06:	61fb      	str	r3, [r7, #28]
        break;
 800ae08:	e005      	b.n	800ae16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ae14:	bf00      	nop
    }

    if (pclk != 0U)
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d019      	beq.n	800ae50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	085a      	lsrs	r2, r3, #1
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	441a      	add	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	2b0f      	cmp	r3, #15
 800ae34:	d909      	bls.n	800ae4a <UART_SetConfig+0x546>
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae3c:	d205      	bcs.n	800ae4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60da      	str	r2, [r3, #12]
 800ae48:	e002      	b.n	800ae50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ae5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3728      	adds	r7, #40	; 0x28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae6a:	bf00      	nop
 800ae6c:	40008000 	.word	0x40008000
 800ae70:	00f42400 	.word	0x00f42400

0800ae74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01a      	beq.n	800af8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af72:	d10a      	bne.n	800af8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc8:	f7f8 fa8a 	bl	80034e0 <HAL_GetTick>
 800afcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d10e      	bne.n	800affa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f82d 	bl	800b04a <UART_WaitOnFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e023      	b.n	800b042 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b04      	cmp	r3, #4
 800b006:	d10e      	bne.n	800b026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f817 	bl	800b04a <UART_WaitOnFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e00d      	b.n	800b042 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b09c      	sub	sp, #112	; 0x70
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	603b      	str	r3, [r7, #0]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b05a:	e0a5      	b.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	f000 80a1 	beq.w	800b1a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b066:	f7f8 fa3b 	bl	80034e0 <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b072:	429a      	cmp	r2, r3
 800b074:	d302      	bcc.n	800b07c <UART_WaitOnFlagUntilTimeout+0x32>
 800b076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d13e      	bne.n	800b0fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b090:	667b      	str	r3, [r7, #100]	; 0x64
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b09a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b09c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b0a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e6      	bne.n	800b07c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	f023 0301 	bic.w	r3, r3, #1
 800b0c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b0d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e5      	bne.n	800b0ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e067      	b.n	800b1ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	d04f      	beq.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b116:	d147      	bne.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b120:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b136:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b140:	637b      	str	r3, [r7, #52]	; 0x34
 800b142:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e6      	bne.n	800b122 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3308      	adds	r3, #8
 800b15a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	613b      	str	r3, [r7, #16]
   return(result);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f023 0301 	bic.w	r3, r3, #1
 800b16a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3308      	adds	r3, #8
 800b172:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b174:	623a      	str	r2, [r7, #32]
 800b176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	69f9      	ldr	r1, [r7, #28]
 800b17a:	6a3a      	ldr	r2, [r7, #32]
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	61bb      	str	r3, [r7, #24]
   return(result);
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e5      	bne.n	800b154 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2220      	movs	r2, #32
 800b18c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2220      	movs	r2, #32
 800b192:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2220      	movs	r2, #32
 800b198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e010      	b.n	800b1ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	69da      	ldr	r2, [r3, #28]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	bf0c      	ite	eq
 800b1b8:	2301      	moveq	r3, #1
 800b1ba:	2300      	movne	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	f43f af4a 	beq.w	800b05c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3770      	adds	r7, #112	; 0x70
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4d0d      	ldr	r5, [pc, #52]	; (800b20c <__libc_init_array+0x38>)
 800b1d8:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1da:	1b64      	subs	r4, r4, r5
 800b1dc:	10a4      	asrs	r4, r4, #2
 800b1de:	2600      	movs	r6, #0
 800b1e0:	42a6      	cmp	r6, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	4d0b      	ldr	r5, [pc, #44]	; (800b214 <__libc_init_array+0x40>)
 800b1e6:	4c0c      	ldr	r4, [pc, #48]	; (800b218 <__libc_init_array+0x44>)
 800b1e8:	f000 f820 	bl	800b22c <_init>
 800b1ec:	1b64      	subs	r4, r4, r5
 800b1ee:	10a4      	asrs	r4, r4, #2
 800b1f0:	2600      	movs	r6, #0
 800b1f2:	42a6      	cmp	r6, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fc:	4798      	blx	r3
 800b1fe:	3601      	adds	r6, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	f855 3b04 	ldr.w	r3, [r5], #4
 800b206:	4798      	blx	r3
 800b208:	3601      	adds	r6, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	0800b2f4 	.word	0x0800b2f4
 800b210:	0800b2f4 	.word	0x0800b2f4
 800b214:	0800b2f4 	.word	0x0800b2f4
 800b218:	0800b2f8 	.word	0x0800b2f8

0800b21c <memset>:
 800b21c:	4402      	add	r2, r0
 800b21e:	4603      	mov	r3, r0
 800b220:	4293      	cmp	r3, r2
 800b222:	d100      	bne.n	800b226 <memset+0xa>
 800b224:	4770      	bx	lr
 800b226:	f803 1b01 	strb.w	r1, [r3], #1
 800b22a:	e7f9      	b.n	800b220 <memset+0x4>

0800b22c <_init>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr

0800b238 <_fini>:
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23a:	bf00      	nop
 800b23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23e:	bc08      	pop	{r3}
 800b240:	469e      	mov	lr, r3
 800b242:	4770      	bx	lr
