
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800b180  0800b180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b228  0800b228  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800b228  0800b228  0001b228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b230  0800b230  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b230  0800b230  0001b230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b234  0800b234  0001b234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800b238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0d0  20000048  0800b280  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b118  0800b280  0002b118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e42f  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003982  00000000  00000000  0003e4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00041e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  000436b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c49b  00000000  00000000  00044df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7b2  00000000  00000000  0007128b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001131c1  00000000  00000000  0008da3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c8  00000000  00000000  001a0c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b168 	.word	0x0800b168

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800b168 	.word	0x0800b168

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AudioPlay_Error_CallBack>:
//16.congaLov -> sektor 31
//17.clave -> sektor 32
//18.congaHigh -> sektor 33

void AudioPlay_Error_CallBack(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 80004d0:	f000 fbea 	bl	8000ca8 <Error_Handler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <AudioPlay_TransferComplete_CallBack>:
static uint16_t *pAudioSample;

static uint32_t RozmiarSekcji = 65536;

void AudioPlay_TransferComplete_CallBack()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN PV */


uint8_t PomiarADC;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <HAL_ADC_ConvCpltCallback+0x20>)
 80004f2:	f003 fc25 	bl	8003d40 <HAL_ADC_GetValue>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <HAL_ADC_ConvCpltCallback+0x24>)
 80004fc:	701a      	strb	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000006c 	.word	0x2000006c
 800050c:	20000310 	.word	0x20000310

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f002 ff6d 	bl	80033f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8a5 	bl	8000668 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051e:	f000 f8f7 	bl	8000710 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fae5 	bl	8000af0 <MX_GPIO_Init>
  MX_LCD_Init();
 8000526:	f000 f9d7 	bl	80008d8 <MX_LCD_Init>
  MX_QUADSPI_Init();
 800052a:	f000 fa0f 	bl	800094c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800052e:	f000 fa33 	bl	8000998 <MX_RTC_Init>
  MX_I2C1_Init();
 8000532:	f000 f991 	bl	8000858 <MX_I2C1_Init>
  MX_DMA_Init();
 8000536:	f000 fabd 	bl	8000ab4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fa8b 	bl	8000a54 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800053e:	f000 fa53 	bl	80009e8 <MX_SAI1_Init>
  MX_ADC1_Init();
 8000542:	f000 f913 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 8000546:	f001 fe83 	bl	8002250 <BSP_LCD_GLASS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_HIGH);
 800054a:	2296      	movs	r2, #150	; 0x96
 800054c:	2101      	movs	r1, #1
 800054e:	483d      	ldr	r0, [pc, #244]	; (8000644 <main+0x134>)
 8000550:	f001 fee6 	bl	8002320 <BSP_LCD_GLASS_ScrollSentence>

  static QSPI_Info pQSPI_Info;
  uint8_t status;
  status = BSP_QSPI_Init();
 8000554:	f002 fd22 	bl	8002f9c <BSP_QSPI_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	71fb      	strb	r3, [r7, #7]
  if (status == QSPI_OK) {
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10e      	bne.n	8000580 <main+0x70>
	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8000562:	4b39      	ldr	r3, [pc, #228]	; (8000648 <main+0x138>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <main+0x138>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <main+0x138>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <main+0x138>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 800057a:	4b33      	ldr	r3, [pc, #204]	; (8000648 <main+0x138>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  }

  if(BSP_AUDIO_OUT_Init(2,  // Słuchawki
 8000580:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000584:	2164      	movs	r1, #100	; 0x64
 8000586:	2002      	movs	r0, #2
 8000588:	f001 fc86 	bl	8001e98 <BSP_AUDIO_OUT_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <main+0x86>
                        100, // %głośności
                        44100) != 0)  // częstotliwość
  {
		  Error_Handler();
 8000592:	f000 fb89 	bl	8000ca8 <Error_Handler>
  }

  BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <main+0x13c>)
 8000598:	2100      	movs	r1, #0
 800059a:	482d      	ldr	r0, [pc, #180]	; (8000650 <main+0x140>)
 800059c:	f001 fd18 	bl	8001fd0 <BSP_AUDIO_OUT_RegisterCallbacks>
              	  	  	  	  	  NULL,
                                  AudioPlay_TransferComplete_CallBack);

  if(BSP_AUDIO_OUT_SetVolume(100) != 0)
 80005a0:	2064      	movs	r0, #100	; 0x64
 80005a2:	f001 fcfd 	bl	8001fa0 <BSP_AUDIO_OUT_SetVolume>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0xa0>
  {
	  Error_Handler();
 80005ac:	f000 fb7c 	bl	8000ca8 <Error_Handler>
  }

  int flag = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
  int flag2 = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
  uint32_t count = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  HAL_ADC_Start(&hadc1);
 80005bc:	4825      	ldr	r0, [pc, #148]	; (8000654 <main+0x144>)
 80005be:	f003 fb05 	bl	8003bcc <HAL_ADC_Start>
  {
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin) && flag){
 80005c2:	2101      	movs	r1, #1
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f005 f9a8 	bl	800591c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d02c      	beq.n	800062c <main+0x11c>
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d029      	beq.n	800062c <main+0x11c>
		  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0x148>)
 80005da:	f245 6238 	movw	r2, #22072	; 0x5638
 80005de:	601a      	str	r2, [r3, #0]
		  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * count));
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <main+0x14c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <main+0x150>)
 80005f2:	601a      	str	r2, [r3, #0]
		  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0x150>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <main+0x148>)
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fc94 	bl	8001f2c <BSP_AUDIO_OUT_Play>
		  HAL_Delay(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000608:	f002 ff70 	bl	80034ec <HAL_Delay>
		//  BSP_AUDIO_OUT_Stop(2);
		  count++;
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	3301      	adds	r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
		  flag = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
		  count = count % 18;
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <main+0x154>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	0899      	lsrs	r1, r3, #2
 8000620:	460b      	mov	r3, r1
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	60bb      	str	r3, [r7, #8]
	  }
	  if(!(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin))){
 800062c:	2101      	movs	r1, #1
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f005 f973 	bl	800591c <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1c2      	bne.n	80005c2 <main+0xb2>
		  flag = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin) && flag){
 8000640:	e7bf      	b.n	80005c2 <main+0xb2>
 8000642:	bf00      	nop
 8000644:	0800b180 	.word	0x0800b180
 8000648:	20000314 	.word	0x20000314
 800064c:	080004d9 	.word	0x080004d9
 8000650:	080004cd 	.word	0x080004cd
 8000654:	2000006c 	.word	0x2000006c
 8000658:	20000064 	.word	0x20000064
 800065c:	20000000 	.word	0x20000000
 8000660:	20000068 	.word	0x20000068
 8000664:	38e38e39 	.word	0x38e38e39

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	; 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00a fd6e 	bl	800b158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068e:	f006 f987 	bl	80069a0 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 fb06 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800069c:	230a      	movs	r3, #10
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 febc 	bl	800744c <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006da:	f000 fae5 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 fa90 	bl	8007c1c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000702:	f000 fad1 	bl	8000ca8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a2      	sub	sp, #136	; 0x88
 8000714:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2288      	movs	r2, #136	; 0x88
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fd1b 	bl	800b158 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000722:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000726:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000728:	2300      	movs	r3, #0
 800072a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800072c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000730:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800073a:	230a      	movs	r3, #10
 800073c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800073e:	2307      	movs	r3, #7
 8000740:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <PeriphCommonClock_Config+0x58>)
 800074c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4618      	mov	r0, r3
 8000752:	f007 fc69 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800075c:	f000 faa4 	bl	8000ca8 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3788      	adds	r7, #136	; 0x88
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	01010000 	.word	0x01010000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_ADC1_Init+0xe0>)
 8000790:	4a2f      	ldr	r2, [pc, #188]	; (8000850 <MX_ADC1_Init+0xe4>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_ADC1_Init+0xe0>)
 800079c:	2210      	movs	r2, #16
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_ADC1_Init+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_ADC1_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_ADC1_Init+0xe0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ADC1_Init+0xe0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_ADC1_Init+0xe0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC1_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC1_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <MX_ADC1_Init+0xe0>)
 80007f0:	f003 f896 	bl	8003920 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007fa:	f000 fa55 	bl	8000ca8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_ADC1_Init+0xe0>)
 800080a:	f004 f97f 	bl	8004b0c <HAL_ADCEx_MultiModeConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 fa48 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_ADC1_Init+0xe8>)
 800081a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2306      	movs	r3, #6
 800081e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000820:	2306      	movs	r3, #6
 8000822:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000824:	237f      	movs	r3, #127	; 0x7f
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000828:	2304      	movs	r3, #4
 800082a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0xe0>)
 8000836:	f003 fcbf 	bl	80041b8 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000840:	f000 fa32 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000006c 	.word	0x2000006c
 8000850:	50040000 	.word	0x50040000
 8000854:	21800100 	.word	0x21800100

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C1_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C1_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C1_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C1_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C1_Init+0x74>)
 8000894:	f005 f872 	bl	800597c <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 fa03 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C1_Init+0x74>)
 80008a6:	f005 fe09 	bl	80064bc <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 f9fa 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C1_Init+0x74>)
 80008b8:	f005 fe4b 	bl	8006552 <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 f9f1 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000d0 	.word	0x200000d0
 80008d0:	40005400 	.word	0x40005400
 80008d4:	10909cec 	.word	0x10909cec

080008d8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_LCD_Init+0x6c>)
 80008de:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <MX_LCD_Init+0x70>)
 80008e0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_LCD_Init+0x6c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_LCD_Init+0x6c>)
 80008ea:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80008ee:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_LCD_Init+0x6c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_LCD_Init+0x6c>)
 80008f8:	2240      	movs	r2, #64	; 0x40
 80008fa:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_LCD_Init+0x6c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_LCD_Init+0x6c>)
 8000904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000908:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_LCD_Init+0x6c>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_LCD_Init+0x6c>)
 8000912:	2240      	movs	r2, #64	; 0x40
 8000914:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_LCD_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_LCD_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_LCD_Init+0x6c>)
 8000924:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_LCD_Init+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_LCD_Init+0x6c>)
 8000932:	f005 fe5b 	bl	80065ec <HAL_LCD_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 800093c:	f000 f9b4 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000011c 	.word	0x2000011c
 8000948:	40002400 	.word	0x40002400

0800094c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_QUADSPI_Init+0x48>)
 8000954:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000958:	2201      	movs	r2, #1
 800095a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800095e:	2204      	movs	r2, #4
 8000960:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000964:	2210      	movs	r2, #16
 8000966:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800096a:	2218      	movs	r2, #24
 800096c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_QUADSPI_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_QUADSPI_Init+0x44>)
 800097c:	f006 f886 	bl	8006a8c <HAL_QSPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000986:	f000 f98f 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000158 	.word	0x20000158
 8000994:	a0001000 	.word	0xa0001000

08000998 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_RTC_Init+0x48>)
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MX_RTC_Init+0x4c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_RTC_Init+0x48>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_RTC_Init+0x48>)
 80009aa:	227f      	movs	r2, #127	; 0x7f
 80009ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_RTC_Init+0x48>)
 80009b0:	22ff      	movs	r2, #255	; 0xff
 80009b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_RTC_Init+0x48>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_RTC_Init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_RTC_Init+0x48>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_RTC_Init+0x48>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_RTC_Init+0x48>)
 80009ce:	f008 ff35 	bl	800983c <HAL_RTC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009d8:	f000 f966 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000019c 	.word	0x2000019c
 80009e4:	40002800 	.word	0x40002800

080009e8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SAI1_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_SAI1_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_SAI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SAI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a12:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000a16:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000a30:	2302      	movs	r3, #2
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_SAI1_Init+0x64>)
 8000a38:	f009 f812 	bl	8009a60 <HAL_SAI_InitProtocol>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000a42:	f000 f931 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001c0 	.word	0x200001c0
 8000a50:	40015404 	.word	0x40015404

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_USART3_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a98:	f009 fe83 	bl	800a7a2 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f901 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000028c 	.word	0x2000028c
 8000ab0:	40004800 	.word	0x40004800

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_DMA_Init+0x38>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2038      	movs	r0, #56	; 0x38
 8000ad8:	f004 f9c7 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000adc:	2038      	movs	r0, #56	; 0x38
 8000ade:	f004 f9e0 	bl	8004ea2 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	4b65      	ldr	r3, [pc, #404]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a64      	ldr	r2, [pc, #400]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b62      	ldr	r3, [pc, #392]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a5e      	ldr	r2, [pc, #376]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b59      	ldr	r3, [pc, #356]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a4c      	ldr	r2, [pc, #304]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <MX_GPIO_Init+0x1ac>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2108      	movs	r1, #8
 8000b9a:	4841      	ldr	r0, [pc, #260]	; (8000ca0 <MX_GPIO_Init+0x1b0>)
 8000b9c:	f004 fed6 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f004 fed0 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2120      	movs	r1, #32
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f004 feca 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x1b4>)
 8000bbe:	f004 fec5 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4835      	ldr	r0, [pc, #212]	; (8000ca0 <MX_GPIO_Init+0x1b0>)
 8000bca:	f004 febf 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <MX_GPIO_Init+0x1b0>)
 8000be6:	f004 fbfb 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f004 fbee 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f004 fbdf 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_Y2_Pin;
 8000c22:	2304      	movs	r3, #4
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIGITIZER_IN_Y2_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f004 fbd2 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c44:	2302      	movs	r3, #2
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f004 fbc3 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_GPIO_Init+0x1b4>)
 8000c72:	f004 fbb5 	bl	80053e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_GPIO_Init+0x1b0>)
 8000c90:	f004 fba6 	bl	80053e0 <HAL_GPIO_Init>

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_ADC_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12c      	bne.n	8000d78 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_ADC_MspInit+0x88>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d52:	230b      	movs	r3, #11
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f004 fb3c 	bl	80053e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2012      	movs	r0, #18
 8000d6e:	f004 f87c 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d72:	2012      	movs	r0, #18
 8000d74:	f004 f895 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	50040000 	.word	0x50040000
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ac      	sub	sp, #176	; 0xb0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2288      	movs	r2, #136	; 0x88
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00a f9d5 	bl	800b158 <memset>
  if(hi2c->Instance==I2C1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <HAL_I2C_MspInit+0xb0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13a      	bne.n	8000e2e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f007 f92f 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff ff6a 	bl	8000ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000dec:	23c0      	movs	r3, #192	; 0xc0
 8000dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e04:	2304      	movs	r3, #4
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0xb8>)
 8000e12:	f004 fae5 	bl	80053e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_I2C_MspInit+0xb4>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	37b0      	adds	r7, #176	; 0xb0
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48000400 	.word	0x48000400

08000e44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_I2C_MspDeInit+0x38>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_I2C_MspDeInit+0x3c>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_I2C_MspDeInit+0x3c>)
 8000e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <HAL_I2C_MspDeInit+0x40>)
 8000e66:	f004 fc65 	bl	8005734 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_I2C_MspDeInit+0x40>)
 8000e6e:	f004 fc61 	bl	8005734 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400

08000e88 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ae      	sub	sp, #184	; 0xb8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2288      	movs	r2, #136	; 0x88
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a f955 	bl	800b158 <memset>
  if(hlcd->Instance==LCD)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_LCD_MspInit+0x188>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f040 80a6 	bne.w	8001006 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 f8ab 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000ed8:	f7ff fee6 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000edc:	4b4d      	ldr	r3, [pc, #308]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b41      	ldr	r3, [pc, #260]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a40      	ldr	r2, [pc, #256]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a3a      	ldr	r2, [pc, #232]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b35      	ldr	r3, [pc, #212]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a34      	ldr	r2, [pc, #208]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_LCD_MspInit+0x18c>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000f54:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4827      	ldr	r0, [pc, #156]	; (8001018 <HAL_LCD_MspInit+0x190>)
 8000f7c:	f004 fa30 	bl	80053e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000f80:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f9a:	230b      	movs	r3, #11
 8000f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f004 fa19 	bl	80053e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000fae:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000fc8:	230b      	movs	r3, #11
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <HAL_LCD_MspInit+0x194>)
 8000fd6:	f004 fa03 	bl	80053e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000fda:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <HAL_LCD_MspInit+0x198>)
 8001002:	f004 f9ed 	bl	80053e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	37b8      	adds	r7, #184	; 0xb8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40002400 	.word	0x40002400
 8001014:	40021000 	.word	0x40021000
 8001018:	48000800 	.word	0x48000800
 800101c:	48000400 	.word	0x48000400
 8001020:	48000c00 	.word	0x48000c00

08001024 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_QSPI_MspInit+0x7c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 8001048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6513      	str	r3, [r2, #80]	; 0x50
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 8001054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_QSPI_MspInit+0x80>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001076:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800107a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001088:	230a      	movs	r3, #10
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_QSPI_MspInit+0x84>)
 8001094:	f004 f9a4 	bl	80053e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	a0001000 	.word	0xa0001000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48001000 	.word	0x48001000

080010ac <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_QSPI_MspDeInit+0x30>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10a      	bne.n	80010d4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_QSPI_MspDeInit+0x34>)
 80010c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_QSPI_MspDeInit+0x34>)
 80010c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c8:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 80010ca:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_QSPI_MspDeInit+0x38>)
 80010d0:	f004 fb30 	bl	8005734 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	a0001000 	.word	0xa0001000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48001000 	.word	0x48001000

080010e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0a4      	sub	sp, #144	; 0x90
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2288      	movs	r2, #136	; 0x88
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a f82d 	bl	800b158 <memset>
  if(hrtc->Instance==RTC)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <HAL_RTC_MspInit+0x5c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d118      	bne.n	800113a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800110e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f006 ff84 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001126:	f7ff fdbf 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_RTC_MspInit+0x60>)
 800112c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001130:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_RTC_MspInit+0x60>)
 8001132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3790      	adds	r7, #144	; 0x90
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40002800 	.word	0x40002800
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ac      	sub	sp, #176	; 0xb0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2288      	movs	r2, #136	; 0x88
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fff3 	bl	800b158 <memset>
  if(huart->Instance==USART3)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_UART_MspInit+0xb0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13b      	bne.n	80011f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800117c:	2304      	movs	r3, #4
 800117e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f006 ff4d 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff fd88 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_MspInit+0xb4>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <HAL_UART_MspInit+0xb4>)
 800119e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a2:	6593      	str	r3, [r2, #88]	; 0x58
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_UART_MspInit+0xb4>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_UART_MspInit+0xb4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <HAL_UART_MspInit+0xb4>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_UART_MspInit+0xb4>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e2:	2307      	movs	r3, #7
 80011e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_MspInit+0xb8>)
 80011f0:	f004 f8f6 	bl	80053e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	37b0      	adds	r7, #176	; 0xb0
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40004800 	.word	0x40004800
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <HAL_SAI_MspInit+0xd8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d15d      	bne.n	80012d6 <HAL_SAI_MspInit+0xce>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_SAI_MspInit+0xdc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d113      	bne.n	800124a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_SAI_MspInit+0xe0>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <HAL_SAI_MspInit+0xe0>)
 8001228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122c:	6613      	str	r3, [r2, #96]	; 0x60
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_SAI_MspInit+0xe0>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	204a      	movs	r0, #74	; 0x4a
 8001240:	f003 fe13 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001244:	204a      	movs	r0, #74	; 0x4a
 8001246:	f003 fe2c 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_SAI_MspInit+0xdc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_SAI_MspInit+0xdc>)
 8001252:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001254:	2374      	movs	r3, #116	; 0x74
 8001256:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001264:	230d      	movs	r3, #13
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	481f      	ldr	r0, [pc, #124]	; (80012ec <HAL_SAI_MspInit+0xe4>)
 8001270:	f004 f8b6 	bl	80053e0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 8001276:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_SAI_MspInit+0xec>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 800127c:	2201      	movs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 8001282:	2210      	movs	r2, #16
 8001284:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001298:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012a4:	2220      	movs	r2, #32
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80012ae:	4810      	ldr	r0, [pc, #64]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012b0:	f003 fe20 	bl	8004ef4 <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 80012ba:	f7ff fcf5 	bl	8000ca8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012c2:	671a      	str	r2, [r3, #112]	; 0x70
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_SAI_MspInit+0xe8>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40015404 	.word	0x40015404
 80012e4:	20000328 	.word	0x20000328
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48001000 	.word	0x48001000
 80012f0:	20000244 	.word	0x20000244
 80012f4:	40020408 	.word	0x40020408

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f002 f8b2 	bl	80034ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <ADC1_2_IRQHandler+0x10>)
 8001352:	f002 fd03 	bl	8003d5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000006c 	.word	0x2000006c

08001360 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA2_Channel1_IRQHandler+0x10>)
 8001366:	f003 ff5c 	bl	8005222 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000244 	.word	0x20000244

08001374 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <SAI1_IRQHandler+0x10>)
 800137a:	f008 fe2b 	bl	8009fd4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001c0 	.word	0x200001c0

08001388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b0:	f7ff ffea 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f009 fe99 	bl	800b110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff f897 	bl	8000510 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80013f0:	0800b238 	.word	0x0800b238
  ldr r2, =_sbss
 80013f4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80013f8:	2000b118 	.word	0x2000b118

080013fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC3_IRQHandler>
	...

08001400 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4603      	mov	r3, r0
 800140a:	81fb      	strh	r3, [r7, #14]
 800140c:	460b      	mov	r3, r1
 800140e:	81bb      	strh	r3, [r7, #12]
 8001410:	4613      	mov	r3, r2
 8001412:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001418:	f000 fc96 	bl	8001d48 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2201      	movs	r2, #1
 8001422:	2102      	movs	r1, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fb01 	bl	8001a2c <CODEC_IO_Write>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	3b01      	subs	r3, #1
 8001438:	2b03      	cmp	r3, #3
 800143a:	d81b      	bhi.n	8001474 <cs43l22_Init+0x74>
 800143c:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <cs43l22_Init+0x44>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001465 	.word	0x08001465
 8001450:	0800146d 	.word	0x0800146d
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001454:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <cs43l22_Init+0x1c4>)
 8001456:	22fa      	movs	r2, #250	; 0xfa
 8001458:	701a      	strb	r2, [r3, #0]
    break;
 800145a:	e00f      	b.n	800147c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <cs43l22_Init+0x1c4>)
 800145e:	22af      	movs	r2, #175	; 0xaf
 8001460:	701a      	strb	r2, [r3, #0]
    break;
 8001462:	e00b      	b.n	800147c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <cs43l22_Init+0x1c4>)
 8001466:	22aa      	movs	r2, #170	; 0xaa
 8001468:	701a      	strb	r2, [r3, #0]
    break;
 800146a:	e007      	b.n	800147c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <cs43l22_Init+0x1c4>)
 800146e:	2205      	movs	r2, #5
 8001470:	701a      	strb	r2, [r3, #0]
    break;    
 8001472:	e003      	b.n	800147c <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <cs43l22_Init+0x1c4>)
 8001476:	2205      	movs	r2, #5
 8001478:	701a      	strb	r2, [r3, #0]
    break;    
 800147a:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <cs43l22_Init+0x1c4>)
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	2104      	movs	r1, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f000 facf 	bl	8001a2c <CODEC_IO_Write>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2281      	movs	r2, #129	; 0x81
 800149e:	2105      	movs	r1, #5
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fac3 	bl	8001a2c <CODEC_IO_Write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2204      	movs	r2, #4
 80014b6:	2106      	movs	r1, #6
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fab7 	bl	8001a2c <CODEC_IO_Write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80014c8:	7afa      	ldrb	r2, [r7, #11]
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f964 	bl	800179c <cs43l22_SetVolume>
 80014d4:	4602      	mov	r2, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80014dc:	89bb      	ldrh	r3, [r7, #12]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d023      	beq.n	800152a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2206      	movs	r2, #6
 80014e8:	210f      	movs	r1, #15
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fa9e 	bl	8001a2c <CODEC_IO_Write>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	4413      	add	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	2124      	movs	r1, #36	; 0x24
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fa92 	bl	8001a2c <CODEC_IO_Write>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2200      	movs	r2, #0
 8001518:	2125      	movs	r1, #37	; 0x25
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fa86 	bl	8001a2c <CODEC_IO_Write>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2200      	movs	r2, #0
 8001530:	210a      	movs	r1, #10
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fa7a 	bl	8001a2c <CODEC_IO_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2204      	movs	r2, #4
 8001548:	210e      	movs	r1, #14
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fa6e 	bl	8001a2c <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	4413      	add	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2200      	movs	r2, #0
 8001560:	2127      	movs	r1, #39	; 0x27
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fa62 	bl	8001a2c <CODEC_IO_Write>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	4413      	add	r3, r2
 8001570:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	220f      	movs	r2, #15
 8001578:	211f      	movs	r1, #31
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fa56 	bl	8001a2c <CODEC_IO_Write>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	220a      	movs	r2, #10
 8001590:	211a      	movs	r1, #26
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fa4a 	bl	8001a2c <CODEC_IO_Write>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	220a      	movs	r2, #10
 80015a8:	211b      	movs	r1, #27
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fa3e 	bl	8001a2c <CODEC_IO_Write>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80015ba:	697b      	ldr	r3, [r7, #20]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000032c 	.word	0x2000032c

080015c8 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80015cc:	f000 fbf2 	bl	8001db4 <AUDIO_IO_DeInit>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80015de:	f000 fbb3 	bl	8001d48 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fc3a 	bl	8001e62 <AUDIO_IO_Read>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f023 0307 	bic.w	r3, r3, #7
 80015f8:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	4613      	mov	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <cs43l22_Play+0x70>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d123      	bne.n	8001668 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2206      	movs	r2, #6
 8001626:	210e      	movs	r1, #14
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f9ff 	bl	8001a2c <CODEC_IO_Write>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f919 	bl	8001874 <cs43l22_SetMute>
 8001642:	4602      	mov	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	229e      	movs	r2, #158	; 0x9e
 8001650:	2102      	movs	r1, #2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f9ea 	bl	8001a2c <CODEC_IO_Write>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <cs43l22_Play+0x70>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001668:	68fb      	ldr	r3, [r7, #12]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000038 	.word	0x20000038

08001678 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f8f2 	bl	8001874 <cs43l22_SetMute>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2201      	movs	r2, #1
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f9c3 	bl	8001a2c <CODEC_IO_Write>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80016b0:	68fb      	ldr	r3, [r7, #12]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f8ce 	bl	8001874 <cs43l22_SetMute>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	e002      	b.n	80016ec <cs43l22_Resume+0x30>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2bfe      	cmp	r3, #254	; 0xfe
 80016f0:	d9f9      	bls.n	80016e6 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <cs43l22_Resume+0x74>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	2104      	movs	r1, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f994 	bl	8001a2c <CODEC_IO_Write>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	229e      	movs	r2, #158	; 0x9e
 8001714:	2102      	movs	r1, #2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f988 	bl	8001a2c <CODEC_IO_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000032c 	.word	0x2000032c

08001734 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f000 f893 	bl	8001874 <cs43l22_SetMute>
 800174e:	4602      	mov	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2204      	movs	r2, #4
 800175c:	210e      	movs	r1, #14
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f964 	bl	8001a2c <CODEC_IO_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	229f      	movs	r2, #159	; 0x9f
 8001774:	2102      	movs	r1, #2
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f958 	bl	8001a2c <CODEC_IO_Write>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <cs43l22_Stop+0x64>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
  return counter;    
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000038 	.word	0x20000038

0800179c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	460a      	mov	r2, r1
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80017b0:	797b      	ldrb	r3, [r7, #5]
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d80b      	bhi.n	80017ce <cs43l22_SetVolume+0x32>
 80017b6:	797a      	ldrb	r2, [r7, #5]
 80017b8:	4613      	mov	r3, r2
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <cs43l22_SetVolume+0xb8>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	1152      	asrs	r2, r2, #5
 80017c6:	17db      	asrs	r3, r3, #31
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	e000      	b.n	80017d0 <cs43l22_SetVolume+0x34>
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	2be6      	cmp	r3, #230	; 0xe6
 80017d6:	d91c      	bls.n	8001812 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	3319      	adds	r3, #25
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	2120      	movs	r1, #32
 80017e6:	f000 f921 	bl	8001a2c <CODEC_IO_Write>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	3319      	adds	r3, #25
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	2121      	movs	r1, #33	; 0x21
 8001802:	f000 f913 	bl	8001a2c <CODEC_IO_Write>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e01b      	b.n	800184a <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	b2d8      	uxtb	r0, r3
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	3319      	adds	r3, #25
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	2120      	movs	r1, #32
 8001820:	f000 f904 	bl	8001a2c <CODEC_IO_Write>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	b2d8      	uxtb	r0, r3
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	3319      	adds	r3, #25
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	2121      	movs	r1, #33	; 0x21
 800183c:	f000 f8f6 	bl	8001a2c <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	51eb851f 	.word	0x51eb851f

08001858 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d124      	bne.n	80018d4 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	2104      	movs	r1, #4
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f8ca 	bl	8001a2c <CODEC_IO_Write>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	2122      	movs	r1, #34	; 0x22
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f8be 	bl	8001a2c <CODEC_IO_Write>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2201      	movs	r2, #1
 80018c0:	2123      	movs	r1, #35	; 0x23
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f8b2 	bl	8001a2c <CODEC_IO_Write>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e025      	b.n	8001920 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	2122      	movs	r1, #34	; 0x22
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f8a5 	bl	8001a2c <CODEC_IO_Write>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	2123      	movs	r1, #35	; 0x23
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f899 	bl	8001a2c <CODEC_IO_Write>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <cs43l22_SetMute+0xb8>)
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	2104      	movs	r1, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f88b 	bl	8001a2c <CODEC_IO_Write>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000032c 	.word	0x2000032c

08001930 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	80fb      	strh	r3, [r7, #6]
 800193c:	4613      	mov	r3, r2
 800193e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	3b01      	subs	r3, #1
 8001948:	2b03      	cmp	r3, #3
 800194a:	d84b      	bhi.n	80019e4 <cs43l22_SetOutputMode+0xb4>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <cs43l22_SetOutputMode+0x24>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001985 	.word	0x08001985
 800195c:	080019a5 	.word	0x080019a5
 8001960:	080019c5 	.word	0x080019c5
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	22fa      	movs	r2, #250	; 0xfa
 800196a:	2104      	movs	r1, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f85d 	bl	8001a2c <CODEC_IO_Write>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <cs43l22_SetOutputMode+0xe0>)
 800197e:	22fa      	movs	r2, #250	; 0xfa
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e03f      	b.n	8001a04 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	22af      	movs	r2, #175	; 0xaf
 800198a:	2104      	movs	r1, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f84d 	bl	8001a2c <CODEC_IO_Write>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <cs43l22_SetOutputMode+0xe0>)
 800199e:	22af      	movs	r2, #175	; 0xaf
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e02f      	b.n	8001a04 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	22aa      	movs	r2, #170	; 0xaa
 80019aa:	2104      	movs	r1, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f83d 	bl	8001a2c <CODEC_IO_Write>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <cs43l22_SetOutputMode+0xe0>)
 80019be:	22aa      	movs	r2, #170	; 0xaa
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e01f      	b.n	8001a04 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2205      	movs	r2, #5
 80019ca:	2104      	movs	r1, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f82d 	bl	8001a2c <CODEC_IO_Write>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <cs43l22_SetOutputMode+0xe0>)
 80019de:	2205      	movs	r2, #5
 80019e0:	701a      	strb	r2, [r3, #0]
      break;    
 80019e2:	e00f      	b.n	8001a04 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2205      	movs	r2, #5
 80019ea:	2104      	movs	r1, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f81d 	bl	8001a2c <CODEC_IO_Write>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <cs43l22_SetOutputMode+0xe0>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	701a      	strb	r2, [r3, #0]
      break;
 8001a02:	bf00      	nop
  }  
  return counter;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000032c 	.word	0x2000032c

08001a14 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001a42:	797a      	ldrb	r2, [r7, #5]
 8001a44:	79b9      	ldrb	r1, [r7, #6]
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f9f3 	bl	8001e34 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	b2db      	uxtb	r3, r3
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001a60:	4812      	ldr	r0, [pc, #72]	; (8001aac <I2C1_Init+0x50>)
 8001a62:	f004 fa77 	bl	8005f54 <HAL_I2C_GetState>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d11d      	bne.n	8001aa8 <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <I2C1_Init+0x50>)
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <I2C1_Init+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <I2C1_Init+0x50>)
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <I2C1_Init+0x58>)
 8001a76:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <I2C1_Init+0x50>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <I2C1_Init+0x50>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <I2C1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <I2C1_Init+0x50>)
 8001a9e:	f000 f80b 	bl	8001ab8 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001aa2:	4802      	ldr	r0, [pc, #8]	; (8001aac <I2C1_Init+0x50>)
 8001aa4:	f003 ff6a 	bl	800597c <HAL_I2C_Init>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000330 	.word	0x20000330
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	90112626 	.word	0x90112626

08001ab8 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0ae      	sub	sp, #184	; 0xb8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <I2C1_MspInit+0xf4>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <I2C1_MspInit+0xf4>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <I2C1_MspInit+0xf4>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001ad8:	f004 ffb8 	bl	8006a4c <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <I2C1_MspInit+0xf8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d15e      	bne.n	8001ba4 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 fa97 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <I2C1_MspInit+0xf4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a25      	ldr	r2, [pc, #148]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <I2C1_MspInit+0xfc>)
 8001b50:	f003 fc46 	bl	80053e0 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <I2C1_MspInit+0xf4>)
 8001b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	201f      	movs	r0, #31
 8001b8a:	f003 f96e 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001b8e:	201f      	movs	r0, #31
 8001b90:	f003 f987 	bl	8004ea2 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2020      	movs	r0, #32
 8001b9a:	f003 f966 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001b9e:	2020      	movs	r0, #32
 8001ba0:	f003 f97f 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	37b8      	adds	r7, #184	; 0xb8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	48000400 	.word	0x48000400

08001bb8 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <I2C1_DeInit+0x20>)
 8001bbe:	f004 f9c9 	bl	8005f54 <HAL_I2C_GetState>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <I2C1_DeInit+0x20>)
 8001bca:	f003 ff66 	bl	8005a9a <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001bce:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <I2C1_DeInit+0x20>)
 8001bd0:	f000 f804 	bl	8001bdc <I2C1_MspDeInit>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000330 	.word	0x20000330

08001bdc <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <I2C1_MspDeInit+0xa0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d141      	bne.n	8001c72 <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001c1e:	21c0      	movs	r1, #192	; 0xc0
 8001c20:	4818      	ldr	r0, [pc, #96]	; (8001c84 <I2C1_MspDeInit+0xa8>)
 8001c22:	f003 fd87 	bl	8005734 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c30:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001c4a:	201f      	movs	r0, #31
 8001c4c:	f003 f937 	bl	8004ebe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001c50:	2020      	movs	r0, #32
 8001c52:	f003 f934 	bl	8004ebe <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <I2C1_MspDeInit+0xa4>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001c6e:	f004 fefd 	bl	8006a6c <HAL_PWREx_DisableVddIO2>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	40021000 	.word	0x40021000
 8001c84:	48000400 	.word	0x48000400

08001c88 <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	4603      	mov	r3, r0
 8001c92:	81fb      	strh	r3, [r7, #14]
 8001c94:	460b      	mov	r3, r1
 8001c96:	81bb      	strh	r3, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <I2C1_WriteBuffer+0x4c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	8978      	ldrh	r0, [r7, #10]
 8001ca6:	89ba      	ldrh	r2, [r7, #12]
 8001ca8:	89f9      	ldrh	r1, [r7, #14]
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	8c3b      	ldrh	r3, [r7, #32]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <I2C1_WriteBuffer+0x50>)
 8001cb8:	f003 ff1e 	bl	8005af8 <HAL_I2C_Mem_Write>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001cc6:	f000 f833 	bl	8001d30 <I2C1_Error>
  }
  return status;
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000003c 	.word	0x2000003c
 8001cd8:	20000330 	.word	0x20000330

08001cdc <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af04      	add	r7, sp, #16
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	81fb      	strh	r3, [r7, #14]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	81bb      	strh	r3, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <I2C1_ReadBuffer+0x4c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	8978      	ldrh	r0, [r7, #10]
 8001cfa:	89ba      	ldrh	r2, [r7, #12]
 8001cfc:	89f9      	ldrh	r1, [r7, #14]
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	8c3b      	ldrh	r3, [r7, #32]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <I2C1_ReadBuffer+0x50>)
 8001d0c:	f004 f808 	bl	8005d20 <HAL_I2C_Mem_Read>
 8001d10:	4603      	mov	r3, r0
 8001d12:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001d1a:	f000 f809 	bl	8001d30 <I2C1_Error>
  }
  return status;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000003c 	.word	0x2000003c
 8001d2c:	20000330 	.word	0x20000330

08001d30 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <I2C1_Error+0x14>)
 8001d36:	f003 feb0 	bl	8005a9a <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001d3a:	f7ff fe8f 	bl	8001a5c <I2C1_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000330 	.word	0x20000330

08001d48 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <AUDIO_IO_Init+0x64>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <AUDIO_IO_Init+0x64>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <AUDIO_IO_Init+0x64>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001d66:	2308      	movs	r3, #8
 8001d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <AUDIO_IO_Init+0x68>)
 8001d7c:	f003 fb30 	bl	80053e0 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001d80:	f7ff fe6c 	bl	8001a5c <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001d84:	2200      	movs	r2, #0
 8001d86:	2108      	movs	r1, #8
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <AUDIO_IO_Init+0x68>)
 8001d8a:	f003 fddf 	bl	800594c <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001d8e:	2005      	movs	r0, #5
 8001d90:	f001 fbac 	bl	80034ec <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001d94:	2201      	movs	r2, #1
 8001d96:	2108      	movs	r1, #8
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <AUDIO_IO_Init+0x68>)
 8001d9a:	f003 fdd7 	bl	800594c <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001d9e:	2005      	movs	r0, #5
 8001da0:	f001 fba4 	bl	80034ec <HAL_Delay>
}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48001000 	.word	0x48001000

08001db4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <AUDIO_IO_DeInit+0x78>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <AUDIO_IO_DeInit+0x78>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <AUDIO_IO_DeInit+0x78>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001dd6:	237c      	movs	r3, #124	; 0x7c
 8001dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4812      	ldr	r0, [pc, #72]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001de8:	f003 fafa 	bl	80053e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2104      	movs	r1, #4
 8001df0:	480f      	ldr	r0, [pc, #60]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001df2:	f003 fdab 	bl	800594c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2108      	movs	r1, #8
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001dfc:	f003 fda6 	bl	800594c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2110      	movs	r1, #16
 8001e04:	480a      	ldr	r0, [pc, #40]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001e06:	f003 fda1 	bl	800594c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	4808      	ldr	r0, [pc, #32]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001e10:	f003 fd9c 	bl	800594c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <AUDIO_IO_DeInit+0x7c>)
 8001e1a:	f003 fd97 	bl	800594c <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001e1e:	f7ff fecb 	bl	8001bb8 <I2C1_DeInit>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48001000 	.word	0x48001000

08001e34 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	71bb      	strb	r3, [r7, #6]
 8001e42:	4613      	mov	r3, r2
 8001e44:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	1d7b      	adds	r3, r7, #5
 8001e50:	2201      	movs	r2, #1
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f7ff ff17 	bl	8001c88 <I2C1_WriteBuffer>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b298      	uxth	r0, r3
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	f107 030f 	add.w	r3, r7, #15
 8001e82:	2201      	movs	r2, #1
 8001e84:	9200      	str	r2, [sp, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f7ff ff28 	bl	8001cdc <I2C1_ReadBuffer>

  return Read_Value;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t Volume,
                           uint32_t AudioFreq)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	603a      	str	r2, [r7, #0]
 8001ea2:	80fb      	strh	r3, [r7, #6]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs43l22_drv;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <BSP_AUDIO_OUT_Init+0x8c>)
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <BSP_AUDIO_OUT_Init+0x90>)
 8001eac:	601a      	str	r2, [r3, #0]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <BSP_AUDIO_OUT_Init+0x8c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <BSP_AUDIO_OUT_Init+0x8c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <BSP_AUDIO_OUT_Init+0x8c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Configure the SAI PLL according to the requested audio frequency */
  if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f000 f985 	bl	80021d0 <AUDIO_SAIPLLConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <BSP_AUDIO_OUT_Init+0x38>
  {
    return AUDIO_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e024      	b.n	8001f1a <BSP_AUDIO_OUT_Init+0x82>
  }

  /* SAI data transfer preparation: prepare the Media to be used for the audio
     transfer from memory to SAI peripheral. */
  if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f000 f8cb 	bl	800206c <AUDIO_SAIx_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <BSP_AUDIO_OUT_Init+0x48>
  {
    return AUDIO_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e01c      	b.n	8001f1a <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Retrieve audio codec identifier */
  if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) != CS43L22_ID)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <BSP_AUDIO_OUT_Init+0x90>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2094      	movs	r0, #148	; 0x94
 8001ee6:	4798      	blx	r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2be0      	cmp	r3, #224	; 0xe0
 8001eec:	d001      	beq.n	8001ef2 <BSP_AUDIO_OUT_Init+0x5a>
  {
    return AUDIO_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e013      	b.n	8001f1a <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Reset the audio codec Registers */
  AUDIO_CODEC_Reset();
 8001ef2:	f000 f95d 	bl	80021b0 <AUDIO_CODEC_Reset>

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <BSP_AUDIO_OUT_Init+0x8c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681c      	ldr	r4, [r3, #0]
 8001efc:	797a      	ldrb	r2, [r7, #5]
 8001efe:	88f9      	ldrh	r1, [r7, #6]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2094      	movs	r0, #148	; 0x94
 8001f04:	47a0      	blx	r4
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <BSP_AUDIO_OUT_Init+0x78>
                               OutputDevice,
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e004      	b.n	8001f1a <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Set the requested volume */
  BSP_AUDIO_OUT_SetVolume(Volume);
 8001f10:	797b      	ldrb	r3, [r7, #5]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f844 	bl	8001fa0 <BSP_AUDIO_OUT_SetVolume>

  return AUDIO_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000afec 	.word	0x2000afec
 8001f28:	20000008 	.word	0x20000008

08001f2c <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data BYTES.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */

	BSP_QSPI_Read(Music_buffor,(uint32_t) pData, DMA_MAX(Size));
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bf28      	it	cs
 8001f42:	4613      	movcs	r3, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4813      	ldr	r0, [pc, #76]	; (8001f94 <BSP_AUDIO_OUT_Play+0x68>)
 8001f48:	f001 f87e 	bl	8003048 <BSP_QSPI_Read>
	if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai, Music_buffor ,DMA_MAX(Size)) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f52:	4293      	cmp	r3, r2
 8001f54:	bf28      	it	cs
 8001f56:	4613      	movcs	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	490d      	ldr	r1, [pc, #52]	; (8001f94 <BSP_AUDIO_OUT_Play+0x68>)
 8001f5e:	480e      	ldr	r0, [pc, #56]	; (8001f98 <BSP_AUDIO_OUT_Play+0x6c>)
 8001f60:	f007 ff88 	bl	8009e74 <HAL_SAI_Transmit_DMA>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <BSP_AUDIO_OUT_Play+0x42>
	{
		return AUDIO_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00d      	b.n	8001f8a <BSP_AUDIO_OUT_Play+0x5e>
	}

  /* Call the audio Codec Play function */
	if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) Music_buffor, (uint16_t) Size) != 0)
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <BSP_AUDIO_OUT_Play+0x70>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b292      	uxth	r2, r2
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <BSP_AUDIO_OUT_Play+0x68>)
 8001f7a:	2094      	movs	r0, #148	; 0x94
 8001f7c:	4798      	blx	r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <BSP_AUDIO_OUT_Play+0x5c>
	{
		return AUDIO_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <BSP_AUDIO_OUT_Play+0x5e>
	}

	return AUDIO_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000037c 	.word	0x2000037c
 8001f98:	2000affc 	.word	0x2000affc
 8001f9c:	2000afec 	.word	0x2000afec

08001fa0 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (hAudioOut.AudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	2094      	movs	r0, #148	; 0x94
 8001fb6:	4798      	blx	r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <BSP_AUDIO_OUT_SetVolume+0x24>
  }

  return AUDIO_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000afec 	.word	0x2000afec

08001fd0 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6053      	str	r3, [r2, #4]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6093      	str	r3, [r2, #8]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60d3      	str	r3, [r2, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000afec 	.word	0x2000afec

08002000 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'TransferComplete' function (if any) */
  if (hAudioOut.CbTransferComplete != (Audio_CallbackTypeDef)NULL)
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_SAI_TxCpltCallback+0x20>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_SAI_TxCpltCallback+0x16>
  {
    hAudioOut.CbTransferComplete();
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_SAI_TxCpltCallback+0x20>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4798      	blx	r3
  }
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000afec 	.word	0x2000afec

08002024 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4798      	blx	r3
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000afec 	.word	0x2000afec

08002048 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_SAI_ErrorCallback+0x20>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_SAI_ErrorCallback+0x20>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4798      	blx	r3
  }
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000afec 	.word	0x2000afec

0800206c <AUDIO_SAIx_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai);
 8002074:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002082:	601a      	str	r2, [r3, #0]

  /* Initialize the BSP_AUDIO_hSai Instance parameter */
  BSP_AUDIO_hSai.Instance = AUDIO_SAIx;
 8002084:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <AUDIO_SAIx_Init+0x140>)
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai.Init.AudioMode      = SAI_MODEMASTER_TX;
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8002090:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8002096:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80020bc:	d029      	beq.n	8002112 <AUDIO_SAIx_Init+0xa6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d022      	beq.n	800210e <AUDIO_SAIx_Init+0xa2>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80020ce:	d01c      	beq.n	800210a <AUDIO_SAIx_Init+0x9e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f245 6222 	movw	r2, #22050	; 0x5622
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d015      	beq.n	8002106 <AUDIO_SAIx_Init+0x9a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80020e0:	d00f      	beq.n	8002102 <AUDIO_SAIx_Init+0x96>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d008      	beq.n	80020fe <AUDIO_SAIx_Init+0x92>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <AUDIO_SAIx_Init+0x8e>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e00c      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00a      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 80020fe:	2300      	movs	r3, #0
 8002100:	e008      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 8002102:	2303      	movs	r3, #3
 8002104:	e006      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 8002106:	2301      	movs	r3, #1
 8002108:	e004      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 800210a:	2306      	movs	r3, #6
 800210c:	e002      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 800210e:	2302      	movs	r3, #2
 8002110:	e000      	b.n	8002114 <AUDIO_SAIx_Init+0xa8>
 8002112:	230c      	movs	r3, #12
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002116:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai.Init.CompandingMode = SAI_NOCOMPANDING;
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002126:	2200      	movs	r2, #0
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai.Init.DataSize       = SAI_DATASIZE_16;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800213e:	2200      	movs	r2, #0
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai.FrameInit.FrameLength = 32;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002144:	2220      	movs	r2, #32
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai.FrameInit.ActiveFrameLength = 16;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800214a:	2210      	movs	r2, #16
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002154:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002158:	2200      	movs	r2, #0
 800215a:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800215e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002162:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai.SlotInit.FirstBitOffset = 0;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002166:	2200      	movs	r2, #0
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800216c:	2200      	movs	r2, #0
 800216e:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai.SlotInit.SlotNumber = 2;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002172:	2202      	movs	r2, #2
 8002174:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002178:	2203      	movs	r2, #3
 800217a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai) != HAL_OK)
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800217e:	f007 fca1 	bl	8009ac4 <HAL_SAI_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <AUDIO_SAIx_Init+0x120>
  {
    return AUDIO_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e008      	b.n	800219e <AUDIO_SAIx_Init+0x132>
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai);
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <AUDIO_SAIx_Init+0x13c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800219a:	601a      	str	r2, [r3, #0]

  return AUDIO_OK;
 800219c:	2300      	movs	r3, #0

}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000affc 	.word	0x2000affc
 80021ac:	40015404 	.word	0x40015404

080021b0 <AUDIO_CODEC_Reset>:
  * @brief  Resets the audio codec. It restores the default configuration of the
  *         codec (this function shall be called before initializing the codec).
  * @retval None
  */
static void AUDIO_CODEC_Reset(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Initialize the audio driver structure */
  hAudioOut.AudioDrv = &cs43l22_drv;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <AUDIO_CODEC_Reset+0x18>)
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <AUDIO_CODEC_Reset+0x1c>)
 80021b8:	601a      	str	r2, [r3, #0]

  hAudioOut.AudioDrv->Reset(AUDIO_I2C_ADDRESS);
 80021ba:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <AUDIO_CODEC_Reset+0x18>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	2094      	movs	r0, #148	; 0x94
 80021c2:	4798      	blx	r3
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000afec 	.word	0x2000afec
 80021cc:	20000008 	.word	0x20000008

080021d0 <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0a4      	sub	sp, #144	; 0x90
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 fa0d 	bl	80085fc <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f245 6222 	movw	r2, #22050	; 0x5622
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d10c      	bne.n	800221a <AUDIO_SAIPLLConfig+0x4a>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8002200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002204:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 24;
 8002206:	2318      	movs	r3, #24
 8002208:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 800220a:	2311      	movs	r3, #17
 800220c:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002214:	2300      	movs	r3, #0
 8002216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002218:	e00b      	b.n	8002232 <AUDIO_SAIPLLConfig+0x62>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800221a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800221e:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 43;
 8002220:	232b      	movs	r3, #43	; 0x2b
 8002222:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 8002224:	2307      	movs	r3, #7
 8002226:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8002228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 800222e:	2300      	movs	r3, #0
 8002230:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fef6 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <AUDIO_SAIPLLConfig+0x76>
  {
    return AUDIO_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <AUDIO_SAIPLLConfig+0x78>
  }

  return AUDIO_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3790      	adds	r7, #144	; 0x90
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <BSP_LCD_GLASS_Init+0x70>)
 8002258:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002262:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002266:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 800226a:	220c      	movs	r2, #12
 800226c:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 800227c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002280:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 800229c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 80022aa:	f000 f8eb 	bl	8002484 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 80022ae:	4803      	ldr	r0, [pc, #12]	; (80022bc <BSP_LCD_GLASS_Init+0x6c>)
 80022b0:	f004 f99c 	bl	80065ec <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 80022b4:	f000 f82a 	bl	800230c <BSP_LCD_GLASS_Clear>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2000b084 	.word	0x2000b084
 80022c0:	40002400 	.word	0x40002400

080022c4 <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 80022d0:	e00b      	b.n	80022ea <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fadf 	bl	800289c <WriteChar>

    /* Point on the next character */
    ptr++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3301      	adds	r3, #1
 80022e2:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <BSP_LCD_GLASS_DisplayString+0x34>
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d9ec      	bls.n	80022d2 <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <BSP_LCD_GLASS_DisplayString+0x44>)
 80022fa:	f004 fae8 	bl	80068ce <HAL_LCD_UpdateDisplayRequest>
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000b084 	.word	0x2000b084

0800230c <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <BSP_LCD_GLASS_Clear+0x10>)
 8002312:	f004 fa86 	bl	8006822 <HAL_LCD_Clear>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000b084 	.word	0x2000b084

08002320 <BSP_LCD_GLASS_ScrollSentence>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_ScrollSentence(uint8_t *ptr, uint16_t nScroll, uint16_t ScrollSpeed)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	803b      	strh	r3, [r7, #0]
  uint8_t repetition = 0, nbrchar = 0, sizestr = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
 8002334:	2300      	movs	r3, #0
 8002336:	75bb      	strb	r3, [r7, #22]
 8002338:	2300      	movs	r3, #0
 800233a:	757b      	strb	r3, [r7, #21]
  uint8_t *ptr1;
  uint8_t str[6] = "";
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	2300      	movs	r3, #0
 8002342:	81bb      	strh	r3, [r7, #12]

  /* Reset interrupt variable in case key was press before entering function */
  bLCDGlass_KeyPressed = 0;
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]

  if (ptr == 0)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8092 	beq.w	8002476 <BSP_LCD_GLASS_ScrollSentence+0x156>
  {
    return;
  }

  /* To calculate end of string */
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	2300      	movs	r3, #0
 8002358:	757b      	strb	r3, [r7, #21]
 800235a:	e005      	b.n	8002368 <BSP_LCD_GLASS_ScrollSentence+0x48>
 800235c:	7d7b      	ldrb	r3, [r7, #21]
 800235e:	3301      	adds	r3, #1
 8002360:	757b      	strb	r3, [r7, #21]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3301      	adds	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f5      	bne.n	800235c <BSP_LCD_GLASS_ScrollSentence+0x3c>

  ptr1 = ptr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	613b      	str	r3, [r7, #16]

  BSP_LCD_GLASS_DisplayString(str);
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffa3 	bl	80022c4 <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 800237e:	883b      	ldrh	r3, [r7, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f8b3 	bl	80034ec <HAL_Delay>

  /* To shift the string for scrolling display*/
  for (repetition = 0; repetition < nScroll; repetition++)
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
 800238a:	e06e      	b.n	800246a <BSP_LCD_GLASS_ScrollSentence+0x14a>
  {
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 800238c:	2300      	movs	r3, #0
 800238e:	75bb      	strb	r3, [r7, #22]
 8002390:	e064      	b.n	800245c <BSP_LCD_GLASS_ScrollSentence+0x13c>
    {
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8002392:	7dbb      	ldrb	r3, [r7, #22]
 8002394:	3301      	adds	r3, #1
 8002396:	7d7a      	ldrb	r2, [r7, #21]
 8002398:	fb93 f1f2 	sdiv	r1, r3, r2
 800239c:	fb01 f202 	mul.w	r2, r1, r2
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	723b      	strb	r3, [r7, #8]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 80023ac:	7dbb      	ldrb	r3, [r7, #22]
 80023ae:	3302      	adds	r3, #2
 80023b0:	7d7a      	ldrb	r2, [r7, #21]
 80023b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80023b6:	fb01 f202 	mul.w	r2, r1, r2
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	727b      	strb	r3, [r7, #9]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 80023c6:	7dbb      	ldrb	r3, [r7, #22]
 80023c8:	3303      	adds	r3, #3
 80023ca:	7d7a      	ldrb	r2, [r7, #21]
 80023cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d0:	fb01 f202 	mul.w	r2, r1, r2
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	72bb      	strb	r3, [r7, #10]
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 80023e0:	7dbb      	ldrb	r3, [r7, #22]
 80023e2:	3304      	adds	r3, #4
 80023e4:	7d7a      	ldrb	r2, [r7, #21]
 80023e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80023ea:	fb01 f202 	mul.w	r2, r1, r2
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	72fb      	strb	r3, [r7, #11]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 80023fa:	7dbb      	ldrb	r3, [r7, #22]
 80023fc:	3305      	adds	r3, #5
 80023fe:	7d7a      	ldrb	r2, [r7, #21]
 8002400:	fb93 f1f2 	sdiv	r1, r3, r2
 8002404:	fb01 f202 	mul.w	r2, r1, r2
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	461a      	mov	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	733b      	strb	r3, [r7, #12]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 8002414:	7dbb      	ldrb	r3, [r7, #22]
 8002416:	3306      	adds	r3, #6
 8002418:	7d7a      	ldrb	r2, [r7, #21]
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	461a      	mov	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	737b      	strb	r3, [r7, #13]
      BSP_LCD_GLASS_Clear();
 800242e:	f7ff ff6d 	bl	800230c <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff44 	bl	80022c4 <BSP_LCD_GLASS_DisplayString>

      /* user button pressed stop the scrolling sentence */
      if (bLCDGlass_KeyPressed)
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <BSP_LCD_GLASS_ScrollSentence+0x12e>
      {
        bLCDGlass_KeyPressed = 0;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
        return;
 800244c:	e014      	b.n	8002478 <BSP_LCD_GLASS_ScrollSentence+0x158>
      }
      HAL_Delay(ScrollSpeed);
 800244e:	883b      	ldrh	r3, [r7, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f001 f84b 	bl	80034ec <HAL_Delay>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8002456:	7dbb      	ldrb	r3, [r7, #22]
 8002458:	3301      	adds	r3, #1
 800245a:	75bb      	strb	r3, [r7, #22]
 800245c:	7dba      	ldrb	r2, [r7, #22]
 800245e:	7d7b      	ldrb	r3, [r7, #21]
 8002460:	429a      	cmp	r2, r3
 8002462:	d396      	bcc.n	8002392 <BSP_LCD_GLASS_ScrollSentence+0x72>
  for (repetition = 0; repetition < nScroll; repetition++)
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	3301      	adds	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	b29b      	uxth	r3, r3
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	429a      	cmp	r2, r3
 8002472:	d88b      	bhi.n	800238c <BSP_LCD_GLASS_ScrollSentence+0x6c>
 8002474:	e000      	b.n	8002478 <BSP_LCD_GLASS_ScrollSentence+0x158>
    return;
 8002476:	bf00      	nop
    }
  }
}
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000b080 	.word	0x2000b080

08002484 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0c0      	sub	sp, #256	; 0x100
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800248c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 800249c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024a0:	2244      	movs	r2, #68	; 0x44
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f008 fe57 	bl	800b158 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80024aa:	f107 0320 	add.w	r3, r7, #32
 80024ae:	2288      	movs	r2, #136	; 0x88
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f008 fe50 	bl	800b158 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b51      	ldr	r3, [pc, #324]	; (8002600 <LCD_MspInit+0x17c>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a50      	ldr	r2, [pc, #320]	; (8002600 <LCD_MspInit+0x17c>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <LCD_MspInit+0x17c>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80024d0:	2304      	movs	r3, #4
 80024d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80024dc:	2301      	movs	r3, #1
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80024e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 ffb0 	bl	800744c <HAL_RCC_OscConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d000      	beq.n	80024f4 <LCD_MspInit+0x70>
  {
    while (1);
 80024f2:	e7fe      	b.n	80024f2 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f8:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8002502:	f107 0320 	add.w	r3, r7, #32
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fd8e 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <LCD_MspInit+0x17c>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <LCD_MspInit+0x17c>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <LCD_MspInit+0x17c>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <LCD_MspInit+0x17c>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	4a35      	ldr	r2, [pc, #212]	; (8002600 <LCD_MspInit+0x17c>)
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <LCD_MspInit+0x17c>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <LCD_MspInit+0x17c>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <LCD_MspInit+0x17c>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <LCD_MspInit+0x17c>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <LCD_MspInit+0x17c>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	4a29      	ldr	r2, [pc, #164]	; (8002600 <LCD_MspInit+0x17c>)
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <LCD_MspInit+0x17c>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 800256c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002570:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8002586:	230b      	movs	r3, #11
 8002588:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 800258c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002590:	4619      	mov	r1, r3
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f002 ff23 	bl	80053e0 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800259a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800259e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80025a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025a6:	4619      	mov	r1, r3
 80025a8:	4816      	ldr	r0, [pc, #88]	; (8002604 <LCD_MspInit+0x180>)
 80025aa:	f002 ff19 	bl	80053e0 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80025ae:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80025b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80025b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025ba:	4619      	mov	r1, r3
 80025bc:	4812      	ldr	r0, [pc, #72]	; (8002608 <LCD_MspInit+0x184>)
 80025be:	f002 ff0f 	bl	80053e0 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80025c2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80025c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80025ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025ce:	4619      	mov	r1, r3
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <LCD_MspInit+0x188>)
 80025d2:	f002 ff05 	bl	80053e0 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80025d6:	2002      	movs	r0, #2
 80025d8:	f000 ff88 	bl	80034ec <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <LCD_MspInit+0x17c>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <LCD_MspInit+0x17c>)
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6593      	str	r3, [r2, #88]	; 0x58
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <LCD_MspInit+0x17c>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
}
 80025f4:	bf00      	nop
 80025f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	48000400 	.word	0x48000400
 8002608:	48000800 	.word	0x48000800
 800260c:	48000c00 	.word	0x48000c00

08002610 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
 800261c:	4613      	mov	r3, r2
 800261e:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 8002620:	2300      	movs	r3, #0
 8002622:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	737b      	strb	r3, [r7, #13]
 8002628:	2300      	movs	r3, #0
 800262a:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b6e      	cmp	r3, #110	; 0x6e
 8002632:	f300 80a9 	bgt.w	8002788 <Convert+0x178>
 8002636:	2b20      	cmp	r3, #32
 8002638:	f2c0 80dd 	blt.w	80027f6 <Convert+0x1e6>
 800263c:	3b20      	subs	r3, #32
 800263e:	2b4e      	cmp	r3, #78	; 0x4e
 8002640:	f200 80d9 	bhi.w	80027f6 <Convert+0x1e6>
 8002644:	a201      	add	r2, pc, #4	; (adr r2, 800264c <Convert+0x3c>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	0800278f 	.word	0x0800278f
 8002650:	080027f7 	.word	0x080027f7
 8002654:	080027f7 	.word	0x080027f7
 8002658:	080027f7 	.word	0x080027f7
 800265c:	080027f7 	.word	0x080027f7
 8002660:	080027d7 	.word	0x080027d7
 8002664:	080027f7 	.word	0x080027f7
 8002668:	080027f7 	.word	0x080027f7
 800266c:	0800279d 	.word	0x0800279d
 8002670:	080027a3 	.word	0x080027a3
 8002674:	08002795 	.word	0x08002795
 8002678:	080027c9 	.word	0x080027c9
 800267c:	080027f7 	.word	0x080027f7
 8002680:	080027c1 	.word	0x080027c1
 8002684:	080027f7 	.word	0x080027f7
 8002688:	080027d1 	.word	0x080027d1
 800268c:	080027e7 	.word	0x080027e7
 8002690:	080027e7 	.word	0x080027e7
 8002694:	080027e7 	.word	0x080027e7
 8002698:	080027e7 	.word	0x080027e7
 800269c:	080027e7 	.word	0x080027e7
 80026a0:	080027e7 	.word	0x080027e7
 80026a4:	080027e7 	.word	0x080027e7
 80026a8:	080027e7 	.word	0x080027e7
 80026ac:	080027e7 	.word	0x080027e7
 80026b0:	080027e7 	.word	0x080027e7
 80026b4:	080027f7 	.word	0x080027f7
 80026b8:	080027f7 	.word	0x080027f7
 80026bc:	080027f7 	.word	0x080027f7
 80026c0:	080027f7 	.word	0x080027f7
 80026c4:	080027f7 	.word	0x080027f7
 80026c8:	080027f7 	.word	0x080027f7
 80026cc:	080027f7 	.word	0x080027f7
 80026d0:	080027f7 	.word	0x080027f7
 80026d4:	080027f7 	.word	0x080027f7
 80026d8:	080027f7 	.word	0x080027f7
 80026dc:	080027f7 	.word	0x080027f7
 80026e0:	080027f7 	.word	0x080027f7
 80026e4:	080027f7 	.word	0x080027f7
 80026e8:	080027f7 	.word	0x080027f7
 80026ec:	080027f7 	.word	0x080027f7
 80026f0:	080027f7 	.word	0x080027f7
 80026f4:	080027f7 	.word	0x080027f7
 80026f8:	080027f7 	.word	0x080027f7
 80026fc:	080027f7 	.word	0x080027f7
 8002700:	080027f7 	.word	0x080027f7
 8002704:	080027f7 	.word	0x080027f7
 8002708:	080027f7 	.word	0x080027f7
 800270c:	080027f7 	.word	0x080027f7
 8002710:	080027f7 	.word	0x080027f7
 8002714:	080027f7 	.word	0x080027f7
 8002718:	080027f7 	.word	0x080027f7
 800271c:	080027f7 	.word	0x080027f7
 8002720:	080027f7 	.word	0x080027f7
 8002724:	080027f7 	.word	0x080027f7
 8002728:	080027f7 	.word	0x080027f7
 800272c:	080027f7 	.word	0x080027f7
 8002730:	080027f7 	.word	0x080027f7
 8002734:	080027f7 	.word	0x080027f7
 8002738:	080027f7 	.word	0x080027f7
 800273c:	080027f7 	.word	0x080027f7
 8002740:	080027f7 	.word	0x080027f7
 8002744:	080027f7 	.word	0x080027f7
 8002748:	080027f7 	.word	0x080027f7
 800274c:	080027f7 	.word	0x080027f7
 8002750:	080027f7 	.word	0x080027f7
 8002754:	080027f7 	.word	0x080027f7
 8002758:	080027f7 	.word	0x080027f7
 800275c:	080027a9 	.word	0x080027a9
 8002760:	080027f7 	.word	0x080027f7
 8002764:	080027f7 	.word	0x080027f7
 8002768:	080027f7 	.word	0x080027f7
 800276c:	080027f7 	.word	0x080027f7
 8002770:	080027f7 	.word	0x080027f7
 8002774:	080027f7 	.word	0x080027f7
 8002778:	080027f7 	.word	0x080027f7
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027b1 	.word	0x080027b1
 8002784:	080027b9 	.word	0x080027b9
 8002788:	2bff      	cmp	r3, #255	; 0xff
 800278a:	d028      	beq.n	80027de <Convert+0x1ce>
 800278c:	e033      	b.n	80027f6 <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	81fb      	strh	r3, [r7, #14]
      break;
 8002792:	e04f      	b.n	8002834 <Convert+0x224>

    case '*':
      ch = C_STAR;
 8002794:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8002798:	81fb      	strh	r3, [r7, #14]
      break;
 800279a:	e04b      	b.n	8002834 <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 800279c:	2328      	movs	r3, #40	; 0x28
 800279e:	81fb      	strh	r3, [r7, #14]
      break;
 80027a0:	e048      	b.n	8002834 <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 80027a2:	2311      	movs	r3, #17
 80027a4:	81fb      	strh	r3, [r7, #14]
      break;
 80027a6:	e045      	b.n	8002834 <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 80027a8:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80027ac:	81fb      	strh	r3, [r7, #14]
      break;
 80027ae:	e041      	b.n	8002834 <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 80027b0:	f24b 2310 	movw	r3, #45584	; 0xb210
 80027b4:	81fb      	strh	r3, [r7, #14]
      break;
 80027b6:	e03d      	b.n	8002834 <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 80027b8:	f242 2310 	movw	r3, #8720	; 0x2210
 80027bc:	81fb      	strh	r3, [r7, #14]
      break;
 80027be:	e039      	b.n	8002834 <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 80027c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027c4:	81fb      	strh	r3, [r7, #14]
      break;
 80027c6:	e035      	b.n	8002834 <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 80027c8:	f24a 0314 	movw	r3, #40980	; 0xa014
 80027cc:	81fb      	strh	r3, [r7, #14]
      break;
 80027ce:	e031      	b.n	8002834 <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 80027d0:	23c0      	movs	r3, #192	; 0xc0
 80027d2:	81fb      	strh	r3, [r7, #14]
      break;
 80027d4:	e02e      	b.n	8002834 <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 80027d6:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 80027da:	81fb      	strh	r3, [r7, #14]
      break;
 80027dc:	e02a      	b.n	8002834 <Convert+0x224>
    case 255 :
      ch = C_FULL;
 80027de:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 80027e2:	81fb      	strh	r3, [r7, #14]
      break ;
 80027e4:	e026      	b.n	8002834 <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3b30      	subs	r3, #48	; 0x30
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <Convert+0x280>)
 80027ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f2:	81fb      	strh	r3, [r7, #14]
      break;
 80027f4:	e01e      	b.n	8002834 <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b5a      	cmp	r3, #90	; 0x5a
 80027fc:	d80a      	bhi.n	8002814 <Convert+0x204>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d906      	bls.n	8002814 <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	3b41      	subs	r3, #65	; 0x41
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <Convert+0x284>)
 800280e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002812:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b7a      	cmp	r3, #122	; 0x7a
 800281a:	d80a      	bhi.n	8002832 <Convert+0x222>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d906      	bls.n	8002832 <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3b61      	subs	r3, #97	; 0x61
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <Convert+0x284>)
 800282c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002830:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8002832:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d103      	bne.n	8002842 <Convert+0x232>
  {
    ch |= 0x0002;
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8002842:	78bb      	ldrb	r3, [r7, #2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d103      	bne.n	8002850 <Convert+0x240>
  {
    ch |= 0x0020;
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002850:	230c      	movs	r3, #12
 8002852:	737b      	strb	r3, [r7, #13]
 8002854:	2300      	movs	r3, #0
 8002856:	733b      	strb	r3, [r7, #12]
 8002858:	e010      	b.n	800287c <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 800285a:	89fa      	ldrh	r2, [r7, #14]
 800285c:	7b7b      	ldrb	r3, [r7, #13]
 800285e:	fa42 f303 	asr.w	r3, r2, r3
 8002862:	461a      	mov	r2, r3
 8002864:	7b3b      	ldrb	r3, [r7, #12]
 8002866:	f002 020f 	and.w	r2, r2, #15
 800286a:	490b      	ldr	r1, [pc, #44]	; (8002898 <Convert+0x288>)
 800286c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002870:	7b7b      	ldrb	r3, [r7, #13]
 8002872:	3b04      	subs	r3, #4
 8002874:	737b      	strb	r3, [r7, #13]
 8002876:	7b3b      	ldrb	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	733b      	strb	r3, [r7, #12]
 800287c:	7b3b      	ldrb	r3, [r7, #12]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d9eb      	bls.n	800285a <Convert+0x24a>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	0800b214 	.word	0x0800b214
 8002894:	0800b1e0 	.word	0x0800b1e0
 8002898:	2000b0c0 	.word	0x2000b0c0

0800289c <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	70fb      	strb	r3, [r7, #3]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70bb      	strb	r3, [r7, #2]
 80028b2:	4613      	mov	r3, r2
 80028b4:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 80028ba:	78ba      	ldrb	r2, [r7, #2]
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fea5 	bl	8002610 <Convert>

  switch (Position)
 80028c6:	787b      	ldrb	r3, [r7, #1]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	f200 835b 	bhi.w	8002f84 <WriteChar+0x6e8>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <WriteChar+0x38>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	080029e7 	.word	0x080029e7
 80028dc:	08002b01 	.word	0x08002b01
 80028e0:	08002c03 	.word	0x08002c03
 80028e4:	08002d31 	.word	0x08002d31
 80028e8:	08002e7b 	.word	0x08002e7b
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80028ec:	4b80      	ldr	r3, [pc, #512]	; (8002af0 <WriteChar+0x254>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	f003 0210 	and.w	r2, r3, #16
 80028f6:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <WriteChar+0x254>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002902:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002904:	4b7a      	ldr	r3, [pc, #488]	; (8002af0 <WriteChar+0x254>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	059b      	lsls	r3, r3, #22
 800290c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002910:	431a      	orrs	r2, r3
 8002912:	4b77      	ldr	r3, [pc, #476]	; (8002af0 <WriteChar+0x254>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a74      	ldr	r2, [pc, #464]	; (8002af4 <WriteChar+0x258>)
 8002922:	2100      	movs	r1, #0
 8002924:	4874      	ldr	r0, [pc, #464]	; (8002af8 <WriteChar+0x25c>)
 8002926:	f003 ff21 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800292a:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <WriteChar+0x254>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	f003 0210 	and.w	r2, r3, #16
 8002934:	4b6e      	ldr	r3, [pc, #440]	; (8002af0 <WriteChar+0x254>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	05db      	lsls	r3, r3, #23
 800293c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002940:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002942:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <WriteChar+0x254>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	059b      	lsls	r3, r3, #22
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	431a      	orrs	r2, r3
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <WriteChar+0x254>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <WriteChar+0x258>)
 8002960:	2102      	movs	r1, #2
 8002962:	4865      	ldr	r0, [pc, #404]	; (8002af8 <WriteChar+0x25c>)
 8002964:	f003 ff02 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <WriteChar+0x254>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	f003 0210 	and.w	r2, r3, #16
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <WriteChar+0x254>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297e:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002980:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <WriteChar+0x254>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	059b      	lsls	r3, r3, #22
 8002988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298c:	431a      	orrs	r2, r3
 800298e:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <WriteChar+0x254>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a55      	ldr	r2, [pc, #340]	; (8002af4 <WriteChar+0x258>)
 800299e:	2104      	movs	r1, #4
 80029a0:	4855      	ldr	r0, [pc, #340]	; (8002af8 <WriteChar+0x25c>)
 80029a2:	f003 fee3 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80029a6:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <WriteChar+0x254>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	f003 0210 	and.w	r2, r3, #16
 80029b0:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <WriteChar+0x254>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	05db      	lsls	r3, r3, #23
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029bc:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <WriteChar+0x254>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	059b      	lsls	r3, r3, #22
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	431a      	orrs	r2, r3
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <WriteChar+0x254>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a46      	ldr	r2, [pc, #280]	; (8002af4 <WriteChar+0x258>)
 80029dc:	2106      	movs	r1, #6
 80029de:	4846      	ldr	r0, [pc, #280]	; (8002af8 <WriteChar+0x25c>)
 80029e0:	f003 fec4 	bl	800676c <HAL_LCD_Write>
      break;
 80029e4:	e2cf      	b.n	8002f86 <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <WriteChar+0x254>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	019b      	lsls	r3, r3, #6
 80029ec:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <WriteChar+0x254>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	035b      	lsls	r3, r3, #13
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <WriteChar+0x254>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <WriteChar+0x254>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <WriteChar+0x260>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	4835      	ldr	r0, [pc, #212]	; (8002af8 <WriteChar+0x25c>)
 8002a24:	f003 fea2 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a28:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <WriteChar+0x254>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <WriteChar+0x254>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	035b      	lsls	r3, r3, #13
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <WriteChar+0x254>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <WriteChar+0x254>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	015b      	lsls	r3, r3, #5
 8002a56:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a26      	ldr	r2, [pc, #152]	; (8002afc <WriteChar+0x260>)
 8002a62:	2102      	movs	r1, #2
 8002a64:	4824      	ldr	r0, [pc, #144]	; (8002af8 <WriteChar+0x25c>)
 8002a66:	f003 fe81 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <WriteChar+0x254>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	019b      	lsls	r3, r3, #6
 8002a70:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <WriteChar+0x254>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	035b      	lsls	r3, r3, #13
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a80:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <WriteChar+0x254>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <WriteChar+0x254>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	015b      	lsls	r3, r3, #5
 8002a98:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <WriteChar+0x260>)
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4814      	ldr	r0, [pc, #80]	; (8002af8 <WriteChar+0x25c>)
 8002aa8:	f003 fe60 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <WriteChar+0x254>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <WriteChar+0x254>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	035b      	lsls	r3, r3, #13
 8002abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac2:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <WriteChar+0x254>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	031b      	lsls	r3, r3, #12
 8002acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <WriteChar+0x254>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	015b      	lsls	r3, r3, #5
 8002ada:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <WriteChar+0x260>)
 8002ae6:	2106      	movs	r1, #6
 8002ae8:	4803      	ldr	r0, [pc, #12]	; (8002af8 <WriteChar+0x25c>)
 8002aea:	f003 fe3f 	bl	800676c <HAL_LCD_Write>
      break;
 8002aee:	e24a      	b.n	8002f86 <WriteChar+0x6ea>
 8002af0:	2000b0c0 	.word	0x2000b0c0
 8002af4:	ff3fffe7 	.word	0xff3fffe7
 8002af8:	2000b084 	.word	0x2000b084
 8002afc:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <WriteChar+0x488>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	03db      	lsls	r3, r3, #15
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <WriteChar+0x488>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	075b      	lsls	r3, r3, #29
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002b16:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <WriteChar+0x488>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	431a      	orrs	r2, r3
 8002b24:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <WriteChar+0x488>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <WriteChar+0x48c>)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	487c      	ldr	r0, [pc, #496]	; (8002d2c <WriteChar+0x490>)
 8002b3c:	f003 fe16 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <WriteChar+0x488>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	03db      	lsls	r3, r3, #15
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <WriteChar+0x488>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	075b      	lsls	r3, r3, #29
 8002b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b54:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <WriteChar+0x488>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	431a      	orrs	r2, r3
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <WriteChar+0x488>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	039b      	lsls	r3, r3, #14
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a6c      	ldr	r2, [pc, #432]	; (8002d28 <WriteChar+0x48c>)
 8002b78:	2102      	movs	r1, #2
 8002b7a:	486c      	ldr	r0, [pc, #432]	; (8002d2c <WriteChar+0x490>)
 8002b7c:	f003 fdf6 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <WriteChar+0x488>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	03db      	lsls	r3, r3, #15
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <WriteChar+0x488>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	075b      	lsls	r3, r3, #29
 8002b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b94:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <WriteChar+0x488>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <WriteChar+0x488>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	039b      	lsls	r3, r3, #14
 8002bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <WriteChar+0x48c>)
 8002bb8:	2104      	movs	r1, #4
 8002bba:	485c      	ldr	r0, [pc, #368]	; (8002d2c <WriteChar+0x490>)
 8002bbc:	f003 fdd6 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bc0:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <WriteChar+0x488>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	03db      	lsls	r3, r3, #15
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <WriteChar+0x488>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	075b      	lsls	r3, r3, #29
 8002bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd4:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <WriteChar+0x488>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	431a      	orrs	r2, r3
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <WriteChar+0x488>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	039b      	lsls	r3, r3, #14
 8002bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <WriteChar+0x48c>)
 8002bf8:	2106      	movs	r1, #6
 8002bfa:	484c      	ldr	r0, [pc, #304]	; (8002d2c <WriteChar+0x490>)
 8002bfc:	f003 fdb6 	bl	800676c <HAL_LCD_Write>
      break;
 8002c00:	e1c1      	b.n	8002f86 <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c02:	4b48      	ldr	r3, [pc, #288]	; (8002d24 <WriteChar+0x488>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	07da      	lsls	r2, r3, #31
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <WriteChar+0x488>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	079b      	lsls	r3, r3, #30
 8002c10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4842      	ldr	r0, [pc, #264]	; (8002d2c <WriteChar+0x490>)
 8002c22:	f003 fda3 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <WriteChar+0x488>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0202 	and.w	r2, r3, #2
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <WriteChar+0x488>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f06f 0203 	mvn.w	r2, #3
 8002c42:	2101      	movs	r1, #1
 8002c44:	4839      	ldr	r0, [pc, #228]	; (8002d2c <WriteChar+0x490>)
 8002c46:	f003 fd91 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <WriteChar+0x488>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	07da      	lsls	r2, r3, #31
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <WriteChar+0x488>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	079b      	lsls	r3, r3, #30
 8002c58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002c66:	2102      	movs	r1, #2
 8002c68:	4830      	ldr	r0, [pc, #192]	; (8002d2c <WriteChar+0x490>)
 8002c6a:	f003 fd7f 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <WriteChar+0x488>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0202 	and.w	r2, r3, #2
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <WriteChar+0x488>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f06f 0203 	mvn.w	r2, #3
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	4827      	ldr	r0, [pc, #156]	; (8002d2c <WriteChar+0x490>)
 8002c8e:	f003 fd6d 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <WriteChar+0x488>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	07da      	lsls	r2, r3, #31
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <WriteChar+0x488>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	079b      	lsls	r3, r3, #30
 8002ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002cae:	2104      	movs	r1, #4
 8002cb0:	481e      	ldr	r0, [pc, #120]	; (8002d2c <WriteChar+0x490>)
 8002cb2:	f003 fd5b 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <WriteChar+0x488>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0202 	and.w	r2, r3, #2
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <WriteChar+0x488>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f06f 0203 	mvn.w	r2, #3
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4815      	ldr	r0, [pc, #84]	; (8002d2c <WriteChar+0x490>)
 8002cd6:	f003 fd49 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <WriteChar+0x488>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <WriteChar+0x488>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	079b      	lsls	r3, r3, #30
 8002ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002cf6:	2106      	movs	r1, #6
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <WriteChar+0x490>)
 8002cfa:	f003 fd37 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <WriteChar+0x488>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0202 	and.w	r2, r3, #2
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <WriteChar+0x488>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f06f 0203 	mvn.w	r2, #3
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <WriteChar+0x490>)
 8002d1e:	f003 fd25 	bl	800676c <HAL_LCD_Write>
      break;
 8002d22:	e130      	b.n	8002f86 <WriteChar+0x6ea>
 8002d24:	2000b0c0 	.word	0x2000b0c0
 8002d28:	cfff3fff 	.word	0xcfff3fff
 8002d2c:	2000b084 	.word	0x2000b084

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002d30:	4b97      	ldr	r3, [pc, #604]	; (8002f90 <WriteChar+0x6f4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	065b      	lsls	r3, r3, #25
 8002d38:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002d3c:	4b94      	ldr	r3, [pc, #592]	; (8002f90 <WriteChar+0x6f4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002d52:	2100      	movs	r1, #0
 8002d54:	488f      	ldr	r0, [pc, #572]	; (8002f94 <WriteChar+0x6f8>)
 8002d56:	f003 fd09 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002d5a:	4b8d      	ldr	r3, [pc, #564]	; (8002f90 <WriteChar+0x6f4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	f003 0208 	and.w	r2, r3, #8
 8002d64:	4b8a      	ldr	r3, [pc, #552]	; (8002f90 <WriteChar+0x6f4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f06f 020c 	mvn.w	r2, #12
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4885      	ldr	r0, [pc, #532]	; (8002f94 <WriteChar+0x6f8>)
 8002d7e:	f003 fcf5 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002d82:	4b83      	ldr	r3, [pc, #524]	; (8002f90 <WriteChar+0x6f4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	065b      	lsls	r3, r3, #25
 8002d8a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002d8e:	4b80      	ldr	r3, [pc, #512]	; (8002f90 <WriteChar+0x6f4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002da4:	2102      	movs	r1, #2
 8002da6:	487b      	ldr	r0, [pc, #492]	; (8002f94 <WriteChar+0x6f8>)
 8002da8:	f003 fce0 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002dac:	4b78      	ldr	r3, [pc, #480]	; (8002f90 <WriteChar+0x6f4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f003 0208 	and.w	r2, r3, #8
 8002db6:	4b76      	ldr	r3, [pc, #472]	; (8002f90 <WriteChar+0x6f4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	08db      	lsrs	r3, r3, #3
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f06f 020c 	mvn.w	r2, #12
 8002dcc:	2103      	movs	r1, #3
 8002dce:	4871      	ldr	r0, [pc, #452]	; (8002f94 <WriteChar+0x6f8>)
 8002dd0:	f003 fccc 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002dd4:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <WriteChar+0x6f4>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	065b      	lsls	r3, r3, #25
 8002ddc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002de0:	4b6b      	ldr	r3, [pc, #428]	; (8002f90 <WriteChar+0x6f4>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002df6:	2104      	movs	r1, #4
 8002df8:	4866      	ldr	r0, [pc, #408]	; (8002f94 <WriteChar+0x6f8>)
 8002dfa:	f003 fcb7 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002dfe:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <WriteChar+0x6f4>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	f003 0208 	and.w	r2, r3, #8
 8002e08:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <WriteChar+0x6f4>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f06f 020c 	mvn.w	r2, #12
 8002e1e:	2105      	movs	r1, #5
 8002e20:	485c      	ldr	r0, [pc, #368]	; (8002f94 <WriteChar+0x6f8>)
 8002e22:	f003 fca3 	bl	800676c <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <WriteChar+0x6f4>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	065b      	lsls	r3, r3, #25
 8002e2e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002e32:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <WriteChar+0x6f4>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002e48:	2106      	movs	r1, #6
 8002e4a:	4852      	ldr	r0, [pc, #328]	; (8002f94 <WriteChar+0x6f8>)
 8002e4c:	f003 fc8e 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002e50:	4b4f      	ldr	r3, [pc, #316]	; (8002f90 <WriteChar+0x6f4>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f003 0208 	and.w	r2, r3, #8
 8002e5a:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <WriteChar+0x6f4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f06f 020c 	mvn.w	r2, #12
 8002e70:	2107      	movs	r1, #7
 8002e72:	4848      	ldr	r0, [pc, #288]	; (8002f94 <WriteChar+0x6f8>)
 8002e74:	f003 fc7a 	bl	800676c <HAL_LCD_Write>
      break;
 8002e78:	e085      	b.n	8002f86 <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002e7a:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <WriteChar+0x6f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	045b      	lsls	r3, r3, #17
 8002e80:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002e84:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <WriteChar+0x6f4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <WriteChar+0x6f4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <WriteChar+0x6f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	069b      	lsls	r3, r3, #26
 8002ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a39      	ldr	r2, [pc, #228]	; (8002f98 <WriteChar+0x6fc>)
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4837      	ldr	r0, [pc, #220]	; (8002f94 <WriteChar+0x6f8>)
 8002eb8:	f003 fc58 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <WriteChar+0x6f4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	045b      	lsls	r3, r3, #17
 8002ec2:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <WriteChar+0x6f4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <WriteChar+0x6f4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <WriteChar+0x6f4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <WriteChar+0x6fc>)
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4826      	ldr	r0, [pc, #152]	; (8002f94 <WriteChar+0x6f8>)
 8002efa:	f003 fc37 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <WriteChar+0x6f4>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	045b      	lsls	r3, r3, #17
 8002f04:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <WriteChar+0x6f4>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <WriteChar+0x6f4>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f22:	431a      	orrs	r2, r3
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <WriteChar+0x6f4>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	069b      	lsls	r3, r3, #26
 8002f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <WriteChar+0x6fc>)
 8002f38:	2104      	movs	r1, #4
 8002f3a:	4816      	ldr	r0, [pc, #88]	; (8002f94 <WriteChar+0x6f8>)
 8002f3c:	f003 fc16 	bl	800676c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <WriteChar+0x6f4>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	045b      	lsls	r3, r3, #17
 8002f46:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <WriteChar+0x6f4>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <WriteChar+0x6f4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	431a      	orrs	r2, r3
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <WriteChar+0x6f4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <WriteChar+0x6fc>)
 8002f7a:	2106      	movs	r1, #6
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <WriteChar+0x6f8>)
 8002f7e:	f003 fbf5 	bl	800676c <HAL_LCD_Write>
      break;
 8002f82:	e000      	b.n	8002f86 <WriteChar+0x6ea>

    default:
      break;
 8002f84:	bf00      	nop
  }
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000b0c0 	.word	0x2000b0c0
 8002f94:	2000b084 	.word	0x2000b084
 8002f98:	fbfdfcff 	.word	0xfbfdfcff

08002f9c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002fa2:	4b27      	ldr	r3, [pc, #156]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <BSP_QSPI_Init+0xa8>)
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002fa8:	4825      	ldr	r0, [pc, #148]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002faa:	f003 fde5 	bl	8006b78 <HAL_QSPI_DeInit>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e03f      	b.n	8003038 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 8002fb8:	f000 f888 	bl	80030cc <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002fca:	2210      	movs	r2, #16
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd2:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002ff8:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003006:	480e      	ldr	r0, [pc, #56]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8003008:	f003 fd40 	bl	8006a8c <HAL_QSPI_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e010      	b.n	8003038 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8003016:	480a      	ldr	r0, [pc, #40]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8003018:	f000 f8a4 	bl	8003164 <QSPI_ResetMemory>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8003022:	2304      	movs	r3, #4
 8003024:	e008      	b.n	8003038 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <BSP_QSPI_Init+0xa4>)
 8003028:	f000 f8e0 	bl	80031ec <QSPI_DummyCyclesCfg>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 8003032:	2304      	movs	r3, #4
 8003034:	e000      	b.n	8003038 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000b0d0 	.word	0x2000b0d0
 8003044:	a0001000 	.word	0xa0001000

08003048 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b092      	sub	sp, #72	; 0x48
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800305a:	23eb      	movs	r3, #235	; 0xeb
 800305c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800305e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003068:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800306e:	2300      	movs	r3, #0
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8003072:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003078:	230a      	movs	r3, #10
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003084:	2300      	movs	r3, #0
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003088:	2300      	movs	r3, #0
 800308a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4619      	mov	r1, r3
 8003096:	480c      	ldr	r0, [pc, #48]	; (80030c8 <BSP_QSPI_Read+0x80>)
 8003098:	f003 fd92 	bl	8006bc0 <HAL_QSPI_Command>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00b      	b.n	80030be <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4806      	ldr	r0, [pc, #24]	; (80030c8 <BSP_QSPI_Read+0x80>)
 80030ae:	f003 fe7c 	bl	8006daa <HAL_QSPI_Receive>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3748      	adds	r7, #72	; 0x48
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000b0d0 	.word	0x2000b0d0

080030cc <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <QSPI_MspInit+0x90>)
 80030d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d6:	4a21      	ldr	r2, [pc, #132]	; (800315c <QSPI_MspInit+0x90>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6513      	str	r3, [r2, #80]	; 0x50
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <QSPI_MspInit+0x90>)
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <QSPI_MspInit+0x90>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <QSPI_MspInit+0x90>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <QSPI_MspInit+0x90>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <QSPI_MspInit+0x90>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <QSPI_MspInit+0x90>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <QSPI_MspInit+0x90>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <QSPI_MspInit+0x90>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 800311a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800311e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003124:	2301      	movs	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800312c:	230a      	movs	r3, #10
 800312e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	4619      	mov	r1, r3
 8003136:	480a      	ldr	r0, [pc, #40]	; (8003160 <QSPI_MspInit+0x94>)
 8003138:	f002 f952 	bl	80053e0 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800313c:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8003140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4619      	mov	r1, r3
 800314c:	4804      	ldr	r0, [pc, #16]	; (8003160 <QSPI_MspInit+0x94>)
 800314e:	f002 f947 	bl	80053e0 <HAL_GPIO_Init>
}
 8003152:	bf00      	nop
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	48001000 	.word	0x48001000

08003164 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b090      	sub	sp, #64	; 0x40
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003170:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003172:	2366      	movs	r3, #102	; 0x66
 8003174:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800318a:	2300      	movs	r3, #0
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800318e:	2300      	movs	r3, #0
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4619      	mov	r1, r3
 800319c:	4812      	ldr	r0, [pc, #72]	; (80031e8 <QSPI_ResetMemory+0x84>)
 800319e:	f003 fd0f 	bl	8006bc0 <HAL_QSPI_Command>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e019      	b.n	80031e0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80031ac:	2399      	movs	r3, #153	; 0x99
 80031ae:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4619      	mov	r1, r3
 80031ba:	480b      	ldr	r0, [pc, #44]	; (80031e8 <QSPI_ResetMemory+0x84>)
 80031bc:	f003 fd00 	bl	8006bc0 <HAL_QSPI_Command>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00a      	b.n	80031e0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80031ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80031ce:	4806      	ldr	r0, [pc, #24]	; (80031e8 <QSPI_ResetMemory+0x84>)
 80031d0:	f000 f8d6 	bl	8003380 <QSPI_AutoPollingMemReady>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3740      	adds	r7, #64	; 0x40
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2000b0d0 	.word	0x2000b0d0

080031ec <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b094      	sub	sp, #80	; 0x50
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80031f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80031fa:	2385      	movs	r3, #133	; 0x85
 80031fc:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8003210:	2301      	movs	r3, #1
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003218:	2300      	movs	r3, #0
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800321c:	2300      	movs	r3, #0
 800321e:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4619      	mov	r1, r3
 800322a:	482e      	ldr	r0, [pc, #184]	; (80032e4 <QSPI_DummyCyclesCfg+0xf8>)
 800322c:	f003 fcc8 	bl	8006bc0 <HAL_QSPI_Command>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e04f      	b.n	80032da <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800323a:	f107 030b 	add.w	r3, r7, #11
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4619      	mov	r1, r3
 8003244:	4827      	ldr	r0, [pc, #156]	; (80032e4 <QSPI_DummyCyclesCfg+0xf8>)
 8003246:	f003 fdb0 	bl	8006daa <HAL_QSPI_Receive>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e042      	b.n	80032da <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003254:	4823      	ldr	r0, [pc, #140]	; (80032e4 <QSPI_DummyCyclesCfg+0xf8>)
 8003256:	f000 f847 	bl	80032e8 <QSPI_WriteEnable>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e03a      	b.n	80032da <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003264:	2381      	movs	r3, #129	; 0x81
 8003266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	b25b      	sxtb	r3, r3
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	b25a      	sxtb	r2, r3
 8003272:	23f0      	movs	r3, #240	; 0xf0
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800327e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8003282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e003      	b.n	8003294 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 800328c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	230a      	movs	r3, #10
 8003298:	408b      	lsls	r3, r1
 800329a:	b25b      	sxtb	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4619      	mov	r1, r3
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <QSPI_DummyCyclesCfg+0xf8>)
 80032b0:	f003 fc86 	bl	8006bc0 <HAL_QSPI_Command>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00d      	b.n	80032da <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032be:	f107 030b 	add.w	r3, r7, #11
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4619      	mov	r1, r3
 80032c8:	4806      	ldr	r0, [pc, #24]	; (80032e4 <QSPI_DummyCyclesCfg+0xf8>)
 80032ca:	f003 fcd7 	bl	8006c7c <HAL_QSPI_Transmit>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3750      	adds	r7, #80	; 0x50
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000b0d0 	.word	0x2000b0d0

080032e8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b096      	sub	sp, #88	; 0x58
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80032f6:	2306      	movs	r3, #6
 80032f8:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800330e:	2300      	movs	r3, #0
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003312:	2300      	movs	r3, #0
 8003314:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003316:	f107 0320 	add.w	r3, r7, #32
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4619      	mov	r1, r3
 8003320:	4816      	ldr	r0, [pc, #88]	; (800337c <QSPI_WriteEnable+0x94>)
 8003322:	f003 fc4d 	bl	8006bc0 <HAL_QSPI_Command>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e020      	b.n	8003372 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8003330:	2302      	movs	r3, #2
 8003332:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8003334:	2302      	movs	r3, #2
 8003336:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003340:	2310      	movs	r3, #16
 8003342:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003348:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800334a:	2305      	movs	r3, #5
 800334c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800334e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003352:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003354:	f107 0208 	add.w	r2, r7, #8
 8003358:	f107 0120 	add.w	r1, r7, #32
 800335c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <QSPI_WriteEnable+0x94>)
 8003362:	f003 fdc4 	bl	8006eee <HAL_QSPI_AutoPolling>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3758      	adds	r7, #88	; 0x58
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000b0d0 	.word	0x2000b0d0

08003380 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b096      	sub	sp, #88	; 0x58
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003390:	2305      	movs	r3, #5
 8003392:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003398:	2300      	movs	r3, #0
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800339c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033aa:	2300      	movs	r3, #0
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033ae:	2300      	movs	r3, #0
 80033b0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80033c2:	2310      	movs	r3, #16
 80033c4:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80033c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ca:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80033cc:	f107 0208 	add.w	r2, r7, #8
 80033d0:	f107 0120 	add.w	r1, r7, #32
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4806      	ldr	r0, [pc, #24]	; (80033f0 <QSPI_AutoPollingMemReady+0x70>)
 80033d8:	f003 fd89 	bl	8006eee <HAL_QSPI_AutoPolling>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3758      	adds	r7, #88	; 0x58
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000b0d0 	.word	0x2000b0d0

080033f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_Init+0x3c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_Init+0x3c>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340a:	2003      	movs	r0, #3
 800340c:	f001 fd22 	bl	8004e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003410:	2000      	movs	r0, #0
 8003412:	f000 f80f 	bl	8003434 <HAL_InitTick>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	71fb      	strb	r3, [r7, #7]
 8003420:	e001      	b.n	8003426 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003422:	f7fd fc47 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003426:	79fb      	ldrb	r3, [r7, #7]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000

08003434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003440:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <HAL_InitTick+0x6c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_InitTick+0x70>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_InitTick+0x6c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	fbb3 f3f1 	udiv	r3, r3, r1
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fd3b 	bl	8004eda <HAL_SYSTICK_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d809      	bhi.n	8003484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003470:	2200      	movs	r2, #0
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f001 fcf7 	bl	8004e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_InitTick+0x74>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e007      	b.n	8003494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e004      	b.n	8003494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e001      	b.n	8003494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000044 	.word	0x20000044
 80034a4:	20000004 	.word	0x20000004
 80034a8:	20000040 	.word	0x20000040

080034ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_IncTick+0x20>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_IncTick+0x24>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_IncTick+0x24>)
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000044 	.word	0x20000044
 80034d0:	2000b114 	.word	0x2000b114

080034d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return uwTick;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_GetTick+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000b114 	.word	0x2000b114

080034ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff ffee 	bl	80034d4 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d005      	beq.n	8003512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_Delay+0x44>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003512:	bf00      	nop
 8003514:	f7ff ffde 	bl	80034d4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d8f7      	bhi.n	8003514 <HAL_Delay+0x28>
  {
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000044 	.word	0x20000044

08003534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3360      	adds	r3, #96	; 0x60
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <LL_ADC_SetOffset+0x44>)
 80035be:	4013      	ands	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	03fff000 	.word	0x03fff000

080035e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3360      	adds	r3, #96	; 0x60
 80035f2:	461a      	mov	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3360      	adds	r3, #96	; 0x60
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	431a      	orrs	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3330      	adds	r3, #48	; 0x30
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	4413      	add	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	211f      	movs	r1, #31
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 011f 	and.w	r1, r3, #31
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3314      	adds	r3, #20
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0e5b      	lsrs	r3, r3, #25
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	4413      	add	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0d1b      	lsrs	r3, r3, #20
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2107      	movs	r1, #7
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	401a      	ands	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0d1b      	lsrs	r3, r3, #20
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	43db      	mvns	r3, r3
 800375a:	401a      	ands	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0318 	and.w	r3, r3, #24
 8003762:	4908      	ldr	r1, [pc, #32]	; (8003784 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003764:	40d9      	lsrs	r1, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	400b      	ands	r3, r1
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	0007ffff 	.word	0x0007ffff

08003788 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 031f 	and.w	r3, r3, #31
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6093      	str	r3, [r2, #8]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f8:	d101      	bne.n	80037fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800381c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003848:	d101      	bne.n	800384e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800386c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <LL_ADC_IsEnabled+0x18>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <LL_ADC_IsEnabled+0x1a>
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d101      	bne.n	80038ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d101      	bne.n	8003910 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e136      	b.n	8003ba8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fd f9d7 	bl	8000cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff3f 	bl	80037e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff25 	bl	80037c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff5a 	bl	8003834 <LL_ADC_IsInternalRegulatorEnabled>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d115      	bne.n	80039b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff3e 	bl	800380c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003990:	4b87      	ldr	r3, [pc, #540]	; (8003bb0 <HAL_ADC_Init+0x290>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_ADC_Init+0x294>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a4:	e002      	b.n	80039ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f9      	bne.n	80039a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff3c 	bl	8003834 <LL_ADC_IsInternalRegulatorEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff75 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 80039e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80cf 	bne.w	8003b96 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80cb 	bne.w	8003b96 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a08:	f043 0202 	orr.w	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff35 	bl	8003884 <LL_ADC_IsEnabled>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d115      	bne.n	8003a4c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a20:	4865      	ldr	r0, [pc, #404]	; (8003bb8 <HAL_ADC_Init+0x298>)
 8003a22:	f7ff ff2f 	bl	8003884 <LL_ADC_IsEnabled>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4864      	ldr	r0, [pc, #400]	; (8003bbc <HAL_ADC_Init+0x29c>)
 8003a2a:	f7ff ff2b 	bl	8003884 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	431c      	orrs	r4, r3
 8003a32:	4863      	ldr	r0, [pc, #396]	; (8003bc0 <HAL_ADC_Init+0x2a0>)
 8003a34:	f7ff ff26 	bl	8003884 <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4323      	orrs	r3, r4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	485f      	ldr	r0, [pc, #380]	; (8003bc4 <HAL_ADC_Init+0x2a4>)
 8003a48:	f7ff fd74 	bl	8003534 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7e5b      	ldrb	r3, [r3, #25]
 8003a50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	045b      	lsls	r3, r3, #17
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_ADC_Init+0x2a8>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff08 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 8003ac2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff15 	bl	80038f8 <LL_ADC_INJ_IsConversionOngoing>
 8003ace:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d13a      	bne.n	8003b52 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ae0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ae8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af8:	f023 0302 	bic.w	r3, r3, #2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	430b      	orrs	r3, r1
 8003b04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d118      	bne.n	8003b42 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b32:	430a      	orrs	r2, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	e007      	b.n	8003b52 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10c      	bne.n	8003b74 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f023 010f 	bic.w	r1, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
 8003b72:	e007      	b.n	8003b84 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020f 	bic.w	r2, r2, #15
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
 8003b94:	e007      	b.n	8003ba6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f043 0210 	orr.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3724      	adds	r7, #36	; 0x24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	053e2d63 	.word	0x053e2d63
 8003bb8:	50040000 	.word	0x50040000
 8003bbc:	50040100 	.word	0x50040100
 8003bc0:	50040200 	.word	0x50040200
 8003bc4:	50040300 	.word	0x50040300
 8003bc8:	fff0c007 	.word	0xfff0c007

08003bcc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd4:	4857      	ldr	r0, [pc, #348]	; (8003d34 <HAL_ADC_Start+0x168>)
 8003bd6:	f7ff fdd7 	bl	8003788 <LL_ADC_GetMultimode>
 8003bda:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe76 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 809c 	bne.w	8003d26 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_Start+0x30>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e097      	b.n	8003d2c <HAL_ADC_Start+0x160>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fec7 	bl	8004998 <ADC_Enable>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8083 	bne.w	8003d1c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a42      	ldr	r2, [pc, #264]	; (8003d38 <HAL_ADC_Start+0x16c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d002      	beq.n	8003c3a <HAL_ADC_Start+0x6e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	e000      	b.n	8003c3c <HAL_ADC_Start+0x70>
 8003c3a:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <HAL_ADC_Start+0x170>)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d002      	beq.n	8003c4a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d106      	bne.n	8003c72 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	f023 0206 	bic.w	r2, r3, #6
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c70:	e002      	b.n	8003c78 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	221c      	movs	r2, #28
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <HAL_ADC_Start+0x16c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d002      	beq.n	8003c98 <HAL_ADC_Start+0xcc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	e000      	b.n	8003c9a <HAL_ADC_Start+0xce>
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_ADC_Start+0x170>)
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d008      	beq.n	8003cb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d002      	beq.n	8003cb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d114      	bne.n	8003cde <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fde7 	bl	80038aa <LL_ADC_REG_StartConversion>
 8003cdc:	e025      	b.n	8003d2a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_ADC_Start+0x16c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d002      	beq.n	8003cfa <HAL_ADC_Start+0x12e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	e000      	b.n	8003cfc <HAL_ADC_Start+0x130>
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_ADC_Start+0x170>)
 8003cfc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00f      	beq.n	8003d2a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
 8003d1a:	e006      	b.n	8003d2a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003d24:	e001      	b.n	8003d2a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	50040300 	.word	0x50040300
 8003d38:	50040100 	.word	0x50040100
 8003d3c:	50040000 	.word	0x50040000

08003d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d78:	4882      	ldr	r0, [pc, #520]	; (8003f84 <HAL_ADC_IRQHandler+0x228>)
 8003d7a:	f7ff fd05 	bl	8003788 <LL_ADC_GetMultimode>
 8003d7e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_ADC_IRQHandler+0x5e>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fea3 	bl	8004af8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2202      	movs	r2, #2
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_ADC_IRQHandler+0x72>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8083 	beq.w	8003ee0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d07d      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fc20 	bl	8003646 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d062      	beq.n	8003ed2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a5d      	ldr	r2, [pc, #372]	; (8003f88 <HAL_ADC_IRQHandler+0x22c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d002      	beq.n	8003e1c <HAL_ADC_IRQHandler+0xc0>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <HAL_ADC_IRQHandler+0xc2>
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_ADC_IRQHandler+0x230>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d008      	beq.n	8003e38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d002      	beq.n	8003e38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d104      	bne.n	8003e42 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	e00c      	b.n	8003e5c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a50      	ldr	r2, [pc, #320]	; (8003f88 <HAL_ADC_IRQHandler+0x22c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d002      	beq.n	8003e52 <HAL_ADC_IRQHandler+0xf6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	e000      	b.n	8003e54 <HAL_ADC_IRQHandler+0xf8>
 8003e52:	4b4e      	ldr	r3, [pc, #312]	; (8003f8c <HAL_ADC_IRQHandler+0x230>)
 8003e54:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d135      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d12e      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fd2a 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11a      	bne.n	8003eba <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 020c 	bic.w	r2, r2, #12
 8003e92:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d112      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb8:	e00b      	b.n	8003ed2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fb08 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	220c      	movs	r2, #12
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x198>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809f 	beq.w	800403e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8099 	beq.w	800403e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fbcb 	bl	80036c4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f2e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fb86 	bl	8003646 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f3a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_ADC_IRQHandler+0x22c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d002      	beq.n	8003f4c <HAL_ADC_IRQHandler+0x1f0>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_IRQHandler+0x1f2>
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_ADC_IRQHandler+0x230>)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d008      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d002      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d104      	bne.n	8003f72 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	e013      	b.n	8003f9a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_ADC_IRQHandler+0x22c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_ADC_IRQHandler+0x234>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	e007      	b.n	8003f92 <HAL_ADC_IRQHandler+0x236>
 8003f82:	bf00      	nop
 8003f84:	50040300 	.word	0x50040300
 8003f88:	50040100 	.word	0x50040100
 8003f8c:	50040000 	.word	0x50040000
 8003f90:	4b7d      	ldr	r3, [pc, #500]	; (8004188 <HAL_ADC_IRQHandler+0x42c>)
 8003f92:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d047      	beq.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_ADC_IRQHandler+0x25e>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d03f      	beq.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d13a      	bne.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d133      	bne.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d12e      	bne.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fc8e 	bl	80038f8 <LL_ADC_INJ_IsConversionOngoing>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11a      	bne.n	8004018 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d112      	bne.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
 8004016:	e00b      	b.n	8004030 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fd39 	bl	8004aa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2260      	movs	r2, #96	; 0x60
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_ADC_IRQHandler+0x310>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f896 	bl	8004190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <HAL_ADC_IRQHandler+0x340>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fd1f 	bl	8004ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <HAL_ADC_IRQHandler+0x370>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fd11 	bl	8004ae4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d036      	beq.n	8004144 <HAL_ADC_IRQHandler+0x3e8>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d031      	beq.n	8004144 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	e014      	b.n	8004118 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040f4:	4825      	ldr	r0, [pc, #148]	; (800418c <HAL_ADC_IRQHandler+0x430>)
 80040f6:	f7ff fb55 	bl	80037a4 <LL_ADC_GetMultiDMATransfer>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004100:	2301      	movs	r3, #1
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	e008      	b.n	8004118 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10e      	bne.n	800413c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	f043 0202 	orr.w	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f834 	bl	80041a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d018      	beq.n	8004180 <HAL_ADC_IRQHandler+0x424>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f043 0208 	orr.w	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fc9e 	bl	8004abc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	50040000 	.word	0x50040000
 800418c:	50040300 	.word	0x50040300

08004190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b0b6      	sub	sp, #216	; 0xd8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x22>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e3c7      	b.n	800496a <HAL_ADC_ConfigChannel+0x7b2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fb73 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 83a8 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	d824      	bhi.n	8004246 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3b02      	subs	r3, #2
 8004202:	2b03      	cmp	r3, #3
 8004204:	d81b      	bhi.n	800423e <HAL_ADC_ConfigChannel+0x86>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_ADC_ConfigChannel+0x54>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	0800421d 	.word	0x0800421d
 8004210:	08004225 	.word	0x08004225
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	220c      	movs	r2, #12
 8004220:	605a      	str	r2, [r3, #4]
          break;
 8004222:	e011      	b.n	8004248 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2212      	movs	r2, #18
 8004228:	605a      	str	r2, [r3, #4]
          break;
 800422a:	e00d      	b.n	8004248 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2218      	movs	r2, #24
 8004230:	605a      	str	r2, [r3, #4]
          break;
 8004232:	e009      	b.n	8004248 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423a:	605a      	str	r2, [r3, #4]
          break;
 800423c:	e004      	b.n	8004248 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2206      	movs	r2, #6
 8004242:	605a      	str	r2, [r3, #4]
          break;
 8004244:	e000      	b.n	8004248 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004246:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	f7ff fa09 	bl	800366c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fb37 	bl	80038d2 <LL_ADC_REG_IsConversionOngoing>
 8004264:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fb43 	bl	80038f8 <LL_ADC_INJ_IsConversionOngoing>
 8004272:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004276:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 81a6 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 81a1 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	461a      	mov	r2, r3
 8004298:	f7ff fa27 	bl	80036ea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	08db      	lsrs	r3, r3, #3
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d00a      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6919      	ldr	r1, [r3, #16]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ce:	f7ff f965 	bl	800359c <LL_ADC_SetOffset>
 80042d2:	e17b      	b.n	80045cc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f982 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x148>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff f977 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	f003 021f 	and.w	r2, r3, #31
 80042fe:	e01e      	b.n	800433e <HAL_ADC_ConfigChannel+0x186>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f96c 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800431e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	e004      	b.n	800433c <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x19e>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0e9b      	lsrs	r3, r3, #26
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	e018      	b.n	8004388 <HAL_ADC_ConfigChannel+0x1d0>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800436a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800437a:	2320      	movs	r3, #32
 800437c:	e004      	b.n	8004388 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800437e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2200      	movs	r2, #0
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f93b 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff f91f 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x20e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2101      	movs	r1, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff f914 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80043bc:	4603      	mov	r3, r0
 80043be:	0e9b      	lsrs	r3, r3, #26
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	e01e      	b.n	8004404 <HAL_ADC_ConfigChannel+0x24c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f909 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80043e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e004      	b.n	8004402 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80043f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_ADC_ConfigChannel+0x264>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0e9b      	lsrs	r3, r3, #26
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	e018      	b.n	800444e <HAL_ADC_ConfigChannel+0x296>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004430:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e004      	b.n	800444e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800444e:	429a      	cmp	r2, r3
 8004450:	d106      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f8d8 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff f8bc 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800446c:	4603      	mov	r3, r0
 800446e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_ADC_ConfigChannel+0x2d4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2102      	movs	r1, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff f8b1 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004482:	4603      	mov	r3, r0
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	f003 021f 	and.w	r2, r3, #31
 800448a:	e01e      	b.n	80044ca <HAL_ADC_ConfigChannel+0x312>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f8a6 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004498:	4603      	mov	r3, r0
 800449a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80044ba:	2320      	movs	r3, #32
 80044bc:	e004      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80044be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x32a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	0e9b      	lsrs	r3, r3, #26
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	e016      	b.n	8004510 <HAL_ADC_ConfigChannel+0x358>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004502:	2320      	movs	r3, #32
 8004504:	e004      	b.n	8004510 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004510:	429a      	cmp	r2, r3
 8004512:	d106      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	2102      	movs	r1, #2
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff f877 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2103      	movs	r1, #3
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f85b 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <HAL_ADC_ConfigChannel+0x396>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2103      	movs	r1, #3
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff f850 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004544:	4603      	mov	r3, r0
 8004546:	0e9b      	lsrs	r3, r3, #26
 8004548:	f003 021f 	and.w	r2, r3, #31
 800454c:	e017      	b.n	800457e <HAL_ADC_ConfigChannel+0x3c6>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2103      	movs	r1, #3
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f845 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004568:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800456a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e003      	b.n	800457c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x3de>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	e011      	b.n	80045ba <HAL_ADC_ConfigChannel+0x402>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80045a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e003      	b.n	80045ba <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2103      	movs	r1, #3
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f822 	bl	8003610 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f957 	bl	8003884 <LL_ADC_IsEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 813f 	bne.w	800485c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f7ff f8a8 	bl	8003740 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a8e      	ldr	r2, [pc, #568]	; (8004830 <HAL_ADC_ConfigChannel+0x678>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f040 8130 	bne.w	800485c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x46c>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	3301      	adds	r3, #1
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2b09      	cmp	r3, #9
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e019      	b.n	8004658 <HAL_ADC_ConfigChannel+0x4a0>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004634:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	e003      	b.n	8004648 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3301      	adds	r3, #1
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2b09      	cmp	r3, #9
 8004650:	bf94      	ite	ls
 8004652:	2301      	movls	r3, #1
 8004654:	2300      	movhi	r3, #0
 8004656:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004658:	2b00      	cmp	r3, #0
 800465a:	d079      	beq.n	8004750 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x4c0>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	3301      	adds	r3, #1
 8004670:	069b      	lsls	r3, r3, #26
 8004672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004676:	e015      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x4ec>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800468a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	e003      	b.n	800469c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3301      	adds	r3, #1
 800469e:	069b      	lsls	r3, r3, #26
 80046a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x50c>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	3301      	adds	r3, #1
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	e017      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x53c>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80046dc:	2320      	movs	r3, #32
 80046de:	e003      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80046e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <HAL_ADC_ConfigChannel+0x562>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0e9b      	lsrs	r3, r3, #26
 800470a:	3301      	adds	r3, #1
 800470c:	f003 021f 	and.w	r2, r3, #31
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	051b      	lsls	r3, r3, #20
 8004718:	e018      	b.n	800474c <HAL_ADC_ConfigChannel+0x594>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004732:	2320      	movs	r3, #32
 8004734:	e003      	b.n	800473e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	fab3 f383 	clz	r3, r3
 800473c:	b2db      	uxtb	r3, r3
 800473e:	3301      	adds	r3, #1
 8004740:	f003 021f 	and.w	r2, r3, #31
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800474c:	430b      	orrs	r3, r1
 800474e:	e080      	b.n	8004852 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_ADC_ConfigChannel+0x5b4>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0e9b      	lsrs	r3, r3, #26
 8004762:	3301      	adds	r3, #1
 8004764:	069b      	lsls	r3, r3, #26
 8004766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800476a:	e015      	b.n	8004798 <HAL_ADC_ConfigChannel+0x5e0>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004784:	2320      	movs	r3, #32
 8004786:	e003      	b.n	8004790 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	3301      	adds	r3, #1
 8004792:	069b      	lsls	r3, r3, #26
 8004794:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x600>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	0e9b      	lsrs	r3, r3, #26
 80047aa:	3301      	adds	r3, #1
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	e017      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x630>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	61fb      	str	r3, [r7, #28]
  return result;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e003      	b.n	80047dc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2101      	movs	r1, #1
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x65c>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	3301      	adds	r3, #1
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	3b1e      	subs	r3, #30
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004812:	e01d      	b.n	8004850 <HAL_ADC_ConfigChannel+0x698>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	613b      	str	r3, [r7, #16]
  return result;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800482c:	2320      	movs	r3, #32
 800482e:	e005      	b.n	800483c <HAL_ADC_ConfigChannel+0x684>
 8004830:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3301      	adds	r3, #1
 800483e:	f003 021f 	and.w	r2, r3, #31
 8004842:	4613      	mov	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	3b1e      	subs	r3, #30
 800484a:	051b      	lsls	r3, r3, #20
 800484c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004850:	430b      	orrs	r3, r1
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	4619      	mov	r1, r3
 8004858:	f7fe ff47 	bl	80036ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b44      	ldr	r3, [pc, #272]	; (8004974 <HAL_ADC_ConfigChannel+0x7bc>)
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d07a      	beq.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004868:	4843      	ldr	r0, [pc, #268]	; (8004978 <HAL_ADC_ConfigChannel+0x7c0>)
 800486a:	f7fe fe89 	bl	8003580 <LL_ADC_GetCommonPathInternalCh>
 800486e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a41      	ldr	r2, [pc, #260]	; (800497c <HAL_ADC_ConfigChannel+0x7c4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d12c      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800487c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d126      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <HAL_ADC_ConfigChannel+0x7c8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_ADC_ConfigChannel+0x6e4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_ADC_ConfigChannel+0x7cc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d15d      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800489c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048a4:	4619      	mov	r1, r3
 80048a6:	4834      	ldr	r0, [pc, #208]	; (8004978 <HAL_ADC_ConfigChannel+0x7c0>)
 80048a8:	f7fe fe57 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_ADC_ConfigChannel+0x7d0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	4a36      	ldr	r2, [pc, #216]	; (800498c <HAL_ADC_ConfigChannel+0x7d4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048c6:	e002      	b.n	80048ce <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f9      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048d4:	e040      	b.n	8004958 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <HAL_ADC_ConfigChannel+0x7d8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d118      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x75a>
 80048e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d112      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <HAL_ADC_ConfigChannel+0x7c8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x748>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_ADC_ConfigChannel+0x7cc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d12d      	bne.n	800495c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004908:	4619      	mov	r1, r3
 800490a:	481b      	ldr	r0, [pc, #108]	; (8004978 <HAL_ADC_ConfigChannel+0x7c0>)
 800490c:	f7fe fe25 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004910:	e024      	b.n	800495c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_ADC_ConfigChannel+0x7dc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d120      	bne.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800491c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11a      	bne.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_ADC_ConfigChannel+0x7c8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d115      	bne.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800493a:	4619      	mov	r1, r3
 800493c:	480e      	ldr	r0, [pc, #56]	; (8004978 <HAL_ADC_ConfigChannel+0x7c0>)
 800493e:	f7fe fe0c 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
 8004942:	e00c      	b.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004956:	e002      	b.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800495c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004966:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800496a:	4618      	mov	r0, r3
 800496c:	37d8      	adds	r7, #216	; 0xd8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	80080000 	.word	0x80080000
 8004978:	50040300 	.word	0x50040300
 800497c:	c7520000 	.word	0xc7520000
 8004980:	50040000 	.word	0x50040000
 8004984:	50040200 	.word	0x50040200
 8004988:	20000004 	.word	0x20000004
 800498c:	053e2d63 	.word	0x053e2d63
 8004990:	cb840000 	.word	0xcb840000
 8004994:	80000001 	.word	0x80000001

08004998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ff6d 	bl	8003884 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d14d      	bne.n	8004a4c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <ADC_Enable+0xc0>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f043 0210 	orr.w	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e039      	b.n	8004a4e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe ff3c 	bl	800385c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049e4:	f7fe fd76 	bl	80034d4 <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ea:	e028      	b.n	8004a3e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe ff47 	bl	8003884 <LL_ADC_IsEnabled>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe ff2b 	bl	800385c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a06:	f7fe fd65 	bl	80034d4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d914      	bls.n	8004a3e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d00d      	beq.n	8004a3e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f043 0210 	orr.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e007      	b.n	8004a4e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d1cf      	bne.n	80049ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	8000003f 	.word	0x8000003f

08004a5c <LL_ADC_IsEnabled>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <LL_ADC_IsEnabled+0x18>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <LL_ADC_IsEnabled+0x1a>
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d101      	bne.n	8004a9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b09f      	sub	sp, #124	; 0x7c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e093      	b.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b32:	2300      	movs	r3, #0
 8004b34:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b36:	2300      	movs	r3, #0
 8004b38:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a47      	ldr	r2, [pc, #284]	; (8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d102      	bne.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b44:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	e001      	b.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e072      	b.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff87 	bl	8004a82 <LL_ADC_REG_IsConversionOngoing>
 8004b74:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff81 	bl	8004a82 <LL_ADC_REG_IsConversionOngoing>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d154      	bne.n	8004c30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d151      	bne.n	8004c30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b8c:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004b8e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02c      	beq.n	8004bf2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004baa:	035b      	lsls	r3, r3, #13
 8004bac:	430b      	orrs	r3, r1
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb4:	4829      	ldr	r0, [pc, #164]	; (8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004bb6:	f7ff ff51 	bl	8004a5c <LL_ADC_IsEnabled>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4828      	ldr	r0, [pc, #160]	; (8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004bbe:	f7ff ff4d 	bl	8004a5c <LL_ADC_IsEnabled>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	431c      	orrs	r4, r3
 8004bc6:	4828      	ldr	r0, [pc, #160]	; (8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004bc8:	f7ff ff48 	bl	8004a5c <LL_ADC_IsEnabled>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4323      	orrs	r3, r4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d137      	bne.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bdc:	f023 030f 	bic.w	r3, r3, #15
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	6811      	ldr	r1, [r2, #0]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	6892      	ldr	r2, [r2, #8]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	431a      	orrs	r2, r3
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf0:	e028      	b.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bfe:	4817      	ldr	r0, [pc, #92]	; (8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004c00:	f7ff ff2c 	bl	8004a5c <LL_ADC_IsEnabled>
 8004c04:	4604      	mov	r4, r0
 8004c06:	4816      	ldr	r0, [pc, #88]	; (8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004c08:	f7ff ff28 	bl	8004a5c <LL_ADC_IsEnabled>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	431c      	orrs	r4, r3
 8004c10:	4815      	ldr	r0, [pc, #84]	; (8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004c12:	f7ff ff23 	bl	8004a5c <LL_ADC_IsEnabled>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4323      	orrs	r3, r4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d112      	bne.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c2e:	e009      	b.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004c42:	e000      	b.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	377c      	adds	r7, #124	; 0x7c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	50040000 	.word	0x50040000
 8004c60:	50040100 	.word	0x50040100
 8004c64:	50040300 	.word	0x50040300
 8004c68:	50040200 	.word	0x50040200

08004c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c9e:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	60d3      	str	r3, [r2, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <__NVIC_GetPriorityGrouping+0x18>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 0307 	and.w	r3, r3, #7
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	db0b      	blt.n	8004cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	f003 021f 	and.w	r2, r3, #31
 8004ce8:	4907      	ldr	r1, [pc, #28]	; (8004d08 <__NVIC_EnableIRQ+0x38>)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	e000e100 	.word	0xe000e100

08004d0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	db12      	blt.n	8004d44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	490a      	ldr	r1, [pc, #40]	; (8004d50 <__NVIC_DisableIRQ+0x44>)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d32:	3320      	adds	r3, #32
 8004d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d38:	f3bf 8f4f 	dsb	sy
}
 8004d3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d3e:	f3bf 8f6f 	isb	sy
}
 8004d42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000e100 	.word	0xe000e100

08004d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db0a      	blt.n	8004d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	490c      	ldr	r1, [pc, #48]	; (8004da0 <__NVIC_SetPriority+0x4c>)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	440b      	add	r3, r1
 8004d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d7c:	e00a      	b.n	8004d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4908      	ldr	r1, [pc, #32]	; (8004da4 <__NVIC_SetPriority+0x50>)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	0112      	lsls	r2, r2, #4
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	440b      	add	r3, r1
 8004d92:	761a      	strb	r2, [r3, #24]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000e100 	.word	0xe000e100
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f1c3 0307 	rsb	r3, r3, #7
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	bf28      	it	cs
 8004dc6:	2304      	movcs	r3, #4
 8004dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d902      	bls.n	8004dd8 <NVIC_EncodePriority+0x30>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3b03      	subs	r3, #3
 8004dd6:	e000      	b.n	8004dda <NVIC_EncodePriority+0x32>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	401a      	ands	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004df0:	f04f 31ff 	mov.w	r1, #4294967295
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	43d9      	mvns	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e00:	4313      	orrs	r3, r2
         );
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3724      	adds	r7, #36	; 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e20:	d301      	bcc.n	8004e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e22:	2301      	movs	r3, #1
 8004e24:	e00f      	b.n	8004e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <SysTick_Config+0x40>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e2e:	210f      	movs	r1, #15
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	f7ff ff8e 	bl	8004d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <SysTick_Config+0x40>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <SysTick_Config+0x40>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000e010 	.word	0xe000e010

08004e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff05 	bl	8004c6c <__NVIC_SetPriorityGrouping>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e7c:	f7ff ff1a 	bl	8004cb4 <__NVIC_GetPriorityGrouping>
 8004e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff8e 	bl	8004da8 <NVIC_EncodePriority>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff5d 	bl	8004d54 <__NVIC_SetPriority>
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff0d 	bl	8004cd0 <__NVIC_EnableIRQ>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff ff1d 	bl	8004d0c <__NVIC_DisableIRQ>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff94 	bl	8004e10 <SysTick_Config>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e098      	b.n	8005038 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4b4d      	ldr	r3, [pc, #308]	; (8005044 <HAL_DMA_Init+0x150>)
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d80f      	bhi.n	8004f32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <HAL_DMA_Init+0x154>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	4a4b      	ldr	r2, [pc, #300]	; (800504c <HAL_DMA_Init+0x158>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	009a      	lsls	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a48      	ldr	r2, [pc, #288]	; (8005050 <HAL_DMA_Init+0x15c>)
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f30:	e00e      	b.n	8004f50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_DMA_Init+0x160>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	4a43      	ldr	r2, [pc, #268]	; (800504c <HAL_DMA_Init+0x158>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	009a      	lsls	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	; (8005058 <HAL_DMA_Init+0x164>)
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004faa:	d039      	beq.n	8005020 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <HAL_DMA_Init+0x15c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d11a      	bne.n	8004fec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fb6:	4b29      	ldr	r3, [pc, #164]	; (800505c <HAL_DMA_Init+0x168>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f003 031c 	and.w	r3, r3, #28
 8004fc2:	210f      	movs	r1, #15
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	4924      	ldr	r1, [pc, #144]	; (800505c <HAL_DMA_Init+0x168>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fd0:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_DMA_Init+0x168>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	f003 031c 	and.w	r3, r3, #28
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	491d      	ldr	r1, [pc, #116]	; (800505c <HAL_DMA_Init+0x168>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
 8004fea:	e019      	b.n	8005020 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_DMA_Init+0x16c>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	f003 031c 	and.w	r3, r3, #28
 8004ff8:	210f      	movs	r1, #15
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	4917      	ldr	r1, [pc, #92]	; (8005060 <HAL_DMA_Init+0x16c>)
 8005002:	4013      	ands	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_DMA_Init+0x16c>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f003 031c 	and.w	r3, r3, #28
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	4911      	ldr	r1, [pc, #68]	; (8005060 <HAL_DMA_Init+0x16c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40020407 	.word	0x40020407
 8005048:	bffdfff8 	.word	0xbffdfff8
 800504c:	cccccccd 	.word	0xcccccccd
 8005050:	40020000 	.word	0x40020000
 8005054:	bffdfbf8 	.word	0xbffdfbf8
 8005058:	40020400 	.word	0x40020400
 800505c:	400200a8 	.word	0x400200a8
 8005060:	400204a8 	.word	0x400204a8

08005064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_DMA_Start_IT+0x20>
 8005080:	2302      	movs	r3, #2
 8005082:	e04b      	b.n	800511c <HAL_DMA_Start_IT+0xb8>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d13a      	bne.n	800510e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f95f 	bl	8005380 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 020e 	orr.w	r2, r2, #14
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e00f      	b.n	80050fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0204 	bic.w	r2, r2, #4
 80050ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 020a 	orr.w	r2, r2, #10
 80050fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e005      	b.n	800511a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005116:	2302      	movs	r3, #2
 8005118:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d008      	beq.n	800514e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2204      	movs	r2, #4
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e022      	b.n	8005194 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 020e 	bic.w	r2, r2, #14
 800515c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f003 021c 	and.w	r2, r3, #28
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d005      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2204      	movs	r2, #4
 80051bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e029      	b.n	8005218 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 020e 	bic.w	r2, r2, #14
 80051d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	f003 021c 	and.w	r2, r3, #28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
    }
  }
  return status;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	f003 031c 	and.w	r3, r3, #28
 8005242:	2204      	movs	r2, #4
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d026      	beq.n	800529c <HAL_DMA_IRQHandler+0x7a>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d021      	beq.n	800529c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0204 	bic.w	r2, r2, #4
 8005274:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f003 021c 	and.w	r2, r3, #28
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	2104      	movs	r1, #4
 8005284:	fa01 f202 	lsl.w	r2, r1, r2
 8005288:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	2b00      	cmp	r3, #0
 8005290:	d071      	beq.n	8005376 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800529a:	e06c      	b.n	8005376 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f003 031c 	and.w	r3, r3, #28
 80052a4:	2202      	movs	r2, #2
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02e      	beq.n	800530e <HAL_DMA_IRQHandler+0xec>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d029      	beq.n	800530e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020a 	bic.w	r2, r2, #10
 80052d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	f003 021c 	and.w	r2, r3, #28
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2102      	movs	r1, #2
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d038      	beq.n	8005376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800530c:	e033      	b.n	8005376 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f003 031c 	and.w	r3, r3, #28
 8005316:	2208      	movs	r2, #8
 8005318:	409a      	lsls	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02a      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d025      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	f003 021c 	and.w	r2, r3, #28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f202 	lsl.w	r2, r1, r2
 800534e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005376:	bf00      	nop
 8005378:	bf00      	nop
}
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	f003 021c 	and.w	r2, r3, #28
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2101      	movs	r1, #1
 800539c:	fa01 f202 	lsl.w	r2, r1, r2
 80053a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d108      	bne.n	80053c4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053c2:	e007      	b.n	80053d4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ee:	e17f      	b.n	80056f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8171 	beq.w	80056ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d005      	beq.n	8005420 <HAL_GPIO_Init+0x40>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d130      	bne.n	8005482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005456:	2201      	movs	r2, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4013      	ands	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0201 	and.w	r2, r3, #1
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d118      	bne.n	80054c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005494:	2201      	movs	r2, #1
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0201 	and.w	r2, r3, #1
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d017      	beq.n	80054fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	2203      	movs	r2, #3
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d123      	bne.n	8005550 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	08da      	lsrs	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3208      	adds	r2, #8
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	220f      	movs	r2, #15
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	08da      	lsrs	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3208      	adds	r2, #8
 800554a:	6939      	ldr	r1, [r7, #16]
 800554c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0203 	and.w	r2, r3, #3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80ac 	beq.w	80056ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005592:	4b5f      	ldr	r3, [pc, #380]	; (8005710 <HAL_GPIO_Init+0x330>)
 8005594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005596:	4a5e      	ldr	r2, [pc, #376]	; (8005710 <HAL_GPIO_Init+0x330>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6613      	str	r3, [r2, #96]	; 0x60
 800559e:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <HAL_GPIO_Init+0x330>)
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055aa:	4a5a      	ldr	r2, [pc, #360]	; (8005714 <HAL_GPIO_Init+0x334>)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3302      	adds	r3, #2
 80055b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055d4:	d025      	beq.n	8005622 <HAL_GPIO_Init+0x242>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a4f      	ldr	r2, [pc, #316]	; (8005718 <HAL_GPIO_Init+0x338>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01f      	beq.n	800561e <HAL_GPIO_Init+0x23e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a4e      	ldr	r2, [pc, #312]	; (800571c <HAL_GPIO_Init+0x33c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d019      	beq.n	800561a <HAL_GPIO_Init+0x23a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a4d      	ldr	r2, [pc, #308]	; (8005720 <HAL_GPIO_Init+0x340>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_GPIO_Init+0x236>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4c      	ldr	r2, [pc, #304]	; (8005724 <HAL_GPIO_Init+0x344>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00d      	beq.n	8005612 <HAL_GPIO_Init+0x232>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4b      	ldr	r2, [pc, #300]	; (8005728 <HAL_GPIO_Init+0x348>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d007      	beq.n	800560e <HAL_GPIO_Init+0x22e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4a      	ldr	r2, [pc, #296]	; (800572c <HAL_GPIO_Init+0x34c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_GPIO_Init+0x22a>
 8005606:	2306      	movs	r3, #6
 8005608:	e00c      	b.n	8005624 <HAL_GPIO_Init+0x244>
 800560a:	2307      	movs	r3, #7
 800560c:	e00a      	b.n	8005624 <HAL_GPIO_Init+0x244>
 800560e:	2305      	movs	r3, #5
 8005610:	e008      	b.n	8005624 <HAL_GPIO_Init+0x244>
 8005612:	2304      	movs	r3, #4
 8005614:	e006      	b.n	8005624 <HAL_GPIO_Init+0x244>
 8005616:	2303      	movs	r3, #3
 8005618:	e004      	b.n	8005624 <HAL_GPIO_Init+0x244>
 800561a:	2302      	movs	r3, #2
 800561c:	e002      	b.n	8005624 <HAL_GPIO_Init+0x244>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_GPIO_Init+0x244>
 8005622:	2300      	movs	r3, #0
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	f002 0203 	and.w	r2, r2, #3
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	4093      	lsls	r3, r2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005634:	4937      	ldr	r1, [pc, #220]	; (8005714 <HAL_GPIO_Init+0x334>)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	089b      	lsrs	r3, r3, #2
 800563a:	3302      	adds	r3, #2
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005642:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_GPIO_Init+0x350>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	43db      	mvns	r3, r3
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4013      	ands	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005666:	4a32      	ldr	r2, [pc, #200]	; (8005730 <HAL_GPIO_Init+0x350>)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800566c:	4b30      	ldr	r3, [pc, #192]	; (8005730 <HAL_GPIO_Init+0x350>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	43db      	mvns	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005690:	4a27      	ldr	r2, [pc, #156]	; (8005730 <HAL_GPIO_Init+0x350>)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005696:	4b26      	ldr	r3, [pc, #152]	; (8005730 <HAL_GPIO_Init+0x350>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	43db      	mvns	r3, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <HAL_GPIO_Init+0x350>)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_GPIO_Init+0x350>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <HAL_GPIO_Init+0x350>)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f47f ae78 	bne.w	80053f0 <HAL_GPIO_Init+0x10>
  }
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	40010000 	.word	0x40010000
 8005718:	48000400 	.word	0x48000400
 800571c:	48000800 	.word	0x48000800
 8005720:	48000c00 	.word	0x48000c00
 8005724:	48001000 	.word	0x48001000
 8005728:	48001400 	.word	0x48001400
 800572c:	48001800 	.word	0x48001800
 8005730:	40010400 	.word	0x40010400

08005734 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005742:	e0cd      	b.n	80058e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005744:	2201      	movs	r2, #1
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80c0 	beq.w	80058da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800575a:	4a68      	ldr	r2, [pc, #416]	; (80058fc <HAL_GPIO_DeInit+0x1c8>)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	3302      	adds	r3, #2
 8005762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005766:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	220f      	movs	r2, #15
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005782:	d025      	beq.n	80057d0 <HAL_GPIO_DeInit+0x9c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a5e      	ldr	r2, [pc, #376]	; (8005900 <HAL_GPIO_DeInit+0x1cc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d01f      	beq.n	80057cc <HAL_GPIO_DeInit+0x98>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a5d      	ldr	r2, [pc, #372]	; (8005904 <HAL_GPIO_DeInit+0x1d0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d019      	beq.n	80057c8 <HAL_GPIO_DeInit+0x94>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a5c      	ldr	r2, [pc, #368]	; (8005908 <HAL_GPIO_DeInit+0x1d4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_GPIO_DeInit+0x90>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a5b      	ldr	r2, [pc, #364]	; (800590c <HAL_GPIO_DeInit+0x1d8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00d      	beq.n	80057c0 <HAL_GPIO_DeInit+0x8c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a5a      	ldr	r2, [pc, #360]	; (8005910 <HAL_GPIO_DeInit+0x1dc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <HAL_GPIO_DeInit+0x88>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a59      	ldr	r2, [pc, #356]	; (8005914 <HAL_GPIO_DeInit+0x1e0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_GPIO_DeInit+0x84>
 80057b4:	2306      	movs	r3, #6
 80057b6:	e00c      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057b8:	2307      	movs	r3, #7
 80057ba:	e00a      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057bc:	2305      	movs	r3, #5
 80057be:	e008      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057c0:	2304      	movs	r3, #4
 80057c2:	e006      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057c4:	2303      	movs	r3, #3
 80057c6:	e004      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e002      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_GPIO_DeInit+0x9e>
 80057d0:	2300      	movs	r3, #0
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	f002 0203 	and.w	r2, r2, #3
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	4093      	lsls	r3, r2
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d132      	bne.n	8005848 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80057e2:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	494b      	ldr	r1, [pc, #300]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80057f0:	4b49      	ldr	r3, [pc, #292]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	43db      	mvns	r3, r3
 80057f8:	4947      	ldr	r1, [pc, #284]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80057fe:	4b46      	ldr	r3, [pc, #280]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	43db      	mvns	r3, r3
 8005806:	4944      	ldr	r1, [pc, #272]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 8005808:	4013      	ands	r3, r2
 800580a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800580c:	4b42      	ldr	r3, [pc, #264]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	43db      	mvns	r3, r3
 8005814:	4940      	ldr	r1, [pc, #256]	; (8005918 <HAL_GPIO_DeInit+0x1e4>)
 8005816:	4013      	ands	r3, r2
 8005818:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	220f      	movs	r2, #15
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800582a:	4a34      	ldr	r2, [pc, #208]	; (80058fc <HAL_GPIO_DeInit+0x1c8>)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	3302      	adds	r3, #2
 8005832:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43da      	mvns	r2, r3
 800583a:	4830      	ldr	r0, [pc, #192]	; (80058fc <HAL_GPIO_DeInit+0x1c8>)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	400a      	ands	r2, r1
 8005842:	3302      	adds	r3, #2
 8005844:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2103      	movs	r1, #3
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	08da      	lsrs	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3208      	adds	r2, #8
 8005864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	08d2      	lsrs	r2, r2, #3
 800587c:	4019      	ands	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3208      	adds	r2, #8
 8005882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	2103      	movs	r1, #3
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	401a      	ands	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	2101      	movs	r1, #1
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	401a      	ands	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	2103      	movs	r1, #3
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	401a      	ands	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	2101      	movs	r1, #1
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	401a      	ands	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3301      	adds	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f af2b 	bne.w	8005744 <HAL_GPIO_DeInit+0x10>
  }
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40010000 	.word	0x40010000
 8005900:	48000400 	.word	0x48000400
 8005904:	48000800 	.word	0x48000800
 8005908:	48000c00 	.word	0x48000c00
 800590c:	48001000 	.word	0x48001000
 8005910:	48001400 	.word	0x48001400
 8005914:	48001800 	.word	0x48001800
 8005918:	40010400 	.word	0x40010400

0800591c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	887b      	ldrh	r3, [r7, #2]
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e001      	b.n	800593e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
 8005958:	4613      	mov	r3, r2
 800595a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005968:	e002      	b.n	8005970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800596a:	887a      	ldrh	r2, [r7, #2]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e081      	b.n	8005a92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb f9f0 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2224      	movs	r2, #36	; 0x24
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	e006      	b.n	8005a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d104      	bne.n	8005a16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e021      	b.n	8005af0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	; 0x24
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fb f9bd 	bl	8000e44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	4608      	mov	r0, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	461a      	mov	r2, r3
 8005b06:	4603      	mov	r3, r0
 8005b08:	817b      	strh	r3, [r7, #10]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	813b      	strh	r3, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	f040 80f9 	bne.w	8005d12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_I2C_Mem_Write+0x34>
 8005b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0ed      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Mem_Write+0x4e>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e0e6      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fd fcc1 	bl	80034d4 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	2319      	movs	r3, #25
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fad1 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d1      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2221      	movs	r2, #33	; 0x21
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b98:	88f8      	ldrh	r0, [r7, #6]
 8005b9a:	893a      	ldrh	r2, [r7, #8]
 8005b9c:	8979      	ldrh	r1, [r7, #10]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f9e1 	bl	8005f70 <I2C_RequestMemoryWrite>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0a9      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2bff      	cmp	r3, #255	; 0xff
 8005bc8:	d90e      	bls.n	8005be8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	8979      	ldrh	r1, [r7, #10]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc39 	bl	8006458 <I2C_TransferConfig>
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	8979      	ldrh	r1, [r7, #10]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fc28 	bl	8006458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fabb 	bl	8006188 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e07b      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d034      	beq.n	8005cc0 <HAL_I2C_Mem_Write+0x1c8>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d130      	bne.n	8005cc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	2200      	movs	r2, #0
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fa4d 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04d      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2bff      	cmp	r3, #255	; 0xff
 8005c80:	d90e      	bls.n	8005ca0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	8979      	ldrh	r1, [r7, #10]
 8005c90:	2300      	movs	r3, #0
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fbdd 	bl	8006458 <I2C_TransferConfig>
 8005c9e:	e00f      	b.n	8005cc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	8979      	ldrh	r1, [r7, #10]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fbcc 	bl	8006458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d19e      	bne.n	8005c08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fa9a 	bl	8006208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e01a      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_I2C_Mem_Write+0x224>)
 8005cf2:	400b      	ands	r3, r1
 8005cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	fe00e800 	.word	0xfe00e800

08005d20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	817b      	strh	r3, [r7, #10]
 8005d32:	460b      	mov	r3, r1
 8005d34:	813b      	strh	r3, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	f040 80fd 	bne.w	8005f42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_I2C_Mem_Read+0x34>
 8005d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0f1      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_I2C_Mem_Read+0x4e>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0ea      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d76:	f7fd fbad 	bl	80034d4 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2319      	movs	r3, #25
 8005d82:	2201      	movs	r2, #1
 8005d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f9bd 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0d5      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2222      	movs	r2, #34	; 0x22
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2240      	movs	r2, #64	; 0x40
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a3a      	ldr	r2, [r7, #32]
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dc0:	88f8      	ldrh	r0, [r7, #6]
 8005dc2:	893a      	ldrh	r2, [r7, #8]
 8005dc4:	8979      	ldrh	r1, [r7, #10]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	9301      	str	r3, [sp, #4]
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	4603      	mov	r3, r0
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f921 	bl	8006018 <I2C_RequestMemoryRead>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0ad      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2bff      	cmp	r3, #255	; 0xff
 8005df0:	d90e      	bls.n	8005e10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	8979      	ldrh	r1, [r7, #10]
 8005e00:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <HAL_I2C_Mem_Read+0x22c>)
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fb25 	bl	8006458 <I2C_TransferConfig>
 8005e0e:	e00f      	b.n	8005e30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	8979      	ldrh	r1, [r7, #10]
 8005e22:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <HAL_I2C_Mem_Read+0x22c>)
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fb14 	bl	8006458 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2200      	movs	r2, #0
 8005e38:	2104      	movs	r1, #4
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f964 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07c      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d034      	beq.n	8005ef0 <HAL_I2C_Mem_Read+0x1d0>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d130      	bne.n	8005ef0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	2200      	movs	r2, #0
 8005e96:	2180      	movs	r1, #128	; 0x80
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f935 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e04d      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2bff      	cmp	r3, #255	; 0xff
 8005eb0:	d90e      	bls.n	8005ed0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	22ff      	movs	r2, #255	; 0xff
 8005eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	8979      	ldrh	r1, [r7, #10]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fac5 	bl	8006458 <I2C_TransferConfig>
 8005ece:	e00f      	b.n	8005ef0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	8979      	ldrh	r1, [r7, #10]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fab4 	bl	8006458 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d19a      	bne.n	8005e30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f982 	bl	8006208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e01a      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2220      	movs	r2, #32
 8005f14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6859      	ldr	r1, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_I2C_Mem_Read+0x230>)
 8005f22:	400b      	ands	r3, r1
 8005f24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	80002400 	.word	0x80002400
 8005f50:	fe00e800 	.word	0xfe00e800

08005f54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f62:	b2db      	uxtb	r3, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	8979      	ldrh	r1, [r7, #10]
 8005f90:	4b20      	ldr	r3, [pc, #128]	; (8006014 <I2C_RequestMemoryWrite+0xa4>)
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fa5d 	bl	8006458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f8f0 	bl	8006188 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e02c      	b.n	800600c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc2:	e015      	b.n	8005ff0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f8d6 	bl	8006188 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e012      	b.n	800600c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe6:	893b      	ldrh	r3, [r7, #8]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f884 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	80002000 	.word	0x80002000

08006018 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	8979      	ldrh	r1, [r7, #10]
 8006038:	4b20      	ldr	r3, [pc, #128]	; (80060bc <I2C_RequestMemoryRead+0xa4>)
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2300      	movs	r3, #0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fa0a 	bl	8006458 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	69b9      	ldr	r1, [r7, #24]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f89d 	bl	8006188 <I2C_WaitOnTXISFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e02c      	b.n	80060b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d105      	bne.n	800606a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800605e:	893b      	ldrh	r3, [r7, #8]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
 8006068:	e015      	b.n	8006096 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	b29b      	uxth	r3, r3
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	69b9      	ldr	r1, [r7, #24]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f883 	bl	8006188 <I2C_WaitOnTXISFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e012      	b.n	80060b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2200      	movs	r2, #0
 800609e:	2140      	movs	r1, #64	; 0x40
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f831 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	80002000 	.word	0x80002000

080060c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d103      	bne.n	80060de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d007      	beq.n	80060fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	619a      	str	r2, [r3, #24]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006118:	e022      	b.n	8006160 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d01e      	beq.n	8006160 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006122:	f7fd f9d7 	bl	80034d4 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e00f      	b.n	8006180 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	d0cd      	beq.n	800611a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006194:	e02c      	b.n	80061f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f870 	bl	8006280 <I2C_IsErrorOccurred>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02a      	b.n	8006200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d01e      	beq.n	80061f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fd f98f 	bl	80034d4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d113      	bne.n	80061f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e007      	b.n	8006200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d1cb      	bne.n	8006196 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006214:	e028      	b.n	8006268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f830 	bl	8006280 <I2C_IsErrorOccurred>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e026      	b.n	8006278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622a:	f7fd f953 	bl	80034d4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	d302      	bcc.n	8006240 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d113      	bne.n	8006268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e007      	b.n	8006278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d1cf      	bne.n	8006216 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d075      	beq.n	8006398 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2210      	movs	r2, #16
 80062b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062b4:	e056      	b.n	8006364 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d052      	beq.n	8006364 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fd f909 	bl	80034d4 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_IsErrorOccurred+0x54>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d147      	bne.n	8006364 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	d12e      	bne.n	8006356 <I2C_IsErrorOccurred+0xd6>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fe:	d02a      	beq.n	8006356 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b20      	cmp	r3, #32
 8006304:	d027      	beq.n	8006356 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006314:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006316:	f7fd f8dd 	bl	80034d4 <HAL_GetTick>
 800631a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800631c:	e01b      	b.n	8006356 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800631e:	f7fd f8d9 	bl	80034d4 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b19      	cmp	r3, #25
 800632a:	d914      	bls.n	8006356 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b20      	cmp	r3, #32
 8006362:	d1dc      	bne.n	800631e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b20      	cmp	r3, #32
 8006370:	d003      	beq.n	800637a <I2C_IsErrorOccurred+0xfa>
 8006372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006376:	2b00      	cmp	r3, #0
 8006378:	d09d      	beq.n	80062b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800637a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2220      	movs	r2, #32
 8006388:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f043 0304 	orr.w	r3, r3, #4
 8006390:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f043 0308 	orr.w	r3, r3, #8
 80063d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01c      	beq.n	8006448 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff fe56 	bl	80060c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <I2C_IsErrorOccurred+0x1d4>)
 8006420:	400b      	ands	r3, r1
 8006422:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	431a      	orrs	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	; 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	fe00e800 	.word	0xfe00e800

08006458 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	4613      	mov	r3, r2
 8006468:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646a:	897b      	ldrh	r3, [r7, #10]
 800646c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006470:	7a7b      	ldrb	r3, [r7, #9]
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006478:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	4313      	orrs	r3, r2
 8006482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006486:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	0d5b      	lsrs	r3, r3, #21
 8006492:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <I2C_TransferConfig+0x60>)
 8006498:	430b      	orrs	r3, r1
 800649a:	43db      	mvns	r3, r3
 800649c:	ea02 0103 	and.w	r1, r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	03ff63ff 	.word	0x03ff63ff

080064bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d138      	bne.n	8006544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064dc:	2302      	movs	r3, #2
 80064de:	e032      	b.n	8006546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	; 0x24
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800650e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	d139      	bne.n	80065dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006572:	2302      	movs	r3, #2
 8006574:	e033      	b.n	80065de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	; 0x24
 8006582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0af      	b.n	800675e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fa fc38 	bl	8000e88 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e00a      	b.n	800664c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3304      	adds	r3, #4
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	3301      	adds	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b0f      	cmp	r3, #15
 8006650:	d9f1      	bls.n	8006636 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0204 	orr.w	r2, r2, #4
 8006660:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	4b3f      	ldr	r3, [pc, #252]	; (8006768 <HAL_LCD_Init+0x17c>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6851      	ldr	r1, [r2, #4]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6892      	ldr	r2, [r2, #8]
 8006674:	4311      	orrs	r1, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800667a:	4311      	orrs	r1, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006680:	4311      	orrs	r1, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	69d2      	ldr	r2, [r2, #28]
 8006686:	4311      	orrs	r1, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6a12      	ldr	r2, [r2, #32]
 800668c:	4311      	orrs	r1, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6992      	ldr	r2, [r2, #24]
 8006692:	4311      	orrs	r1, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	430b      	orrs	r3, r1
 80066a0:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f94c 	bl	8006940 <LCD_WaitForSynchro>
 80066a8:	4603      	mov	r3, r0
 80066aa:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80066ac:	7cfb      	ldrb	r3, [r7, #19]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_LCD_Init+0xca>
  {
    return status;
 80066b2:	7cfb      	ldrb	r3, [r7, #19]
 80066b4:	e053      	b.n	800675e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80066ee:	f7fc fef1 	bl	80034d4 <HAL_GetTick>
 80066f2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80066f4:	e00c      	b.n	8006710 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80066f6:	f7fc feed 	bl	80034d4 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006704:	d904      	bls.n	8006710 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2208      	movs	r2, #8
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e026      	b.n	800675e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d1eb      	bne.n	80066f6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800671e:	f7fc fed9 	bl	80034d4 <HAL_GetTick>
 8006722:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006724:	e00c      	b.n	8006740 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006726:	f7fc fed5 	bl	80034d4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006734:	d904      	bls.n	8006740 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2210      	movs	r2, #16
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e00e      	b.n	800675e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d1eb      	bne.n	8006726 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 800675c:	7cfb      	ldrb	r3, [r7, #19]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	fc00000e 	.word	0xfc00000e

0800676c <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006780:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d002      	beq.n	800678e <HAL_LCD_Write+0x22>
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d144      	bne.n	8006818 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d12a      	bne.n	80067f0 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_LCD_Write+0x3c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e038      	b.n	800681a <HAL_LCD_Write+0xae>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 80067b8:	f7fc fe8c 	bl	80034d4 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80067be:	e010      	b.n	80067e2 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80067c0:	f7fc fe88 	bl	80034d4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ce:	d908      	bls.n	80067e2 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2202      	movs	r2, #2
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e01b      	b.n	800681a <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d0e7      	beq.n	80067c0 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3304      	adds	r3, #4
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	401a      	ands	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	431a      	orrs	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3304      	adds	r3, #4
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006834:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006836:	7cbb      	ldrb	r3, [r7, #18]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d002      	beq.n	8006842 <HAL_LCD_Clear+0x20>
 800683c:	7cbb      	ldrb	r3, [r7, #18]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d140      	bne.n	80068c4 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_LCD_Clear+0x2e>
 800684c:	2302      	movs	r3, #2
 800684e:	e03a      	b.n	80068c6 <HAL_LCD_Clear+0xa4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006860:	f7fc fe38 	bl	80034d4 <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006866:	e010      	b.n	800688a <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006868:	f7fc fe34 	bl	80034d4 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006876:	d908      	bls.n	800688a <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e01d      	b.n	80068c6 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d0e7      	beq.n	8006868 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e00a      	b.n	80068b4 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	3304      	adds	r3, #4
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3301      	adds	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b0f      	cmp	r3, #15
 80068b8:	d9f1      	bls.n	800689e <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f807 	bl	80068ce <HAL_LCD_UpdateDisplayRequest>
 80068c0:	4603      	mov	r3, r0
 80068c2:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80068c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0204 	orr.w	r2, r2, #4
 80068ec:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80068ee:	f7fc fdf1 	bl	80034d4 <HAL_GetTick>
 80068f2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80068f4:	e010      	b.n	8006918 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80068f6:	f7fc fded 	bl	80034d4 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006904:	d908      	bls.n	8006918 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e00f      	b.n	8006938 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b08      	cmp	r3, #8
 8006924:	d1e7      	bne.n	80068f6 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006948:	f7fc fdc4 	bl	80034d4 <HAL_GetTick>
 800694c:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800694e:	e00c      	b.n	800696a <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006950:	f7fc fdc0 	bl	80034d4 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695e:	d904      	bls.n	800696a <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e007      	b.n	800697a <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b20      	cmp	r3, #32
 8006976:	d1eb      	bne.n	8006950 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <HAL_PWREx_GetVoltageRange+0x18>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006990:	4618      	mov	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40007000 	.word	0x40007000

080069a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ae:	d130      	bne.n	8006a12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069bc:	d038      	beq.n	8006a30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2232      	movs	r2, #50	; 0x32
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0c9b      	lsrs	r3, r3, #18
 80069e0:	3301      	adds	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069e4:	e002      	b.n	80069ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f8:	d102      	bne.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x60>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1f2      	bne.n	80069e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d110      	bne.n	8006a30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e00f      	b.n	8006a32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1e:	d007      	beq.n	8006a30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a28:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40007000 	.word	0x40007000
 8006a44:	20000004 	.word	0x20000004
 8006a48:	431bde83 	.word	0x431bde83

08006a4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a5a:	6053      	str	r3, [r2, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40007000 	.word	0x40007000

08006a6c <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <HAL_PWREx_DisableVddIO2+0x1c>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <HAL_PWREx_DisableVddIO2+0x1c>)
 8006a76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a7a:	6053      	str	r3, [r2, #4]
}
 8006a7c:	bf00      	nop
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40007000 	.word	0x40007000

08006a8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a94:	f7fc fd1e 	bl	80034d4 <HAL_GetTick>
 8006a98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e063      	b.n	8006b6c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fa fab3 	bl	8001024 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006abe:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 faf7 	bl	80070b6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	021a      	lsls	r2, r3, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2120      	movs	r1, #32
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 faef 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d131      	bne.n	8006b62 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6852      	ldr	r2, [r2, #4]
 8006b10:	0611      	lsls	r1, r2, #24
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	68d2      	ldr	r2, [r2, #12]
 8006b16:	4311      	orrs	r1, r2
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <HAL_QSPI_Init+0xe8>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6912      	ldr	r2, [r2, #16]
 8006b2e:	0411      	lsls	r1, r2, #16
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6952      	ldr	r2, [r2, #20]
 8006b34:	4311      	orrs	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6992      	ldr	r2, [r2, #24]
 8006b3a:	4311      	orrs	r1, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	ffe0f8fe 	.word	0xffe0f8fe

08006b78 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e016      	b.n	8006bb8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa fa86 	bl	80010ac <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006bcc:	f7fc fc82 	bl	80034d4 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_QSPI_Command+0x22>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e048      	b.n	8006c74 <HAL_QSPI_Command+0xb4>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d137      	bne.n	8006c66 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2120      	movs	r1, #32
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fa5f 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d125      	bne.n	8006c6a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fa8c 	bl	8007140 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d115      	bne.n	8006c5c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2201      	movs	r2, #1
 8006c38:	2102      	movs	r1, #2
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fa49 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006c5a:	e006      	b.n	8006c6a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006c64:	e001      	b.n	8006c6a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006c66:	2302      	movs	r3, #2
 8006c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006c8c:	f7fc fc22 	bl	80034d4 <HAL_GetTick>
 8006c90:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3320      	adds	r3, #32
 8006c98:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_QSPI_Transmit+0x2e>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e07b      	b.n	8006da2 <HAL_QSPI_Transmit+0x126>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d16a      	bne.n	8006d94 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d05b      	beq.n	8006d82 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2212      	movs	r2, #18
 8006cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006cfe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006d00:	e01b      	b.n	8006d3a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f9e0 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006d16:	7ffb      	ldrb	r3, [r7, #31]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d113      	bne.n	8006d44 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1df      	bne.n	8006d02 <HAL_QSPI_Transmit+0x86>
 8006d42:	e000      	b.n	8006d46 <HAL_QSPI_Transmit+0xca>
          break;
 8006d44:	bf00      	nop
      }

      if (status == HAL_OK)
 8006d46:	7ffb      	ldrb	r3, [r7, #31]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d115      	bne.n	8006d78 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2201      	movs	r2, #1
 8006d54:	2102      	movs	r1, #2
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f9bb 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006d60:	7ffb      	ldrb	r3, [r7, #31]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d108      	bne.n	8006d78 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f934 	bl	8006fdc <HAL_QSPI_Abort>
 8006d74:	4603      	mov	r3, r0
 8006d76:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006d80:	e00a      	b.n	8006d98 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	f043 0208 	orr.w	r2, r3, #8
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e001      	b.n	8006d98 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
 8006d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b08a      	sub	sp, #40	; 0x28
 8006dae:	af02      	add	r7, sp, #8
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006dba:	f7fc fb8b 	bl	80034d4 <HAL_GetTick>
 8006dbe:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3320      	adds	r3, #32
 8006dce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_QSPI_Receive+0x36>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e082      	b.n	8006ee6 <HAL_QSPI_Receive+0x13c>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d171      	bne.n	8006ed8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d062      	beq.n	8006ec6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2222      	movs	r2, #34	; 0x22
 8006e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e38:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006e42:	e01c      	b.n	8006e7e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	2106      	movs	r1, #6
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f93f 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006e58:	7ffb      	ldrb	r3, [r7, #31]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d114      	bne.n	8006e88 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	1e5a      	subs	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1de      	bne.n	8006e44 <HAL_QSPI_Receive+0x9a>
 8006e86:	e000      	b.n	8006e8a <HAL_QSPI_Receive+0xe0>
          break;
 8006e88:	bf00      	nop
      }

      if (status == HAL_OK)
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d115      	bne.n	8006ebc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2201      	movs	r2, #1
 8006e98:	2102      	movs	r1, #2
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f919 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006ea4:	7ffb      	ldrb	r3, [r7, #31]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d108      	bne.n	8006ebc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f892 	bl	8006fdc <HAL_QSPI_Abort>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006ec4:	e00a      	b.n	8006edc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	f043 0208 	orr.w	r2, r3, #8
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e001      	b.n	8006edc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b088      	sub	sp, #32
 8006ef2:	af02      	add	r7, sp, #8
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006efc:	f7fc faea 	bl	80034d4 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_QSPI_AutoPolling+0x24>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e060      	b.n	8006fd4 <HAL_QSPI_AutoPolling+0xe6>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d14f      	bne.n	8006fc6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2242      	movs	r2, #66	; 0x42
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f8c7 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d13d      	bne.n	8006fca <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6852      	ldr	r2, [r2, #4]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6892      	ldr	r2, [r2, #8]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f84:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f8d3 	bl	8007140 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f894 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006fc4:	e001      	b.n	8006fca <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006fe8:	f7fc fa74 	bl	80034d4 <HAL_GetTick>
 8006fec:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d056      	beq.n	80070ac <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d017      	beq.n	8007044 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0204 	bic.w	r2, r2, #4
 8007022:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe f87b 	bl	8005124 <HAL_DMA_Abort>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703c:	f043 0204 	orr.w	r2, r3, #4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0202 	orr.w	r2, r2, #2
 8007052:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2201      	movs	r2, #1
 800705e:	2102      	movs	r1, #2
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f836 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10e      	bne.n	800708e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2202      	movs	r2, #2
 8007076:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2200      	movs	r2, #0
 8007082:	2120      	movs	r1, #32
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f824 	bl	80070d2 <QSPI_WaitFlagStateUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80070a2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80070e2:	e01a      	b.n	800711a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d016      	beq.n	800711a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ec:	f7fc f9f2 	bl	80034d4 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d302      	bcc.n	8007102 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2204      	movs	r2, #4
 8007106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	f043 0201 	orr.w	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e00e      	b.n	8007138 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d1d6      	bne.n	80070e4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <QSPI_Config+0x28>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800715a:	d005      	beq.n	8007168 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3a01      	subs	r2, #1
 8007166:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80b9 	beq.w	80072e4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d05f      	beq.n	800723a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d031      	beq.n	80071f0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	431a      	orrs	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	431a      	orrs	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	049b      	lsls	r3, r3, #18
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	ea42 0103 	orr.w	r1, r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80071e0:	f000 812e 	beq.w	8007440 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80071ee:	e127      	b.n	8007440 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fe:	431a      	orrs	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	431a      	orrs	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	049b      	lsls	r3, r3, #18
 800720c:	431a      	orrs	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	431a      	orrs	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	431a      	orrs	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	431a      	orrs	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	431a      	orrs	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	ea42 0103 	orr.w	r1, r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	430a      	orrs	r2, r1
 8007236:	615a      	str	r2, [r3, #20]
}
 8007238:	e102      	b.n	8007440 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d02e      	beq.n	80072a0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	431a      	orrs	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	431a      	orrs	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	431a      	orrs	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	049b      	lsls	r3, r3, #18
 800725e:	431a      	orrs	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	431a      	orrs	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	431a      	orrs	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	431a      	orrs	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	431a      	orrs	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	ea42 0103 	orr.w	r1, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	430a      	orrs	r2, r1
 8007288:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007290:	f000 80d6 	beq.w	8007440 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	6852      	ldr	r2, [r2, #4]
 800729c:	619a      	str	r2, [r3, #24]
}
 800729e:	e0cf      	b.n	8007440 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	431a      	orrs	r2, r3
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	049b      	lsls	r3, r3, #18
 80072bc:	431a      	orrs	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	ea42 0103 	orr.w	r1, r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	430a      	orrs	r2, r1
 80072e0:	615a      	str	r2, [r3, #20]
}
 80072e2:	e0ad      	b.n	8007440 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d058      	beq.n	800739e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	6892      	ldr	r2, [r2, #8]
 80072f4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02d      	beq.n	800735a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	431a      	orrs	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	431a      	orrs	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	431a      	orrs	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	049b      	lsls	r3, r3, #18
 800731a:	431a      	orrs	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	431a      	orrs	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	431a      	orrs	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	431a      	orrs	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	ea42 0103 	orr.w	r1, r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	430a      	orrs	r2, r1
 8007344:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800734c:	d078      	beq.n	8007440 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	619a      	str	r2, [r3, #24]
}
 8007358:	e072      	b.n	8007440 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	431a      	orrs	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	431a      	orrs	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	431a      	orrs	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	049b      	lsls	r3, r3, #18
 8007376:	431a      	orrs	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	431a      	orrs	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	431a      	orrs	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	431a      	orrs	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	ea42 0103 	orr.w	r1, r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	430a      	orrs	r2, r1
 800739a:	615a      	str	r2, [r3, #20]
}
 800739c:	e050      	b.n	8007440 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02a      	beq.n	80073fc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	431a      	orrs	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	049b      	lsls	r3, r3, #18
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	ea42 0103 	orr.w	r1, r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073ee:	d027      	beq.n	8007440 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	6852      	ldr	r2, [r2, #4]
 80073f8:	619a      	str	r2, [r3, #24]
}
 80073fa:	e021      	b.n	8007440 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01d      	beq.n	8007440 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	431a      	orrs	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	431a      	orrs	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	431a      	orrs	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	049b      	lsls	r3, r3, #18
 8007420:	431a      	orrs	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	431a      	orrs	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	431a      	orrs	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	ea42 0103 	orr.w	r1, r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	430a      	orrs	r2, r1
 800743e:	615a      	str	r2, [r3, #20]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e3d8      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800745e:	4b97      	ldr	r3, [pc, #604]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007468:	4b94      	ldr	r3, [pc, #592]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80e4 	beq.w	8007648 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_RCC_OscConfig+0x4a>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b0c      	cmp	r3, #12
 800748a:	f040 808b 	bne.w	80075a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 8087 	bne.w	80075a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007496:	4b89      	ldr	r3, [pc, #548]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_RCC_OscConfig+0x62>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e3b0      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	4b82      	ldr	r3, [pc, #520]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <HAL_RCC_OscConfig+0x7c>
 80074be:	4b7f      	ldr	r3, [pc, #508]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074c6:	e005      	b.n	80074d4 <HAL_RCC_OscConfig+0x88>
 80074c8:	4b7c      	ldr	r3, [pc, #496]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d223      	bcs.n	8007520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fd43 	bl	8007f68 <RCC_SetFlashLatencyFromMSIRange>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e391      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074ec:	4b73      	ldr	r3, [pc, #460]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a72      	ldr	r2, [pc, #456]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074f2:	f043 0308 	orr.w	r3, r3, #8
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4b70      	ldr	r3, [pc, #448]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	496d      	ldr	r1, [pc, #436]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007506:	4313      	orrs	r3, r2
 8007508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800750a:	4b6c      	ldr	r3, [pc, #432]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	4968      	ldr	r1, [pc, #416]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800751a:	4313      	orrs	r3, r2
 800751c:	604b      	str	r3, [r1, #4]
 800751e:	e025      	b.n	800756c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007520:	4b66      	ldr	r3, [pc, #408]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a65      	ldr	r2, [pc, #404]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007526:	f043 0308 	orr.w	r3, r3, #8
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	4b63      	ldr	r3, [pc, #396]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	4960      	ldr	r1, [pc, #384]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800753a:	4313      	orrs	r3, r2
 800753c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800753e:	4b5f      	ldr	r3, [pc, #380]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	495b      	ldr	r1, [pc, #364]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800754e:	4313      	orrs	r3, r2
 8007550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fd03 	bl	8007f68 <RCC_SetFlashLatencyFromMSIRange>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e351      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800756c:	f000 fc38 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8007570:	4602      	mov	r2, r0
 8007572:	4b52      	ldr	r3, [pc, #328]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	4950      	ldr	r1, [pc, #320]	; (80076c0 <HAL_RCC_OscConfig+0x274>)
 800757e:	5ccb      	ldrb	r3, [r1, r3]
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	4a4e      	ldr	r2, [pc, #312]	; (80076c4 <HAL_RCC_OscConfig+0x278>)
 800758a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800758c:	4b4e      	ldr	r3, [pc, #312]	; (80076c8 <HAL_RCC_OscConfig+0x27c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7fb ff4f 	bl	8003434 <HAL_InitTick>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d052      	beq.n	8007646 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	e335      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d032      	beq.n	8007612 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075ac:	4b43      	ldr	r3, [pc, #268]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a42      	ldr	r2, [pc, #264]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075b8:	f7fb ff8c 	bl	80034d4 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075c0:	f7fb ff88 	bl	80034d4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e31e      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075d2:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075de:	4b37      	ldr	r3, [pc, #220]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a36      	ldr	r2, [pc, #216]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	4b34      	ldr	r3, [pc, #208]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4931      	ldr	r1, [pc, #196]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075fc:	4b2f      	ldr	r3, [pc, #188]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	492c      	ldr	r1, [pc, #176]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800760c:	4313      	orrs	r3, r2
 800760e:	604b      	str	r3, [r1, #4]
 8007610:	e01a      	b.n	8007648 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007612:	4b2a      	ldr	r3, [pc, #168]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800761e:	f7fb ff59 	bl	80034d4 <HAL_GetTick>
 8007622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007626:	f7fb ff55 	bl	80034d4 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e2eb      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007638:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f0      	bne.n	8007626 <HAL_RCC_OscConfig+0x1da>
 8007644:	e000      	b.n	8007648 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007646:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d074      	beq.n	800773e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d005      	beq.n	8007666 <HAL_RCC_OscConfig+0x21a>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b0c      	cmp	r3, #12
 800765e:	d10e      	bne.n	800767e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d10b      	bne.n	800767e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d064      	beq.n	800773c <HAL_RCC_OscConfig+0x2f0>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d160      	bne.n	800773c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e2c8      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007686:	d106      	bne.n	8007696 <HAL_RCC_OscConfig+0x24a>
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 800768e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	e026      	b.n	80076e4 <HAL_RCC_OscConfig+0x298>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800769e:	d115      	bne.n	80076cc <HAL_RCC_OscConfig+0x280>
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a05      	ldr	r2, [pc, #20]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80076a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a02      	ldr	r2, [pc, #8]	; (80076bc <HAL_RCC_OscConfig+0x270>)
 80076b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e014      	b.n	80076e4 <HAL_RCC_OscConfig+0x298>
 80076ba:	bf00      	nop
 80076bc:	40021000 	.word	0x40021000
 80076c0:	0800b198 	.word	0x0800b198
 80076c4:	20000004 	.word	0x20000004
 80076c8:	20000040 	.word	0x20000040
 80076cc:	4ba0      	ldr	r3, [pc, #640]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a9f      	ldr	r2, [pc, #636]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80076d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	4b9d      	ldr	r3, [pc, #628]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a9c      	ldr	r2, [pc, #624]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80076de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d013      	beq.n	8007714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fb fef2 	bl	80034d4 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f4:	f7fb feee 	bl	80034d4 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	; 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e284      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007706:	4b92      	ldr	r3, [pc, #584]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x2a8>
 8007712:	e014      	b.n	800773e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fb fede 	bl	80034d4 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800771c:	f7fb feda 	bl	80034d4 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b64      	cmp	r3, #100	; 0x64
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e270      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800772e:	4b88      	ldr	r3, [pc, #544]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0x2d0>
 800773a:	e000      	b.n	800773e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d060      	beq.n	800780c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d005      	beq.n	800775c <HAL_RCC_OscConfig+0x310>
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b0c      	cmp	r3, #12
 8007754:	d119      	bne.n	800778a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d116      	bne.n	800778a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800775c:	4b7c      	ldr	r3, [pc, #496]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_OscConfig+0x328>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e24d      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007774:	4b76      	ldr	r3, [pc, #472]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	061b      	lsls	r3, r3, #24
 8007782:	4973      	ldr	r1, [pc, #460]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007784:	4313      	orrs	r3, r2
 8007786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007788:	e040      	b.n	800780c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d023      	beq.n	80077da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007792:	4b6f      	ldr	r3, [pc, #444]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a6e      	ldr	r2, [pc, #440]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779e:	f7fb fe99 	bl	80034d4 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a6:	f7fb fe95 	bl	80034d4 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e22b      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077b8:	4b65      	ldr	r3, [pc, #404]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0f0      	beq.n	80077a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c4:	4b62      	ldr	r3, [pc, #392]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	495f      	ldr	r1, [pc, #380]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	604b      	str	r3, [r1, #4]
 80077d8:	e018      	b.n	800780c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077da:	4b5d      	ldr	r3, [pc, #372]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a5c      	ldr	r2, [pc, #368]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80077e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e6:	f7fb fe75 	bl	80034d4 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fb fe71 	bl	80034d4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e207      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007800:	4b53      	ldr	r3, [pc, #332]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f0      	bne.n	80077ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b00      	cmp	r3, #0
 8007816:	d03c      	beq.n	8007892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01c      	beq.n	800785a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007820:	4b4b      	ldr	r3, [pc, #300]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007826:	4a4a      	ldr	r2, [pc, #296]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007830:	f7fb fe50 	bl	80034d4 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007838:	f7fb fe4c 	bl	80034d4 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e1e2      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800784a:	4b41      	ldr	r3, [pc, #260]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800784c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0ef      	beq.n	8007838 <HAL_RCC_OscConfig+0x3ec>
 8007858:	e01b      	b.n	8007892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800785a:	4b3d      	ldr	r3, [pc, #244]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800785c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007860:	4a3b      	ldr	r2, [pc, #236]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786a:	f7fb fe33 	bl	80034d4 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007872:	f7fb fe2f 	bl	80034d4 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e1c5      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007884:	4b32      	ldr	r3, [pc, #200]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1ef      	bne.n	8007872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80a6 	beq.w	80079ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078a0:	2300      	movs	r3, #0
 80078a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10d      	bne.n	80078cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b0:	4b27      	ldr	r3, [pc, #156]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80078b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b4:	4a26      	ldr	r2, [pc, #152]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80078b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ba:	6593      	str	r3, [r2, #88]	; 0x58
 80078bc:	4b24      	ldr	r3, [pc, #144]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 80078be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c8:	2301      	movs	r3, #1
 80078ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078cc:	4b21      	ldr	r3, [pc, #132]	; (8007954 <HAL_RCC_OscConfig+0x508>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d118      	bne.n	800790a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <HAL_RCC_OscConfig+0x508>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_RCC_OscConfig+0x508>)
 80078de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078e4:	f7fb fdf6 	bl	80034d4 <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ec:	f7fb fdf2 	bl	80034d4 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e188      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078fe:	4b15      	ldr	r3, [pc, #84]	; (8007954 <HAL_RCC_OscConfig+0x508>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f0      	beq.n	80078ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d108      	bne.n	8007924 <HAL_RCC_OscConfig+0x4d8>
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007918:	4a0d      	ldr	r2, [pc, #52]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007922:	e029      	b.n	8007978 <HAL_RCC_OscConfig+0x52c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b05      	cmp	r3, #5
 800792a:	d115      	bne.n	8007958 <HAL_RCC_OscConfig+0x50c>
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	4a07      	ldr	r2, [pc, #28]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007934:	f043 0304 	orr.w	r3, r3, #4
 8007938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <HAL_RCC_OscConfig+0x504>)
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800794c:	e014      	b.n	8007978 <HAL_RCC_OscConfig+0x52c>
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	40007000 	.word	0x40007000
 8007958:	4b91      	ldr	r3, [pc, #580]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 800795a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795e:	4a90      	ldr	r2, [pc, #576]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007968:	4b8d      	ldr	r3, [pc, #564]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796e:	4a8c      	ldr	r2, [pc, #560]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007970:	f023 0304 	bic.w	r3, r3, #4
 8007974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d016      	beq.n	80079ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007980:	f7fb fda8 	bl	80034d4 <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007986:	e00a      	b.n	800799e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007988:	f7fb fda4 	bl	80034d4 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f241 3288 	movw	r2, #5000	; 0x1388
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e138      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800799e:	4b80      	ldr	r3, [pc, #512]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0ed      	beq.n	8007988 <HAL_RCC_OscConfig+0x53c>
 80079ac:	e015      	b.n	80079da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ae:	f7fb fd91 	bl	80034d4 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7fb fd8d 	bl	80034d4 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e121      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079cc:	4b74      	ldr	r3, [pc, #464]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1ed      	bne.n	80079b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d105      	bne.n	80079ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e0:	4b6f      	ldr	r3, [pc, #444]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 80079e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e4:	4a6e      	ldr	r2, [pc, #440]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 80079e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 810c 	beq.w	8007c0e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	f040 80d4 	bne.w	8007ba8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a00:	4b67      	ldr	r3, [pc, #412]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f003 0203 	and.w	r2, r3, #3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d130      	bne.n	8007a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d127      	bne.n	8007a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d11f      	bne.n	8007a76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a40:	2a07      	cmp	r2, #7
 8007a42:	bf14      	ite	ne
 8007a44:	2201      	movne	r2, #1
 8007a46:	2200      	moveq	r2, #0
 8007a48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d113      	bne.n	8007a76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d109      	bne.n	8007a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d06e      	beq.n	8007b54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d069      	beq.n	8007b50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a7c:	4b48      	ldr	r3, [pc, #288]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007a88:	4b45      	ldr	r3, [pc, #276]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0bb      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a98:	4b41      	ldr	r3, [pc, #260]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a40      	ldr	r2, [pc, #256]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007aa4:	f7fb fd16 	bl	80034d4 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aac:	f7fb fd12 	bl	80034d4 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e0a8      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007abe:	4b38      	ldr	r3, [pc, #224]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aca:	4b35      	ldr	r3, [pc, #212]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <HAL_RCC_OscConfig+0x758>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ada:	3a01      	subs	r2, #1
 8007adc:	0112      	lsls	r2, r2, #4
 8007ade:	4311      	orrs	r1, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ae4:	0212      	lsls	r2, r2, #8
 8007ae6:	4311      	orrs	r1, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007aec:	0852      	lsrs	r2, r2, #1
 8007aee:	3a01      	subs	r2, #1
 8007af0:	0552      	lsls	r2, r2, #21
 8007af2:	4311      	orrs	r1, r2
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007af8:	0852      	lsrs	r2, r2, #1
 8007afa:	3a01      	subs	r2, #1
 8007afc:	0652      	lsls	r2, r2, #25
 8007afe:	4311      	orrs	r1, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b04:	0912      	lsrs	r2, r2, #4
 8007b06:	0452      	lsls	r2, r2, #17
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	4925      	ldr	r1, [pc, #148]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b10:	4b23      	ldr	r3, [pc, #140]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a22      	ldr	r2, [pc, #136]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b1c:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b28:	f7fb fcd4 	bl	80034d4 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b30:	f7fb fcd0 	bl	80034d4 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e066      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b42:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b4e:	e05e      	b.n	8007c0e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e05d      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d156      	bne.n	8007c0e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a0e      	ldr	r2, [pc, #56]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4a0b      	ldr	r2, [pc, #44]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b78:	f7fb fcac 	bl	80034d4 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b80:	f7fb fca8 	bl	80034d4 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e03e      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b92:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <HAL_RCC_OscConfig+0x754>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f0      	beq.n	8007b80 <HAL_RCC_OscConfig+0x734>
 8007b9e:	e036      	b.n	8007c0e <HAL_RCC_OscConfig+0x7c2>
 8007ba0:	40021000 	.word	0x40021000
 8007ba4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	d02d      	beq.n	8007c0a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bae:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007bba:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bcc:	f023 0303 	bic.w	r3, r3, #3
 8007bd0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	4a10      	ldr	r2, [pc, #64]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be2:	f7fb fc77 	bl	80034d4 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007be8:	e008      	b.n	8007bfc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bea:	f7fb fc73 	bl	80034d4 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e009      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bfc:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <HAL_RCC_OscConfig+0x7cc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f0      	bne.n	8007bea <HAL_RCC_OscConfig+0x79e>
 8007c08:	e001      	b.n	8007c0e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40021000 	.word	0x40021000

08007c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0c8      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c30:	4b66      	ldr	r3, [pc, #408]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d910      	bls.n	8007c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3e:	4b63      	ldr	r3, [pc, #396]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f023 0207 	bic.w	r2, r3, #7
 8007c46:	4961      	ldr	r1, [pc, #388]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4e:	4b5f      	ldr	r3, [pc, #380]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d001      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0b0      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d04c      	beq.n	8007d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d107      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c74:	4b56      	ldr	r3, [pc, #344]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d121      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e09e      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c8c:	4b50      	ldr	r3, [pc, #320]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d115      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e092      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ca4:	4b4a      	ldr	r3, [pc, #296]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d109      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e086      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cb4:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e07e      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cc4:	4b42      	ldr	r3, [pc, #264]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f023 0203 	bic.w	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	493f      	ldr	r1, [pc, #252]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd6:	f7fb fbfd 	bl	80034d4 <HAL_GetTick>
 8007cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cde:	f7fb fbf9 	bl	80034d4 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e066      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf4:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 020c 	and.w	r2, r3, #12
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d1eb      	bne.n	8007cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d12:	4b2f      	ldr	r3, [pc, #188]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	492c      	ldr	r1, [pc, #176]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d24:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d210      	bcs.n	8007d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d32:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f023 0207 	bic.w	r2, r3, #7
 8007d3a:	4924      	ldr	r1, [pc, #144]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d42:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <HAL_RCC_ClockConfig+0x1b0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e036      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	4918      	ldr	r1, [pc, #96]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4910      	ldr	r1, [pc, #64]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d92:	f000 f825 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	091b      	lsrs	r3, r3, #4
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	490c      	ldr	r1, [pc, #48]	; (8007dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007da4:	5ccb      	ldrb	r3, [r1, r3]
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <HAL_RCC_ClockConfig+0x1c0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fb fb3c 	bl	8003434 <HAL_InitTick>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40022000 	.word	0x40022000
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	0800b198 	.word	0x0800b198
 8007dd8:	20000004 	.word	0x20000004
 8007ddc:	20000040 	.word	0x20000040

08007de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b089      	sub	sp, #36	; 0x24
 8007de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	2300      	movs	r3, #0
 8007dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dee:	4b3e      	ldr	r3, [pc, #248]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
 8007df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007df8:	4b3b      	ldr	r3, [pc, #236]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0303 	and.w	r3, r3, #3
 8007e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_RCC_GetSysClockFreq+0x34>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b0c      	cmp	r3, #12
 8007e0c:	d121      	bne.n	8007e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d11e      	bne.n	8007e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e14:	4b34      	ldr	r3, [pc, #208]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e20:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	e005      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e30:	4b2d      	ldr	r3, [pc, #180]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	091b      	lsrs	r3, r3, #4
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e3c:	4a2b      	ldr	r2, [pc, #172]	; (8007eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10d      	bne.n	8007e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e50:	e00a      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d102      	bne.n	8007e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e58:	4b25      	ldr	r3, [pc, #148]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	e004      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d101      	bne.n	8007e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e64:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b0c      	cmp	r3, #12
 8007e6c:	d134      	bne.n	8007ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d003      	beq.n	8007e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d003      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0xac>
 8007e84:	e005      	b.n	8007e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e86:	4b1a      	ldr	r3, [pc, #104]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e88:	617b      	str	r3, [r7, #20]
      break;
 8007e8a:	e005      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e8c:	4b19      	ldr	r3, [pc, #100]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e8e:	617b      	str	r3, [r7, #20]
      break;
 8007e90:	e002      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	617b      	str	r3, [r7, #20]
      break;
 8007e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e98:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	091b      	lsrs	r3, r3, #4
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	fb03 f202 	mul.w	r2, r3, r2
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	0e5b      	lsrs	r3, r3, #25
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3724      	adds	r7, #36	; 0x24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	0800b1b0 	.word	0x0800b1b0
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	007a1200 	.word	0x007a1200

08007ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007efc:	4b03      	ldr	r3, [pc, #12]	; (8007f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007efe:	681b      	ldr	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000004 	.word	0x20000004

08007f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f14:	f7ff fff0 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4904      	ldr	r1, [pc, #16]	; (8007f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40021000 	.word	0x40021000
 8007f38:	0800b1a8 	.word	0x0800b1a8

08007f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f40:	f7ff ffda 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	0adb      	lsrs	r3, r3, #11
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4904      	ldr	r1, [pc, #16]	; (8007f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f52:	5ccb      	ldrb	r3, [r1, r3]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40021000 	.word	0x40021000
 8007f64:	0800b1a8 	.word	0x0800b1a8

08007f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f74:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f80:	f7fe fd00 	bl	8006984 <HAL_PWREx_GetVoltageRange>
 8007f84:	6178      	str	r0, [r7, #20]
 8007f86:	e014      	b.n	8007fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f88:	4b25      	ldr	r3, [pc, #148]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	4a24      	ldr	r2, [pc, #144]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f92:	6593      	str	r3, [r2, #88]	; 0x58
 8007f94:	4b22      	ldr	r3, [pc, #136]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fa0:	f7fe fcf0 	bl	8006984 <HAL_PWREx_GetVoltageRange>
 8007fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007faa:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb8:	d10b      	bne.n	8007fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d919      	bls.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8007fc4:	d902      	bls.n	8007fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	e013      	b.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fcc:	2301      	movs	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	e010      	b.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d902      	bls.n	8007fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007fd8:	2303      	movs	r3, #3
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e00a      	b.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d102      	bne.n	8007fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	613b      	str	r3, [r7, #16]
 8007fe8:	e004      	b.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b70      	cmp	r3, #112	; 0x70
 8007fee:	d101      	bne.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f023 0207 	bic.w	r2, r3, #7
 8007ffc:	4909      	ldr	r1, [pc, #36]	; (8008024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	429a      	cmp	r2, r3
 8008010:	d001      	beq.n	8008016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40021000 	.word	0x40021000
 8008024:	40022000 	.word	0x40022000

08008028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008030:	2300      	movs	r3, #0
 8008032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008034:	2300      	movs	r3, #0
 8008036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008040:	2b00      	cmp	r3, #0
 8008042:	d041      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800804c:	d02a      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800804e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008052:	d824      	bhi.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008058:	d008      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800805a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800805e:	d81e      	bhi.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008068:	d010      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800806a:	e018      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800806c:	4b86      	ldr	r3, [pc, #536]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	4a85      	ldr	r2, [pc, #532]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008078:	e015      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	2100      	movs	r1, #0
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f919 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800808a:	e00c      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3320      	adds	r3, #32
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fa04 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800809c:	e003      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	74fb      	strb	r3, [r7, #19]
      break;
 80080a2:	e000      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80080a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a6:	7cfb      	ldrb	r3, [r7, #19]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080ac:	4b76      	ldr	r3, [pc, #472]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ba:	4973      	ldr	r1, [pc, #460]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80080c2:	e001      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	7cfb      	ldrb	r3, [r7, #19]
 80080c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d041      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080dc:	d02a      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80080de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080e2:	d824      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80080e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e8:	d008      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80080ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ee:	d81e      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80080f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080f8:	d010      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80080fa:	e018      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080fc:	4b62      	ldr	r3, [pc, #392]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4a61      	ldr	r2, [pc, #388]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008108:	e015      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3304      	adds	r3, #4
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f8d1 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800811a:	e00c      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3320      	adds	r3, #32
 8008120:	2100      	movs	r1, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f001 f9bc 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800812c:	e003      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	74fb      	strb	r3, [r7, #19]
      break;
 8008132:	e000      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008136:	7cfb      	ldrb	r3, [r7, #19]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800813c:	4b52      	ldr	r3, [pc, #328]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800814a:	494f      	ldr	r1, [pc, #316]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008152:	e001      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008154:	7cfb      	ldrb	r3, [r7, #19]
 8008156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80a0 	beq.w	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008166:	2300      	movs	r3, #0
 8008168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800816a:	4b47      	ldr	r3, [pc, #284]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00d      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008180:	4b41      	ldr	r3, [pc, #260]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008184:	4a40      	ldr	r2, [pc, #256]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800818a:	6593      	str	r3, [r2, #88]	; 0x58
 800818c:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800818e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008198:	2301      	movs	r3, #1
 800819a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800819c:	4b3b      	ldr	r3, [pc, #236]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a3a      	ldr	r2, [pc, #232]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a8:	f7fb f994 	bl	80034d4 <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081ae:	e009      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b0:	f7fb f990 	bl	80034d4 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d902      	bls.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	74fb      	strb	r3, [r7, #19]
        break;
 80081c2:	e005      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081c4:	4b31      	ldr	r3, [pc, #196]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ef      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d15c      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081d6:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01f      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d019      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008200:	4b21      	ldr	r3, [pc, #132]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	4a20      	ldr	r2, [pc, #128]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008210:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800821c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008220:	4a19      	ldr	r2, [pc, #100]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d016      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fb f94f 	bl	80034d4 <HAL_GetTick>
 8008236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008238:	e00b      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800823a:	f7fb f94b 	bl	80034d4 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	f241 3288 	movw	r2, #5000	; 0x1388
 8008248:	4293      	cmp	r3, r2
 800824a:	d902      	bls.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	74fb      	strb	r3, [r7, #19]
            break;
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0ec      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008260:	7cfb      	ldrb	r3, [r7, #19]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10c      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008266:	4b08      	ldr	r3, [pc, #32]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008276:	4904      	ldr	r1, [pc, #16]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800827e:	e009      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008280:	7cfb      	ldrb	r3, [r7, #19]
 8008282:	74bb      	strb	r3, [r7, #18]
 8008284:	e006      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008286:	bf00      	nop
 8008288:	40021000 	.word	0x40021000
 800828c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008290:	7cfb      	ldrb	r3, [r7, #19]
 8008292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008294:	7c7b      	ldrb	r3, [r7, #17]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d105      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800829a:	4b9e      	ldr	r3, [pc, #632]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	4a9d      	ldr	r2, [pc, #628]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082b2:	4b98      	ldr	r3, [pc, #608]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b8:	f023 0203 	bic.w	r2, r3, #3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	4994      	ldr	r1, [pc, #592]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082d4:	4b8f      	ldr	r3, [pc, #572]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082da:	f023 020c 	bic.w	r2, r3, #12
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	498c      	ldr	r1, [pc, #560]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0304 	and.w	r3, r3, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082f6:	4b87      	ldr	r3, [pc, #540]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	4983      	ldr	r1, [pc, #524]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008318:	4b7e      	ldr	r3, [pc, #504]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	497b      	ldr	r1, [pc, #492]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008328:	4313      	orrs	r3, r2
 800832a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800833a:	4b76      	ldr	r3, [pc, #472]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800833c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	4972      	ldr	r1, [pc, #456]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800835c:	4b6d      	ldr	r3, [pc, #436]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	496a      	ldr	r1, [pc, #424]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800836c:	4313      	orrs	r3, r2
 800836e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800837e:	4b65      	ldr	r3, [pc, #404]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838c:	4961      	ldr	r1, [pc, #388]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800838e:	4313      	orrs	r3, r2
 8008390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083a0:	4b5c      	ldr	r3, [pc, #368]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ae:	4959      	ldr	r1, [pc, #356]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083c2:	4b54      	ldr	r3, [pc, #336]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	4950      	ldr	r1, [pc, #320]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083e4:	4b4b      	ldr	r3, [pc, #300]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f2:	4948      	ldr	r1, [pc, #288]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008406:	4b43      	ldr	r3, [pc, #268]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008414:	493f      	ldr	r1, [pc, #252]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d028      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008428:	4b3a      	ldr	r3, [pc, #232]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008436:	4937      	ldr	r1, [pc, #220]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008438:	4313      	orrs	r3, r2
 800843a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008448:	4b32      	ldr	r3, [pc, #200]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4a31      	ldr	r2, [pc, #196]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008452:	60d3      	str	r3, [r2, #12]
 8008454:	e011      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800845e:	d10c      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	2101      	movs	r1, #1
 8008466:	4618      	mov	r0, r3
 8008468:	f000 ff26 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008470:	7cfb      	ldrb	r3, [r7, #19]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008476:	7cfb      	ldrb	r3, [r7, #19]
 8008478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d028      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008494:	491f      	ldr	r1, [pc, #124]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084a6:	4b1b      	ldr	r3, [pc, #108]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	4a1a      	ldr	r2, [pc, #104]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b0:	60d3      	str	r3, [r2, #12]
 80084b2:	e011      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084bc:	d10c      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	2101      	movs	r1, #1
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fef7 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084ce:	7cfb      	ldrb	r3, [r7, #19]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
 80084d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d02b      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f2:	4908      	ldr	r1, [pc, #32]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008502:	d109      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4a02      	ldr	r2, [pc, #8]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800850e:	60d3      	str	r3, [r2, #12]
 8008510:	e014      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008512:	bf00      	nop
 8008514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008520:	d10c      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	2101      	movs	r1, #1
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fec5 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02f      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008548:	4b2b      	ldr	r3, [pc, #172]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008556:	4928      	ldr	r1, [pc, #160]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008566:	d10d      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	2102      	movs	r1, #2
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fea2 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008578:	7cfb      	ldrb	r3, [r7, #19]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d014      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800857e:	7cfb      	ldrb	r3, [r7, #19]
 8008580:	74bb      	strb	r3, [r7, #18]
 8008582:	e011      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858c:	d10c      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3320      	adds	r3, #32
 8008592:	2102      	movs	r1, #2
 8008594:	4618      	mov	r0, r3
 8008596:	f000 ff83 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800859e:	7cfb      	ldrb	r3, [r7, #19]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085a4:	7cfb      	ldrb	r3, [r7, #19]
 80085a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085b4:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c2:	490d      	ldr	r1, [pc, #52]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e6:	4904      	ldr	r1, [pc, #16]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80085ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40021000 	.word	0x40021000

080085fc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a73      	ldr	r2, [pc, #460]	; (80087d4 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 8008608:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800860a:	4b73      	ldr	r3, [pc, #460]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f003 0203 	and.w	r2, r3, #3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008616:	4b70      	ldr	r3, [pc, #448]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	091b      	lsrs	r3, r3, #4
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008626:	4b6c      	ldr	r3, [pc, #432]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8008634:	4b68      	ldr	r3, [pc, #416]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	0c5b      	lsrs	r3, r3, #17
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	1dda      	adds	r2, r3, #7
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8008646:	4b64      	ldr	r3, [pc, #400]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	0d5b      	lsrs	r3, r3, #21
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	3301      	adds	r3, #1
 8008652:	005a      	lsls	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008658:	4b5f      	ldr	r3, [pc, #380]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	0e5b      	lsrs	r3, r3, #25
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	3301      	adds	r3, #1
 8008664:	005a      	lsls	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800867a:	4b57      	ldr	r3, [pc, #348]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008688:	4b53      	ldr	r3, [pc, #332]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	0c5b      	lsrs	r3, r3, #17
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	1dda      	adds	r2, r3, #7
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800869a:	4b4f      	ldr	r3, [pc, #316]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	0e5b      	lsrs	r3, r3, #25
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	3301      	adds	r3, #1
 80086a6:	005a      	lsls	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 80086ac:	4b4a      	ldr	r3, [pc, #296]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b2:	f003 0203 	and.w	r2, r3, #3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 80086ba:	4b47      	ldr	r3, [pc, #284]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c0:	f003 020c 	and.w	r2, r3, #12
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 80086c8:	4b43      	ldr	r3, [pc, #268]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ce:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80086d6:	4b40      	ldr	r3, [pc, #256]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 80086e4:	4b3c      	ldr	r3, [pc, #240]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80086f2:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80086f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008700:	4b35      	ldr	r3, [pc, #212]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800870e:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008714:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800871c:	4b2e      	ldr	r3, [pc, #184]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800872a:	4b2b      	ldr	r3, [pc, #172]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008738:	4b27      	ldr	r3, [pc, #156]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800873a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8008746:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008754:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008772:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008778:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008780:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008786:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008794:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a2:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80087ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	000fffff 	.word	0x000fffff
 80087d8:	40021000 	.word	0x40021000

080087dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ee:	d13e      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80087f0:	4bb2      	ldr	r3, [pc, #712]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087fa:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008802:	d028      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800880a:	f200 8542 	bhi.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008814:	d005      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881c:	d00e      	beq.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800881e:	f000 bd38 	b.w	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008822:	4ba6      	ldr	r3, [pc, #664]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b02      	cmp	r3, #2
 800882e:	f040 8532 	bne.w	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	61fb      	str	r3, [r7, #28]
      break;
 8008838:	f000 bd2d 	b.w	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800883c:	4b9f      	ldr	r3, [pc, #636]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800883e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	f040 8527 	bne.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800884c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008850:	61fb      	str	r3, [r7, #28]
      break;
 8008852:	f000 bd22 	b.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008856:	4b99      	ldr	r3, [pc, #612]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008862:	f040 851c 	bne.w	800929e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8008866:	4b96      	ldr	r3, [pc, #600]	; (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008868:	61fb      	str	r3, [r7, #28]
      break;
 800886a:	f000 bd18 	b.w	800929e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800886e:	4b93      	ldr	r3, [pc, #588]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d036      	beq.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b03      	cmp	r3, #3
 8008882:	d840      	bhi.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d003      	beq.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d020      	beq.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008890:	e039      	b.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008892:	4b8a      	ldr	r3, [pc, #552]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b02      	cmp	r3, #2
 800889c:	d116      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800889e:	4b87      	ldr	r3, [pc, #540]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80088aa:	4b84      	ldr	r3, [pc, #528]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	091b      	lsrs	r3, r3, #4
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	e005      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80088b6:	4b81      	ldr	r3, [pc, #516]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088bc:	0a1b      	lsrs	r3, r3, #8
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	4a80      	ldr	r2, [pc, #512]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80088c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80088ca:	e01f      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
      break;
 80088d0:	e01c      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088d2:	4b7a      	ldr	r3, [pc, #488]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088de:	d102      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80088e2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80088e4:	e012      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
      break;
 80088ea:	e00f      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088ec:	4b73      	ldr	r3, [pc, #460]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f8:	d102      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80088fa:	4b74      	ldr	r3, [pc, #464]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80088fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80088fe:	e005      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	61bb      	str	r3, [r7, #24]
      break;
 8008904:	e002      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	61bb      	str	r3, [r7, #24]
      break;
 800890a:	bf00      	nop
    }

    switch(PeriphClk)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008912:	f000 80dd 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800891c:	f200 84c1 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008926:	f000 80d3 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008930:	f200 84b7 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893a:	f000 835f 	beq.w	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008944:	f200 84ad 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894e:	f000 847e 	beq.w	800924e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008958:	f200 84a3 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008962:	f000 82cd 	beq.w	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800896c:	f200 8499 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	f000 80ab 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008980:	f200 848f 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898a:	f000 8090 	beq.w	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	f200 8485 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899e:	d07f      	beq.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a6:	f200 847c 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b0:	f000 8403 	beq.w	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ba:	f200 8472 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c4:	f000 83af 	beq.w	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ce:	f200 8468 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d8:	f000 8379 	beq.w	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e2:	f200 845e 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	f000 8344 	beq.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b80      	cmp	r3, #128	; 0x80
 80089f2:	f200 8456 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	d84b      	bhi.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 844f 	beq.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	2b1f      	cmp	r3, #31
 8008a0a:	f200 844a 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008bfd 	.word	0x08008bfd
 8008a18:	08008c6b 	.word	0x08008c6b
 8008a1c:	080092a3 	.word	0x080092a3
 8008a20:	08008cff 	.word	0x08008cff
 8008a24:	080092a3 	.word	0x080092a3
 8008a28:	080092a3 	.word	0x080092a3
 8008a2c:	080092a3 	.word	0x080092a3
 8008a30:	08008d85 	.word	0x08008d85
 8008a34:	080092a3 	.word	0x080092a3
 8008a38:	080092a3 	.word	0x080092a3
 8008a3c:	080092a3 	.word	0x080092a3
 8008a40:	080092a3 	.word	0x080092a3
 8008a44:	080092a3 	.word	0x080092a3
 8008a48:	080092a3 	.word	0x080092a3
 8008a4c:	080092a3 	.word	0x080092a3
 8008a50:	08008dfd 	.word	0x08008dfd
 8008a54:	080092a3 	.word	0x080092a3
 8008a58:	080092a3 	.word	0x080092a3
 8008a5c:	080092a3 	.word	0x080092a3
 8008a60:	080092a3 	.word	0x080092a3
 8008a64:	080092a3 	.word	0x080092a3
 8008a68:	080092a3 	.word	0x080092a3
 8008a6c:	080092a3 	.word	0x080092a3
 8008a70:	080092a3 	.word	0x080092a3
 8008a74:	080092a3 	.word	0x080092a3
 8008a78:	080092a3 	.word	0x080092a3
 8008a7c:	080092a3 	.word	0x080092a3
 8008a80:	080092a3 	.word	0x080092a3
 8008a84:	080092a3 	.word	0x080092a3
 8008a88:	080092a3 	.word	0x080092a3
 8008a8c:	080092a3 	.word	0x080092a3
 8008a90:	08008e7f 	.word	0x08008e7f
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	f000 82c1 	beq.w	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008a9c:	f000 bc01 	b.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008aa0:	69b9      	ldr	r1, [r7, #24]
 8008aa2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008aa6:	f000 fdd9 	bl	800965c <RCCEx_GetSAIxPeriphCLKFreq>
 8008aaa:	61f8      	str	r0, [r7, #28]
      break;
 8008aac:	e3fa      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008aae:	69b9      	ldr	r1, [r7, #24]
 8008ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008ab4:	f000 fdd2 	bl	800965c <RCCEx_GetSAIxPeriphCLKFreq>
 8008ab8:	61f8      	str	r0, [r7, #28]
      break;
 8008aba:	e3f3      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008abc:	40021000 	.word	0x40021000
 8008ac0:	0003d090 	.word	0x0003d090
 8008ac4:	0800b1b0 	.word	0x0800b1b0
 8008ac8:	00f42400 	.word	0x00f42400
 8008acc:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008ad0:	4ba9      	ldr	r3, [pc, #676]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ae2:	d00c      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008aea:	d87f      	bhi.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008af2:	d04e      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008afa:	d01d      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8008afc:	e076      	b.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008afe:	4b9e      	ldr	r3, [pc, #632]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d172      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8008b16:	4b98      	ldr	r3, [pc, #608]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	e005      	b.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8008b22:	4b95      	ldr	r3, [pc, #596]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b28:	0a1b      	lsrs	r3, r3, #8
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	4a93      	ldr	r2, [pc, #588]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b34:	61fb      	str	r3, [r7, #28]
          break;
 8008b36:	e05b      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008b38:	4b8f      	ldr	r3, [pc, #572]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b44:	d156      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008b46:	4b8c      	ldr	r3, [pc, #560]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b52:	d14f      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b54:	4b88      	ldr	r3, [pc, #544]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	fb03 f202 	mul.w	r2, r3, r2
 8008b68:	4b83      	ldr	r3, [pc, #524]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	3301      	adds	r3, #1
 8008b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b78:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008b7a:	4b7f      	ldr	r3, [pc, #508]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	0d5b      	lsrs	r3, r3, #21
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	3301      	adds	r3, #1
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	61fb      	str	r3, [r7, #28]
          break;
 8008b90:	e030      	b.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008b92:	4b79      	ldr	r3, [pc, #484]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b9e:	d12b      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008ba0:	4b75      	ldr	r3, [pc, #468]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bac:	d124      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008bae:	4b72      	ldr	r3, [pc, #456]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	fb03 f202 	mul.w	r2, r3, r2
 8008bc2:	4b6d      	ldr	r3, [pc, #436]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	3301      	adds	r3, #1
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008bd4:	4b68      	ldr	r3, [pc, #416]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	0d5b      	lsrs	r3, r3, #21
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	3301      	adds	r3, #1
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be8:	61fb      	str	r3, [r7, #28]
          break;
 8008bea:	e005      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8008bec:	bf00      	nop
 8008bee:	e359      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008bf0:	bf00      	nop
 8008bf2:	e357      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008bf4:	bf00      	nop
 8008bf6:	e355      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008bf8:	bf00      	nop
        break;
 8008bfa:	e353      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008bfc:	4b5e      	ldr	r3, [pc, #376]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d827      	bhi.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c25 	.word	0x08008c25
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c49 	.word	0x08008c49
          frequency = HAL_RCC_GetPCLK2Freq();
 8008c24:	f7ff f98a 	bl	8007f3c <HAL_RCC_GetPCLK2Freq>
 8008c28:	61f8      	str	r0, [r7, #28]
          break;
 8008c2a:	e01d      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c2c:	f7ff f8d8 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008c30:	61f8      	str	r0, [r7, #28]
          break;
 8008c32:	e019      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c34:	4b50      	ldr	r3, [pc, #320]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c40:	d10f      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8008c42:	4b4f      	ldr	r3, [pc, #316]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008c44:	61fb      	str	r3, [r7, #28]
          break;
 8008c46:	e00c      	b.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c48:	4b4b      	ldr	r3, [pc, #300]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d107      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8008c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c5a:	61fb      	str	r3, [r7, #28]
          break;
 8008c5c:	e003      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8008c5e:	bf00      	nop
 8008c60:	e320      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008c62:	bf00      	nop
 8008c64:	e31e      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008c66:	bf00      	nop
        break;
 8008c68:	e31c      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008c6a:	4b43      	ldr	r3, [pc, #268]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c70:	f003 030c 	and.w	r3, r3, #12
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d83a      	bhi.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008cb9 	.word	0x08008cb9
 8008c88:	08008cf3 	.word	0x08008cf3
 8008c8c:	08008cf3 	.word	0x08008cf3
 8008c90:	08008cf3 	.word	0x08008cf3
 8008c94:	08008cc1 	.word	0x08008cc1
 8008c98:	08008cf3 	.word	0x08008cf3
 8008c9c:	08008cf3 	.word	0x08008cf3
 8008ca0:	08008cf3 	.word	0x08008cf3
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cf3 	.word	0x08008cf3
 8008cac:	08008cf3 	.word	0x08008cf3
 8008cb0:	08008cf3 	.word	0x08008cf3
 8008cb4:	08008cdd 	.word	0x08008cdd
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cb8:	f7ff f92a 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8008cbc:	61f8      	str	r0, [r7, #28]
          break;
 8008cbe:	e01d      	b.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cc0:	f7ff f88e 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008cc4:	61f8      	str	r0, [r7, #28]
          break;
 8008cc6:	e019      	b.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cc8:	4b2b      	ldr	r3, [pc, #172]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd4:	d10f      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008cd6:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008cd8:	61fb      	str	r3, [r7, #28]
          break;
 8008cda:	e00c      	b.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008cdc:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8008cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cee:	61fb      	str	r3, [r7, #28]
          break;
 8008cf0:	e003      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8008cf2:	bf00      	nop
 8008cf4:	e2d6      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008cf6:	bf00      	nop
 8008cf8:	e2d4      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008cfa:	bf00      	nop
        break;
 8008cfc:	e2d2      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	2b30      	cmp	r3, #48	; 0x30
 8008d0e:	d021      	beq.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b30      	cmp	r3, #48	; 0x30
 8008d14:	d829      	bhi.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	d011      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d823      	bhi.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b10      	cmp	r3, #16
 8008d2c:	d004      	beq.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8008d2e:	e01c      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d30:	f7ff f8ee 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8008d34:	61f8      	str	r0, [r7, #28]
          break;
 8008d36:	e01d      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d38:	f7ff f852 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008d3c:	61f8      	str	r0, [r7, #28]
          break;
 8008d3e:	e019      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4c:	d10f      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8008d4e:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008d50:	61fb      	str	r3, [r7, #28]
          break;
 8008d52:	e00c      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d54:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d107      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d66:	61fb      	str	r3, [r7, #28]
          break;
 8008d68:	e003      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8008d6a:	bf00      	nop
 8008d6c:	e29a      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008d6e:	bf00      	nop
 8008d70:	e298      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008d72:	bf00      	nop
        break;
 8008d74:	e296      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008d76:	bf00      	nop
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	0800b1b0 	.word	0x0800b1b0
 8008d80:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008d84:	4b9b      	ldr	r3, [pc, #620]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2bc0      	cmp	r3, #192	; 0xc0
 8008d94:	d021      	beq.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2bc0      	cmp	r3, #192	; 0xc0
 8008d9a:	d829      	bhi.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	d011      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b80      	cmp	r3, #128	; 0x80
 8008da6:	d823      	bhi.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b40      	cmp	r3, #64	; 0x40
 8008db2:	d004      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8008db4:	e01c      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008db6:	f7ff f8ab 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8008dba:	61f8      	str	r0, [r7, #28]
          break;
 8008dbc:	e01d      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dbe:	f7ff f80f 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008dc2:	61f8      	str	r0, [r7, #28]
          break;
 8008dc4:	e019      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008dc6:	4b8b      	ldr	r3, [pc, #556]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd2:	d10f      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8008dd4:	4b88      	ldr	r3, [pc, #544]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008dd6:	61fb      	str	r3, [r7, #28]
          break;
 8008dd8:	e00c      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dda:	4b86      	ldr	r3, [pc, #536]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d107      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8008de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dec:	61fb      	str	r3, [r7, #28]
          break;
 8008dee:	e003      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8008df0:	bf00      	nop
 8008df2:	e257      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008df4:	bf00      	nop
 8008df6:	e255      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008df8:	bf00      	nop
        break;
 8008dfa:	e253      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008dfc:	4b7d      	ldr	r3, [pc, #500]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e06:	613b      	str	r3, [r7, #16]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e0e:	d025      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e16:	d82c      	bhi.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e1e:	d013      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e26:	d824      	bhi.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e34:	d004      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8008e36:	e01c      	b.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e38:	f7ff f86a 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8008e3c:	61f8      	str	r0, [r7, #28]
          break;
 8008e3e:	e01d      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e40:	f7fe ffce 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008e44:	61f8      	str	r0, [r7, #28]
          break;
 8008e46:	e019      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e48:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e54:	d10f      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8008e56:	4b68      	ldr	r3, [pc, #416]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008e58:	61fb      	str	r3, [r7, #28]
          break;
 8008e5a:	e00c      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e5c:	4b65      	ldr	r3, [pc, #404]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d107      	bne.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8008e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6e:	61fb      	str	r3, [r7, #28]
          break;
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8008e72:	bf00      	nop
 8008e74:	e216      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008e76:	bf00      	nop
 8008e78:	e214      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008e7a:	bf00      	nop
        break;
 8008e7c:	e212      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e7e:	4b5d      	ldr	r3, [pc, #372]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e90:	d025      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e98:	d82c      	bhi.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea0:	d013      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea8:	d824      	bhi.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb6:	d004      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8008eb8:	e01c      	b.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7ff f829 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8008ebe:	61f8      	str	r0, [r7, #28]
          break;
 8008ec0:	e01d      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ec2:	f7fe ff8d 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008ec6:	61f8      	str	r0, [r7, #28]
          break;
 8008ec8:	e019      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eca:	4b4a      	ldr	r3, [pc, #296]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed6:	d10f      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008ed8:	4b47      	ldr	r3, [pc, #284]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008eda:	61fb      	str	r3, [r7, #28]
          break;
 8008edc:	e00c      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ede:	4b45      	ldr	r3, [pc, #276]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d107      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8008eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ef0:	61fb      	str	r3, [r7, #28]
          break;
 8008ef2:	e003      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008ef4:	bf00      	nop
 8008ef6:	e1d5      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008ef8:	bf00      	nop
 8008efa:	e1d3      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008efc:	bf00      	nop
        break;
 8008efe:	e1d1      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f00:	4b3c      	ldr	r3, [pc, #240]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f12:	d00c      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f1a:	d864      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f22:	d008      	beq.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2a:	d030      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8008f2c:	e05b      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f2e:	f7fe ff57 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8008f32:	61f8      	str	r0, [r7, #28]
          break;
 8008f34:	e05c      	b.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008f36:	4b2f      	ldr	r3, [pc, #188]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f42:	d152      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8008f44:	4b2b      	ldr	r3, [pc, #172]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d04c      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	fb03 f202 	mul.w	r2, r3, r2
 8008f64:	4b23      	ldr	r3, [pc, #140]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	f003 0307 	and.w	r3, r3, #7
 8008f6e:	3301      	adds	r3, #1
 8008f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f74:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008f76:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	0e5b      	lsrs	r3, r3, #25
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	3301      	adds	r3, #1
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8a:	61fb      	str	r3, [r7, #28]
          break;
 8008f8c:	e02d      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008f8e:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9a:	d128      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008f9c:	4b15      	ldr	r3, [pc, #84]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d022      	beq.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	fb03 f202 	mul.w	r2, r3, r2
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	091b      	lsrs	r3, r3, #4
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fcc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	0e5b      	lsrs	r3, r3, #25
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	3301      	adds	r3, #1
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe2:	61fb      	str	r3, [r7, #28]
          break;
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008fe6:	bf00      	nop
 8008fe8:	e15c      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008fea:	bf00      	nop
 8008fec:	e15a      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008fee:	bf00      	nop
        break;
 8008ff0:	e158      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008ff2:	bf00      	nop
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008ffc:	4b9d      	ldr	r3, [pc, #628]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009006:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800900e:	f7fe ff95 	bl	8007f3c <HAL_RCC_GetPCLK2Freq>
 8009012:	61f8      	str	r0, [r7, #28]
        break;
 8009014:	e146      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8009016:	f7fe fee3 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 800901a:	61f8      	str	r0, [r7, #28]
        break;
 800901c:	e142      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800901e:	4b95      	ldr	r3, [pc, #596]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009024:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009030:	d013      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009038:	d819      	bhi.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d004      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	d004      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8009048:	e011      	b.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fe ff61 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800904e:	61f8      	str	r0, [r7, #28]
          break;
 8009050:	e010      	b.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8009052:	f7fe fec5 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8009056:	61f8      	str	r0, [r7, #28]
          break;
 8009058:	e00c      	b.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800905a:	4b86      	ldr	r3, [pc, #536]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009066:	d104      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8009068:	4b83      	ldr	r3, [pc, #524]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800906a:	61fb      	str	r3, [r7, #28]
          break;
 800906c:	e001      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800906e:	bf00      	nop
 8009070:	e118      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009072:	bf00      	nop
        break;
 8009074:	e116      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009076:	4b7f      	ldr	r3, [pc, #508]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009088:	d013      	beq.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009090:	d819      	bhi.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800909e:	d004      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80090a0:	e011      	b.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090a2:	f7fe ff35 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 80090a6:	61f8      	str	r0, [r7, #28]
          break;
 80090a8:	e010      	b.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80090aa:	f7fe fe99 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 80090ae:	61f8      	str	r0, [r7, #28]
          break;
 80090b0:	e00c      	b.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090b2:	4b70      	ldr	r3, [pc, #448]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090be:	d104      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80090c0:	4b6d      	ldr	r3, [pc, #436]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80090c2:	61fb      	str	r3, [r7, #28]
          break;
 80090c4:	e001      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80090c6:	bf00      	nop
 80090c8:	e0ec      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090ca:	bf00      	nop
        break;
 80090cc:	e0ea      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090ce:	4b69      	ldr	r3, [pc, #420]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e0:	d013      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e8:	d819      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d004      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f6:	d004      	beq.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80090f8:	e011      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090fa:	f7fe ff09 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 80090fe:	61f8      	str	r0, [r7, #28]
          break;
 8009100:	e010      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8009102:	f7fe fe6d 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8009106:	61f8      	str	r0, [r7, #28]
          break;
 8009108:	e00c      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800910a:	4b5a      	ldr	r3, [pc, #360]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009116:	d104      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8009118:	4b57      	ldr	r3, [pc, #348]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800911a:	61fb      	str	r3, [r7, #28]
          break;
 800911c:	e001      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800911e:	bf00      	nop
 8009120:	e0c0      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009122:	bf00      	nop
        break;
 8009124:	e0be      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009126:	4b53      	ldr	r3, [pc, #332]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009138:	d02c      	beq.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009140:	d833      	bhi.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009148:	d01a      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009150:	d82b      	bhi.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800915e:	d004      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8009160:	e023      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009162:	f7fe fed5 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8009166:	61f8      	str	r0, [r7, #28]
          break;
 8009168:	e026      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800916a:	4b42      	ldr	r3, [pc, #264]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800916c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b02      	cmp	r3, #2
 8009176:	d11a      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8009178:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800917c:	61fb      	str	r3, [r7, #28]
          break;
 800917e:	e016      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009180:	4b3c      	ldr	r3, [pc, #240]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918c:	d111      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800918e:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009190:	61fb      	str	r3, [r7, #28]
          break;
 8009192:	e00e      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009194:	4b37      	ldr	r3, [pc, #220]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d109      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80091a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a6:	61fb      	str	r3, [r7, #28]
          break;
 80091a8:	e005      	b.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80091aa:	bf00      	nop
 80091ac:	e07a      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091ae:	bf00      	nop
 80091b0:	e078      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091b2:	bf00      	nop
 80091b4:	e076      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091b6:	bf00      	nop
        break;
 80091b8:	e074      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80091bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091cc:	d02c      	beq.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091d4:	d833      	bhi.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091dc:	d01a      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091e4:	d82b      	bhi.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091f2:	d004      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80091f4:	e023      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091f6:	f7fe fe8b 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 80091fa:	61f8      	str	r0, [r7, #28]
          break;
 80091fc:	e026      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d11a      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800920c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009210:	61fb      	str	r3, [r7, #28]
          break;
 8009212:	e016      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009214:	4b17      	ldr	r3, [pc, #92]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800921c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009220:	d111      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009224:	61fb      	str	r3, [r7, #28]
          break;
 8009226:	e00e      	b.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009228:	4b12      	ldr	r3, [pc, #72]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800922a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b02      	cmp	r3, #2
 8009234:	d109      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8009236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800923a:	61fb      	str	r3, [r7, #28]
          break;
 800923c:	e005      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800923e:	bf00      	nop
 8009240:	e030      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009242:	bf00      	nop
 8009244:	e02e      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009246:	bf00      	nop
 8009248:	e02c      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800924a:	bf00      	nop
        break;
 800924c:	e02a      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009266:	d009      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8009268:	e012      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800926a:	f7fe fe51 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800926e:	61f8      	str	r0, [r7, #28]
          break;
 8009270:	e00e      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8009272:	bf00      	nop
 8009274:	40021000 	.word	0x40021000
 8009278:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009288:	d101      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800928c:	61fb      	str	r3, [r7, #28]
          break;
 800928e:	bf00      	nop
        break;
 8009290:	e008      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009292:	bf00      	nop
 8009294:	e006      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009296:	bf00      	nop
 8009298:	e004      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800929a:	bf00      	nop
 800929c:	e002      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800929e:	bf00      	nop
 80092a0:	e000      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80092a2:	bf00      	nop
    }
  }

  return(frequency);
 80092a4:	69fb      	ldr	r3, [r7, #28]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	40021000 	.word	0x40021000
 80092b4:	00f42400 	.word	0x00f42400

080092b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092c6:	4b75      	ldr	r3, [pc, #468]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d018      	beq.n	8009304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80092d2:	4b72      	ldr	r3, [pc, #456]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0203 	and.w	r2, r3, #3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d10d      	bne.n	80092fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
       ||
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80092ea:	4b6c      	ldr	r3, [pc, #432]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	091b      	lsrs	r3, r3, #4
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
       ||
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d047      	beq.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	e044      	b.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b03      	cmp	r3, #3
 800930a:	d018      	beq.n	800933e <RCCEx_PLLSAI1_Config+0x86>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d825      	bhi.n	800935c <RCCEx_PLLSAI1_Config+0xa4>
 8009310:	2b01      	cmp	r3, #1
 8009312:	d002      	beq.n	800931a <RCCEx_PLLSAI1_Config+0x62>
 8009314:	2b02      	cmp	r3, #2
 8009316:	d009      	beq.n	800932c <RCCEx_PLLSAI1_Config+0x74>
 8009318:	e020      	b.n	800935c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800931a:	4b60      	ldr	r3, [pc, #384]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d11d      	bne.n	8009362 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800932a:	e01a      	b.n	8009362 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800932c:	4b5b      	ldr	r3, [pc, #364]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009334:	2b00      	cmp	r3, #0
 8009336:	d116      	bne.n	8009366 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800933c:	e013      	b.n	8009366 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800933e:	4b57      	ldr	r3, [pc, #348]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10f      	bne.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800934a:	4b54      	ldr	r3, [pc, #336]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800935a:	e006      	b.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]
      break;
 8009360:	e004      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009362:	bf00      	nop
 8009364:	e002      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800936a:	bf00      	nop
    }

    if(status == HAL_OK)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10d      	bne.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009372:	4b4a      	ldr	r3, [pc, #296]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6819      	ldr	r1, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	3b01      	subs	r3, #1
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	430b      	orrs	r3, r1
 8009388:	4944      	ldr	r1, [pc, #272]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800938a:	4313      	orrs	r3, r2
 800938c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d17d      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009394:	4b41      	ldr	r3, [pc, #260]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a40      	ldr	r2, [pc, #256]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800939a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800939e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a0:	f7fa f898 	bl	80034d4 <HAL_GetTick>
 80093a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093a6:	e009      	b.n	80093bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093a8:	f7fa f894 	bl	80034d4 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d902      	bls.n	80093bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	73fb      	strb	r3, [r7, #15]
        break;
 80093ba:	e005      	b.n	80093c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093bc:	4b37      	ldr	r3, [pc, #220]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ef      	bne.n	80093a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d160      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d111      	bne.n	80093f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093d4:	4b31      	ldr	r3, [pc, #196]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6892      	ldr	r2, [r2, #8]
 80093e4:	0211      	lsls	r1, r2, #8
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68d2      	ldr	r2, [r2, #12]
 80093ea:	0912      	lsrs	r2, r2, #4
 80093ec:	0452      	lsls	r2, r2, #17
 80093ee:	430a      	orrs	r2, r1
 80093f0:	492a      	ldr	r1, [pc, #168]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	610b      	str	r3, [r1, #16]
 80093f6:	e027      	b.n	8009448 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d112      	bne.n	8009424 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093fe:	4b27      	ldr	r3, [pc, #156]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009406:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	6892      	ldr	r2, [r2, #8]
 800940e:	0211      	lsls	r1, r2, #8
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6912      	ldr	r2, [r2, #16]
 8009414:	0852      	lsrs	r2, r2, #1
 8009416:	3a01      	subs	r2, #1
 8009418:	0552      	lsls	r2, r2, #21
 800941a:	430a      	orrs	r2, r1
 800941c:	491f      	ldr	r1, [pc, #124]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800941e:	4313      	orrs	r3, r2
 8009420:	610b      	str	r3, [r1, #16]
 8009422:	e011      	b.n	8009448 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800942c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6892      	ldr	r2, [r2, #8]
 8009434:	0211      	lsls	r1, r2, #8
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6952      	ldr	r2, [r2, #20]
 800943a:	0852      	lsrs	r2, r2, #1
 800943c:	3a01      	subs	r2, #1
 800943e:	0652      	lsls	r2, r2, #25
 8009440:	430a      	orrs	r2, r1
 8009442:	4916      	ldr	r1, [pc, #88]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009444:	4313      	orrs	r3, r2
 8009446:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009448:	4b14      	ldr	r3, [pc, #80]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a13      	ldr	r2, [pc, #76]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800944e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009454:	f7fa f83e 	bl	80034d4 <HAL_GetTick>
 8009458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800945a:	e009      	b.n	8009470 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800945c:	f7fa f83a 	bl	80034d4 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d902      	bls.n	8009470 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
          break;
 800946e:	e005      	b.n	800947c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0ef      	beq.n	800945c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009482:	4b06      	ldr	r3, [pc, #24]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	4904      	ldr	r1, [pc, #16]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800948c:	4313      	orrs	r3, r2
 800948e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40021000 	.word	0x40021000

080094a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094ae:	4b6a      	ldr	r3, [pc, #424]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d018      	beq.n	80094ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80094ba:	4b67      	ldr	r3, [pc, #412]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f003 0203 	and.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d10d      	bne.n	80094e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
       ||
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80094d2:	4b61      	ldr	r3, [pc, #388]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
       ||
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d047      	beq.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
 80094ea:	e044      	b.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d018      	beq.n	8009526 <RCCEx_PLLSAI2_Config+0x86>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d825      	bhi.n	8009544 <RCCEx_PLLSAI2_Config+0xa4>
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d002      	beq.n	8009502 <RCCEx_PLLSAI2_Config+0x62>
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d009      	beq.n	8009514 <RCCEx_PLLSAI2_Config+0x74>
 8009500:	e020      	b.n	8009544 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009502:	4b55      	ldr	r3, [pc, #340]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d11d      	bne.n	800954a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009512:	e01a      	b.n	800954a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009514:	4b50      	ldr	r3, [pc, #320]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800951c:	2b00      	cmp	r3, #0
 800951e:	d116      	bne.n	800954e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009524:	e013      	b.n	800954e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009526:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10f      	bne.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009532:	4b49      	ldr	r3, [pc, #292]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009542:	e006      	b.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
      break;
 8009548:	e004      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009552:	bf00      	nop
    }

    if(status == HAL_OK)
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10d      	bne.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800955a:	4b3f      	ldr	r3, [pc, #252]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6819      	ldr	r1, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	3b01      	subs	r3, #1
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	430b      	orrs	r3, r1
 8009570:	4939      	ldr	r1, [pc, #228]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009572:	4313      	orrs	r3, r2
 8009574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d167      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800957c:	4b36      	ldr	r3, [pc, #216]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a35      	ldr	r2, [pc, #212]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009588:	f7f9 ffa4 	bl	80034d4 <HAL_GetTick>
 800958c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800958e:	e009      	b.n	80095a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009590:	f7f9 ffa0 	bl	80034d4 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d902      	bls.n	80095a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	73fb      	strb	r3, [r7, #15]
        break;
 80095a2:	e005      	b.n	80095b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095a4:	4b2c      	ldr	r3, [pc, #176]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1ef      	bne.n	8009590 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d14a      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d111      	bne.n	80095e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095bc:	4b26      	ldr	r3, [pc, #152]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80095c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6892      	ldr	r2, [r2, #8]
 80095cc:	0211      	lsls	r1, r2, #8
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	68d2      	ldr	r2, [r2, #12]
 80095d2:	0912      	lsrs	r2, r2, #4
 80095d4:	0452      	lsls	r2, r2, #17
 80095d6:	430a      	orrs	r2, r1
 80095d8:	491f      	ldr	r1, [pc, #124]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	614b      	str	r3, [r1, #20]
 80095de:	e011      	b.n	8009604 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095e0:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6892      	ldr	r2, [r2, #8]
 80095f0:	0211      	lsls	r1, r2, #8
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6912      	ldr	r2, [r2, #16]
 80095f6:	0852      	lsrs	r2, r2, #1
 80095f8:	3a01      	subs	r2, #1
 80095fa:	0652      	lsls	r2, r2, #25
 80095fc:	430a      	orrs	r2, r1
 80095fe:	4916      	ldr	r1, [pc, #88]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009600:	4313      	orrs	r3, r2
 8009602:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009604:	4b14      	ldr	r3, [pc, #80]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800960a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800960e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009610:	f7f9 ff60 	bl	80034d4 <HAL_GetTick>
 8009614:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009616:	e009      	b.n	800962c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009618:	f7f9 ff5c 	bl	80034d4 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d902      	bls.n	800962c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	73fb      	strb	r3, [r7, #15]
          break;
 800962a:	e005      	b.n	8009638 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0ef      	beq.n	8009618 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009640:	695a      	ldr	r2, [r3, #20]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	4904      	ldr	r1, [pc, #16]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009648:	4313      	orrs	r3, r2
 800964a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000

0800965c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800965c:	b480      	push	{r7}
 800965e:	b089      	sub	sp, #36	; 0x24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009678:	d10c      	bne.n	8009694 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800967a:	4b6e      	ldr	r3, [pc, #440]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009684:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800968c:	d112      	bne.n	80096b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800968e:	4b6a      	ldr	r3, [pc, #424]	; (8009838 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	e00f      	b.n	80096b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d10b      	bne.n	80096b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800969c:	4b65      	ldr	r3, [pc, #404]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80096a6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096ae:	d101      	bne.n	80096b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80096b0:	4b61      	ldr	r3, [pc, #388]	; (8009838 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80096b2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80b4 	bne.w	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096c6:	d003      	beq.n	80096d0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096ce:	d135      	bne.n	800973c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80096d0:	4b58      	ldr	r3, [pc, #352]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096dc:	f040 80a1 	bne.w	8009822 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80096e0:	4b54      	ldr	r3, [pc, #336]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 809a 	beq.w	8009822 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80096ee:	4b51      	ldr	r3, [pc, #324]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	091b      	lsrs	r3, r3, #4
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	3301      	adds	r3, #1
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009702:	4b4c      	ldr	r3, [pc, #304]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	0a1b      	lsrs	r3, r3, #8
 8009708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009714:	4b47      	ldr	r3, [pc, #284]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009720:	2311      	movs	r3, #17
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e001      	b.n	800972a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8009726:	2307      	movs	r3, #7
 8009728:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	fb03 f202 	mul.w	r2, r3, r2
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	fbb2 f3f3 	udiv	r3, r2, r3
 8009738:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800973a:	e072      	b.n	8009822 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d133      	bne.n	80097aa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009742:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800974a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800974e:	d169      	bne.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009750:	4b38      	ldr	r3, [pc, #224]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d063      	beq.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800975c:	4b35      	ldr	r3, [pc, #212]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	091b      	lsrs	r3, r3, #4
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	3301      	adds	r3, #1
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	fbb2 f3f3 	udiv	r3, r2, r3
 800976e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009770:	4b30      	ldr	r3, [pc, #192]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	0a1b      	lsrs	r3, r3, #8
 8009776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009782:	4b2c      	ldr	r3, [pc, #176]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800978e:	2311      	movs	r3, #17
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e001      	b.n	8009798 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009794:	2307      	movs	r3, #7
 8009796:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	fb03 f202 	mul.w	r2, r3, r2
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	e03c      	b.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097b0:	d003      	beq.n	80097ba <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097b8:	d134      	bne.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80097ba:	4b1e      	ldr	r3, [pc, #120]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c6:	d12d      	bne.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80097c8:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d027      	beq.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80097d4:	4b17      	ldr	r3, [pc, #92]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	091b      	lsrs	r3, r3, #4
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	3301      	adds	r3, #1
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80097e8:	4b12      	ldr	r3, [pc, #72]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8009806:	2311      	movs	r3, #17
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e001      	b.n	8009810 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800980c:	2307      	movs	r3, #7
 800980e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	fb03 f202 	mul.w	r2, r3, r2
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	fbb2 f3f3 	udiv	r3, r2, r3
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	e000      	b.n	8009824 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009822:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009824:	69fb      	ldr	r3, [r7, #28]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3724      	adds	r7, #36	; 0x24
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	40021000 	.word	0x40021000
 8009838:	001fff68 	.word	0x001fff68

0800983c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d06c      	beq.n	8009928 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7f7 fc40 	bl	80010e8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	22ca      	movs	r2, #202	; 0xca
 8009876:	625a      	str	r2, [r3, #36]	; 0x24
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2253      	movs	r2, #83	; 0x53
 800987e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f87c 	bl	800997e <RTC_EnterInitMode>
 8009886:	4603      	mov	r3, r0
 8009888:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d14b      	bne.n	8009928 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800989e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6899      	ldr	r1, [r3, #8]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68d2      	ldr	r2, [r2, #12]
 80098ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6919      	ldr	r1, [r3, #16]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	041a      	lsls	r2, r3, #16
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f87f 	bl	80099e4 <RTC_ExitInitMode>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11b      	bne.n	8009928 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0203 	bic.w	r2, r2, #3
 80098fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69da      	ldr	r2, [r3, #28]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	22ff      	movs	r2, #255	; 0xff
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009948:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800994a:	f7f9 fdc3 	bl	80034d4 <HAL_GetTick>
 800994e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009950:	e009      	b.n	8009966 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009952:	f7f9 fdbf 	bl	80034d4 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009960:	d901      	bls.n	8009966 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e007      	b.n	8009976 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0ee      	beq.n	8009952 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d120      	bne.n	80099da <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099a2:	f7f9 fd97 	bl	80034d4 <HAL_GetTick>
 80099a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099a8:	e00d      	b.n	80099c6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099aa:	f7f9 fd93 	bl	80034d4 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099b8:	d905      	bls.n	80099c6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2203      	movs	r2, #3
 80099c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <RTC_EnterInitMode+0x5c>
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d1e7      	bne.n	80099aa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80099f0:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <RTC_ExitInitMode+0x78>)
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <RTC_ExitInitMode+0x78>)
 80099f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099fa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80099fc:	4b17      	ldr	r3, [pc, #92]	; (8009a5c <RTC_ExitInitMode+0x78>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10c      	bne.n	8009a22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff92 	bl	8009932 <HAL_RTC_WaitForSynchro>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01e      	beq.n	8009a52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2203      	movs	r2, #3
 8009a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	73fb      	strb	r3, [r7, #15]
 8009a20:	e017      	b.n	8009a52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a22:	4b0e      	ldr	r3, [pc, #56]	; (8009a5c <RTC_ExitInitMode+0x78>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <RTC_ExitInitMode+0x78>)
 8009a28:	f023 0320 	bic.w	r3, r3, #32
 8009a2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff ff7f 	bl	8009932 <HAL_RTC_WaitForSynchro>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2203      	movs	r2, #3
 8009a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <RTC_ExitInitMode+0x78>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <RTC_ExitInitMode+0x78>)
 8009a4c:	f043 0320 	orr.w	r3, r3, #32
 8009a50:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40002800 	.word	0x40002800

08009a60 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d904      	bls.n	8009a7e <HAL_SAI_InitProtocol+0x1e>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	3b03      	subs	r3, #3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d812      	bhi.n	8009aa2 <HAL_SAI_InitProtocol+0x42>
 8009a7c:	e008      	b.n	8009a90 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fc49 	bl	800a31c <SAI_InitI2S>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8e:	e00b      	b.n	8009aa8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fcf2 	bl	800a480 <SAI_InitPCM>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa0:	e002      	b.n	8009aa8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa6:	bf00      	nop
  }

  if (status == HAL_OK)
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f808 	bl	8009ac4 <HAL_SAI_Init>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e155      	b.n	8009d82 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7f7 fb8c 	bl	8001208 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fd7f 	bl	800a5f4 <SAI_Disable>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e140      	b.n	8009d82 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d00c      	beq.n	8009b2a <HAL_SAI_Init+0x66>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d80d      	bhi.n	8009b30 <HAL_SAI_Init+0x6c>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <HAL_SAI_Init+0x5a>
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d003      	beq.n	8009b24 <HAL_SAI_Init+0x60>
 8009b1c:	e008      	b.n	8009b30 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61fb      	str	r3, [r7, #28]
      break;
 8009b22:	e008      	b.n	8009b36 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009b24:	2310      	movs	r3, #16
 8009b26:	61fb      	str	r3, [r7, #28]
      break;
 8009b28:	e005      	b.n	8009b36 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009b2a:	2320      	movs	r3, #32
 8009b2c:	61fb      	str	r3, [r7, #28]
      break;
 8009b2e:	e002      	b.n	8009b36 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61fb      	str	r3, [r7, #28]
      break;
 8009b34:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d81d      	bhi.n	8009b7a <HAL_SAI_Init+0xb6>
 8009b3e:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <HAL_SAI_Init+0x80>)
 8009b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b5b 	.word	0x08009b5b
 8009b4c:	08009b63 	.word	0x08009b63
 8009b50:	08009b6b 	.word	0x08009b6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]
      break;
 8009b58:	e012      	b.n	8009b80 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b5e:	617b      	str	r3, [r7, #20]
      break;
 8009b60:	e00e      	b.n	8009b80 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b66:	617b      	str	r3, [r7, #20]
      break;
 8009b68:	e00a      	b.n	8009b80 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b6e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	f043 0301 	orr.w	r3, r3, #1
 8009b76:	61fb      	str	r3, [r7, #28]
      break;
 8009b78:	e002      	b.n	8009b80 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
      break;
 8009b7e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a81      	ldr	r2, [pc, #516]	; (8009d8c <HAL_SAI_Init+0x2c8>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d004      	beq.n	8009b94 <HAL_SAI_Init+0xd0>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a80      	ldr	r2, [pc, #512]	; (8009d90 <HAL_SAI_Init+0x2cc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d103      	bne.n	8009b9c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8009b94:	4a7f      	ldr	r2, [pc, #508]	; (8009d94 <HAL_SAI_Init+0x2d0>)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e002      	b.n	8009ba2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009b9c:	4a7e      	ldr	r2, [pc, #504]	; (8009d98 <HAL_SAI_Init+0x2d4>)
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d041      	beq.n	8009c2e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a77      	ldr	r2, [pc, #476]	; (8009d8c <HAL_SAI_Init+0x2c8>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_SAI_Init+0xfa>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a75      	ldr	r2, [pc, #468]	; (8009d90 <HAL_SAI_Init+0x2cc>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d105      	bne.n	8009bca <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009bbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009bc2:	f7fe fe0b 	bl	80087dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009bc6:	6138      	str	r0, [r7, #16]
 8009bc8:	e004      	b.n	8009bd4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009bca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009bce:	f7fe fe05 	bl	80087dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009bd2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	461a      	mov	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	025b      	lsls	r3, r3, #9
 8009be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bea:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4a6b      	ldr	r2, [pc, #428]	; (8009d9c <HAL_SAI_Init+0x2d8>)
 8009bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf4:	08da      	lsrs	r2, r3, #3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	4b67      	ldr	r3, [pc, #412]	; (8009d9c <HAL_SAI_Init+0x2d8>)
 8009bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8009c02:	08da      	lsrs	r2, r3, #3
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	1aca      	subs	r2, r1, r3
 8009c0e:	2a08      	cmp	r2, #8
 8009c10:	d904      	bls.n	8009c1c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d104      	bne.n	8009c2e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	085a      	lsrs	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_SAI_Init+0x17a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d109      	bne.n	8009c52 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d101      	bne.n	8009c4a <HAL_SAI_Init+0x186>
 8009c46:	2300      	movs	r3, #0
 8009c48:	e001      	b.n	8009c4e <HAL_SAI_Init+0x18a>
 8009c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c4e:	61bb      	str	r3, [r7, #24]
 8009c50:	e008      	b.n	8009c64 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d102      	bne.n	8009c60 <HAL_SAI_Init+0x19c>
 8009c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c5e:	e000      	b.n	8009c62 <HAL_SAI_Init+0x19e>
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6819      	ldr	r1, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b4c      	ldr	r3, [pc, #304]	; (8009da0 <HAL_SAI_Init+0x2dc>)
 8009c70:	400b      	ands	r3, r1
 8009c72:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6819      	ldr	r1, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009c88:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8009c9c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ca8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	051b      	lsls	r3, r3, #20
 8009cb0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cc8:	f023 030f 	bic.w	r3, r3, #15
 8009ccc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6859      	ldr	r1, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6899      	ldr	r1, [r3, #8]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4b2b      	ldr	r3, [pc, #172]	; (8009da4 <HAL_SAI_Init+0x2e0>)
 8009cf8:	400b      	ands	r3, r1
 8009cfa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6899      	ldr	r1, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009d0c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009d12:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009d18:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009d22:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68d9      	ldr	r1, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009d3a:	400b      	ands	r3, r1
 8009d3c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68d9      	ldr	r1, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d52:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d54:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	40015404 	.word	0x40015404
 8009d90:	40015424 	.word	0x40015424
 8009d94:	40015400 	.word	0x40015400
 8009d98:	40015800 	.word	0x40015800
 8009d9c:	cccccccd 	.word	0xcccccccd
 8009da0:	ff05c010 	.word	0xff05c010
 8009da4:	fff88000 	.word	0xfff88000

08009da8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d101      	bne.n	8009dc2 <HAL_SAI_Abort+0x1a>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e053      	b.n	8009e6a <HAL_SAI_Abort+0xc2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dd8:	d125      	bne.n	8009e26 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009de8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b12      	cmp	r3, #18
 8009df4:	d108      	bne.n	8009e08 <HAL_SAI_Abort+0x60>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fb f98e 	bl	8005124 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b22      	cmp	r3, #34	; 0x22
 8009e12:	d108      	bne.n	8009e26 <HAL_SAI_Abort+0x7e>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fb f97f 	bl	8005124 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbdb 	bl	800a5f4 <SAI_Disable>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0208 	orr.w	r2, r2, #8
 8009e56:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009e82:	f7f9 fb27 	bl	80034d4 <HAL_GetTick>
 8009e86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <HAL_SAI_Transmit_DMA+0x20>
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e093      	b.n	8009fc0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	f040 808c 	bne.w	8009fbe <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_SAI_Transmit_DMA+0x40>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e085      	b.n	8009fc0 <HAL_SAI_Transmit_DMA+0x14c>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	88fa      	ldrh	r2, [r7, #6]
 8009ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	88fa      	ldrh	r2, [r7, #6]
 8009ece:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2212      	movs	r2, #18
 8009ede:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee6:	4a38      	ldr	r2, [pc, #224]	; (8009fc8 <HAL_SAI_Transmit_DMA+0x154>)
 8009ee8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eee:	4a37      	ldr	r2, [pc, #220]	; (8009fcc <HAL_SAI_Transmit_DMA+0x158>)
 8009ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ef6:	4a36      	ldr	r2, [pc, #216]	; (8009fd0 <HAL_SAI_Transmit_DMA+0x15c>)
 8009ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009efe:	2200      	movs	r2, #0
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	331c      	adds	r3, #28
 8009f12:	461a      	mov	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f1a:	f7fb f8a3 	bl	8005064 <HAL_DMA_Start_IT>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d005      	beq.n	8009f30 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e047      	b.n	8009fc0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009f30:	2100      	movs	r1, #0
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb26 	bl	800a584 <SAI_InterruptFlag>
 8009f38:	4601      	mov	r1, r0
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	691a      	ldr	r2, [r3, #16]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f56:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009f58:	e015      	b.n	8009f86 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009f5a:	f7f9 fabb 	bl	80034d4 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f68:	d90d      	bls.n	8009f86 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e01c      	b.n	8009fc0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0e2      	beq.n	8009f5a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d107      	bne.n	8009fb2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009fb0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e000      	b.n	8009fc0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
  }
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	0800a6c7 	.word	0x0800a6c7
 8009fcc:	0800a669 	.word	0x0800a669
 8009fd0:	0800a6e3 	.word	0x0800a6e3

08009fd4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8192 	beq.w	800a30e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d009      	beq.n	800a020 <HAL_SAI_IRQHandler+0x4c>
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
 800a01e:	e176      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01e      	beq.n	800a068 <HAL_SAI_IRQHandler+0x94>
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d019      	beq.n	800a068 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2201      	movs	r2, #1
 800a03a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b22      	cmp	r3, #34	; 0x22
 800a046:	d101      	bne.n	800a04c <HAL_SAI_IRQHandler+0x78>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <HAL_SAI_IRQHandler+0x7a>
 800a04c:	2302      	movs	r3, #2
 800a04e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7f7 fff1 	bl	8002048 <HAL_SAI_ErrorCallback>
 800a066:	e152      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d011      	beq.n	800a096 <HAL_SAI_IRQHandler+0xc2>
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00c      	beq.n	800a096 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2202      	movs	r2, #2
 800a082:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8140 	beq.w	800a30e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a092:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a094:	e13b      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d055      	beq.n	800a14c <HAL_SAI_IRQHandler+0x178>
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d050      	beq.n	800a14c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b8:	f043 0204 	orr.w	r2, r3, #4
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d038      	beq.n	800a13e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d016      	beq.n	800a102 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d8:	4a8f      	ldr	r2, [pc, #572]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fb f85d 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00a      	beq.n	800a102 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7f7 ffa3 	bl	8002048 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80fc 	beq.w	800a304 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a110:	4a81      	ldr	r2, [pc, #516]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a112:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fb f841 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80ef 	beq.w	800a304 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a12c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f7 ff86 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a13c:	e0e2      	b.n	800a304 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff fe32 	bl	8009da8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7f7 ff7f 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a14a:	e0db      	b.n	800a304 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d055      	beq.n	800a202 <HAL_SAI_IRQHandler+0x22e>
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d050      	beq.n	800a202 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2240      	movs	r2, #64	; 0x40
 800a166:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a16e:	f043 0208 	orr.w	r2, r3, #8
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d038      	beq.n	800a1f4 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d016      	beq.n	800a1b8 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a18e:	4a62      	ldr	r2, [pc, #392]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a190:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a196:	4618      	mov	r0, r3
 800a198:	f7fb f802 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7f7 ff48 	bl	8002048 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 80a3 	beq.w	800a308 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a54      	ldr	r2, [pc, #336]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a1c8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fa ffe6 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8096 	beq.w	800a308 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7f7 ff2b 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a1f2:	e089      	b.n	800a308 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff fdd7 	bl	8009da8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7f7 ff24 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a200:	e082      	b.n	800a308 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d061      	beq.n	800a2d0 <HAL_SAI_IRQHandler+0x2fc>
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d05c      	beq.n	800a2d0 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2204      	movs	r2, #4
 800a21c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a224:	f043 0220 	orr.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d036      	beq.n	800a2a6 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d016      	beq.n	800a26e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a244:	4a34      	ldr	r2, [pc, #208]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a246:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fa ffa7 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a25e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7f7 feed 	bl	8002048 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	2b00      	cmp	r3, #0
 800a274:	d04a      	beq.n	800a30c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	4a27      	ldr	r2, [pc, #156]	; (800a318 <HAL_SAI_IRQHandler+0x344>)
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a282:	4618      	mov	r0, r3
 800a284:	f7fa ff8c 	bl	80051a0 <HAL_DMA_Abort_IT>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d03e      	beq.n	800a30c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7f7 fed2 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a2a4:	e032      	b.n	800a30c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b6:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7f7 febd 	bl	8002048 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a2ce:	e01d      	b.n	800a30c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d019      	beq.n	800a30e <HAL_SAI_IRQHandler+0x33a>
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d014      	beq.n	800a30e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2210      	movs	r2, #16
 800a2ea:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f2:	f043 0210 	orr.w	r2, r3, #16
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7f7 fea3 	bl	8002048 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a302:	e004      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a304:	bf00      	nop
 800a306:	e002      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a308:	bf00      	nop
 800a30a:	e000      	b.n	800a30e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a30c:	bf00      	nop
}
 800a30e:	bf00      	nop
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	0800a735 	.word	0x0800a735

0800a31c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <SAI_InitI2S+0x2e>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d103      	bne.n	800a352 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a350:	e002      	b.n	800a358 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a35e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a366:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e077      	b.n	800a472 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d107      	bne.n	800a398 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a394:	651a      	str	r2, [r3, #80]	; 0x50
 800a396:	e006      	b.n	800a3a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a39e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d84f      	bhi.n	800a44c <SAI_InitI2S+0x130>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <SAI_InitI2S+0x98>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3e7 	.word	0x0800a3e7
 800a3bc:	0800a409 	.word	0x0800a409
 800a3c0:	0800a42b 	.word	0x0800a42b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2280      	movs	r2, #128	; 0x80
 800a3c8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	085b      	lsrs	r3, r3, #1
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	011a      	lsls	r2, r3, #4
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2240      	movs	r2, #64	; 0x40
 800a3e2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a3e4:	e035      	b.n	800a452 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2280      	movs	r2, #128	; 0x80
 800a3ea:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	019a      	lsls	r2, r3, #6
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	085b      	lsrs	r3, r3, #1
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2280      	movs	r2, #128	; 0x80
 800a404:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a406:	e024      	b.n	800a452 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	22c0      	movs	r2, #192	; 0xc0
 800a40c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	085b      	lsrs	r3, r3, #1
 800a412:	019a      	lsls	r2, r3, #6
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2280      	movs	r2, #128	; 0x80
 800a426:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a428:	e013      	b.n	800a452 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	22e0      	movs	r2, #224	; 0xe0
 800a42e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	085b      	lsrs	r3, r3, #1
 800a434:	019a      	lsls	r2, r3, #6
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	085b      	lsrs	r3, r3, #1
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2280      	movs	r2, #128	; 0x80
 800a448:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a44a:	e002      	b.n	800a452 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
      break;
 800a450:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d10b      	bne.n	800a470 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d102      	bne.n	800a464 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2210      	movs	r2, #16
 800a462:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d102      	bne.n	800a470 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2208      	movs	r2, #8
 800a46e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
}
 800a472:	4618      	mov	r0, r3
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <SAI_InitPCM+0x2e>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d103      	bne.n	800a4b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4b4:	e002      	b.n	800a4bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a4c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a4d0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4e4:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d103      	bne.n	800a4f4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	645a      	str	r2, [r3, #68]	; 0x44
 800a4f2:	e002      	b.n	800a4fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	220d      	movs	r2, #13
 800a4f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d837      	bhi.n	800a570 <SAI_InitPCM+0xf0>
 800a500:	a201      	add	r2, pc, #4	; (adr r2, 800a508 <SAI_InitPCM+0x88>)
 800a502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a506:	bf00      	nop
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a52f 	.word	0x0800a52f
 800a510:	0800a545 	.word	0x0800a545
 800a514:	0800a55b 	.word	0x0800a55b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2280      	movs	r2, #128	; 0x80
 800a51c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	011a      	lsls	r2, r3, #4
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2240      	movs	r2, #64	; 0x40
 800a52a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a52c:	e023      	b.n	800a576 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2280      	movs	r2, #128	; 0x80
 800a532:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2280      	movs	r2, #128	; 0x80
 800a540:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a542:	e018      	b.n	800a576 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	22c0      	movs	r2, #192	; 0xc0
 800a548:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2280      	movs	r2, #128	; 0x80
 800a556:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a558:	e00d      	b.n	800a576 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	22e0      	movs	r2, #224	; 0xe0
 800a55e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2280      	movs	r2, #128	; 0x80
 800a56c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a56e:	e002      	b.n	800a576 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	75fb      	strb	r3, [r7, #23]
      break;
 800a574:	bf00      	nop
  }

  return status;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a590:	2301      	movs	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d103      	bne.n	800a5a2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f043 0308 	orr.w	r3, r3, #8
 800a5a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d10b      	bne.n	800a5c2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d003      	beq.n	800a5ba <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d103      	bne.n	800a5c2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f043 0310 	orr.w	r3, r3, #16
 800a5c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d003      	beq.n	800a5d2 <SAI_InterruptFlag+0x4e>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d104      	bne.n	800a5dc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e003      	b.n	800a5e4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f043 0304 	orr.w	r3, r3, #4
 800a5e2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a5fc:	4b18      	ldr	r3, [pc, #96]	; (800a660 <SAI_Disable+0x6c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a18      	ldr	r2, [pc, #96]	; (800a664 <SAI_Disable+0x70>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	0b1b      	lsrs	r3, r3, #12
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a61e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	72fb      	strb	r3, [r7, #11]
      break;
 800a63a:	e009      	b.n	800a650 <SAI_Disable+0x5c>
    }
    count--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3b01      	subs	r3, #1
 800a640:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e7      	bne.n	800a620 <SAI_Disable+0x2c>

  return status;
 800a650:	7afb      	ldrb	r3, [r7, #11]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000004 	.word	0x20000004
 800a664:	95cbec1b 	.word	0x95cbec1b

0800a668 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	d01c      	beq.n	800a6b8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a694:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a696:	2100      	movs	r1, #0
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff ff73 	bl	800a584 <SAI_InterruptFlag>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	43d9      	mvns	r1, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	691a      	ldr	r2, [r3, #16]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	400a      	ands	r2, r1
 800a6ae:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7f7 fca1 	bl	8002000 <HAL_SAI_TxCpltCallback>
#endif
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7f7 fca5 	bl	8002024 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a70e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff ff6f 	bl	800a5f4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7f7 fc8e 	bl	8002048 <HAL_SAI_ErrorCallback>
#endif
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a740:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a750:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2200      	movs	r2, #0
 800a758:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f04f 32ff 	mov.w	r2, #4294967295
 800a762:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d00a      	beq.n	800a784 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff ff40 	bl	800a5f4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0208 	orr.w	r2, r2, #8
 800a782:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7f7 fc57 	bl	8002048 <HAL_SAI_ErrorCallback>
#endif
}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e040      	b.n	800a836 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7f6 fcc1 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2224      	movs	r2, #36	; 0x24
 800a7ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0201 	bic.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f82d 	bl	800a840 <UART_SetConfig>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d101      	bne.n	800a7f0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e022      	b.n	800a836 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fad9 	bl	800adb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a80c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a81c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0201 	orr.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fb60 	bl	800aef4 <UART_CheckIdleState>
 800a834:	4603      	mov	r3, r0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a844:	b08a      	sub	sp, #40	; 0x28
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	431a      	orrs	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	431a      	orrs	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	4313      	orrs	r3, r2
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4ba4      	ldr	r3, [pc, #656]	; (800ab00 <UART_SetConfig+0x2c0>)
 800a870:	4013      	ands	r3, r2
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a878:	430b      	orrs	r3, r1
 800a87a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a99      	ldr	r2, [pc, #612]	; (800ab04 <UART_SetConfig+0x2c4>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d004      	beq.n	800a8ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a90      	ldr	r2, [pc, #576]	; (800ab08 <UART_SetConfig+0x2c8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d126      	bne.n	800a918 <UART_SetConfig+0xd8>
 800a8ca:	4b90      	ldr	r3, [pc, #576]	; (800ab0c <UART_SetConfig+0x2cc>)
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d0:	f003 0303 	and.w	r3, r3, #3
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d81b      	bhi.n	800a910 <UART_SetConfig+0xd0>
 800a8d8:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <UART_SetConfig+0xa0>)
 800a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8de:	bf00      	nop
 800a8e0:	0800a8f1 	.word	0x0800a8f1
 800a8e4:	0800a901 	.word	0x0800a901
 800a8e8:	0800a8f9 	.word	0x0800a8f9
 800a8ec:	0800a909 	.word	0x0800a909
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8f6:	e116      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8fe:	e112      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a900:	2304      	movs	r3, #4
 800a902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a906:	e10e      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a908:	2308      	movs	r3, #8
 800a90a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a90e:	e10a      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a910:	2310      	movs	r3, #16
 800a912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a916:	e106      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a7c      	ldr	r2, [pc, #496]	; (800ab10 <UART_SetConfig+0x2d0>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d138      	bne.n	800a994 <UART_SetConfig+0x154>
 800a922:	4b7a      	ldr	r3, [pc, #488]	; (800ab0c <UART_SetConfig+0x2cc>)
 800a924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a928:	f003 030c 	and.w	r3, r3, #12
 800a92c:	2b0c      	cmp	r3, #12
 800a92e:	d82d      	bhi.n	800a98c <UART_SetConfig+0x14c>
 800a930:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <UART_SetConfig+0xf8>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a96d 	.word	0x0800a96d
 800a93c:	0800a98d 	.word	0x0800a98d
 800a940:	0800a98d 	.word	0x0800a98d
 800a944:	0800a98d 	.word	0x0800a98d
 800a948:	0800a97d 	.word	0x0800a97d
 800a94c:	0800a98d 	.word	0x0800a98d
 800a950:	0800a98d 	.word	0x0800a98d
 800a954:	0800a98d 	.word	0x0800a98d
 800a958:	0800a975 	.word	0x0800a975
 800a95c:	0800a98d 	.word	0x0800a98d
 800a960:	0800a98d 	.word	0x0800a98d
 800a964:	0800a98d 	.word	0x0800a98d
 800a968:	0800a985 	.word	0x0800a985
 800a96c:	2300      	movs	r3, #0
 800a96e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a972:	e0d8      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a974:	2302      	movs	r3, #2
 800a976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a97a:	e0d4      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a982:	e0d0      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a98a:	e0cc      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a992:	e0c8      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a5e      	ldr	r2, [pc, #376]	; (800ab14 <UART_SetConfig+0x2d4>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d125      	bne.n	800a9ea <UART_SetConfig+0x1aa>
 800a99e:	4b5b      	ldr	r3, [pc, #364]	; (800ab0c <UART_SetConfig+0x2cc>)
 800a9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9a8:	2b30      	cmp	r3, #48	; 0x30
 800a9aa:	d016      	beq.n	800a9da <UART_SetConfig+0x19a>
 800a9ac:	2b30      	cmp	r3, #48	; 0x30
 800a9ae:	d818      	bhi.n	800a9e2 <UART_SetConfig+0x1a2>
 800a9b0:	2b20      	cmp	r3, #32
 800a9b2:	d00a      	beq.n	800a9ca <UART_SetConfig+0x18a>
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d814      	bhi.n	800a9e2 <UART_SetConfig+0x1a2>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <UART_SetConfig+0x182>
 800a9bc:	2b10      	cmp	r3, #16
 800a9be:	d008      	beq.n	800a9d2 <UART_SetConfig+0x192>
 800a9c0:	e00f      	b.n	800a9e2 <UART_SetConfig+0x1a2>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9c8:	e0ad      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9d0:	e0a9      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a9d2:	2304      	movs	r3, #4
 800a9d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9d8:	e0a5      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a9da:	2308      	movs	r3, #8
 800a9dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9e0:	e0a1      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a9e2:	2310      	movs	r3, #16
 800a9e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9e8:	e09d      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a4a      	ldr	r2, [pc, #296]	; (800ab18 <UART_SetConfig+0x2d8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d125      	bne.n	800aa40 <UART_SetConfig+0x200>
 800a9f4:	4b45      	ldr	r3, [pc, #276]	; (800ab0c <UART_SetConfig+0x2cc>)
 800a9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9fe:	2bc0      	cmp	r3, #192	; 0xc0
 800aa00:	d016      	beq.n	800aa30 <UART_SetConfig+0x1f0>
 800aa02:	2bc0      	cmp	r3, #192	; 0xc0
 800aa04:	d818      	bhi.n	800aa38 <UART_SetConfig+0x1f8>
 800aa06:	2b80      	cmp	r3, #128	; 0x80
 800aa08:	d00a      	beq.n	800aa20 <UART_SetConfig+0x1e0>
 800aa0a:	2b80      	cmp	r3, #128	; 0x80
 800aa0c:	d814      	bhi.n	800aa38 <UART_SetConfig+0x1f8>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <UART_SetConfig+0x1d8>
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	d008      	beq.n	800aa28 <UART_SetConfig+0x1e8>
 800aa16:	e00f      	b.n	800aa38 <UART_SetConfig+0x1f8>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa1e:	e082      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa20:	2302      	movs	r3, #2
 800aa22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa26:	e07e      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa28:	2304      	movs	r3, #4
 800aa2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa2e:	e07a      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa30:	2308      	movs	r3, #8
 800aa32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa36:	e076      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa38:	2310      	movs	r3, #16
 800aa3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa3e:	e072      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a35      	ldr	r2, [pc, #212]	; (800ab1c <UART_SetConfig+0x2dc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d12a      	bne.n	800aaa0 <UART_SetConfig+0x260>
 800aa4a:	4b30      	ldr	r3, [pc, #192]	; (800ab0c <UART_SetConfig+0x2cc>)
 800aa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa58:	d01a      	beq.n	800aa90 <UART_SetConfig+0x250>
 800aa5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa5e:	d81b      	bhi.n	800aa98 <UART_SetConfig+0x258>
 800aa60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa64:	d00c      	beq.n	800aa80 <UART_SetConfig+0x240>
 800aa66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6a:	d815      	bhi.n	800aa98 <UART_SetConfig+0x258>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <UART_SetConfig+0x238>
 800aa70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa74:	d008      	beq.n	800aa88 <UART_SetConfig+0x248>
 800aa76:	e00f      	b.n	800aa98 <UART_SetConfig+0x258>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa7e:	e052      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa80:	2302      	movs	r3, #2
 800aa82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa86:	e04e      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa8e:	e04a      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa90:	2308      	movs	r3, #8
 800aa92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa96:	e046      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa9e:	e042      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a17      	ldr	r2, [pc, #92]	; (800ab04 <UART_SetConfig+0x2c4>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d13a      	bne.n	800ab20 <UART_SetConfig+0x2e0>
 800aaaa:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <UART_SetConfig+0x2cc>)
 800aaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aab8:	d01a      	beq.n	800aaf0 <UART_SetConfig+0x2b0>
 800aaba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aabe:	d81b      	bhi.n	800aaf8 <UART_SetConfig+0x2b8>
 800aac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aac4:	d00c      	beq.n	800aae0 <UART_SetConfig+0x2a0>
 800aac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaca:	d815      	bhi.n	800aaf8 <UART_SetConfig+0x2b8>
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <UART_SetConfig+0x298>
 800aad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad4:	d008      	beq.n	800aae8 <UART_SetConfig+0x2a8>
 800aad6:	e00f      	b.n	800aaf8 <UART_SetConfig+0x2b8>
 800aad8:	2300      	movs	r3, #0
 800aada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aade:	e022      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aae0:	2302      	movs	r3, #2
 800aae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aae6:	e01e      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aae8:	2304      	movs	r3, #4
 800aaea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaee:	e01a      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaf6:	e016      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800aaf8:	2310      	movs	r3, #16
 800aafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aafe:	e012      	b.n	800ab26 <UART_SetConfig+0x2e6>
 800ab00:	efff69f3 	.word	0xefff69f3
 800ab04:	40008000 	.word	0x40008000
 800ab08:	40013800 	.word	0x40013800
 800ab0c:	40021000 	.word	0x40021000
 800ab10:	40004400 	.word	0x40004400
 800ab14:	40004800 	.word	0x40004800
 800ab18:	40004c00 	.word	0x40004c00
 800ab1c:	40005000 	.word	0x40005000
 800ab20:	2310      	movs	r3, #16
 800ab22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a9f      	ldr	r2, [pc, #636]	; (800ada8 <UART_SetConfig+0x568>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d17a      	bne.n	800ac26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d824      	bhi.n	800ab82 <UART_SetConfig+0x342>
 800ab38:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <UART_SetConfig+0x300>)
 800ab3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3e:	bf00      	nop
 800ab40:	0800ab65 	.word	0x0800ab65
 800ab44:	0800ab83 	.word	0x0800ab83
 800ab48:	0800ab6d 	.word	0x0800ab6d
 800ab4c:	0800ab83 	.word	0x0800ab83
 800ab50:	0800ab73 	.word	0x0800ab73
 800ab54:	0800ab83 	.word	0x0800ab83
 800ab58:	0800ab83 	.word	0x0800ab83
 800ab5c:	0800ab83 	.word	0x0800ab83
 800ab60:	0800ab7b 	.word	0x0800ab7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab64:	f7fd f9d4 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800ab68:	61f8      	str	r0, [r7, #28]
        break;
 800ab6a:	e010      	b.n	800ab8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab6c:	4b8f      	ldr	r3, [pc, #572]	; (800adac <UART_SetConfig+0x56c>)
 800ab6e:	61fb      	str	r3, [r7, #28]
        break;
 800ab70:	e00d      	b.n	800ab8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab72:	f7fd f935 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 800ab76:	61f8      	str	r0, [r7, #28]
        break;
 800ab78:	e009      	b.n	800ab8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab7e:	61fb      	str	r3, [r7, #28]
        break;
 800ab80:	e005      	b.n	800ab8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80fb 	beq.w	800ad8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4413      	add	r3, r2
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d305      	bcc.n	800abb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d903      	bls.n	800abba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800abb8:	e0e8      	b.n	800ad8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2200      	movs	r2, #0
 800abbe:	461c      	mov	r4, r3
 800abc0:	4615      	mov	r5, r2
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	022b      	lsls	r3, r5, #8
 800abcc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800abd0:	0222      	lsls	r2, r4, #8
 800abd2:	68f9      	ldr	r1, [r7, #12]
 800abd4:	6849      	ldr	r1, [r1, #4]
 800abd6:	0849      	lsrs	r1, r1, #1
 800abd8:	2000      	movs	r0, #0
 800abda:	4688      	mov	r8, r1
 800abdc:	4681      	mov	r9, r0
 800abde:	eb12 0a08 	adds.w	sl, r2, r8
 800abe2:	eb43 0b09 	adc.w	fp, r3, r9
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	603b      	str	r3, [r7, #0]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf4:	4650      	mov	r0, sl
 800abf6:	4659      	mov	r1, fp
 800abf8:	f7f5 fae6 	bl	80001c8 <__aeabi_uldivmod>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4613      	mov	r3, r2
 800ac02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0a:	d308      	bcc.n	800ac1e <UART_SetConfig+0x3de>
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac12:	d204      	bcs.n	800ac1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	e0b6      	b.n	800ad8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ac24:	e0b2      	b.n	800ad8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2e:	d15e      	bne.n	800acee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ac30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d828      	bhi.n	800ac8a <UART_SetConfig+0x44a>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <UART_SetConfig+0x400>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ac65 	.word	0x0800ac65
 800ac44:	0800ac6d 	.word	0x0800ac6d
 800ac48:	0800ac75 	.word	0x0800ac75
 800ac4c:	0800ac8b 	.word	0x0800ac8b
 800ac50:	0800ac7b 	.word	0x0800ac7b
 800ac54:	0800ac8b 	.word	0x0800ac8b
 800ac58:	0800ac8b 	.word	0x0800ac8b
 800ac5c:	0800ac8b 	.word	0x0800ac8b
 800ac60:	0800ac83 	.word	0x0800ac83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac64:	f7fd f954 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800ac68:	61f8      	str	r0, [r7, #28]
        break;
 800ac6a:	e014      	b.n	800ac96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac6c:	f7fd f966 	bl	8007f3c <HAL_RCC_GetPCLK2Freq>
 800ac70:	61f8      	str	r0, [r7, #28]
        break;
 800ac72:	e010      	b.n	800ac96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac74:	4b4d      	ldr	r3, [pc, #308]	; (800adac <UART_SetConfig+0x56c>)
 800ac76:	61fb      	str	r3, [r7, #28]
        break;
 800ac78:	e00d      	b.n	800ac96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac7a:	f7fd f8b1 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 800ac7e:	61f8      	str	r0, [r7, #28]
        break;
 800ac80:	e009      	b.n	800ac96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac86:	61fb      	str	r3, [r7, #28]
        break;
 800ac88:	e005      	b.n	800ac96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ac94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d077      	beq.n	800ad8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	005a      	lsls	r2, r3, #1
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	085b      	lsrs	r3, r3, #1
 800aca6:	441a      	add	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b0f      	cmp	r3, #15
 800acb6:	d916      	bls.n	800ace6 <UART_SetConfig+0x4a6>
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbe:	d212      	bcs.n	800ace6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f023 030f 	bic.w	r3, r3, #15
 800acc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	085b      	lsrs	r3, r3, #1
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	8afb      	ldrh	r3, [r7, #22]
 800acd8:	4313      	orrs	r3, r2
 800acda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	8afa      	ldrh	r2, [r7, #22]
 800ace2:	60da      	str	r2, [r3, #12]
 800ace4:	e052      	b.n	800ad8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800acec:	e04e      	b.n	800ad8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acf2:	2b08      	cmp	r3, #8
 800acf4:	d827      	bhi.n	800ad46 <UART_SetConfig+0x506>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <UART_SetConfig+0x4bc>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad29 	.word	0x0800ad29
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	0800ad47 	.word	0x0800ad47
 800ad0c:	0800ad37 	.word	0x0800ad37
 800ad10:	0800ad47 	.word	0x0800ad47
 800ad14:	0800ad47 	.word	0x0800ad47
 800ad18:	0800ad47 	.word	0x0800ad47
 800ad1c:	0800ad3f 	.word	0x0800ad3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad20:	f7fd f8f6 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800ad24:	61f8      	str	r0, [r7, #28]
        break;
 800ad26:	e014      	b.n	800ad52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad28:	f7fd f908 	bl	8007f3c <HAL_RCC_GetPCLK2Freq>
 800ad2c:	61f8      	str	r0, [r7, #28]
        break;
 800ad2e:	e010      	b.n	800ad52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad30:	4b1e      	ldr	r3, [pc, #120]	; (800adac <UART_SetConfig+0x56c>)
 800ad32:	61fb      	str	r3, [r7, #28]
        break;
 800ad34:	e00d      	b.n	800ad52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad36:	f7fd f853 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 800ad3a:	61f8      	str	r0, [r7, #28]
        break;
 800ad3c:	e009      	b.n	800ad52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad42:	61fb      	str	r3, [r7, #28]
        break;
 800ad44:	e005      	b.n	800ad52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ad50:	bf00      	nop
    }

    if (pclk != 0U)
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d019      	beq.n	800ad8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	085a      	lsrs	r2, r3, #1
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	441a      	add	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	2b0f      	cmp	r3, #15
 800ad70:	d909      	bls.n	800ad86 <UART_SetConfig+0x546>
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad78:	d205      	bcs.n	800ad86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60da      	str	r2, [r3, #12]
 800ad84:	e002      	b.n	800ad8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3728      	adds	r7, #40	; 0x28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ada6:	bf00      	nop
 800ada8:	40008000 	.word	0x40008000
 800adac:	00f42400 	.word	0x00f42400

0800adb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00a      	beq.n	800adda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00a      	beq.n	800ae1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01a      	beq.n	800aec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	430a      	orrs	r2, r1
 800aea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeae:	d10a      	bne.n	800aec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	605a      	str	r2, [r3, #4]
  }
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af04:	f7f8 fae6 	bl	80034d4 <HAL_GetTick>
 800af08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0308 	and.w	r3, r3, #8
 800af14:	2b08      	cmp	r3, #8
 800af16:	d10e      	bne.n	800af36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f82d 	bl	800af86 <UART_WaitOnFlagUntilTimeout>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e023      	b.n	800af7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0304 	and.w	r3, r3, #4
 800af40:	2b04      	cmp	r3, #4
 800af42:	d10e      	bne.n	800af62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f817 	bl	800af86 <UART_WaitOnFlagUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e00d      	b.n	800af7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2220      	movs	r2, #32
 800af6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b09c      	sub	sp, #112	; 0x70
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	603b      	str	r3, [r7, #0]
 800af92:	4613      	mov	r3, r2
 800af94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af96:	e0a5      	b.n	800b0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9e:	f000 80a1 	beq.w	800b0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afa2:	f7f8 fa97 	bl	80034d4 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800afae:	429a      	cmp	r2, r3
 800afb0:	d302      	bcc.n	800afb8 <UART_WaitOnFlagUntilTimeout+0x32>
 800afb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d13e      	bne.n	800b036 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800afc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afcc:	667b      	str	r3, [r7, #100]	; 0x64
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800afe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e6      	bne.n	800afb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	663b      	str	r3, [r7, #96]	; 0x60
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b00a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b00c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e5      	bne.n	800afea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2220      	movs	r2, #32
 800b022:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2220      	movs	r2, #32
 800b028:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e067      	b.n	800b106 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d04f      	beq.n	800b0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b052:	d147      	bne.n	800b0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b05c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b072:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b07c:	637b      	str	r3, [r7, #52]	; 0x34
 800b07e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e6      	bne.n	800b05e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f023 0301 	bic.w	r3, r3, #1
 800b0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0b0:	623a      	str	r2, [r7, #32]
 800b0b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	69f9      	ldr	r1, [r7, #28]
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e5      	bne.n	800b090 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e010      	b.n	800b106 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	69da      	ldr	r2, [r3, #28]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2301      	moveq	r3, #1
 800b0f6:	2300      	movne	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	f43f af4a 	beq.w	800af98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3770      	adds	r7, #112	; 0x70
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <__libc_init_array>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	4d0d      	ldr	r5, [pc, #52]	; (800b148 <__libc_init_array+0x38>)
 800b114:	4c0d      	ldr	r4, [pc, #52]	; (800b14c <__libc_init_array+0x3c>)
 800b116:	1b64      	subs	r4, r4, r5
 800b118:	10a4      	asrs	r4, r4, #2
 800b11a:	2600      	movs	r6, #0
 800b11c:	42a6      	cmp	r6, r4
 800b11e:	d109      	bne.n	800b134 <__libc_init_array+0x24>
 800b120:	4d0b      	ldr	r5, [pc, #44]	; (800b150 <__libc_init_array+0x40>)
 800b122:	4c0c      	ldr	r4, [pc, #48]	; (800b154 <__libc_init_array+0x44>)
 800b124:	f000 f820 	bl	800b168 <_init>
 800b128:	1b64      	subs	r4, r4, r5
 800b12a:	10a4      	asrs	r4, r4, #2
 800b12c:	2600      	movs	r6, #0
 800b12e:	42a6      	cmp	r6, r4
 800b130:	d105      	bne.n	800b13e <__libc_init_array+0x2e>
 800b132:	bd70      	pop	{r4, r5, r6, pc}
 800b134:	f855 3b04 	ldr.w	r3, [r5], #4
 800b138:	4798      	blx	r3
 800b13a:	3601      	adds	r6, #1
 800b13c:	e7ee      	b.n	800b11c <__libc_init_array+0xc>
 800b13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b142:	4798      	blx	r3
 800b144:	3601      	adds	r6, #1
 800b146:	e7f2      	b.n	800b12e <__libc_init_array+0x1e>
 800b148:	0800b230 	.word	0x0800b230
 800b14c:	0800b230 	.word	0x0800b230
 800b150:	0800b230 	.word	0x0800b230
 800b154:	0800b234 	.word	0x0800b234

0800b158 <memset>:
 800b158:	4402      	add	r2, r0
 800b15a:	4603      	mov	r3, r0
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d100      	bne.n	800b162 <memset+0xa>
 800b160:	4770      	bx	lr
 800b162:	f803 1b01 	strb.w	r1, [r3], #1
 800b166:	e7f9      	b.n	800b15c <memset+0x4>

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
