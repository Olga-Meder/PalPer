
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf30  0800bf30  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf38  0800bf38  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800bf40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0d0  20000048  0800bf88  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b118  0800bf88  0002b118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6e1  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c58  00000000  00000000  0003f759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  000433b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00044cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6ba  00000000  00000000  00046488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0f1  00000000  00000000  00072b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001133ce  00000000  00000000  0008fc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3001  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  001a3054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800be70 	.word	0x0800be70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800be70 	.word	0x0800be70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AudioPlay_Error_CallBack>:
//16.congaLov -> sektor 31
//17.clave -> sektor 32
//18.congaHigh -> sektor 33

void AudioPlay_Error_CallBack(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 80004d0:	f000 fc42 	bl	8000d58 <Error_Handler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <AudioPlay_TransferComplete_CallBack>:
static uint16_t *pAudioSample;

static uint32_t RozmiarSekcji = 65536;

void AudioPlay_TransferComplete_CallBack()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
	...

080004e8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN PV */


uint32_t PomiarADC;
volatile uint8_t adc;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004f2:	f003 febf 	bl	8004274 <HAL_ADC_GetValue>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a03      	ldr	r2, [pc, #12]	; (8000508 <HAL_ADC_ConvCpltCallback+0x20>)
 80004fa:	6013      	str	r3, [r2, #0]
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000006c 	.word	0x2000006c
 8000508:	20000310 	.word	0x20000310

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f002 ffff 	bl	8003514 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f90b 	bl	8000730 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800051a:	f000 f95d 	bl	80007d8 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fb4b 	bl	8000bb8 <MX_GPIO_Init>
  MX_LCD_Init();
 8000522:	f000 fa3d 	bl	80009a0 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000526:	f000 fa75 	bl	8000a14 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800052a:	f000 fa99 	bl	8000a60 <MX_RTC_Init>
  MX_I2C1_Init();
 800052e:	f000 f9f7 	bl	8000920 <MX_I2C1_Init>
  MX_DMA_Init();
 8000532:	f000 fb23 	bl	8000b7c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000536:	f000 faf1 	bl	8000b1c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800053a:	f000 fab9 	bl	8000ab0 <MX_SAI1_Init>
  MX_ADC1_Init();
 800053e:	f000 f979 	bl	8000834 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 8000542:	f001 ff15 	bl	8002370 <BSP_LCD_GLASS_Init>
  HAL_ADC_Start_IT(&hadc1);
 8000546:	4871      	ldr	r0, [pc, #452]	; (800070c <main+0x200>)
 8000548:	f003 fd62 	bl	8004010 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_HIGH);
 800054c:	2296      	movs	r2, #150	; 0x96
 800054e:	2101      	movs	r1, #1
 8000550:	486f      	ldr	r0, [pc, #444]	; (8000710 <main+0x204>)
 8000552:	f001 ff75 	bl	8002440 <BSP_LCD_GLASS_ScrollSentence>

  static QSPI_Info pQSPI_Info;
  uint8_t status;
  status = BSP_QSPI_Init();
 8000556:	f002 fdb1 	bl	80030bc <BSP_QSPI_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]
  if (status == QSPI_OK) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10e      	bne.n	8000582 <main+0x76>
	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8000564:	4b6b      	ldr	r3, [pc, #428]	; (8000714 <main+0x208>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 800056a:	4b6a      	ldr	r3, [pc, #424]	; (8000714 <main+0x208>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8000570:	4b68      	ldr	r3, [pc, #416]	; (8000714 <main+0x208>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8000576:	4b67      	ldr	r3, [pc, #412]	; (8000714 <main+0x208>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 800057c:	4b65      	ldr	r3, [pc, #404]	; (8000714 <main+0x208>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  }

  if(BSP_AUDIO_OUT_Init(2,  // Słuchawki
 8000582:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000586:	2150      	movs	r1, #80	; 0x50
 8000588:	2002      	movs	r0, #2
 800058a:	f001 fcef 	bl	8001f6c <BSP_AUDIO_OUT_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <main+0x8c>
                        80, // %głośności
                        44100) != 0)  // częstotliwość
  {
		  Error_Handler();
 8000594:	f000 fbe0 	bl	8000d58 <Error_Handler>
  }

  BSP_AUDIO_OUT_RegisterCallbacks(AudioPlay_Error_CallBack,
 8000598:	4a5f      	ldr	r2, [pc, #380]	; (8000718 <main+0x20c>)
 800059a:	2100      	movs	r1, #0
 800059c:	485f      	ldr	r0, [pc, #380]	; (800071c <main+0x210>)
 800059e:	f001 fda7 	bl	80020f0 <BSP_AUDIO_OUT_RegisterCallbacks>
              	  	  	  	  	  NULL,
                                  AudioPlay_TransferComplete_CallBack);

  if(BSP_AUDIO_OUT_SetVolume(80) != 0)
 80005a2:	2050      	movs	r0, #80	; 0x50
 80005a4:	f001 fd8c 	bl	80020c0 <BSP_AUDIO_OUT_SetVolume>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0xa6>
  {
	  Error_Handler();
 80005ae:	f000 fbd3 	bl	8000d58 <Error_Handler>
  }

  int flag = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
  int flag2 = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
  uint32_t count = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  HAL_ADC_Start(&hadc1);
 80005be:	4853      	ldr	r0, [pc, #332]	; (800070c <main+0x200>)
 80005c0:	f003 fb94 	bl	8003cec <HAL_ADC_Start>
	  }
	  if(!(HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port,JOY_CENTER_Pin))){
		  flag = 1;
	  }
*/
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80005c4:	210a      	movs	r1, #10
 80005c6:	4851      	ldr	r0, [pc, #324]	; (800070c <main+0x200>)
 80005c8:	f003 fc4a 	bl	8003e60 <HAL_ADC_PollForConversion>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f8      	bne.n	80005c4 <main+0xb8>
	  {
		  PomiarADC = HAL_ADC_GetValue(&hadc1);
 80005d2:	484e      	ldr	r0, [pc, #312]	; (800070c <main+0x200>)
 80005d4:	f003 fe4e 	bl	8004274 <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a51      	ldr	r2, [pc, #324]	; (8000720 <main+0x214>)
 80005dc:	6013      	str	r3, [r2, #0]

//		  HAL_ADC_Start(&hadc1);

	  //////////////////////////////////////////////////////////////////////////////////////

	  if(PomiarADC == 7 || PomiarADC == 15 || PomiarADC == 31)
 80005de:	4b50      	ldr	r3, [pc, #320]	; (8000720 <main+0x214>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	d007      	beq.n	80005f6 <main+0xea>
 80005e6:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <main+0x214>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b0f      	cmp	r3, #15
 80005ec:	d003      	beq.n	80005f6 <main+0xea>
 80005ee:	4b4c      	ldr	r3, [pc, #304]	; (8000720 <main+0x214>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b1f      	cmp	r3, #31
 80005f4:	d11d      	bne.n	8000632 <main+0x126>
	  {
		  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <main+0x218>)
 80005f8:	f245 6238 	movw	r2, #22072	; 0x5638
 80005fc:	601a      	str	r2, [r3, #0]
		  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (count+17)));  //congahigh
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	3311      	adds	r3, #17
 8000602:	4a49      	ldr	r2, [pc, #292]	; (8000728 <main+0x21c>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800060e:	461a      	mov	r2, r3
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <main+0x220>)
 8000612:	601a      	str	r2, [r3, #0]
		  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 8000614:	4b45      	ldr	r3, [pc, #276]	; (800072c <main+0x220>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a42      	ldr	r2, [pc, #264]	; (8000724 <main+0x218>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fcee 	bl	8002000 <BSP_AUDIO_OUT_Play>
		  HAL_Delay(150);
 8000624:	2096      	movs	r0, #150	; 0x96
 8000626:	f002 fff1 	bl	800360c <HAL_Delay>
		  BSP_AUDIO_OUT_Stop(2);
 800062a:	2002      	movs	r0, #2
 800062c:	f001 fd22 	bl	8002074 <BSP_AUDIO_OUT_Stop>
 8000630:	e068      	b.n	8000704 <main+0x1f8>
	  }
	  else if(PomiarADC == 63)
 8000632:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <main+0x214>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b3f      	cmp	r3, #63	; 0x3f
 8000638:	d11d      	bne.n	8000676 <main+0x16a>
	  {
		  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <main+0x218>)
 800063c:	f245 6238 	movw	r2, #22072	; 0x5638
 8000640:	601a      	str	r2, [r3, #0]
		  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (count+12)));
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	330c      	adds	r3, #12
 8000646:	4a38      	ldr	r2, [pc, #224]	; (8000728 <main+0x21c>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000652:	461a      	mov	r2, r3
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <main+0x220>)
 8000656:	601a      	str	r2, [r3, #0]
		  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <main+0x220>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a31      	ldr	r2, [pc, #196]	; (8000724 <main+0x218>)
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fccc 	bl	8002000 <BSP_AUDIO_OUT_Play>
		  HAL_Delay(150);
 8000668:	2096      	movs	r0, #150	; 0x96
 800066a:	f002 ffcf 	bl	800360c <HAL_Delay>
		  BSP_AUDIO_OUT_Stop(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f001 fd00 	bl	8002074 <BSP_AUDIO_OUT_Stop>
 8000674:	e046      	b.n	8000704 <main+0x1f8>
	  }
	  else if(PomiarADC == 192)
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <main+0x214>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2bc0      	cmp	r3, #192	; 0xc0
 800067c:	d11d      	bne.n	80006ba <main+0x1ae>
	  {
		  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <main+0x218>)
 8000680:	f245 6238 	movw	r2, #22072	; 0x5638
 8000684:	601a      	str	r2, [r3, #0]
		  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (count+15)));  //congalow
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	330f      	adds	r3, #15
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <main+0x21c>)
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000696:	461a      	mov	r2, r3
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <main+0x220>)
 800069a:	601a      	str	r2, [r3, #0]
		  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0x220>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <main+0x218>)
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fcaa 	bl	8002000 <BSP_AUDIO_OUT_Play>
		  HAL_Delay(150);
 80006ac:	2096      	movs	r0, #150	; 0x96
 80006ae:	f002 ffad 	bl	800360c <HAL_Delay>
		  BSP_AUDIO_OUT_Stop(2);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f001 fcde 	bl	8002074 <BSP_AUDIO_OUT_Stop>
 80006b8:	e024      	b.n	8000704 <main+0x1f8>
	  }
	  else if(PomiarADC == 224 || PomiarADC == 240)
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x214>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2be0      	cmp	r3, #224	; 0xe0
 80006c0:	d003      	beq.n	80006ca <main+0x1be>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <main+0x214>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2bf0      	cmp	r3, #240	; 0xf0
 80006c8:	d11c      	bne.n	8000704 <main+0x1f8>
	  {
		  RemainingAudioSamplesNb = (uint32_t)(AUDIO_FILE_SIZE / 2);
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <main+0x218>)
 80006cc:	f245 6238 	movw	r2, #22072	; 0x5638
 80006d0:	601a      	str	r2, [r3, #0]
		  pAudioSample = (uint16_t *) (WRITE_READ_ADDR+(RozmiarSekcji * (count+4)));
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <main+0x21c>)
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0x220>)
 80006e6:	601a      	str	r2, [r3, #0]
		  BSP_AUDIO_OUT_Play(pAudioSample, RemainingAudioSamplesNb);
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <main+0x220>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <main+0x218>)
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fc84 	bl	8002000 <BSP_AUDIO_OUT_Play>
		  HAL_Delay(150);
 80006f8:	2096      	movs	r0, #150	; 0x96
 80006fa:	f002 ff87 	bl	800360c <HAL_Delay>
		  BSP_AUDIO_OUT_Stop(2);
 80006fe:	2002      	movs	r0, #2
 8000700:	f001 fcb8 	bl	8002074 <BSP_AUDIO_OUT_Stop>
	  }
	  HAL_ADC_Start(&hadc1);
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <main+0x200>)
 8000706:	f003 faf1 	bl	8003cec <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800070a:	e75b      	b.n	80005c4 <main+0xb8>
 800070c:	2000006c 	.word	0x2000006c
 8000710:	0800be88 	.word	0x0800be88
 8000714:	20000314 	.word	0x20000314
 8000718:	080004d9 	.word	0x080004d9
 800071c:	080004cd 	.word	0x080004cd
 8000720:	20000310 	.word	0x20000310
 8000724:	20000064 	.word	0x20000064
 8000728:	20000000 	.word	0x20000000
 800072c:	20000068 	.word	0x20000068

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2244      	movs	r2, #68	; 0x44
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00b fb8e 	bl	800be60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000756:	f006 fba5 	bl	8006ea4 <HAL_PWREx_ControlVoltageScaling>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000760:	f000 fafa 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000764:	230a      	movs	r3, #10
 8000766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000772:	2301      	movs	r3, #1
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f007 f8da 	bl	8007950 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007a2:	f000 fad9 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f007 fcae 	bl	8008120 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fac5 	bl	8000d58 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0a2      	sub	sp, #136	; 0x88
 80007dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2288      	movs	r2, #136	; 0x88
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fb3b 	bl	800be60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 80007ea:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80007ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000806:	2307      	movs	r3, #7
 8000808:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <PeriphCommonClock_Config+0x58>)
 8000814:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fe87 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000824:	f000 fa98 	bl	8000d58 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3788      	adds	r7, #136	; 0x88
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	01010000 	.word	0x01010000

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <MX_ADC1_Init+0xe4>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085c:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_ADC1_Init+0xe0>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000864:	2210      	movs	r2, #16
 8000866:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_ADC1_Init+0xe0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000876:	2204      	movs	r2, #4
 8000878:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_ADC1_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000882:	2200      	movs	r2, #0
 8000884:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000888:	2201      	movs	r2, #1
 800088a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_ADC1_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_ADC1_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008b8:	f003 f8c2 	bl	8003a40 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008c2:	f000 fa49 	bl	8000d58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008d2:	f004 fbb5 	bl	8005040 <HAL_ADCEx_MultiModeConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008dc:	f000 fa3c 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ADC1_Init+0xe8>)
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2306      	movs	r3, #6
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80008e8:	2305      	movs	r3, #5
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ec:	237f      	movs	r3, #127	; 0x7f
 80008ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f0:	2304      	movs	r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008fe:	f003 fef5 	bl	80046ec <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000908:	f000 fa26 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000006c 	.word	0x2000006c
 8000918:	50040000 	.word	0x50040000
 800091c:	21800100 	.word	0x21800100

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_I2C1_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_I2C1_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_I2C1_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_I2C1_Init+0x74>)
 800095c:	f005 fa90 	bl	8005e80 <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 f9f7 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_I2C1_Init+0x74>)
 800096e:	f006 f827 	bl	80069c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 f9ee 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_I2C1_Init+0x74>)
 8000980:	f006 f869 	bl	8006a56 <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f9e5 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000d0 	.word	0x200000d0
 8000998:	40005400 	.word	0x40005400
 800099c:	10909cec 	.word	0x10909cec

080009a0 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <MX_LCD_Init+0x70>)
 80009a8:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009b2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80009b6:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_LCD_Init+0x6c>)
 80009fa:	f006 f879 	bl	8006af0 <HAL_LCD_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 8000a04:	f000 f9a8 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000011c 	.word	0x2000011c
 8000a10:	40002400 	.word	0x40002400

08000a14 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <MX_QUADSPI_Init+0x48>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a2c:	2210      	movs	r2, #16
 8000a2e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a32:	2218      	movs	r2, #24
 8000a34:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_QUADSPI_Init+0x44>)
 8000a44:	f006 faa4 	bl	8006f90 <HAL_QSPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a4e:	f000 f983 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000158 	.word	0x20000158
 8000a5c:	a0001000 	.word	0xa0001000

08000a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <MX_RTC_Init+0x4c>)
 8000a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a72:	227f      	movs	r2, #127	; 0x7f
 8000a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a96:	f009 f953 	bl	8009d40 <HAL_RTC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000aa0:	f000 f95a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000019c 	.word	0x2000019c
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_SAI1_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ada:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ade:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000af8:	2302      	movs	r3, #2
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_SAI1_Init+0x64>)
 8000b00:	f009 fa30 	bl	8009f64 <HAL_SAI_InitProtocol>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000b0a:	f000 f925 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001c0 	.word	0x200001c0
 8000b18:	40015404 	.word	0x40015404

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART3_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b60:	f00a f8f5 	bl	800ad4e <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f8f5 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000028c 	.word	0x2000028c
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2038      	movs	r0, #56	; 0x38
 8000ba0:	f004 fbfd 	bl	800539e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000ba4:	2038      	movs	r0, #56	; 0x38
 8000ba6:	f004 fc16 	bl	80053d6 <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bce:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a5e      	ldr	r2, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b5c      	ldr	r3, [pc, #368]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	4b59      	ldr	r3, [pc, #356]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a52      	ldr	r2, [pc, #328]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <MX_GPIO_Init+0x194>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2108      	movs	r1, #8
 8000c62:	483b      	ldr	r0, [pc, #236]	; (8000d50 <MX_GPIO_Init+0x198>)
 8000c64:	f005 f8f4 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f005 f8ee 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f005 f8e8 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	4833      	ldr	r0, [pc, #204]	; (8000d54 <MX_GPIO_Init+0x19c>)
 8000c86:	f005 f8e3 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	482f      	ldr	r0, [pc, #188]	; (8000d50 <MX_GPIO_Init+0x198>)
 8000c92:	f005 f8dd 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000c96:	2308      	movs	r3, #8
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MX_GPIO_Init+0x198>)
 8000cae:	f004 fe31 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|DIGITIZER_IN_Y2_Pin;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f004 fe24 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f004 fe15 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000cea:	2320      	movs	r3, #32
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f004 fe06 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_GPIO_Init+0x19c>)
 8000d20:	f004 fdf8 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_GPIO_Init+0x198>)
 8000d3e:	f004 fde9 	bl	8005914 <HAL_GPIO_Init>

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48000400 	.word	0x48000400

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_MspInit+0x44>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6613      	str	r3, [r2, #96]	; 0x60
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x44>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12c      	bne.n	8000e28 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_ADC_MspInit+0x88>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e02:	230b      	movs	r3, #11
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f004 fd7e 	bl	8005914 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2012      	movs	r0, #18
 8000e1e:	f004 fabe 	bl	800539e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e22:	2012      	movs	r0, #18
 8000e24:	f004 fad7 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	50040000 	.word	0x50040000
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ac      	sub	sp, #176	; 0xb0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2288      	movs	r2, #136	; 0x88
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00b f801 	bl	800be60 <memset>
  if(hi2c->Instance==I2C1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_I2C_MspInit+0xb0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13a      	bne.n	8000ede <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 fb59 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e80:	f7ff ff6a 	bl	8000d58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e9c:	23c0      	movs	r3, #192	; 0xc0
 8000e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_I2C_MspInit+0xb8>)
 8000ec2:	f004 fd27 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37b0      	adds	r7, #176	; 0xb0
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_I2C_MspDeInit+0x38>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10d      	bne.n	8000f22 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_I2C_MspDeInit+0x3c>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_I2C_MspDeInit+0x3c>)
 8000f0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <HAL_I2C_MspDeInit+0x40>)
 8000f16:	f004 fea7 	bl	8005c68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_I2C_MspDeInit+0x40>)
 8000f1e:	f004 fea3 	bl	8005c68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ae      	sub	sp, #184	; 0xb8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2288      	movs	r2, #136	; 0x88
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00a ff81 	bl	800be60 <memset>
  if(hlcd->Instance==LCD)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <HAL_LCD_MspInit+0x188>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f040 80a6 	bne.w	80010b6 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fad5 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000f88:	f7ff fee6 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a4c      	ldr	r2, [pc, #304]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a46      	ldr	r2, [pc, #280]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_LCD_MspInit+0x18c>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8001004:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800101e:	230b      	movs	r3, #11
 8001020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001028:	4619      	mov	r1, r3
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <HAL_LCD_MspInit+0x190>)
 800102c:	f004 fc72 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8001030:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800104a:	230b      	movs	r3, #11
 800104c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f004 fc5b 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 800105e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001078:	230b      	movs	r3, #11
 800107a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001082:	4619      	mov	r1, r3
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <HAL_LCD_MspInit+0x194>)
 8001086:	f004 fc45 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 800108a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800108e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010a4:	230b      	movs	r3, #11
 80010a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_LCD_MspInit+0x198>)
 80010b2:	f004 fc2f 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	37b8      	adds	r7, #184	; 0xb8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40002400 	.word	0x40002400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000c00 	.word	0x48000c00

080010d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_QSPI_MspInit+0x7c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d128      	bne.n	8001148 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 80010f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6513      	str	r3, [r2, #80]	; 0x50
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_QSPI_MspInit+0x80>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001126:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800112a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001138:	230a      	movs	r3, #10
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_QSPI_MspInit+0x84>)
 8001144:	f004 fbe6 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	a0001000 	.word	0xa0001000
 8001154:	40021000 	.word	0x40021000
 8001158:	48001000 	.word	0x48001000

0800115c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_QSPI_MspDeInit+0x30>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10a      	bne.n	8001184 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_QSPI_MspDeInit+0x34>)
 8001170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_QSPI_MspDeInit+0x34>)
 8001174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001178:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 800117a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_QSPI_MspDeInit+0x38>)
 8001180:	f004 fd72 	bl	8005c68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	a0001000 	.word	0xa0001000
 8001190:	40021000 	.word	0x40021000
 8001194:	48001000 	.word	0x48001000

08001198 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0a4      	sub	sp, #144	; 0x90
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	2288      	movs	r2, #136	; 0x88
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00a fe59 	bl	800be60 <memset>
  if(hrtc->Instance==RTC)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_RTC_MspInit+0x5c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d118      	bne.n	80011ea <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 f9ae 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011d6:	f7ff fdbf 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_RTC_MspInit+0x60>)
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_RTC_MspInit+0x60>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3790      	adds	r7, #144	; 0x90
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40002800 	.word	0x40002800
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ac      	sub	sp, #176	; 0xb0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2288      	movs	r2, #136	; 0x88
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00a fe1f 	bl	800be60 <memset>
  if(huart->Instance==USART3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a25      	ldr	r2, [pc, #148]	; (80012bc <HAL_UART_MspInit+0xc0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d143      	bne.n	80012b4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800122c:	2304      	movs	r3, #4
 800122e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f977 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff fd88 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 800124e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001292:	2307      	movs	r3, #7
 8001294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129c:	4619      	mov	r1, r3
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <HAL_UART_MspInit+0xc8>)
 80012a0:	f004 fb38 	bl	8005914 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2027      	movs	r0, #39	; 0x27
 80012aa:	f004 f878 	bl	800539e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012ae:	2027      	movs	r0, #39	; 0x27
 80012b0:	f004 f891 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	37b0      	adds	r7, #176	; 0xb0
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40004800 	.word	0x40004800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400

080012c8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_SAI_MspInit+0xd8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d15d      	bne.n	8001396 <HAL_SAI_MspInit+0xce>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_SAI_MspInit+0xdc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d113      	bne.n	800130a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_SAI_MspInit+0xe0>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_SAI_MspInit+0xe0>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_SAI_MspInit+0xe0>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	204a      	movs	r0, #74	; 0x4a
 8001300:	f004 f84d 	bl	800539e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001304:	204a      	movs	r0, #74	; 0x4a
 8001306:	f004 f866 	bl	80053d6 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_SAI_MspInit+0xdc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <HAL_SAI_MspInit+0xdc>)
 8001312:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001314:	2374      	movs	r3, #116	; 0x74
 8001316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001324:	230d      	movs	r3, #13
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <HAL_SAI_MspInit+0xe4>)
 8001330:	f004 faf0 	bl	8005914 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001336:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_SAI_MspInit+0xec>)
 8001338:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 800133c:	2201      	movs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001342:	2210      	movs	r2, #16
 8001344:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 800135c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001360:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001364:	2220      	movs	r2, #32
 8001366:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800136e:	4810      	ldr	r0, [pc, #64]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001370:	f004 f85a 	bl	8005428 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 800137a:	f7ff fced 	bl	8000d58 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001382:	671a      	str	r2, [r3, #112]	; 0x70
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 800138e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_SAI_MspInit+0xe8>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40015404 	.word	0x40015404
 80013a4:	20000328 	.word	0x20000328
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48001000 	.word	0x48001000
 80013b0:	20000244 	.word	0x20000244
 80013b4:	40020408 	.word	0x40020408

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f002 f8e2 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <ADC1_2_IRQHandler+0x10>)
 8001412:	f002 ff3d 	bl	8004290 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000006c 	.word	0x2000006c

08001420 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <USART3_IRQHandler+0x10>)
 8001426:	f009 fce1 	bl	800adec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000028c 	.word	0x2000028c

08001434 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Channel1_IRQHandler+0x10>)
 800143a:	f004 f98c 	bl	8005756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000244 	.word	0x20000244

08001448 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <SAI1_IRQHandler+0x10>)
 800144e:	f009 f897 	bl	800a580 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200001c0 	.word	0x200001c0

0800145c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff ffea 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f00a fcb3 	bl	800be18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b2:	f7ff f82b 	bl	800050c <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80014c4:	0800bf40 	.word	0x0800bf40
  ldr r2, =_sbss
 80014c8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80014cc:	2000b118 	.word	0x2000b118

080014d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC3_IRQHandler>
	...

080014d4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4603      	mov	r3, r0
 80014de:	81fb      	strh	r3, [r7, #14]
 80014e0:	460b      	mov	r3, r1
 80014e2:	81bb      	strh	r3, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80014ec:	f000 fc96 	bl	8001e1c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2201      	movs	r2, #1
 80014f6:	2102      	movs	r1, #2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fb01 	bl	8001b00 <CODEC_IO_Write>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	2b03      	cmp	r3, #3
 800150e:	d81b      	bhi.n	8001548 <cs43l22_Init+0x74>
 8001510:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <cs43l22_Init+0x44>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001529 	.word	0x08001529
 800151c:	08001531 	.word	0x08001531
 8001520:	08001539 	.word	0x08001539
 8001524:	08001541 	.word	0x08001541
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <cs43l22_Init+0x1c4>)
 800152a:	22fa      	movs	r2, #250	; 0xfa
 800152c:	701a      	strb	r2, [r3, #0]
    break;
 800152e:	e00f      	b.n	8001550 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <cs43l22_Init+0x1c4>)
 8001532:	22af      	movs	r2, #175	; 0xaf
 8001534:	701a      	strb	r2, [r3, #0]
    break;
 8001536:	e00b      	b.n	8001550 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <cs43l22_Init+0x1c4>)
 800153a:	22aa      	movs	r2, #170	; 0xaa
 800153c:	701a      	strb	r2, [r3, #0]
    break;
 800153e:	e007      	b.n	8001550 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <cs43l22_Init+0x1c4>)
 8001542:	2205      	movs	r2, #5
 8001544:	701a      	strb	r2, [r3, #0]
    break;    
 8001546:	e003      	b.n	8001550 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <cs43l22_Init+0x1c4>)
 800154a:	2205      	movs	r2, #5
 800154c:	701a      	strb	r2, [r3, #0]
    break;    
 800154e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <cs43l22_Init+0x1c4>)
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	2104      	movs	r1, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f000 facf 	bl	8001b00 <CODEC_IO_Write>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2281      	movs	r2, #129	; 0x81
 8001572:	2105      	movs	r1, #5
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fac3 	bl	8001b00 <CODEC_IO_Write>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2204      	movs	r2, #4
 800158a:	2106      	movs	r1, #6
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fab7 	bl	8001b00 <CODEC_IO_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	4413      	add	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800159c:	7afa      	ldrb	r2, [r7, #11]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f964 	bl	8001870 <cs43l22_SetVolume>
 80015a8:	4602      	mov	r2, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80015b0:	89bb      	ldrh	r3, [r7, #12]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d023      	beq.n	80015fe <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2206      	movs	r2, #6
 80015bc:	210f      	movs	r1, #15
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fa9e 	bl	8001b00 <CODEC_IO_Write>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	2124      	movs	r1, #36	; 0x24
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fa92 	bl	8001b00 <CODEC_IO_Write>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	2125      	movs	r1, #37	; 0x25
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fa86 	bl	8001b00 <CODEC_IO_Write>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2200      	movs	r2, #0
 8001604:	210a      	movs	r1, #10
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fa7a 	bl	8001b00 <CODEC_IO_Write>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2204      	movs	r2, #4
 800161c:	210e      	movs	r1, #14
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fa6e 	bl	8001b00 <CODEC_IO_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2200      	movs	r2, #0
 8001634:	2127      	movs	r1, #39	; 0x27
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fa62 	bl	8001b00 <CODEC_IO_Write>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	220f      	movs	r2, #15
 800164c:	211f      	movs	r1, #31
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fa56 	bl	8001b00 <CODEC_IO_Write>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	220a      	movs	r2, #10
 8001664:	211a      	movs	r1, #26
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa4a 	bl	8001b00 <CODEC_IO_Write>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	220a      	movs	r2, #10
 800167c:	211b      	movs	r1, #27
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fa3e 	bl	8001b00 <CODEC_IO_Write>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800168e:	697b      	ldr	r3, [r7, #20]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000032c 	.word	0x2000032c

0800169c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80016a0:	f000 fbf2 	bl	8001e88 <AUDIO_IO_DeInit>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80016b2:	f000 fbb3 	bl	8001e1c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2101      	movs	r1, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fc3a 	bl	8001f36 <AUDIO_IO_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f023 0307 	bic.w	r3, r3, #7
 80016cc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <cs43l22_Play+0x70>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d123      	bne.n	800173c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2206      	movs	r2, #6
 80016fa:	210e      	movs	r1, #14
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f9ff 	bl	8001b00 <CODEC_IO_Write>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f919 	bl	8001948 <cs43l22_SetMute>
 8001716:	4602      	mov	r2, r0
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	229e      	movs	r2, #158	; 0x9e
 8001724:	2102      	movs	r1, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f9ea 	bl	8001b00 <CODEC_IO_Write>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <cs43l22_Play+0x70>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000038 	.word	0x20000038

0800174c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	2101      	movs	r1, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f8f2 	bl	8001948 <cs43l22_SetMute>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2201      	movs	r2, #1
 8001772:	2102      	movs	r1, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f9c3 	bl	8001b00 <CODEC_IO_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f8ce 	bl	8001948 <cs43l22_SetMute>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	e002      	b.n	80017c0 <cs43l22_Resume+0x30>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2bfe      	cmp	r3, #254	; 0xfe
 80017c4:	d9f9      	bls.n	80017ba <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <cs43l22_Resume+0x74>)
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	2104      	movs	r1, #4
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f994 	bl	8001b00 <CODEC_IO_Write>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	229e      	movs	r2, #158	; 0x9e
 80017e8:	2102      	movs	r1, #2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f988 	bl	8001b00 <CODEC_IO_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000032c 	.word	0x2000032c

08001808 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	2101      	movs	r1, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f893 	bl	8001948 <cs43l22_SetMute>
 8001822:	4602      	mov	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2204      	movs	r2, #4
 8001830:	210e      	movs	r1, #14
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f964 	bl	8001b00 <CODEC_IO_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	229f      	movs	r2, #159	; 0x9f
 8001848:	2102      	movs	r1, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f958 	bl	8001b00 <CODEC_IO_Write>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <cs43l22_Stop+0x64>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000038 	.word	0x20000038

08001870 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	80fb      	strh	r3, [r7, #6]
 800187c:	4613      	mov	r3, r2
 800187e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d80b      	bhi.n	80018a2 <cs43l22_SetVolume+0x32>
 800188a:	797a      	ldrb	r2, [r7, #5]
 800188c:	4613      	mov	r3, r2
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <cs43l22_SetVolume+0xb8>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1152      	asrs	r2, r2, #5
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	e000      	b.n	80018a4 <cs43l22_SetVolume+0x34>
 80018a2:	23ff      	movs	r3, #255	; 0xff
 80018a4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	2be6      	cmp	r3, #230	; 0xe6
 80018aa:	d91c      	bls.n	80018e6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	b2d8      	uxtb	r0, r3
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	3319      	adds	r3, #25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	2120      	movs	r1, #32
 80018ba:	f000 f921 	bl	8001b00 <CODEC_IO_Write>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	3319      	adds	r3, #25
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	2121      	movs	r1, #33	; 0x21
 80018d6:	f000 f913 	bl	8001b00 <CODEC_IO_Write>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e01b      	b.n	800191e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	b2d8      	uxtb	r0, r3
 80018ea:	7afb      	ldrb	r3, [r7, #11]
 80018ec:	3319      	adds	r3, #25
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	2120      	movs	r1, #32
 80018f4:	f000 f904 	bl	8001b00 <CODEC_IO_Write>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	3319      	adds	r3, #25
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	2121      	movs	r1, #33	; 0x21
 8001910:	f000 f8f6 	bl	8001b00 <CODEC_IO_Write>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	51eb851f 	.word	0x51eb851f

0800192c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d124      	bne.n	80019a8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	22ff      	movs	r2, #255	; 0xff
 8001964:	2104      	movs	r1, #4
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8ca 	bl	8001b00 <CODEC_IO_Write>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2201      	movs	r2, #1
 800197c:	2122      	movs	r1, #34	; 0x22
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8be 	bl	8001b00 <CODEC_IO_Write>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2201      	movs	r2, #1
 8001994:	2123      	movs	r1, #35	; 0x23
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f8b2 	bl	8001b00 <CODEC_IO_Write>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e025      	b.n	80019f4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2200      	movs	r2, #0
 80019ae:	2122      	movs	r1, #34	; 0x22
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f8a5 	bl	8001b00 <CODEC_IO_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	2123      	movs	r1, #35	; 0x23
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f899 	bl	8001b00 <CODEC_IO_Write>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <cs43l22_SetMute+0xb8>)
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	2104      	movs	r1, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f88b 	bl	8001b00 <CODEC_IO_Write>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000032c 	.word	0x2000032c

08001a04 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4613      	mov	r3, r2
 8001a12:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001a18:	797b      	ldrb	r3, [r7, #5]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d84b      	bhi.n	8001ab8 <cs43l22_SetOutputMode+0xb4>
 8001a20:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <cs43l22_SetOutputMode+0x24>)
 8001a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a26:	bf00      	nop
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a59 	.word	0x08001a59
 8001a30:	08001a79 	.word	0x08001a79
 8001a34:	08001a99 	.word	0x08001a99
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	22fa      	movs	r2, #250	; 0xfa
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f85d 	bl	8001b00 <CODEC_IO_Write>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <cs43l22_SetOutputMode+0xe0>)
 8001a52:	22fa      	movs	r2, #250	; 0xfa
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e03f      	b.n	8001ad8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	22af      	movs	r2, #175	; 0xaf
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f84d 	bl	8001b00 <CODEC_IO_Write>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <cs43l22_SetOutputMode+0xe0>)
 8001a72:	22af      	movs	r2, #175	; 0xaf
 8001a74:	701a      	strb	r2, [r3, #0]
      break;
 8001a76:	e02f      	b.n	8001ad8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	22aa      	movs	r2, #170	; 0xaa
 8001a7e:	2104      	movs	r1, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f83d 	bl	8001b00 <CODEC_IO_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <cs43l22_SetOutputMode+0xe0>)
 8001a92:	22aa      	movs	r2, #170	; 0xaa
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e01f      	b.n	8001ad8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f82d 	bl	8001b00 <CODEC_IO_Write>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <cs43l22_SetOutputMode+0xe0>)
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	701a      	strb	r2, [r3, #0]
      break;    
 8001ab6:	e00f      	b.n	8001ad8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2205      	movs	r2, #5
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f81d 	bl	8001b00 <CODEC_IO_Write>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <cs43l22_SetOutputMode+0xe0>)
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	701a      	strb	r2, [r3, #0]
      break;
 8001ad6:	bf00      	nop
  }  
  return counter;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000032c 	.word	0x2000032c

08001ae8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	71bb      	strb	r3, [r7, #6]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001b16:	797a      	ldrb	r2, [r7, #5]
 8001b18:	79b9      	ldrb	r1, [r7, #6]
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f9f3 	bl	8001f08 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	b2db      	uxtb	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <I2C1_Init+0x50>)
 8001b36:	f004 fc8f 	bl	8006458 <HAL_I2C_GetState>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11d      	bne.n	8001b7c <I2C1_Init+0x4c>
  {
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <I2C1_Init+0x50>)
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <I2C1_Init+0x54>)
 8001b44:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <I2C1_Init+0x50>)
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <I2C1_Init+0x58>)
 8001b4a:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <I2C1_Init+0x50>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <I2C1_Init+0x50>)
 8001b72:	f000 f80b 	bl	8001b8c <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 8001b76:	4802      	ldr	r0, [pc, #8]	; (8001b80 <I2C1_Init+0x50>)
 8001b78:	f004 f982 	bl	8005e80 <HAL_I2C_Init>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000330 	.word	0x20000330
 8001b84:	40005400 	.word	0x40005400
 8001b88:	90112626 	.word	0x90112626

08001b8c <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0ae      	sub	sp, #184	; 0xb8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba0:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001bac:	f005 f9d0 	bl	8006f50 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <I2C1_MspInit+0xf8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d15e      	bne.n	8001c78 <I2C1_MspInit+0xec>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bba:	2340      	movs	r3, #64	; 0x40
 8001bbc:	61fb      	str	r3, [r7, #28]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fcaf 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001c04:	2312      	movs	r3, #18
 8001c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 8001c16:	2304      	movs	r3, #4
 8001c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4819      	ldr	r0, [pc, #100]	; (8001c88 <I2C1_MspInit+0xfc>)
 8001c24:	f003 fe76 	bl	8005914 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	6593      	str	r3, [r2, #88]	; 0x58
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <I2C1_MspInit+0xf4>)
 8001c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c56:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	201f      	movs	r0, #31
 8001c5e:	f003 fb9e 	bl	800539e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001c62:	201f      	movs	r0, #31
 8001c64:	f003 fbb7 	bl	80053d6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2020      	movs	r0, #32
 8001c6e:	f003 fb96 	bl	800539e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001c72:	2020      	movs	r0, #32
 8001c74:	f003 fbaf 	bl	80053d6 <HAL_NVIC_EnableIRQ>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	37b8      	adds	r7, #184	; 0xb8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40005400 	.word	0x40005400
 8001c88:	48000400 	.word	0x48000400

08001c8c <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deitialization
  * @retval None
  */
static void I2C1_DeInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <I2C1_DeInit+0x20>)
 8001c92:	f004 fbe1 	bl	8006458 <HAL_I2C_GetState>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <I2C1_DeInit+0x1c>
  {
    /* Deinit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <I2C1_DeInit+0x20>)
 8001c9e:	f004 f97e 	bl	8005f9e <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8001ca2:	4802      	ldr	r0, [pc, #8]	; (8001cac <I2C1_DeInit+0x20>)
 8001ca4:	f000 f804 	bl	8001cb0 <I2C1_MspDeInit>
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000330 	.word	0x20000330

08001cb0 <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP Deinitialization
  * @param hi2c: I2C handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <I2C1_MspDeInit+0xa0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d141      	bne.n	8001d46 <I2C1_MspDeInit+0x96>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    /* Deinit Rx/Tx pins */
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 8001cf2:	21c0      	movs	r1, #192	; 0xc0
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <I2C1_MspDeInit+0xa8>)
 8001cf6:	f003 ffb7 	bl	8005c68 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force & Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d04:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d10:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C1 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8001d1e:	201f      	movs	r0, #31
 8001d20:	f003 fb67 	bl	80053f2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 8001d24:	2020      	movs	r0, #32
 8001d26:	f003 fb64 	bl	80053f2 <HAL_NVIC_DisableIRQ>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6593      	str	r3, [r2, #88]	; 0x58
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <I2C1_MspDeInit+0xa4>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_DisableVddIO2();
 8001d42:	f005 f915 	bl	8006f70 <HAL_PWREx_DisableVddIO2>
  }
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40005400 	.word	0x40005400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <I2C1_WriteBuffer>:
  * @param  pBuffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval None
  */
static HAL_StatusTypeDef I2C1_WriteBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	4603      	mov	r3, r0
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	81bb      	strh	r3, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <I2C1_WriteBuffer+0x4c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	8978      	ldrh	r0, [r7, #10]
 8001d7a:	89ba      	ldrh	r2, [r7, #12]
 8001d7c:	89f9      	ldrh	r1, [r7, #14]
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	8c3b      	ldrh	r3, [r7, #32]
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4808      	ldr	r0, [pc, #32]	; (8001dac <I2C1_WriteBuffer+0x50>)
 8001d8c:	f004 f936 	bl	8005ffc <HAL_I2C_Mem_Write>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C1_WriteBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001d9a:	f000 f833 	bl	8001e04 <I2C1_Error>
  }
  return status;
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000003c 	.word	0x2000003c
 8001dac:	20000330 	.word	0x20000330

08001db0 <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af04      	add	r7, sp, #16
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4603      	mov	r3, r0
 8001dba:	81fb      	strh	r3, [r7, #14]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	81bb      	strh	r3, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <I2C1_ReadBuffer+0x4c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	8978      	ldrh	r0, [r7, #10]
 8001dce:	89ba      	ldrh	r2, [r7, #12]
 8001dd0:	89f9      	ldrh	r1, [r7, #14]
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	8c3b      	ldrh	r3, [r7, #32]
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <I2C1_ReadBuffer+0x50>)
 8001de0:	f004 fa20 	bl	8006224 <HAL_I2C_Mem_Read>
 8001de4:	4603      	mov	r3, r0
 8001de6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 8001dee:	f000 f809 	bl	8001e04 <I2C1_Error>
  }
  return status;
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000003c 	.word	0x2000003c
 8001e00:	20000330 	.word	0x20000330

08001e04 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c1Handle);
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <I2C1_Error+0x14>)
 8001e0a:	f004 f8c8 	bl	8005f9e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init();
 8001e0e:	f7ff fe8f 	bl	8001b30 <I2C1_Init>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000330 	.word	0x20000330

08001e1c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <AUDIO_IO_Init+0x64>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <AUDIO_IO_Init+0x64>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <AUDIO_IO_Init+0x64>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	2302      	movs	r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <AUDIO_IO_Init+0x68>)
 8001e50:	f003 fd60 	bl	8005914 <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8001e54:	f7ff fe6c 	bl	8001b30 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4809      	ldr	r0, [pc, #36]	; (8001e84 <AUDIO_IO_Init+0x68>)
 8001e5e:	f003 fff7 	bl	8005e50 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001e62:	2005      	movs	r0, #5
 8001e64:	f001 fbd2 	bl	800360c <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <AUDIO_IO_Init+0x68>)
 8001e6e:	f003 ffef 	bl	8005e50 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8001e72:	2005      	movs	r0, #5
 8001e74:	f001 fbca 	bl	800360c <HAL_Delay>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48001000 	.word	0x48001000

08001e88 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <AUDIO_IO_DeInit+0x78>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <AUDIO_IO_DeInit+0x78>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <AUDIO_IO_DeInit+0x78>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8001eaa:	237c      	movs	r3, #124	; 0x7c
 8001eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4812      	ldr	r0, [pc, #72]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001ebc:	f003 fd2a 	bl	8005914 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	480f      	ldr	r0, [pc, #60]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001ec6:	f003 ffc3 	bl	8005e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2108      	movs	r1, #8
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001ed0:	f003 ffbe 	bl	8005e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001eda:	f003 ffb9 	bl	8005e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	4808      	ldr	r0, [pc, #32]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001ee4:	f003 ffb4 	bl	8005e50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <AUDIO_IO_DeInit+0x7c>)
 8001eee:	f003 ffaf 	bl	8005e50 <HAL_GPIO_WritePin>

  /* I2C bus Deinit */
  I2C1_DeInit();
 8001ef2:	f7ff fecb 	bl	8001c8c <I2C1_DeInit>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48001000 	.word	0x48001000

08001f08 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
 8001f12:	460b      	mov	r3, r1
 8001f14:	71bb      	strb	r3, [r7, #6]
 8001f16:	4613      	mov	r3, r2
 8001f18:	717b      	strb	r3, [r7, #5]
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	b298      	uxth	r0, r3
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	b299      	uxth	r1, r3
 8001f22:	1d7b      	adds	r3, r7, #5
 8001f24:	2201      	movs	r2, #1
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f7ff ff17 	bl	8001d5c <I2C1_WriteBuffer>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460a      	mov	r2, r1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71bb      	strb	r3, [r7, #6]
  uint8_t Read_Value = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	b299      	uxth	r1, r3
 8001f52:	f107 030f 	add.w	r3, r7, #15
 8001f56:	2201      	movs	r2, #1
 8001f58:	9200      	str	r2, [sp, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f7ff ff28 	bl	8001db0 <I2C1_ReadBuffer>

  return Read_Value;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <BSP_AUDIO_OUT_Init>:
  *         the SAI PLL input clock runs at 8 MHz.
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice,
                           uint8_t Volume,
                           uint32_t AudioFreq)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	717b      	strb	r3, [r7, #5]
  /* Initialize the audio output context */
  hAudioOut.AudioDrv           = &cs43l22_drv;
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <BSP_AUDIO_OUT_Init+0x8c>)
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <BSP_AUDIO_OUT_Init+0x90>)
 8001f80:	601a      	str	r2, [r3, #0]
  hAudioOut.CbError            = (Audio_CallbackTypeDef)NULL;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <BSP_AUDIO_OUT_Init+0x8c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  hAudioOut.CbHalfTransfer     = (Audio_CallbackTypeDef)NULL;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <BSP_AUDIO_OUT_Init+0x8c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  hAudioOut.CbTransferComplete = (Audio_CallbackTypeDef)NULL;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <BSP_AUDIO_OUT_Init+0x8c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]

  /* Configure the SAI PLL according to the requested audio frequency */
  if (AUDIO_SAIPLLConfig(AudioFreq) != AUDIO_OK)
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f000 f9ab 	bl	80022f0 <AUDIO_SAIPLLConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <BSP_AUDIO_OUT_Init+0x38>
  {
    return AUDIO_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e024      	b.n	8001fee <BSP_AUDIO_OUT_Init+0x82>
  }

  /* SAI data transfer preparation: prepare the Media to be used for the audio
     transfer from memory to SAI peripheral. */
  if (AUDIO_SAIx_Init(AudioFreq) != AUDIO_OK)
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f000 f8f1 	bl	800218c <AUDIO_SAIx_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <BSP_AUDIO_OUT_Init+0x48>
  {
    return AUDIO_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e01c      	b.n	8001fee <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Retrieve audio codec identifier */
  if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) != CS43L22_ID)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <BSP_AUDIO_OUT_Init+0x90>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2094      	movs	r0, #148	; 0x94
 8001fba:	4798      	blx	r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2be0      	cmp	r3, #224	; 0xe0
 8001fc0:	d001      	beq.n	8001fc6 <BSP_AUDIO_OUT_Init+0x5a>
  {
    return AUDIO_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e013      	b.n	8001fee <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Reset the audio codec Registers */
  AUDIO_CODEC_Reset();
 8001fc6:	f000 f983 	bl	80022d0 <AUDIO_CODEC_Reset>

  /* Initialize the audio codec internal registers */
  if (hAudioOut.AudioDrv->Init(AUDIO_I2C_ADDRESS,
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <BSP_AUDIO_OUT_Init+0x8c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681c      	ldr	r4, [r3, #0]
 8001fd0:	797a      	ldrb	r2, [r7, #5]
 8001fd2:	88f9      	ldrh	r1, [r7, #6]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2094      	movs	r0, #148	; 0x94
 8001fd8:	47a0      	blx	r4
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <BSP_AUDIO_OUT_Init+0x78>
                               OutputDevice,
                               Volume,
                               AudioFreq) != 0)
  {
    return AUDIO_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e004      	b.n	8001fee <BSP_AUDIO_OUT_Init+0x82>
  }

  /* Set the requested volume */
  BSP_AUDIO_OUT_SetVolume(Volume);
 8001fe4:	797b      	ldrb	r3, [r7, #5]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f86a 	bl	80020c0 <BSP_AUDIO_OUT_SetVolume>

  return AUDIO_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000afec 	.word	0x2000afec
 8001ffc:	20000008 	.word	0x20000008

08002000 <BSP_AUDIO_OUT_Play>:
  * @param  pData: pointer on PCM samples buffer
  * @param  Size: Number of audio data BYTES.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pData, uint32_t Size)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */

	BSP_QSPI_Read(Music_buffor,(uint32_t) pData, DMA_MAX(Size));
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	4293      	cmp	r3, r2
 8002014:	bf28      	it	cs
 8002016:	4613      	movcs	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4813      	ldr	r0, [pc, #76]	; (8002068 <BSP_AUDIO_OUT_Play+0x68>)
 800201c:	f001 f8a4 	bl	8003168 <BSP_QSPI_Read>
	if (HAL_SAI_Transmit_DMA(&BSP_AUDIO_hSai, Music_buffor ,DMA_MAX(Size)) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	4293      	cmp	r3, r2
 8002028:	bf28      	it	cs
 800202a:	4613      	movcs	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	490d      	ldr	r1, [pc, #52]	; (8002068 <BSP_AUDIO_OUT_Play+0x68>)
 8002032:	480e      	ldr	r0, [pc, #56]	; (800206c <BSP_AUDIO_OUT_Play+0x6c>)
 8002034:	f008 f9f4 	bl	800a420 <HAL_SAI_Transmit_DMA>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <BSP_AUDIO_OUT_Play+0x42>
	{
		return AUDIO_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00d      	b.n	800205e <BSP_AUDIO_OUT_Play+0x5e>
	}

  /* Call the audio Codec Play function */
	if (hAudioOut.AudioDrv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) Music_buffor, (uint16_t) Size) != 0)
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <BSP_AUDIO_OUT_Play+0x70>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	b292      	uxth	r2, r2
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <BSP_AUDIO_OUT_Play+0x68>)
 800204e:	2094      	movs	r0, #148	; 0x94
 8002050:	4798      	blx	r3
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <BSP_AUDIO_OUT_Play+0x5c>
	{
		return AUDIO_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <BSP_AUDIO_OUT_Play+0x5e>
	}

	return AUDIO_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000037c 	.word	0x2000037c
 800206c:	2000affc 	.word	0x2000affc
 8002070:	2000afec 	.word	0x2000afec

08002074 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Call Audio Codec Stop function */
  if (hAudioOut.AudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <BSP_AUDIO_OUT_Stop+0x44>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	2094      	movs	r0, #148	; 0x94
 8002086:	4798      	blx	r3
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <BSP_AUDIO_OUT_Stop+0x1e>
  {
    return AUDIO_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <BSP_AUDIO_OUT_Stop+0x3c>
  }

  if (Option == CODEC_PDWN_HW)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <BSP_AUDIO_OUT_Stop+0x2a>
  {
    /* Wait at least 100us */
    HAL_Delay(1);
 8002098:	2001      	movs	r0, #1
 800209a:	f001 fab7 	bl	800360c <HAL_Delay>
  }

  /* Stop DMA transfer of PCM samples towards the serial audio interface */
  if (HAL_SAI_DMAStop(&BSP_AUDIO_hSai) != HAL_OK)
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <BSP_AUDIO_OUT_Stop+0x48>)
 80020a0:	f008 f904 	bl	800a2ac <HAL_SAI_DMAStop>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <BSP_AUDIO_OUT_Stop+0x3a>
  {
    return AUDIO_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <BSP_AUDIO_OUT_Stop+0x3c>
  }

  return AUDIO_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000afec 	.word	0x2000afec
 80020bc:	2000affc 	.word	0x2000affc

080020c0 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP AUDIO status
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (hAudioOut.AudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <BSP_AUDIO_OUT_SetVolume+0x2c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	4611      	mov	r1, r2
 80020d4:	2094      	movs	r0, #148	; 0x94
 80020d6:	4798      	blx	r3
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <BSP_AUDIO_OUT_SetVolume+0x24>
  }

  return AUDIO_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000afec 	.word	0x2000afec

080020f0 <BSP_AUDIO_OUT_RegisterCallbacks>:
  * @retval None
  */
void BSP_AUDIO_OUT_RegisterCallbacks(Audio_CallbackTypeDef ErrorCallback,
                                     Audio_CallbackTypeDef HalfTransferCallback,
                                     Audio_CallbackTypeDef TransferCompleteCallback)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  hAudioOut.CbError            = ErrorCallback;
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6053      	str	r3, [r2, #4]
  hAudioOut.CbHalfTransfer     = HalfTransferCallback;
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6093      	str	r3, [r2, #8]
  hAudioOut.CbTransferComplete = TransferCompleteCallback;
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <BSP_AUDIO_OUT_RegisterCallbacks+0x2c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60d3      	str	r3, [r2, #12]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000afec 	.word	0x2000afec

08002120 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'TransferComplete' function (if any) */
  if (hAudioOut.CbTransferComplete != (Audio_CallbackTypeDef)NULL)
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_SAI_TxCpltCallback+0x20>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SAI_TxCpltCallback+0x16>
  {
    hAudioOut.CbTransferComplete();
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_SAI_TxCpltCallback+0x20>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4798      	blx	r3
  }
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000afec 	.word	0x2000afec

08002144 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'HalfTransfer' callback function (if any) */
  if (hAudioOut.CbHalfTransfer != (Audio_CallbackTypeDef)NULL)
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SAI_TxHalfCpltCallback+0x16>
  {
    hAudioOut.CbHalfTransfer();
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4798      	blx	r3
  }
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000afec 	.word	0x2000afec

08002168 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_SAI_ErrorCallback+0x20>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_SAI_ErrorCallback+0x20>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4798      	blx	r3
  }
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000afec 	.word	0x2000afec

0800218c <AUDIO_SAIx_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  * @retval BSP AUDIO status
  */
static uint8_t AUDIO_SAIx_Init(uint32_t AudioFreq)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&BSP_AUDIO_hSai);
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Initialize the BSP_AUDIO_hSai Instance parameter */
  BSP_AUDIO_hSai.Instance = AUDIO_SAIx;
 80021a4:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021a6:	4a49      	ldr	r2, [pc, #292]	; (80022cc <AUDIO_SAIx_Init+0x140>)
 80021a8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  BSP_AUDIO_hSai.Init.AudioMode      = SAI_MODEMASTER_TX;
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_hSai.Init.Synchro        = SAI_ASYNCHRONOUS;
 80021b0:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  BSP_AUDIO_hSai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  BSP_AUDIO_hSai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_hSai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80021c4:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  BSP_AUDIO_hSai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	619a      	str	r2, [r3, #24]
  BSP_AUDIO_hSai.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  BSP_AUDIO_hSai.Init.Mckdiv         = SAIClockDivider(AudioFreq);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80021dc:	d029      	beq.n	8002232 <AUDIO_SAIx_Init+0xa6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <AUDIO_SAIx_Init+0xa2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80021ee:	d01c      	beq.n	800222a <AUDIO_SAIx_Init+0x9e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d015      	beq.n	8002226 <AUDIO_SAIx_Init+0x9a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002200:	d00f      	beq.n	8002222 <AUDIO_SAIx_Init+0x96>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002208:	4293      	cmp	r3, r2
 800220a:	d008      	beq.n	800221e <AUDIO_SAIx_Init+0x92>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <AUDIO_SAIx_Init+0x8e>
 8002216:	2302      	movs	r3, #2
 8002218:	e00c      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 800221a:	2301      	movs	r3, #1
 800221c:	e00a      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 800221e:	2300      	movs	r3, #0
 8002220:	e008      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 8002222:	2303      	movs	r3, #3
 8002224:	e006      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 8002226:	2301      	movs	r3, #1
 8002228:	e004      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 800222a:	2306      	movs	r3, #6
 800222c:	e002      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 800222e:	2302      	movs	r3, #2
 8002230:	e000      	b.n	8002234 <AUDIO_SAIx_Init+0xa8>
 8002232:	230c      	movs	r3, #12
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002236:	6213      	str	r3, [r2, #32]
  BSP_AUDIO_hSai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  BSP_AUDIO_hSai.Init.CompandingMode = SAI_NOCOMPANDING;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
  BSP_AUDIO_hSai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  BSP_AUDIO_hSai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  BSP_AUDIO_hSai.Init.DataSize       = SAI_DATASIZE_16;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
  BSP_AUDIO_hSai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
  BSP_AUDIO_hSai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800225e:	2200      	movs	r2, #0
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c
  Frame Length: 32
  Frame active Length: 16
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  BSP_AUDIO_hSai.FrameInit.FrameLength = 32;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002264:	2220      	movs	r2, #32
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_AUDIO_hSai.FrameInit.ActiveFrameLength = 16;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800226a:	2210      	movs	r2, #16
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
  BSP_AUDIO_hSai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002270:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002274:	649a      	str	r2, [r3, #72]	; 0x48
  BSP_AUDIO_hSai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002278:	2200      	movs	r2, #0
 800227a:	64da      	str	r2, [r3, #76]	; 0x4c
  BSP_AUDIO_hSai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800227e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002282:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 2
  Slot Active: Slots 0 and 1 actives */
  BSP_AUDIO_hSai.SlotInit.FirstBitOffset = 0;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
  BSP_AUDIO_hSai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800228c:	2200      	movs	r2, #0
 800228e:	659a      	str	r2, [r3, #88]	; 0x58
  BSP_AUDIO_hSai.SlotInit.SlotNumber = 2;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002292:	2202      	movs	r2, #2
 8002294:	65da      	str	r2, [r3, #92]	; 0x5c
  BSP_AUDIO_hSai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 8002298:	2203      	movs	r2, #3
 800229a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&BSP_AUDIO_hSai) != HAL_OK)
 800229c:	480a      	ldr	r0, [pc, #40]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 800229e:	f007 fe93 	bl	8009fc8 <HAL_SAI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <AUDIO_SAIx_Init+0x120>
  {
    return AUDIO_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e008      	b.n	80022be <AUDIO_SAIx_Init+0x132>
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&BSP_AUDIO_hSai);
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <AUDIO_SAIx_Init+0x13c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022ba:	601a      	str	r2, [r3, #0]

  return AUDIO_OK;
 80022bc:	2300      	movs	r3, #0

}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000affc 	.word	0x2000affc
 80022cc:	40015404 	.word	0x40015404

080022d0 <AUDIO_CODEC_Reset>:
  * @brief  Resets the audio codec. It restores the default configuration of the
  *         codec (this function shall be called before initializing the codec).
  * @retval None
  */
static void AUDIO_CODEC_Reset(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Initialize the audio driver structure */
  hAudioOut.AudioDrv = &cs43l22_drv;
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <AUDIO_CODEC_Reset+0x18>)
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <AUDIO_CODEC_Reset+0x1c>)
 80022d8:	601a      	str	r2, [r3, #0]

  hAudioOut.AudioDrv->Reset(AUDIO_I2C_ADDRESS);
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <AUDIO_CODEC_Reset+0x18>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2094      	movs	r0, #148	; 0x94
 80022e2:	4798      	blx	r3
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000afec 	.word	0x2000afec
 80022ec:	20000008 	.word	0x20000008

080022f0 <AUDIO_SAIPLLConfig>:
  * @note   The SAI PLL input clock must be configured in the user application.
  *         The SAI PLL configuration done within this function assumes that
  *         the SAI PLL input clock runs at 8 MHz.
  */
static uint8_t AUDIO_SAIPLLConfig(uint32_t Frequency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0a4      	sub	sp, #144	; 0x90
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  /* Retrieve actual RCC configuration */
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 fbff 	bl	8008b00 <HAL_RCCEx_GetPeriphCLKConfig>

  if ((Frequency == AUDIO_FREQUENCY_11K)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_22K)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <AUDIO_SAIPLLConfig+0x30>
      || (Frequency == AUDIO_FREQUENCY_44K))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f64a 4244 	movw	r2, #44100	; 0xac44
 800231c:	4293      	cmp	r3, r2
 800231e:	d10c      	bne.n	800233a <AUDIO_SAIPLLConfig+0x4a>
  {
    /* Configure PLLSAI prescalers */
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 24 = VCO_192M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 192/17 = 11.294 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 8002320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002324:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 24;
 8002326:	2318      	movs	r3, #24
 8002328:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 800232a:	2311      	movs	r3, #17
 800232c:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002334:	2300      	movs	r3, #0
 8002336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002338:	e00b      	b.n	8002352 <AUDIO_SAIPLLConfig+0x62>
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    /* SAI clock config
    PLLSAI1_VCO= 8 Mhz * PLLSAI1N = 8 * 43 = VCO_344M
    SAI_CK_x = PLLSAI1_VCO/PLLSAI1P = 344/7 = 49.142 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800233a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800233e:	60bb      	str	r3, [r7, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 43;
 8002340:	232b      	movs	r3, #43	; 0x2b
 8002342:	617b      	str	r3, [r7, #20]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 8002344:	2307      	movs	r3, #7
 8002346:	61bb      	str	r3, [r7, #24]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8002348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 800234e:	2300      	movs	r3, #0
 8002350:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct) != HAL_OK)
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f006 f8e8 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <AUDIO_SAIPLLConfig+0x76>
  {
    return AUDIO_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <AUDIO_SAIPLLConfig+0x78>
  }

  return AUDIO_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3790      	adds	r7, #144	; 0x90
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 8002376:	4a1a      	ldr	r2, [pc, #104]	; (80023e0 <BSP_LCD_GLASS_Init+0x70>)
 8002378:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 8002382:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002386:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 800238a:	220c      	movs	r2, #12
 800238c:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 800239c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80023a0:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023ca:	f000 f8eb 	bl	80025a4 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <BSP_LCD_GLASS_Init+0x6c>)
 80023d0:	f004 fb8e 	bl	8006af0 <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 80023d4:	f000 f82a 	bl	800242c <BSP_LCD_GLASS_Clear>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000b084 	.word	0x2000b084
 80023e0:	40002400 	.word	0x40002400

080023e4 <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 80023f0:	e00b      	b.n	800240a <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fadf 	bl	80029bc <WriteChar>

    /* Point on the next character */
    ptr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	3301      	adds	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <BSP_LCD_GLASS_DisplayString+0x34>
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d9ec      	bls.n	80023f2 <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <BSP_LCD_GLASS_DisplayString+0x44>)
 800241a:	f004 fcda 	bl	8006dd2 <HAL_LCD_UpdateDisplayRequest>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000b084 	.word	0x2000b084

0800242c <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <BSP_LCD_GLASS_Clear+0x10>)
 8002432:	f004 fc78 	bl	8006d26 <HAL_LCD_Clear>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000b084 	.word	0x2000b084

08002440 <BSP_LCD_GLASS_ScrollSentence>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_ScrollSentence(uint8_t *ptr, uint16_t nScroll, uint16_t ScrollSpeed)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	803b      	strh	r3, [r7, #0]
  uint8_t repetition = 0, nbrchar = 0, sizestr = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
 8002454:	2300      	movs	r3, #0
 8002456:	75bb      	strb	r3, [r7, #22]
 8002458:	2300      	movs	r3, #0
 800245a:	757b      	strb	r3, [r7, #21]
  uint8_t *ptr1;
  uint8_t str[6] = "";
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	2300      	movs	r3, #0
 8002462:	81bb      	strh	r3, [r7, #12]

  /* Reset interrupt variable in case key was press before entering function */
  bLCDGlass_KeyPressed = 0;
 8002464:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]

  if (ptr == 0)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8092 	beq.w	8002596 <BSP_LCD_GLASS_ScrollSentence+0x156>
  {
    return;
  }

  /* To calculate end of string */
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	2300      	movs	r3, #0
 8002478:	757b      	strb	r3, [r7, #21]
 800247a:	e005      	b.n	8002488 <BSP_LCD_GLASS_ScrollSentence+0x48>
 800247c:	7d7b      	ldrb	r3, [r7, #21]
 800247e:	3301      	adds	r3, #1
 8002480:	757b      	strb	r3, [r7, #21]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	3301      	adds	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f5      	bne.n	800247c <BSP_LCD_GLASS_ScrollSentence+0x3c>

  ptr1 = ptr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	613b      	str	r3, [r7, #16]

  BSP_LCD_GLASS_DisplayString(str);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffa3 	bl	80023e4 <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 800249e:	883b      	ldrh	r3, [r7, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f8b3 	bl	800360c <HAL_Delay>

  /* To shift the string for scrolling display*/
  for (repetition = 0; repetition < nScroll; repetition++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
 80024aa:	e06e      	b.n	800258a <BSP_LCD_GLASS_ScrollSentence+0x14a>
  {
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	75bb      	strb	r3, [r7, #22]
 80024b0:	e064      	b.n	800257c <BSP_LCD_GLASS_ScrollSentence+0x13c>
    {
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 80024b2:	7dbb      	ldrb	r3, [r7, #22]
 80024b4:	3301      	adds	r3, #1
 80024b6:	7d7a      	ldrb	r2, [r7, #21]
 80024b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80024bc:	fb01 f202 	mul.w	r2, r1, r2
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	723b      	strb	r3, [r7, #8]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 80024cc:	7dbb      	ldrb	r3, [r7, #22]
 80024ce:	3302      	adds	r3, #2
 80024d0:	7d7a      	ldrb	r2, [r7, #21]
 80024d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024d6:	fb01 f202 	mul.w	r2, r1, r2
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	727b      	strb	r3, [r7, #9]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 80024e6:	7dbb      	ldrb	r3, [r7, #22]
 80024e8:	3303      	adds	r3, #3
 80024ea:	7d7a      	ldrb	r2, [r7, #21]
 80024ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80024f0:	fb01 f202 	mul.w	r2, r1, r2
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	461a      	mov	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	72bb      	strb	r3, [r7, #10]
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8002500:	7dbb      	ldrb	r3, [r7, #22]
 8002502:	3304      	adds	r3, #4
 8002504:	7d7a      	ldrb	r2, [r7, #21]
 8002506:	fb93 f1f2 	sdiv	r1, r3, r2
 800250a:	fb01 f202 	mul.w	r2, r1, r2
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	461a      	mov	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	72fb      	strb	r3, [r7, #11]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 800251a:	7dbb      	ldrb	r3, [r7, #22]
 800251c:	3305      	adds	r3, #5
 800251e:	7d7a      	ldrb	r2, [r7, #21]
 8002520:	fb93 f1f2 	sdiv	r1, r3, r2
 8002524:	fb01 f202 	mul.w	r2, r1, r2
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	461a      	mov	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	733b      	strb	r3, [r7, #12]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 8002534:	7dbb      	ldrb	r3, [r7, #22]
 8002536:	3306      	adds	r3, #6
 8002538:	7d7a      	ldrb	r2, [r7, #21]
 800253a:	fb93 f1f2 	sdiv	r1, r3, r2
 800253e:	fb01 f202 	mul.w	r2, r1, r2
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	461a      	mov	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	737b      	strb	r3, [r7, #13]
      BSP_LCD_GLASS_Clear();
 800254e:	f7ff ff6d 	bl	800242c <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff44 	bl	80023e4 <BSP_LCD_GLASS_DisplayString>

      /* user button pressed stop the scrolling sentence */
      if (bLCDGlass_KeyPressed)
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <BSP_LCD_GLASS_ScrollSentence+0x12e>
      {
        bLCDGlass_KeyPressed = 0;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
        return;
 800256c:	e014      	b.n	8002598 <BSP_LCD_GLASS_ScrollSentence+0x158>
      }
      HAL_Delay(ScrollSpeed);
 800256e:	883b      	ldrh	r3, [r7, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f84b 	bl	800360c <HAL_Delay>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8002576:	7dbb      	ldrb	r3, [r7, #22]
 8002578:	3301      	adds	r3, #1
 800257a:	75bb      	strb	r3, [r7, #22]
 800257c:	7dba      	ldrb	r2, [r7, #22]
 800257e:	7d7b      	ldrb	r3, [r7, #21]
 8002580:	429a      	cmp	r2, r3
 8002582:	d396      	bcc.n	80024b2 <BSP_LCD_GLASS_ScrollSentence+0x72>
  for (repetition = 0; repetition < nScroll; repetition++)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	3301      	adds	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	b29b      	uxth	r3, r3
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	429a      	cmp	r2, r3
 8002592:	d88b      	bhi.n	80024ac <BSP_LCD_GLASS_ScrollSentence+0x6c>
 8002594:	e000      	b.n	8002598 <BSP_LCD_GLASS_ScrollSentence+0x158>
    return;
 8002596:	bf00      	nop
    }
  }
}
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000b080 	.word	0x2000b080

080025a4 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0c0      	sub	sp, #256	; 0x100
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80025ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80025bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025c0:	2244      	movs	r2, #68	; 0x44
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f009 fc4b 	bl	800be60 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80025ca:	f107 0320 	add.w	r3, r7, #32
 80025ce:	2288      	movs	r2, #136	; 0x88
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f009 fc44 	bl	800be60 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b51      	ldr	r3, [pc, #324]	; (8002720 <LCD_MspInit+0x17c>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <LCD_MspInit+0x17c>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <LCD_MspInit+0x17c>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80025f0:	2304      	movs	r3, #4
 80025f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8002602:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002606:	4618      	mov	r0, r3
 8002608:	f005 f9a2 	bl	8007950 <HAL_RCC_OscConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d000      	beq.n	8002614 <LCD_MspInit+0x70>
  {
    while (1);
 8002612:	e7fe      	b.n	8002612 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800261a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	4618      	mov	r0, r3
 8002628:	f005 ff80 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <LCD_MspInit+0x17c>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <LCD_MspInit+0x17c>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002638:	4b39      	ldr	r3, [pc, #228]	; (8002720 <LCD_MspInit+0x17c>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <LCD_MspInit+0x17c>)
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <LCD_MspInit+0x17c>)
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <LCD_MspInit+0x17c>)
 8002652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <LCD_MspInit+0x17c>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002660:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <LCD_MspInit+0x17c>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <LCD_MspInit+0x17c>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <LCD_MspInit+0x17c>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <LCD_MspInit+0x17c>)
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <LCD_MspInit+0x17c>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 800268c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002690:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80026a6:	230b      	movs	r3, #11
 80026a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80026ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f003 f92d 	bl	8005914 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80026ba:	f24f 2333 	movw	r3, #62003	; 0xf233
 80026be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80026c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026c6:	4619      	mov	r1, r3
 80026c8:	4816      	ldr	r0, [pc, #88]	; (8002724 <LCD_MspInit+0x180>)
 80026ca:	f003 f923 	bl	8005914 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80026ce:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80026d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80026d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026da:	4619      	mov	r1, r3
 80026dc:	4812      	ldr	r0, [pc, #72]	; (8002728 <LCD_MspInit+0x184>)
 80026de:	f003 f919 	bl	8005914 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80026e2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80026e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80026ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ee:	4619      	mov	r1, r3
 80026f0:	480e      	ldr	r0, [pc, #56]	; (800272c <LCD_MspInit+0x188>)
 80026f2:	f003 f90f 	bl	8005914 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80026f6:	2002      	movs	r0, #2
 80026f8:	f000 ff88 	bl	800360c <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <LCD_MspInit+0x17c>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <LCD_MspInit+0x17c>)
 8002702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002706:	6593      	str	r3, [r2, #88]	; 0x58
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <LCD_MspInit+0x17c>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
}
 8002714:	bf00      	nop
 8002716:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	48000400 	.word	0x48000400
 8002728:	48000800 	.word	0x48000800
 800272c:	48000c00 	.word	0x48000c00

08002730 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
 800273c:	4613      	mov	r3, r2
 800273e:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 8002740:	2300      	movs	r3, #0
 8002742:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	737b      	strb	r3, [r7, #13]
 8002748:	2300      	movs	r3, #0
 800274a:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b6e      	cmp	r3, #110	; 0x6e
 8002752:	f300 80a9 	bgt.w	80028a8 <Convert+0x178>
 8002756:	2b20      	cmp	r3, #32
 8002758:	f2c0 80dd 	blt.w	8002916 <Convert+0x1e6>
 800275c:	3b20      	subs	r3, #32
 800275e:	2b4e      	cmp	r3, #78	; 0x4e
 8002760:	f200 80d9 	bhi.w	8002916 <Convert+0x1e6>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <Convert+0x3c>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	080028af 	.word	0x080028af
 8002770:	08002917 	.word	0x08002917
 8002774:	08002917 	.word	0x08002917
 8002778:	08002917 	.word	0x08002917
 800277c:	08002917 	.word	0x08002917
 8002780:	080028f7 	.word	0x080028f7
 8002784:	08002917 	.word	0x08002917
 8002788:	08002917 	.word	0x08002917
 800278c:	080028bd 	.word	0x080028bd
 8002790:	080028c3 	.word	0x080028c3
 8002794:	080028b5 	.word	0x080028b5
 8002798:	080028e9 	.word	0x080028e9
 800279c:	08002917 	.word	0x08002917
 80027a0:	080028e1 	.word	0x080028e1
 80027a4:	08002917 	.word	0x08002917
 80027a8:	080028f1 	.word	0x080028f1
 80027ac:	08002907 	.word	0x08002907
 80027b0:	08002907 	.word	0x08002907
 80027b4:	08002907 	.word	0x08002907
 80027b8:	08002907 	.word	0x08002907
 80027bc:	08002907 	.word	0x08002907
 80027c0:	08002907 	.word	0x08002907
 80027c4:	08002907 	.word	0x08002907
 80027c8:	08002907 	.word	0x08002907
 80027cc:	08002907 	.word	0x08002907
 80027d0:	08002907 	.word	0x08002907
 80027d4:	08002917 	.word	0x08002917
 80027d8:	08002917 	.word	0x08002917
 80027dc:	08002917 	.word	0x08002917
 80027e0:	08002917 	.word	0x08002917
 80027e4:	08002917 	.word	0x08002917
 80027e8:	08002917 	.word	0x08002917
 80027ec:	08002917 	.word	0x08002917
 80027f0:	08002917 	.word	0x08002917
 80027f4:	08002917 	.word	0x08002917
 80027f8:	08002917 	.word	0x08002917
 80027fc:	08002917 	.word	0x08002917
 8002800:	08002917 	.word	0x08002917
 8002804:	08002917 	.word	0x08002917
 8002808:	08002917 	.word	0x08002917
 800280c:	08002917 	.word	0x08002917
 8002810:	08002917 	.word	0x08002917
 8002814:	08002917 	.word	0x08002917
 8002818:	08002917 	.word	0x08002917
 800281c:	08002917 	.word	0x08002917
 8002820:	08002917 	.word	0x08002917
 8002824:	08002917 	.word	0x08002917
 8002828:	08002917 	.word	0x08002917
 800282c:	08002917 	.word	0x08002917
 8002830:	08002917 	.word	0x08002917
 8002834:	08002917 	.word	0x08002917
 8002838:	08002917 	.word	0x08002917
 800283c:	08002917 	.word	0x08002917
 8002840:	08002917 	.word	0x08002917
 8002844:	08002917 	.word	0x08002917
 8002848:	08002917 	.word	0x08002917
 800284c:	08002917 	.word	0x08002917
 8002850:	08002917 	.word	0x08002917
 8002854:	08002917 	.word	0x08002917
 8002858:	08002917 	.word	0x08002917
 800285c:	08002917 	.word	0x08002917
 8002860:	08002917 	.word	0x08002917
 8002864:	08002917 	.word	0x08002917
 8002868:	08002917 	.word	0x08002917
 800286c:	08002917 	.word	0x08002917
 8002870:	08002917 	.word	0x08002917
 8002874:	08002917 	.word	0x08002917
 8002878:	08002917 	.word	0x08002917
 800287c:	080028c9 	.word	0x080028c9
 8002880:	08002917 	.word	0x08002917
 8002884:	08002917 	.word	0x08002917
 8002888:	08002917 	.word	0x08002917
 800288c:	08002917 	.word	0x08002917
 8002890:	08002917 	.word	0x08002917
 8002894:	08002917 	.word	0x08002917
 8002898:	08002917 	.word	0x08002917
 800289c:	08002917 	.word	0x08002917
 80028a0:	080028d1 	.word	0x080028d1
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	2bff      	cmp	r3, #255	; 0xff
 80028aa:	d028      	beq.n	80028fe <Convert+0x1ce>
 80028ac:	e033      	b.n	8002916 <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 80028ae:	2300      	movs	r3, #0
 80028b0:	81fb      	strh	r3, [r7, #14]
      break;
 80028b2:	e04f      	b.n	8002954 <Convert+0x224>

    case '*':
      ch = C_STAR;
 80028b4:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 80028b8:	81fb      	strh	r3, [r7, #14]
      break;
 80028ba:	e04b      	b.n	8002954 <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 80028bc:	2328      	movs	r3, #40	; 0x28
 80028be:	81fb      	strh	r3, [r7, #14]
      break;
 80028c0:	e048      	b.n	8002954 <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 80028c2:	2311      	movs	r3, #17
 80028c4:	81fb      	strh	r3, [r7, #14]
      break;
 80028c6:	e045      	b.n	8002954 <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 80028c8:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80028cc:	81fb      	strh	r3, [r7, #14]
      break;
 80028ce:	e041      	b.n	8002954 <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 80028d0:	f24b 2310 	movw	r3, #45584	; 0xb210
 80028d4:	81fb      	strh	r3, [r7, #14]
      break;
 80028d6:	e03d      	b.n	8002954 <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 80028d8:	f242 2310 	movw	r3, #8720	; 0x2210
 80028dc:	81fb      	strh	r3, [r7, #14]
      break;
 80028de:	e039      	b.n	8002954 <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 80028e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028e4:	81fb      	strh	r3, [r7, #14]
      break;
 80028e6:	e035      	b.n	8002954 <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 80028e8:	f24a 0314 	movw	r3, #40980	; 0xa014
 80028ec:	81fb      	strh	r3, [r7, #14]
      break;
 80028ee:	e031      	b.n	8002954 <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 80028f0:	23c0      	movs	r3, #192	; 0xc0
 80028f2:	81fb      	strh	r3, [r7, #14]
      break;
 80028f4:	e02e      	b.n	8002954 <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 80028f6:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 80028fa:	81fb      	strh	r3, [r7, #14]
      break;
 80028fc:	e02a      	b.n	8002954 <Convert+0x224>
    case 255 :
      ch = C_FULL;
 80028fe:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 8002902:	81fb      	strh	r3, [r7, #14]
      break ;
 8002904:	e026      	b.n	8002954 <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3b30      	subs	r3, #48	; 0x30
 800290c:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <Convert+0x280>)
 800290e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002912:	81fb      	strh	r3, [r7, #14]
      break;
 8002914:	e01e      	b.n	8002954 <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b5a      	cmp	r3, #90	; 0x5a
 800291c:	d80a      	bhi.n	8002934 <Convert+0x204>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d906      	bls.n	8002934 <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3b41      	subs	r3, #65	; 0x41
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <Convert+0x284>)
 800292e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002932:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b7a      	cmp	r3, #122	; 0x7a
 800293a:	d80a      	bhi.n	8002952 <Convert+0x222>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b60      	cmp	r3, #96	; 0x60
 8002942:	d906      	bls.n	8002952 <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b61      	subs	r3, #97	; 0x61
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <Convert+0x284>)
 800294c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002950:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8002952:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d103      	bne.n	8002962 <Convert+0x232>
  {
    ch |= 0x0002;
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d103      	bne.n	8002970 <Convert+0x240>
  {
    ch |= 0x0020;
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002970:	230c      	movs	r3, #12
 8002972:	737b      	strb	r3, [r7, #13]
 8002974:	2300      	movs	r3, #0
 8002976:	733b      	strb	r3, [r7, #12]
 8002978:	e010      	b.n	800299c <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 800297a:	89fa      	ldrh	r2, [r7, #14]
 800297c:	7b7b      	ldrb	r3, [r7, #13]
 800297e:	fa42 f303 	asr.w	r3, r2, r3
 8002982:	461a      	mov	r2, r3
 8002984:	7b3b      	ldrb	r3, [r7, #12]
 8002986:	f002 020f 	and.w	r2, r2, #15
 800298a:	490b      	ldr	r1, [pc, #44]	; (80029b8 <Convert+0x288>)
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002990:	7b7b      	ldrb	r3, [r7, #13]
 8002992:	3b04      	subs	r3, #4
 8002994:	737b      	strb	r3, [r7, #13]
 8002996:	7b3b      	ldrb	r3, [r7, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	733b      	strb	r3, [r7, #12]
 800299c:	7b3b      	ldrb	r3, [r7, #12]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d9eb      	bls.n	800297a <Convert+0x24a>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	0800bf1c 	.word	0x0800bf1c
 80029b4:	0800bee8 	.word	0x0800bee8
 80029b8:	2000b0c0 	.word	0x2000b0c0

080029bc <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70bb      	strb	r3, [r7, #2]
 80029d2:	4613      	mov	r3, r2
 80029d4:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 80029da:	78ba      	ldrb	r2, [r7, #2]
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fea5 	bl	8002730 <Convert>

  switch (Position)
 80029e6:	787b      	ldrb	r3, [r7, #1]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	f200 835b 	bhi.w	80030a4 <WriteChar+0x6e8>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <WriteChar+0x38>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a0d 	.word	0x08002a0d
 80029f8:	08002b07 	.word	0x08002b07
 80029fc:	08002c21 	.word	0x08002c21
 8002a00:	08002d23 	.word	0x08002d23
 8002a04:	08002e51 	.word	0x08002e51
 8002a08:	08002f9b 	.word	0x08002f9b
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002a0c:	4b80      	ldr	r3, [pc, #512]	; (8002c10 <WriteChar+0x254>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	f003 0210 	and.w	r2, r3, #16
 8002a16:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <WriteChar+0x254>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002a24:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <WriteChar+0x254>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	059b      	lsls	r3, r3, #22
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	431a      	orrs	r2, r3
 8002a32:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <WriteChar+0x254>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a74      	ldr	r2, [pc, #464]	; (8002c14 <WriteChar+0x258>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	4874      	ldr	r0, [pc, #464]	; (8002c18 <WriteChar+0x25c>)
 8002a46:	f004 f913 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002a4a:	4b71      	ldr	r3, [pc, #452]	; (8002c10 <WriteChar+0x254>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	f003 0210 	and.w	r2, r3, #16
 8002a54:	4b6e      	ldr	r3, [pc, #440]	; (8002c10 <WriteChar+0x254>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	05db      	lsls	r3, r3, #23
 8002a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a60:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002a62:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <WriteChar+0x254>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	059b      	lsls	r3, r3, #22
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <WriteChar+0x254>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <WriteChar+0x258>)
 8002a80:	2102      	movs	r1, #2
 8002a82:	4865      	ldr	r0, [pc, #404]	; (8002c18 <WriteChar+0x25c>)
 8002a84:	f004 f8f4 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002a88:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <WriteChar+0x254>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	f003 0210 	and.w	r2, r3, #16
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <WriteChar+0x254>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9e:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <WriteChar+0x254>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	059b      	lsls	r3, r3, #22
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	431a      	orrs	r2, r3
 8002aae:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <WriteChar+0x254>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a55      	ldr	r2, [pc, #340]	; (8002c14 <WriteChar+0x258>)
 8002abe:	2104      	movs	r1, #4
 8002ac0:	4855      	ldr	r0, [pc, #340]	; (8002c18 <WriteChar+0x25c>)
 8002ac2:	f004 f8d5 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <WriteChar+0x254>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	f003 0210 	and.w	r2, r3, #16
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <WriteChar+0x254>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002adc:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002ade:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <WriteChar+0x254>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	059b      	lsls	r3, r3, #22
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	431a      	orrs	r2, r3
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <WriteChar+0x254>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a46      	ldr	r2, [pc, #280]	; (8002c14 <WriteChar+0x258>)
 8002afc:	2106      	movs	r1, #6
 8002afe:	4846      	ldr	r0, [pc, #280]	; (8002c18 <WriteChar+0x25c>)
 8002b00:	f004 f8b6 	bl	8006c70 <HAL_LCD_Write>
      break;
 8002b04:	e2cf      	b.n	80030a6 <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002b06:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <WriteChar+0x254>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	019b      	lsls	r3, r3, #6
 8002b0c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002b10:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <WriteChar+0x254>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	035b      	lsls	r3, r3, #13
 8002b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1c:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <WriteChar+0x254>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <WriteChar+0x254>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <WriteChar+0x260>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	4835      	ldr	r0, [pc, #212]	; (8002c18 <WriteChar+0x25c>)
 8002b44:	f004 f894 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <WriteChar+0x254>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <WriteChar+0x254>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	035b      	lsls	r3, r3, #13
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5e:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <WriteChar+0x254>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <WriteChar+0x254>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <WriteChar+0x260>)
 8002b82:	2102      	movs	r1, #2
 8002b84:	4824      	ldr	r0, [pc, #144]	; (8002c18 <WriteChar+0x25c>)
 8002b86:	f004 f873 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <WriteChar+0x254>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <WriteChar+0x254>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	035b      	lsls	r3, r3, #13
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <WriteChar+0x254>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	031b      	lsls	r3, r3, #12
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <WriteChar+0x254>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <WriteChar+0x260>)
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4814      	ldr	r0, [pc, #80]	; (8002c18 <WriteChar+0x25c>)
 8002bc8:	f004 f852 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <WriteChar+0x254>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <WriteChar+0x254>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	035b      	lsls	r3, r3, #13
 8002bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be2:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <WriteChar+0x254>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <WriteChar+0x254>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	08db      	lsrs	r3, r3, #3
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <WriteChar+0x260>)
 8002c06:	2106      	movs	r1, #6
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <WriteChar+0x25c>)
 8002c0a:	f004 f831 	bl	8006c70 <HAL_LCD_Write>
      break;
 8002c0e:	e24a      	b.n	80030a6 <WriteChar+0x6ea>
 8002c10:	2000b0c0 	.word	0x2000b0c0
 8002c14:	ff3fffe7 	.word	0xff3fffe7
 8002c18:	2000b084 	.word	0x2000b084
 8002c1c:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002c20:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <WriteChar+0x488>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	03db      	lsls	r3, r3, #15
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b86      	ldr	r3, [pc, #536]	; (8002e44 <WriteChar+0x488>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	075b      	lsls	r3, r3, #29
 8002c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c34:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002c36:	4b83      	ldr	r3, [pc, #524]	; (8002e44 <WriteChar+0x488>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	071b      	lsls	r3, r3, #28
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	431a      	orrs	r2, r3
 8002c44:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <WriteChar+0x488>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	039b      	lsls	r3, r3, #14
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a7c      	ldr	r2, [pc, #496]	; (8002e48 <WriteChar+0x48c>)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	487c      	ldr	r0, [pc, #496]	; (8002e4c <WriteChar+0x490>)
 8002c5c:	f004 f808 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002c60:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <WriteChar+0x488>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	03db      	lsls	r3, r3, #15
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <WriteChar+0x488>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	075b      	lsls	r3, r3, #29
 8002c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c74:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <WriteChar+0x488>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	431a      	orrs	r2, r3
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <WriteChar+0x488>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <WriteChar+0x48c>)
 8002c98:	2102      	movs	r1, #2
 8002c9a:	486c      	ldr	r0, [pc, #432]	; (8002e4c <WriteChar+0x490>)
 8002c9c:	f003 ffe8 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <WriteChar+0x488>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	03db      	lsls	r3, r3, #15
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <WriteChar+0x488>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	075b      	lsls	r3, r3, #29
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <WriteChar+0x488>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	071b      	lsls	r3, r3, #28
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <WriteChar+0x488>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	039b      	lsls	r3, r3, #14
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	; (8002e48 <WriteChar+0x48c>)
 8002cd8:	2104      	movs	r1, #4
 8002cda:	485c      	ldr	r0, [pc, #368]	; (8002e4c <WriteChar+0x490>)
 8002cdc:	f003 ffc8 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002ce0:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <WriteChar+0x488>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	03db      	lsls	r3, r3, #15
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <WriteChar+0x488>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	075b      	lsls	r3, r3, #29
 8002cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf4:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <WriteChar+0x488>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	431a      	orrs	r2, r3
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <WriteChar+0x488>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	039b      	lsls	r3, r3, #14
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <WriteChar+0x48c>)
 8002d18:	2106      	movs	r1, #6
 8002d1a:	484c      	ldr	r0, [pc, #304]	; (8002e4c <WriteChar+0x490>)
 8002d1c:	f003 ffa8 	bl	8006c70 <HAL_LCD_Write>
      break;
 8002d20:	e1c1      	b.n	80030a6 <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <WriteChar+0x488>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	07da      	lsls	r2, r3, #31
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <WriteChar+0x488>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	079b      	lsls	r3, r3, #30
 8002d30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4842      	ldr	r0, [pc, #264]	; (8002e4c <WriteChar+0x490>)
 8002d42:	f003 ff95 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <WriteChar+0x488>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0202 	and.w	r2, r3, #2
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <WriteChar+0x488>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f06f 0203 	mvn.w	r2, #3
 8002d62:	2101      	movs	r1, #1
 8002d64:	4839      	ldr	r0, [pc, #228]	; (8002e4c <WriteChar+0x490>)
 8002d66:	f003 ff83 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <WriteChar+0x488>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	07da      	lsls	r2, r3, #31
 8002d70:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <WriteChar+0x488>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	079b      	lsls	r3, r3, #30
 8002d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002d86:	2102      	movs	r1, #2
 8002d88:	4830      	ldr	r0, [pc, #192]	; (8002e4c <WriteChar+0x490>)
 8002d8a:	f003 ff71 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <WriteChar+0x488>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0202 	and.w	r2, r3, #2
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <WriteChar+0x488>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f06f 0203 	mvn.w	r2, #3
 8002daa:	2103      	movs	r1, #3
 8002dac:	4827      	ldr	r0, [pc, #156]	; (8002e4c <WriteChar+0x490>)
 8002dae:	f003 ff5f 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <WriteChar+0x488>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	07da      	lsls	r2, r3, #31
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <WriteChar+0x488>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	079b      	lsls	r3, r3, #30
 8002dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002dce:	2104      	movs	r1, #4
 8002dd0:	481e      	ldr	r0, [pc, #120]	; (8002e4c <WriteChar+0x490>)
 8002dd2:	f003 ff4d 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <WriteChar+0x488>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0202 	and.w	r2, r3, #2
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <WriteChar+0x488>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f06f 0203 	mvn.w	r2, #3
 8002df2:	2105      	movs	r1, #5
 8002df4:	4815      	ldr	r0, [pc, #84]	; (8002e4c <WriteChar+0x490>)
 8002df6:	f003 ff3b 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <WriteChar+0x488>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	07da      	lsls	r2, r3, #31
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <WriteChar+0x488>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	079b      	lsls	r3, r3, #30
 8002e08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002e16:	2106      	movs	r1, #6
 8002e18:	480c      	ldr	r0, [pc, #48]	; (8002e4c <WriteChar+0x490>)
 8002e1a:	f003 ff29 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <WriteChar+0x488>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0202 	and.w	r2, r3, #2
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <WriteChar+0x488>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f06f 0203 	mvn.w	r2, #3
 8002e3a:	2107      	movs	r1, #7
 8002e3c:	4803      	ldr	r0, [pc, #12]	; (8002e4c <WriteChar+0x490>)
 8002e3e:	f003 ff17 	bl	8006c70 <HAL_LCD_Write>
      break;
 8002e42:	e130      	b.n	80030a6 <WriteChar+0x6ea>
 8002e44:	2000b0c0 	.word	0x2000b0c0
 8002e48:	cfff3fff 	.word	0xcfff3fff
 8002e4c:	2000b084 	.word	0x2000b084

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002e50:	4b97      	ldr	r3, [pc, #604]	; (80030b0 <WriteChar+0x6f4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	065b      	lsls	r3, r3, #25
 8002e58:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002e5c:	4b94      	ldr	r3, [pc, #592]	; (80030b0 <WriteChar+0x6f4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002e72:	2100      	movs	r1, #0
 8002e74:	488f      	ldr	r0, [pc, #572]	; (80030b4 <WriteChar+0x6f8>)
 8002e76:	f003 fefb 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	; (80030b0 <WriteChar+0x6f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	f003 0208 	and.w	r2, r3, #8
 8002e84:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <WriteChar+0x6f4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f06f 020c 	mvn.w	r2, #12
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4885      	ldr	r0, [pc, #532]	; (80030b4 <WriteChar+0x6f8>)
 8002e9e:	f003 fee7 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002ea2:	4b83      	ldr	r3, [pc, #524]	; (80030b0 <WriteChar+0x6f4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	065b      	lsls	r3, r3, #25
 8002eaa:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002eae:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <WriteChar+0x6f4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	487b      	ldr	r0, [pc, #492]	; (80030b4 <WriteChar+0x6f8>)
 8002ec8:	f003 fed2 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002ecc:	4b78      	ldr	r3, [pc, #480]	; (80030b0 <WriteChar+0x6f4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	f003 0208 	and.w	r2, r3, #8
 8002ed6:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <WriteChar+0x6f4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f06f 020c 	mvn.w	r2, #12
 8002eec:	2103      	movs	r1, #3
 8002eee:	4871      	ldr	r0, [pc, #452]	; (80030b4 <WriteChar+0x6f8>)
 8002ef0:	f003 febe 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002ef4:	4b6e      	ldr	r3, [pc, #440]	; (80030b0 <WriteChar+0x6f4>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	065b      	lsls	r3, r3, #25
 8002efc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002f00:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <WriteChar+0x6f4>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002f16:	2104      	movs	r1, #4
 8002f18:	4866      	ldr	r0, [pc, #408]	; (80030b4 <WriteChar+0x6f8>)
 8002f1a:	f003 fea9 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002f1e:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <WriteChar+0x6f4>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	f003 0208 	and.w	r2, r3, #8
 8002f28:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <WriteChar+0x6f4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	08db      	lsrs	r3, r3, #3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f06f 020c 	mvn.w	r2, #12
 8002f3e:	2105      	movs	r1, #5
 8002f40:	485c      	ldr	r0, [pc, #368]	; (80030b4 <WriteChar+0x6f8>)
 8002f42:	f003 fe95 	bl	8006c70 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <WriteChar+0x6f4>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	065b      	lsls	r3, r3, #25
 8002f4e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <WriteChar+0x6f4>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002f68:	2106      	movs	r1, #6
 8002f6a:	4852      	ldr	r0, [pc, #328]	; (80030b4 <WriteChar+0x6f8>)
 8002f6c:	f003 fe80 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <WriteChar+0x6f4>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	f003 0208 	and.w	r2, r3, #8
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <WriteChar+0x6f4>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	08db      	lsrs	r3, r3, #3
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f06f 020c 	mvn.w	r2, #12
 8002f90:	2107      	movs	r1, #7
 8002f92:	4848      	ldr	r0, [pc, #288]	; (80030b4 <WriteChar+0x6f8>)
 8002f94:	f003 fe6c 	bl	8006c70 <HAL_LCD_Write>
      break;
 8002f98:	e085      	b.n	80030a6 <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002f9a:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <WriteChar+0x6f4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	045b      	lsls	r3, r3, #17
 8002fa0:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002fa4:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <WriteChar+0x6f4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <WriteChar+0x6f4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <WriteChar+0x6f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a39      	ldr	r2, [pc, #228]	; (80030b8 <WriteChar+0x6fc>)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4837      	ldr	r0, [pc, #220]	; (80030b4 <WriteChar+0x6f8>)
 8002fd8:	f003 fe4a 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <WriteChar+0x6f4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	045b      	lsls	r3, r3, #17
 8002fe2:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002fe6:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <WriteChar+0x6f4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <WriteChar+0x6f4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	431a      	orrs	r2, r3
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <WriteChar+0x6f4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	069b      	lsls	r3, r3, #26
 800300a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <WriteChar+0x6fc>)
 8003016:	2102      	movs	r1, #2
 8003018:	4826      	ldr	r0, [pc, #152]	; (80030b4 <WriteChar+0x6f8>)
 800301a:	f003 fe29 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <WriteChar+0x6f4>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	045b      	lsls	r3, r3, #17
 8003024:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <WriteChar+0x6f4>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <WriteChar+0x6f4>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	025b      	lsls	r3, r3, #9
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	431a      	orrs	r2, r3
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <WriteChar+0x6f4>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	069b      	lsls	r3, r3, #26
 800304c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <WriteChar+0x6fc>)
 8003058:	2104      	movs	r1, #4
 800305a:	4816      	ldr	r0, [pc, #88]	; (80030b4 <WriteChar+0x6f8>)
 800305c:	f003 fe08 	bl	8006c70 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <WriteChar+0x6f4>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	045b      	lsls	r3, r3, #17
 8003066:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <WriteChar+0x6f4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <WriteChar+0x6f4>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	025b      	lsls	r3, r3, #9
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	431a      	orrs	r2, r3
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <WriteChar+0x6f4>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	069b      	lsls	r3, r3, #26
 800308e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <WriteChar+0x6fc>)
 800309a:	2106      	movs	r1, #6
 800309c:	4805      	ldr	r0, [pc, #20]	; (80030b4 <WriteChar+0x6f8>)
 800309e:	f003 fde7 	bl	8006c70 <HAL_LCD_Write>
      break;
 80030a2:	e000      	b.n	80030a6 <WriteChar+0x6ea>

    default:
      break;
 80030a4:	bf00      	nop
  }
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000b0c0 	.word	0x2000b0c0
 80030b4:	2000b084 	.word	0x2000b084
 80030b8:	fbfdfcff 	.word	0xfbfdfcff

080030bc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <BSP_QSPI_Init+0xa4>)
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <BSP_QSPI_Init+0xa8>)
 80030c6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80030c8:	4825      	ldr	r0, [pc, #148]	; (8003160 <BSP_QSPI_Init+0xa4>)
 80030ca:	f003 ffd7 	bl	800707c <HAL_QSPI_DeInit>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e03f      	b.n	8003158 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 80030d8:	f000 f888 	bl	80031ec <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <BSP_QSPI_Init+0xa4>)
 80030de:	2201      	movs	r2, #1
 80030e0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80030e2:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <BSP_QSPI_Init+0xa4>)
 80030e4:	2204      	movs	r2, #4
 80030e6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <BSP_QSPI_Init+0xa4>)
 80030ea:	2210      	movs	r2, #16
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f2:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e003      	b.n	8003112 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003112:	3b01      	subs	r3, #1
 8003114:	461a      	mov	r2, r3
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <BSP_QSPI_Init+0xa4>)
 8003118:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <BSP_QSPI_Init+0xa4>)
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <BSP_QSPI_Init+0xa4>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003126:	480e      	ldr	r0, [pc, #56]	; (8003160 <BSP_QSPI_Init+0xa4>)
 8003128:	f003 ff32 	bl	8006f90 <HAL_QSPI_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e010      	b.n	8003158 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8003136:	480a      	ldr	r0, [pc, #40]	; (8003160 <BSP_QSPI_Init+0xa4>)
 8003138:	f000 f8a4 	bl	8003284 <QSPI_ResetMemory>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8003142:	2304      	movs	r3, #4
 8003144:	e008      	b.n	8003158 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <BSP_QSPI_Init+0xa4>)
 8003148:	f000 f8e0 	bl	800330c <QSPI_DummyCyclesCfg>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 8003152:	2304      	movs	r3, #4
 8003154:	e000      	b.n	8003158 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	2000b0d0 	.word	0x2000b0d0
 8003164:	a0001000 	.word	0xa0001000

08003168 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b092      	sub	sp, #72	; 0x48
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800317a:	23eb      	movs	r3, #235	; 0xeb
 800317c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800317e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003188:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8003192:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003198:	230a      	movs	r3, #10
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80031a4:	2300      	movs	r3, #0
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80031a8:	2300      	movs	r3, #0
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4619      	mov	r1, r3
 80031b6:	480c      	ldr	r0, [pc, #48]	; (80031e8 <BSP_QSPI_Read+0x80>)
 80031b8:	f003 ff84 	bl	80070c4 <HAL_QSPI_Command>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00b      	b.n	80031de <BSP_QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4806      	ldr	r0, [pc, #24]	; (80031e8 <BSP_QSPI_Read+0x80>)
 80031ce:	f004 f86e 	bl	80072ae <HAL_QSPI_Receive>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <BSP_QSPI_Read+0x74>
  {
    return QSPI_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <BSP_QSPI_Read+0x76>
  }

  return QSPI_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3748      	adds	r7, #72	; 0x48
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2000b0d0 	.word	0x2000b0d0

080031ec <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <QSPI_MspInit+0x90>)
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <QSPI_MspInit+0x90>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6513      	str	r3, [r2, #80]	; 0x50
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <QSPI_MspInit+0x90>)
 8003200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <QSPI_MspInit+0x90>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <QSPI_MspInit+0x90>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <QSPI_MspInit+0x90>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <QSPI_MspInit+0x90>)
 800321c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003220:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <QSPI_MspInit+0x90>)
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <QSPI_MspInit+0x90>)
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <QSPI_MspInit+0x90>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 800323a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800323e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003244:	2301      	movs	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	2303      	movs	r3, #3
 800324a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800324c:	230a      	movs	r3, #10
 800324e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4619      	mov	r1, r3
 8003256:	480a      	ldr	r0, [pc, #40]	; (8003280 <QSPI_MspInit+0x94>)
 8003258:	f002 fb5c 	bl	8005914 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800325c:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8003260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4619      	mov	r1, r3
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <QSPI_MspInit+0x94>)
 800326e:	f002 fb51 	bl	8005914 <HAL_GPIO_Init>
}
 8003272:	bf00      	nop
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	48001000 	.word	0x48001000

08003284 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b090      	sub	sp, #64	; 0x40
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800328c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003290:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003292:	2366      	movs	r3, #102	; 0x66
 8003294:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032aa:	2300      	movs	r3, #0
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032ae:	2300      	movs	r3, #0
 80032b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032b2:	f107 0308 	add.w	r3, r7, #8
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4619      	mov	r1, r3
 80032bc:	4812      	ldr	r0, [pc, #72]	; (8003308 <QSPI_ResetMemory+0x84>)
 80032be:	f003 ff01 	bl	80070c4 <HAL_QSPI_Command>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e019      	b.n	8003300 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80032cc:	2399      	movs	r3, #153	; 0x99
 80032ce:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4619      	mov	r1, r3
 80032da:	480b      	ldr	r0, [pc, #44]	; (8003308 <QSPI_ResetMemory+0x84>)
 80032dc:	f003 fef2 	bl	80070c4 <HAL_QSPI_Command>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00a      	b.n	8003300 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80032ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <QSPI_ResetMemory+0x84>)
 80032f0:	f000 f8d6 	bl	80034a0 <QSPI_AutoPollingMemReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3740      	adds	r7, #64	; 0x40
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000b0d0 	.word	0x2000b0d0

0800330c <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b094      	sub	sp, #80	; 0x50
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800331a:	2385      	movs	r3, #133	; 0x85
 800331c:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003338:	2300      	movs	r3, #0
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800333c:	2300      	movs	r3, #0
 800333e:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4619      	mov	r1, r3
 800334a:	482e      	ldr	r0, [pc, #184]	; (8003404 <QSPI_DummyCyclesCfg+0xf8>)
 800334c:	f003 feba 	bl	80070c4 <HAL_QSPI_Command>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e04f      	b.n	80033fa <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800335a:	f107 030b 	add.w	r3, r7, #11
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4619      	mov	r1, r3
 8003364:	4827      	ldr	r0, [pc, #156]	; (8003404 <QSPI_DummyCyclesCfg+0xf8>)
 8003366:	f003 ffa2 	bl	80072ae <HAL_QSPI_Receive>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e042      	b.n	80033fa <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003374:	4823      	ldr	r0, [pc, #140]	; (8003404 <QSPI_DummyCyclesCfg+0xf8>)
 8003376:	f000 f847 	bl	8003408 <QSPI_WriteEnable>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e03a      	b.n	80033fa <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003384:	2381      	movs	r3, #129	; 0x81
 8003386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	b25b      	sxtb	r3, r3
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	b25a      	sxtb	r2, r3
 8003392:	23f0      	movs	r3, #240	; 0xf0
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 80033ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	230a      	movs	r3, #10
 80033b8:	408b      	lsls	r3, r1
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4619      	mov	r1, r3
 80033ce:	480d      	ldr	r0, [pc, #52]	; (8003404 <QSPI_DummyCyclesCfg+0xf8>)
 80033d0:	f003 fe78 	bl	80070c4 <HAL_QSPI_Command>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00d      	b.n	80033fa <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033de:	f107 030b 	add.w	r3, r7, #11
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4619      	mov	r1, r3
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <QSPI_DummyCyclesCfg+0xf8>)
 80033ea:	f003 fec9 	bl	8007180 <HAL_QSPI_Transmit>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3750      	adds	r7, #80	; 0x50
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000b0d0 	.word	0x2000b0d0

08003408 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b096      	sub	sp, #88	; 0x58
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8003416:	2306      	movs	r3, #6
 8003418:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800341a:	2300      	movs	r3, #0
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003422:	2300      	movs	r3, #0
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800342e:	2300      	movs	r3, #0
 8003430:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003432:	2300      	movs	r3, #0
 8003434:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4619      	mov	r1, r3
 8003440:	4816      	ldr	r0, [pc, #88]	; (800349c <QSPI_WriteEnable+0x94>)
 8003442:	f003 fe3f 	bl	80070c4 <HAL_QSPI_Command>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e020      	b.n	8003492 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8003450:	2302      	movs	r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8003454:	2302      	movs	r3, #2
 8003456:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003460:	2310      	movs	r3, #16
 8003462:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003464:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003468:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800346a:	2305      	movs	r3, #5
 800346c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800346e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003472:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003474:	f107 0208 	add.w	r2, r7, #8
 8003478:	f107 0120 	add.w	r1, r7, #32
 800347c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003480:	4806      	ldr	r0, [pc, #24]	; (800349c <QSPI_WriteEnable+0x94>)
 8003482:	f003 ffb6 	bl	80073f2 <HAL_QSPI_AutoPolling>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3758      	adds	r7, #88	; 0x58
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000b0d0 	.word	0x2000b0d0

080034a0 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b096      	sub	sp, #88	; 0x58
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80034b0:	2305      	movs	r3, #5
 80034b2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80034bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034ca:	2300      	movs	r3, #0
 80034cc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034ce:	2300      	movs	r3, #0
 80034d0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80034e2:	2310      	movs	r3, #16
 80034e4:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80034e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ea:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80034ec:	f107 0208 	add.w	r2, r7, #8
 80034f0:	f107 0120 	add.w	r1, r7, #32
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <QSPI_AutoPollingMemReady+0x70>)
 80034f8:	f003 ff7b 	bl	80073f2 <HAL_QSPI_AutoPolling>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3758      	adds	r7, #88	; 0x58
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2000b0d0 	.word	0x2000b0d0

08003514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_Init+0x3c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <HAL_Init+0x3c>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352a:	2003      	movs	r0, #3
 800352c:	f001 ff2c 	bl	8005388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003530:	2000      	movs	r0, #0
 8003532:	f000 f80f 	bl	8003554 <HAL_InitTick>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	e001      	b.n	8003546 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003542:	f7fd fc0f 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003546:	79fb      	ldrb	r3, [r7, #7]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_InitTick+0x6c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d023      	beq.n	80035b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_InitTick+0x70>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_InitTick+0x6c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003576:	fbb3 f3f1 	udiv	r3, r3, r1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	4618      	mov	r0, r3
 8003580:	f001 ff45 	bl	800540e <HAL_SYSTICK_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d809      	bhi.n	80035a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003590:	2200      	movs	r2, #0
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f001 ff01 	bl	800539e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800359c:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_InitTick+0x74>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e007      	b.n	80035b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e004      	b.n	80035b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e001      	b.n	80035b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000044 	.word	0x20000044
 80035c4:	20000004 	.word	0x20000004
 80035c8:	20000040 	.word	0x20000040

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000044 	.word	0x20000044
 80035f0:	2000b114 	.word	0x2000b114

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000b114 	.word	0x2000b114

0800360c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003614:	f7ff ffee 	bl	80035f4 <HAL_GetTick>
 8003618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d005      	beq.n	8003632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_Delay+0x44>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003632:	bf00      	nop
 8003634:	f7ff ffde 	bl	80035f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d8f7      	bhi.n	8003634 <HAL_Delay+0x28>
  {
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000044 	.word	0x20000044

08003654 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3360      	adds	r3, #96	; 0x60
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <LL_ADC_SetOffset+0x44>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	03fff000 	.word	0x03fff000

08003704 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3360      	adds	r3, #96	; 0x60
 8003712:	461a      	mov	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3360      	adds	r3, #96	; 0x60
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	431a      	orrs	r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3330      	adds	r3, #48	; 0x30
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	4413      	add	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	211f      	movs	r1, #31
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	f003 011f 	and.w	r1, r3, #31
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	431a      	orrs	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3314      	adds	r3, #20
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0e5b      	lsrs	r3, r3, #25
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2107      	movs	r1, #7
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	0d1b      	lsrs	r3, r3, #20
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	431a      	orrs	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f003 0318 	and.w	r3, r3, #24
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003884:	40d9      	lsrs	r1, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	400b      	ands	r3, r1
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	0007ffff 	.word	0x0007ffff

080038a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 031f 	and.w	r3, r3, #31
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6093      	str	r3, [r2, #8]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003918:	d101      	bne.n	800391e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800393c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003968:	d101      	bne.n	800396e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800398c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <LL_ADC_IsEnabled+0x18>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <LL_ADC_IsEnabled+0x1a>
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d101      	bne.n	8003a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d101      	bne.n	8003a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e136      	b.n	8003cc8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd f99f 	bl	8000dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff3f 	bl	8003904 <LL_ADC_IsDeepPowerDownEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff25 	bl	80038e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff5a 	bl	8003954 <LL_ADC_IsInternalRegulatorEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d115      	bne.n	8003ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff3e 	bl	800392c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab0:	4b87      	ldr	r3, [pc, #540]	; (8003cd0 <HAL_ADC_Init+0x290>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_ADC_Init+0x294>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ac4:	e002      	b.n	8003acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f9      	bne.n	8003ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff3c 	bl	8003954 <LL_ADC_IsInternalRegulatorEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f043 0210 	orr.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff75 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 8003b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 80cf 	bne.w	8003cb6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 80cb 	bne.w	8003cb6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff35 	bl	80039a4 <LL_ADC_IsEnabled>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d115      	bne.n	8003b6c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b40:	4865      	ldr	r0, [pc, #404]	; (8003cd8 <HAL_ADC_Init+0x298>)
 8003b42:	f7ff ff2f 	bl	80039a4 <LL_ADC_IsEnabled>
 8003b46:	4604      	mov	r4, r0
 8003b48:	4864      	ldr	r0, [pc, #400]	; (8003cdc <HAL_ADC_Init+0x29c>)
 8003b4a:	f7ff ff2b 	bl	80039a4 <LL_ADC_IsEnabled>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	431c      	orrs	r4, r3
 8003b52:	4863      	ldr	r0, [pc, #396]	; (8003ce0 <HAL_ADC_Init+0x2a0>)
 8003b54:	f7ff ff26 	bl	80039a4 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	485f      	ldr	r0, [pc, #380]	; (8003ce4 <HAL_ADC_Init+0x2a4>)
 8003b68:	f7ff fd74 	bl	8003654 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7e5b      	ldrb	r3, [r3, #25]
 8003b70:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b76:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b7c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b82:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d106      	bne.n	8003ba8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	045b      	lsls	r3, r3, #17
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_ADC_Init+0x2a8>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff08 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 8003be2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff15 	bl	8003a18 <LL_ADC_INJ_IsConversionOngoing>
 8003bee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d13d      	bne.n	8003c72 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13a      	bne.n	8003c72 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c08:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	69b9      	ldr	r1, [r7, #24]
 8003c22:	430b      	orrs	r3, r1
 8003c24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d118      	bne.n	8003c62 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c52:	430a      	orrs	r2, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	611a      	str	r2, [r3, #16]
 8003c60:	e007      	b.n	8003c72 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10c      	bne.n	8003c94 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	f023 010f 	bic.w	r1, r3, #15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	1e5a      	subs	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
 8003c92:	e007      	b.n	8003ca4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 020f 	bic.w	r2, r2, #15
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	f023 0303 	bic.w	r3, r3, #3
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
 8003cb4:	e007      	b.n	8003cc6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3724      	adds	r7, #36	; 0x24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	053e2d63 	.word	0x053e2d63
 8003cd8:	50040000 	.word	0x50040000
 8003cdc:	50040100 	.word	0x50040100
 8003ce0:	50040200 	.word	0x50040200
 8003ce4:	50040300 	.word	0x50040300
 8003ce8:	fff0c007 	.word	0xfff0c007

08003cec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cf4:	4857      	ldr	r0, [pc, #348]	; (8003e54 <HAL_ADC_Start+0x168>)
 8003cf6:	f7ff fdd7 	bl	80038a8 <LL_ADC_GetMultimode>
 8003cfa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe76 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 809c 	bne.w	8003e46 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_Start+0x30>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e097      	b.n	8003e4c <HAL_ADC_Start+0x160>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f001 f8d1 	bl	8004ecc <ADC_Enable>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 8083 	bne.w	8003e3c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a42      	ldr	r2, [pc, #264]	; (8003e58 <HAL_ADC_Start+0x16c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d002      	beq.n	8003d5a <HAL_ADC_Start+0x6e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_Start+0x70>
 8003d5a:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_ADC_Start+0x170>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d002      	beq.n	8003d6a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d82:	d106      	bne.n	8003d92 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f023 0206 	bic.w	r2, r3, #6
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d90:	e002      	b.n	8003d98 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	221c      	movs	r2, #28
 8003d9e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_ADC_Start+0x16c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d002      	beq.n	8003db8 <HAL_ADC_Start+0xcc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e000      	b.n	8003dba <HAL_ADC_Start+0xce>
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_ADC_Start+0x170>)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d008      	beq.n	8003dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d002      	beq.n	8003dd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d114      	bne.n	8003dfe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fde7 	bl	80039ca <LL_ADC_REG_StartConversion>
 8003dfc:	e025      	b.n	8003e4a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_ADC_Start+0x16c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d002      	beq.n	8003e1a <HAL_ADC_Start+0x12e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	e000      	b.n	8003e1c <HAL_ADC_Start+0x130>
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_ADC_Start+0x170>)
 8003e1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00f      	beq.n	8003e4a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
 8003e3a:	e006      	b.n	8003e4a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e44:	e001      	b.n	8003e4a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	50040300 	.word	0x50040300
 8003e58:	50040100 	.word	0x50040100
 8003e5c:	50040000 	.word	0x50040000

08003e60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e6a:	4866      	ldr	r0, [pc, #408]	; (8004004 <HAL_ADC_PollForConversion+0x1a4>)
 8003e6c:	f7ff fd1c 	bl	80038a8 <LL_ADC_GetMultimode>
 8003e70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d102      	bne.n	8003e80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e02a      	b.n	8003ed6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d002      	beq.n	8003e92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	d111      	bne.n	8003eb6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0a4      	b.n	8003ffa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003eb4:	e00f      	b.n	8003ed6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003eb6:	4853      	ldr	r0, [pc, #332]	; (8004004 <HAL_ADC_PollForConversion+0x1a4>)
 8003eb8:	f7ff fd04 	bl	80038c4 <LL_ADC_GetMultiDMATransfer>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e093      	b.n	8003ffa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ed6:	f7ff fb8d 	bl	80035f4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003edc:	e021      	b.n	8003f22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d01d      	beq.n	8003f22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ee6:	f7ff fb85 	bl	80035f4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <HAL_ADC_PollForConversion+0x9c>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d112      	bne.n	8003f22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e06b      	b.n	8003ffa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0d6      	beq.n	8003ede <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fc10 	bl	8003766 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01c      	beq.n	8003f86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7e5b      	ldrb	r3, [r3, #25]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d118      	bne.n	8003f86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d111      	bne.n	8003f86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <HAL_ADC_PollForConversion+0x1a8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d002      	beq.n	8003f96 <HAL_ADC_PollForConversion+0x136>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	e000      	b.n	8003f98 <HAL_ADC_PollForConversion+0x138>
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_ADC_PollForConversion+0x1ac>)
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d008      	beq.n	8003fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d002      	beq.n	8003fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d104      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00c      	b.n	8003fd6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_ADC_PollForConversion+0x1a8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d002      	beq.n	8003fcc <HAL_ADC_PollForConversion+0x16c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	e000      	b.n	8003fce <HAL_ADC_PollForConversion+0x16e>
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_ADC_PollForConversion+0x1ac>)
 8003fce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d104      	bne.n	8003fe6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e008      	b.n	8003ff8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	50040300 	.word	0x50040300
 8004008:	50040100 	.word	0x50040100
 800400c:	50040000 	.word	0x50040000

08004010 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004018:	4893      	ldr	r0, [pc, #588]	; (8004268 <HAL_ADC_Start_IT+0x258>)
 800401a:	f7ff fc45 	bl	80038a8 <LL_ADC_GetMultimode>
 800401e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fce4 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8111 	bne.w	8004254 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_ADC_Start_IT+0x30>
 800403c:	2302      	movs	r3, #2
 800403e:	e10e      	b.n	800425e <HAL_ADC_Start_IT+0x24e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 ff3f 	bl	8004ecc <ADC_Enable>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 80f8 	bne.w	800424a <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7e      	ldr	r2, [pc, #504]	; (800426c <HAL_ADC_Start_IT+0x25c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d002      	beq.n	800407e <HAL_ADC_Start_IT+0x6e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	e000      	b.n	8004080 <HAL_ADC_Start_IT+0x70>
 800407e:	4b7c      	ldr	r3, [pc, #496]	; (8004270 <HAL_ADC_Start_IT+0x260>)
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	4293      	cmp	r3, r2
 8004086:	d002      	beq.n	800408e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f023 0206 	bic.w	r2, r3, #6
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58
 80040b2:	e002      	b.n	80040ba <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	221c      	movs	r2, #28
 80040c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 021c 	bic.w	r2, r2, #28
 80040d8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d108      	bne.n	80040f4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0208 	orr.w	r2, r2, #8
 80040f0:	605a      	str	r2, [r3, #4]
          break;
 80040f2:	e008      	b.n	8004106 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0204 	orr.w	r2, r2, #4
 8004102:	605a      	str	r2, [r3, #4]
          break;
 8004104:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0210 	orr.w	r2, r2, #16
 800411c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_ADC_Start_IT+0x25c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d002      	beq.n	800412e <HAL_ADC_Start_IT+0x11e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	e000      	b.n	8004130 <HAL_ADC_Start_IT+0x120>
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_ADC_Start_IT+0x260>)
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4293      	cmp	r3, r2
 8004136:	d008      	beq.n	800414a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d002      	beq.n	800414a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b09      	cmp	r3, #9
 8004148:	d13b      	bne.n	80041c2 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02d      	beq.n	80041b4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004160:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d110      	bne.n	8004192 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0220 	bic.w	r2, r2, #32
 800417e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418e:	605a      	str	r2, [r3, #4]
              break;
 8004190:	e011      	b.n	80041b6 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0220 	orr.w	r2, r2, #32
 80041b0:	605a      	str	r2, [r3, #4]
              break;
 80041b2:	e000      	b.n	80041b6 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80041b4:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fc05 	bl	80039ca <LL_ADC_REG_StartConversion>
 80041c0:	e04c      	b.n	800425c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a26      	ldr	r2, [pc, #152]	; (800426c <HAL_ADC_Start_IT+0x25c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d002      	beq.n	80041de <HAL_ADC_Start_IT+0x1ce>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	e000      	b.n	80041e0 <HAL_ADC_Start_IT+0x1d0>
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_ADC_Start_IT+0x260>)
 80041e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d035      	beq.n	800425a <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d110      	bne.n	8004228 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0220 	bic.w	r2, r2, #32
 8004214:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004224:	605a      	str	r2, [r3, #4]
              break;
 8004226:	e019      	b.n	800425c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004236:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0220 	orr.w	r2, r2, #32
 8004246:	605a      	str	r2, [r3, #4]
              break;
 8004248:	e008      	b.n	800425c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004252:	e003      	b.n	800425c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	75fb      	strb	r3, [r7, #23]
 8004258:	e000      	b.n	800425c <HAL_ADC_Start_IT+0x24c>
        }
 800425a:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	50040300 	.word	0x50040300
 800426c:	50040100 	.word	0x50040100
 8004270:	50040000 	.word	0x50040000

08004274 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ac:	4882      	ldr	r0, [pc, #520]	; (80044b8 <HAL_ADC_IRQHandler+0x228>)
 80042ae:	f7ff fafb 	bl	80038a8 <LL_ADC_GetMultimode>
 80042b2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d017      	beq.n	80042ee <HAL_ADC_IRQHandler+0x5e>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fea3 	bl	800502c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2202      	movs	r2, #2
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <HAL_ADC_IRQHandler+0x72>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8083 	beq.w	8004414 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d07d      	beq.n	8004414 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fa16 	bl	8003766 <LL_ADC_REG_IsTriggerSourceSWStart>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d062      	beq.n	8004406 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_ADC_IRQHandler+0x22c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d002      	beq.n	8004350 <HAL_ADC_IRQHandler+0xc0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	e000      	b.n	8004352 <HAL_ADC_IRQHandler+0xc2>
 8004350:	4b5b      	ldr	r3, [pc, #364]	; (80044c0 <HAL_ADC_IRQHandler+0x230>)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	4293      	cmp	r3, r2
 8004358:	d008      	beq.n	800436c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b05      	cmp	r3, #5
 8004364:	d002      	beq.n	800436c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b09      	cmp	r3, #9
 800436a:	d104      	bne.n	8004376 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	e00c      	b.n	8004390 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a50      	ldr	r2, [pc, #320]	; (80044bc <HAL_ADC_IRQHandler+0x22c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d002      	beq.n	8004386 <HAL_ADC_IRQHandler+0xf6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e000      	b.n	8004388 <HAL_ADC_IRQHandler+0xf8>
 8004386:	4b4e      	ldr	r3, [pc, #312]	; (80044c0 <HAL_ADC_IRQHandler+0x230>)
 8004388:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d135      	bne.n	8004406 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d12e      	bne.n	8004406 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fb20 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 020c 	bic.w	r2, r2, #12
 80043c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d112      	bne.n	8004406 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
 80043ec:	e00b      	b.n	8004406 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc f86e 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	220c      	movs	r2, #12
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_ADC_IRQHandler+0x198>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 809f 	beq.w	8004572 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8099 	beq.w	8004572 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f9c1 	bl	80037e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004462:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f97c 	bl	8003766 <LL_ADC_REG_IsTriggerSourceSWStart>
 800446e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <HAL_ADC_IRQHandler+0x22c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d002      	beq.n	8004480 <HAL_ADC_IRQHandler+0x1f0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	e000      	b.n	8004482 <HAL_ADC_IRQHandler+0x1f2>
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_ADC_IRQHandler+0x230>)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	4293      	cmp	r3, r2
 8004488:	d008      	beq.n	800449c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b06      	cmp	r3, #6
 8004494:	d002      	beq.n	800449c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b07      	cmp	r3, #7
 800449a:	d104      	bne.n	80044a6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	e013      	b.n	80044ce <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_ADC_IRQHandler+0x22c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_ADC_IRQHandler+0x234>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e007      	b.n	80044c6 <HAL_ADC_IRQHandler+0x236>
 80044b6:	bf00      	nop
 80044b8:	50040300 	.word	0x50040300
 80044bc:	50040100 	.word	0x50040100
 80044c0:	50040000 	.word	0x50040000
 80044c4:	4b7d      	ldr	r3, [pc, #500]	; (80046bc <HAL_ADC_IRQHandler+0x42c>)
 80044c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d047      	beq.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_ADC_IRQHandler+0x25e>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03f      	beq.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d13a      	bne.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d133      	bne.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d12e      	bne.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fa84 	bl	8003a18 <LL_ADC_INJ_IsConversionOngoing>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11a      	bne.n	800454c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004524:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d112      	bne.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
 800454a:	e00b      	b.n	8004564 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fd39 	bl	8004fdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2260      	movs	r2, #96	; 0x60
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x310>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f896 	bl	80046c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d012      	beq.n	80045d0 <HAL_ADC_IRQHandler+0x340>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fd1f 	bl	8005004 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_ADC_IRQHandler+0x370>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00d      	beq.n	8004600 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fd11 	bl	8005018 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d036      	beq.n	8004678 <HAL_ADC_IRQHandler+0x3e8>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d031      	beq.n	8004678 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800461c:	2301      	movs	r3, #1
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	e014      	b.n	800464c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004628:	4825      	ldr	r0, [pc, #148]	; (80046c0 <HAL_ADC_IRQHandler+0x430>)
 800462a:	f7ff f94b 	bl	80038c4 <LL_ADC_GetMultiDMATransfer>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004634:	2301      	movs	r3, #1
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
 8004638:	e008      	b.n	800464c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004648:	2301      	movs	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10e      	bne.n	8004670 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	f043 0202 	orr.w	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f834 	bl	80046d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2210      	movs	r2, #16
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <HAL_ADC_IRQHandler+0x424>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f043 0208 	orr.w	r2, r3, #8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fc9e 	bl	8004ff0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	50040000 	.word	0x50040000
 80046c0:	50040300 	.word	0x50040300

080046c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b0b6      	sub	sp, #216	; 0xd8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x22>
 800470a:	2302      	movs	r3, #2
 800470c:	e3c7      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x7b2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff f969 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 83a8 	bne.w	8004e78 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d824      	bhi.n	800477a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	3b02      	subs	r3, #2
 8004736:	2b03      	cmp	r3, #3
 8004738:	d81b      	bhi.n	8004772 <HAL_ADC_ConfigChannel+0x86>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_ADC_ConfigChannel+0x54>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004751 	.word	0x08004751
 8004744:	08004759 	.word	0x08004759
 8004748:	08004761 	.word	0x08004761
 800474c:	08004769 	.word	0x08004769
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	220c      	movs	r2, #12
 8004754:	605a      	str	r2, [r3, #4]
          break;
 8004756:	e011      	b.n	800477c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2212      	movs	r2, #18
 800475c:	605a      	str	r2, [r3, #4]
          break;
 800475e:	e00d      	b.n	800477c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2218      	movs	r2, #24
 8004764:	605a      	str	r2, [r3, #4]
          break;
 8004766:	e009      	b.n	800477c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800476e:	605a      	str	r2, [r3, #4]
          break;
 8004770:	e004      	b.n	800477c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2206      	movs	r2, #6
 8004776:	605a      	str	r2, [r3, #4]
          break;
 8004778:	e000      	b.n	800477c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800477a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	f7fe ffff 	bl	800378c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f92d 	bl	80039f2 <LL_ADC_REG_IsConversionOngoing>
 8004798:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f939 	bl	8003a18 <LL_ADC_INJ_IsConversionOngoing>
 80047a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 81a6 	bne.w	8004b00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 81a1 	bne.w	8004b00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f7ff f81d 	bl	800380a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d00a      	beq.n	8004808 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004802:	f7fe ff5b 	bl	80036bc <LL_ADC_SetOffset>
 8004806:	e17b      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe ff78 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004814:	4603      	mov	r3, r0
 8004816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x148>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe ff6d 	bl	8003704 <LL_ADC_GetOffsetChannel>
 800482a:	4603      	mov	r3, r0
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 021f 	and.w	r2, r3, #31
 8004832:	e01e      	b.n	8004872 <HAL_ADC_ConfigChannel+0x186>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe ff62 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800485a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e004      	b.n	8004870 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_ADC_ConfigChannel+0x19e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	0e9b      	lsrs	r3, r3, #26
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	e018      	b.n	80048bc <HAL_ADC_ConfigChannel+0x1d0>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800489e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80048a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80048ae:	2320      	movs	r3, #32
 80048b0:	e004      	b.n	80048bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80048b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048bc:	429a      	cmp	r2, r3
 80048be:	d106      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe ff31 	bl	8003730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe ff15 	bl	8003704 <LL_ADC_GetOffsetChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x20e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe ff0a 	bl	8003704 <LL_ADC_GetOffsetChannel>
 80048f0:	4603      	mov	r3, r0
 80048f2:	0e9b      	lsrs	r3, r3, #26
 80048f4:	f003 021f 	and.w	r2, r3, #31
 80048f8:	e01e      	b.n	8004938 <HAL_ADC_ConfigChannel+0x24c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe feff 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800491c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e004      	b.n	8004936 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800492c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x264>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0e9b      	lsrs	r3, r3, #26
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	e018      	b.n	8004982 <HAL_ADC_ConfigChannel+0x296>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800496c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e004      	b.n	8004982 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004982:	429a      	cmp	r2, r3
 8004984:	d106      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fece 	bl	8003730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe feb2 	bl	8003704 <LL_ADC_GetOffsetChannel>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x2d4>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2102      	movs	r1, #2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fea7 	bl	8003704 <LL_ADC_GetOffsetChannel>
 80049b6:	4603      	mov	r3, r0
 80049b8:	0e9b      	lsrs	r3, r3, #26
 80049ba:	f003 021f 	and.w	r2, r3, #31
 80049be:	e01e      	b.n	80049fe <HAL_ADC_ConfigChannel+0x312>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fe9c 	bl	8003704 <LL_ADC_GetOffsetChannel>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80049de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80049e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80049ee:	2320      	movs	r3, #32
 80049f0:	e004      	b.n	80049fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80049f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x32a>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	e016      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x358>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004a36:	2320      	movs	r3, #32
 8004a38:	e004      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d106      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2102      	movs	r1, #2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fe6d 	bl	8003730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2103      	movs	r1, #3
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fe51 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x396>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2103      	movs	r1, #3
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fe46 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	e017      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x3c6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2103      	movs	r1, #3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fe3b 	bl	8003704 <LL_ADC_GetOffsetChannel>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	e003      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x3de>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	0e9b      	lsrs	r3, r3, #26
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	e011      	b.n	8004aee <HAL_ADC_ConfigChannel+0x402>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	e003      	b.n	8004aee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d106      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2103      	movs	r1, #3
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fe18 	bl	8003730 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe ff4d 	bl	80039a4 <LL_ADC_IsEnabled>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 813f 	bne.w	8004d90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fe fe9e 	bl	8003860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a8e      	ldr	r2, [pc, #568]	; (8004d64 <HAL_ADC_ConfigChannel+0x678>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	f040 8130 	bne.w	8004d90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x46c>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	0e9b      	lsrs	r3, r3, #26
 8004b46:	3301      	adds	r3, #1
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e019      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x4a0>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	bf94      	ite	ls
 8004b86:	2301      	movls	r3, #1
 8004b88:	2300      	movhi	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d079      	beq.n	8004c84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x4c0>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	069b      	lsls	r3, r3, #26
 8004ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004baa:	e015      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x4ec>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	e003      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	069b      	lsls	r3, r3, #26
 8004bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x50c>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	e017      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x53c>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x562>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	051b      	lsls	r3, r3, #20
 8004c4c:	e018      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x594>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c66:	2320      	movs	r3, #32
 8004c68:	e003      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f003 021f 	and.w	r2, r3, #31
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c80:	430b      	orrs	r3, r1
 8004c82:	e080      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x5b4>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	0e9b      	lsrs	r3, r3, #26
 8004c96:	3301      	adds	r3, #1
 8004c98:	069b      	lsls	r3, r3, #26
 8004c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c9e:	e015      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x5e0>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004cb8:	2320      	movs	r3, #32
 8004cba:	e003      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	fab3 f383 	clz	r3, r3
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	069b      	lsls	r3, r3, #26
 8004cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x600>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	e017      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x630>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	3301      	adds	r3, #1
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x65c>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	3301      	adds	r3, #1
 8004d34:	f003 021f 	and.w	r2, r3, #31
 8004d38:	4613      	mov	r3, r2
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3b1e      	subs	r3, #30
 8004d40:	051b      	lsls	r3, r3, #20
 8004d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d46:	e01d      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x698>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	613b      	str	r3, [r7, #16]
  return result;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004d60:	2320      	movs	r3, #32
 8004d62:	e005      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x684>
 8004d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 021f 	and.w	r2, r3, #31
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b1e      	subs	r3, #30
 8004d7e:	051b      	lsls	r3, r3, #20
 8004d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d84:	430b      	orrs	r3, r1
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f7fe fd3d 	bl	800380a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d07a      	beq.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d9c:	4843      	ldr	r0, [pc, #268]	; (8004eac <HAL_ADC_ConfigChannel+0x7c0>)
 8004d9e:	f7fe fc7f 	bl	80036a0 <LL_ADC_GetCommonPathInternalCh>
 8004da2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a41      	ldr	r2, [pc, #260]	; (8004eb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d12c      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d126      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADC_ConfigChannel+0x6e4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3b      	ldr	r2, [pc, #236]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d15d      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4834      	ldr	r0, [pc, #208]	; (8004eac <HAL_ADC_ConfigChannel+0x7c0>)
 8004ddc:	f7fe fc4d 	bl	800367a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_ADC_ConfigChannel+0x7d0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	4a36      	ldr	r2, [pc, #216]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dfa:	e002      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f9      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e08:	e040      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ec4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d118      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x75a>
 8004e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d112      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_ADC_ConfigChannel+0x748>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d12d      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	481b      	ldr	r0, [pc, #108]	; (8004eac <HAL_ADC_ConfigChannel+0x7c0>)
 8004e40:	f7fe fc1b 	bl	800367a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e44:	e024      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d120      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11a      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e6e:	4619      	mov	r1, r3
 8004e70:	480e      	ldr	r0, [pc, #56]	; (8004eac <HAL_ADC_ConfigChannel+0x7c0>)
 8004e72:	f7fe fc02 	bl	800367a <LL_ADC_SetCommonPathInternalCh>
 8004e76:	e00c      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f043 0220 	orr.w	r2, r3, #32
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004e8a:	e002      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	37d8      	adds	r7, #216	; 0xd8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	80080000 	.word	0x80080000
 8004eac:	50040300 	.word	0x50040300
 8004eb0:	c7520000 	.word	0xc7520000
 8004eb4:	50040000 	.word	0x50040000
 8004eb8:	50040200 	.word	0x50040200
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	053e2d63 	.word	0x053e2d63
 8004ec4:	cb840000 	.word	0xcb840000
 8004ec8:	80000001 	.word	0x80000001

08004ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fd63 	bl	80039a4 <LL_ADC_IsEnabled>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d14d      	bne.n	8004f80 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <ADC_Enable+0xc0>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	f043 0210 	orr.w	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e039      	b.n	8004f82 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fd32 	bl	800397c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f18:	f7fe fb6c 	bl	80035f4 <HAL_GetTick>
 8004f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f1e:	e028      	b.n	8004f72 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe fd3d 	bl	80039a4 <LL_ADC_IsEnabled>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fd21 	bl	800397c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f3a:	f7fe fb5b 	bl	80035f4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d914      	bls.n	8004f72 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d00d      	beq.n	8004f72 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e007      	b.n	8004f82 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d1cf      	bne.n	8004f20 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	8000003f 	.word	0x8000003f

08004f90 <LL_ADC_IsEnabled>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <LL_ADC_IsEnabled+0x18>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <LL_ADC_IsEnabled+0x1a>
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d101      	bne.n	8004fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b09f      	sub	sp, #124	; 0x7c
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800505a:	2302      	movs	r3, #2
 800505c:	e093      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005066:	2300      	movs	r3, #0
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800506a:	2300      	movs	r3, #0
 800506c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a47      	ldr	r2, [pc, #284]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d102      	bne.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005078:	4b46      	ldr	r3, [pc, #280]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	e001      	b.n	8005082 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e072      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff ff87 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80050a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ff81 	bl	8004fb6 <LL_ADC_REG_IsConversionOngoing>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d154      	bne.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d151      	bne.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050c0:	4b35      	ldr	r3, [pc, #212]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80050c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02c      	beq.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050de:	035b      	lsls	r3, r3, #13
 80050e0:	430b      	orrs	r3, r1
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e8:	4829      	ldr	r0, [pc, #164]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80050ea:	f7ff ff51 	bl	8004f90 <LL_ADC_IsEnabled>
 80050ee:	4604      	mov	r4, r0
 80050f0:	4828      	ldr	r0, [pc, #160]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80050f2:	f7ff ff4d 	bl	8004f90 <LL_ADC_IsEnabled>
 80050f6:	4603      	mov	r3, r0
 80050f8:	431c      	orrs	r4, r3
 80050fa:	4828      	ldr	r0, [pc, #160]	; (800519c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80050fc:	f7ff ff48 	bl	8004f90 <LL_ADC_IsEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	4323      	orrs	r3, r4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d137      	bne.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005110:	f023 030f 	bic.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	6811      	ldr	r1, [r2, #0]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	6892      	ldr	r2, [r2, #8]
 800511c:	430a      	orrs	r2, r1
 800511e:	431a      	orrs	r2, r3
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005124:	e028      	b.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800512e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005130:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005132:	4817      	ldr	r0, [pc, #92]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005134:	f7ff ff2c 	bl	8004f90 <LL_ADC_IsEnabled>
 8005138:	4604      	mov	r4, r0
 800513a:	4816      	ldr	r0, [pc, #88]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800513c:	f7ff ff28 	bl	8004f90 <LL_ADC_IsEnabled>
 8005140:	4603      	mov	r3, r0
 8005142:	431c      	orrs	r4, r3
 8005144:	4815      	ldr	r0, [pc, #84]	; (800519c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005146:	f7ff ff23 	bl	8004f90 <LL_ADC_IsEnabled>
 800514a:	4603      	mov	r3, r0
 800514c:	4323      	orrs	r3, r4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d112      	bne.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800515a:	f023 030f 	bic.w	r3, r3, #15
 800515e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005160:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005162:	e009      	b.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005176:	e000      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005178:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005186:	4618      	mov	r0, r3
 8005188:	377c      	adds	r7, #124	; 0x7c
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	50040000 	.word	0x50040000
 8005194:	50040100 	.word	0x50040100
 8005198:	50040300 	.word	0x50040300
 800519c:	50040200 	.word	0x50040200

080051a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	60d3      	str	r3, [r2, #12]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__NVIC_GetPriorityGrouping+0x18>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	f003 0307 	and.w	r3, r3, #7
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db0b      	blt.n	800522e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <__NVIC_EnableIRQ+0x38>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2001      	movs	r0, #1
 8005226:	fa00 f202 	lsl.w	r2, r0, r2
 800522a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000e100 	.word	0xe000e100

08005240 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db12      	blt.n	8005278 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	490a      	ldr	r1, [pc, #40]	; (8005284 <__NVIC_DisableIRQ+0x44>)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	3320      	adds	r3, #32
 8005268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800526c:	f3bf 8f4f 	dsb	sy
}
 8005270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005272:	f3bf 8f6f 	isb	sy
}
 8005276:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000e100 	.word	0xe000e100

08005288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	6039      	str	r1, [r7, #0]
 8005292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db0a      	blt.n	80052b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	490c      	ldr	r1, [pc, #48]	; (80052d4 <__NVIC_SetPriority+0x4c>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	0112      	lsls	r2, r2, #4
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	440b      	add	r3, r1
 80052ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b0:	e00a      	b.n	80052c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <__NVIC_SetPriority+0x50>)
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	3b04      	subs	r3, #4
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	440b      	add	r3, r1
 80052c6:	761a      	strb	r2, [r3, #24]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000e100 	.word	0xe000e100
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f1c3 0307 	rsb	r3, r3, #7
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	bf28      	it	cs
 80052fa:	2304      	movcs	r3, #4
 80052fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3304      	adds	r3, #4
 8005302:	2b06      	cmp	r3, #6
 8005304:	d902      	bls.n	800530c <NVIC_EncodePriority+0x30>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3b03      	subs	r3, #3
 800530a:	e000      	b.n	800530e <NVIC_EncodePriority+0x32>
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	401a      	ands	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005324:	f04f 31ff 	mov.w	r1, #4294967295
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	43d9      	mvns	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	4313      	orrs	r3, r2
         );
}
 8005336:	4618      	mov	r0, r3
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005354:	d301      	bcc.n	800535a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005356:	2301      	movs	r3, #1
 8005358:	e00f      	b.n	800537a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <SysTick_Config+0x40>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3b01      	subs	r3, #1
 8005360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005362:	210f      	movs	r1, #15
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	f7ff ff8e 	bl	8005288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <SysTick_Config+0x40>)
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005372:	4b04      	ldr	r3, [pc, #16]	; (8005384 <SysTick_Config+0x40>)
 8005374:	2207      	movs	r2, #7
 8005376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	e000e010 	.word	0xe000e010

08005388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff05 	bl	80051a0 <__NVIC_SetPriorityGrouping>
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	4603      	mov	r3, r0
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053b0:	f7ff ff1a 	bl	80051e8 <__NVIC_GetPriorityGrouping>
 80053b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7ff ff8e 	bl	80052dc <NVIC_EncodePriority>
 80053c0:	4602      	mov	r2, r0
 80053c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff5d 	bl	8005288 <__NVIC_SetPriority>
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	4603      	mov	r3, r0
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff0d 	bl	8005204 <__NVIC_EnableIRQ>
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff1d 	bl	8005240 <__NVIC_DisableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff94 	bl	8005344 <SysTick_Config>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e098      	b.n	800556c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <HAL_DMA_Init+0x150>)
 8005442:	429a      	cmp	r2, r3
 8005444:	d80f      	bhi.n	8005466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <HAL_DMA_Init+0x154>)
 800544e:	4413      	add	r3, r2
 8005450:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_DMA_Init+0x158>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	009a      	lsls	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a48      	ldr	r2, [pc, #288]	; (8005584 <HAL_DMA_Init+0x15c>)
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
 8005464:	e00e      	b.n	8005484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	4b46      	ldr	r3, [pc, #280]	; (8005588 <HAL_DMA_Init+0x160>)
 800546e:	4413      	add	r3, r2
 8005470:	4a43      	ldr	r2, [pc, #268]	; (8005580 <HAL_DMA_Init+0x158>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	009a      	lsls	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a42      	ldr	r2, [pc, #264]	; (800558c <HAL_DMA_Init+0x164>)
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054de:	d039      	beq.n	8005554 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <HAL_DMA_Init+0x15c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d11a      	bne.n	8005520 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80054ea:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_DMA_Init+0x168>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f003 031c 	and.w	r3, r3, #28
 80054f6:	210f      	movs	r1, #15
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	4924      	ldr	r1, [pc, #144]	; (8005590 <HAL_DMA_Init+0x168>)
 8005500:	4013      	ands	r3, r2
 8005502:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_DMA_Init+0x168>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6859      	ldr	r1, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005510:	f003 031c 	and.w	r3, r3, #28
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	491d      	ldr	r1, [pc, #116]	; (8005590 <HAL_DMA_Init+0x168>)
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	e019      	b.n	8005554 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_DMA_Init+0x16c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f003 031c 	and.w	r3, r3, #28
 800552c:	210f      	movs	r1, #15
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	4917      	ldr	r1, [pc, #92]	; (8005594 <HAL_DMA_Init+0x16c>)
 8005536:	4013      	ands	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_DMA_Init+0x16c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f003 031c 	and.w	r3, r3, #28
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	4911      	ldr	r1, [pc, #68]	; (8005594 <HAL_DMA_Init+0x16c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40020407 	.word	0x40020407
 800557c:	bffdfff8 	.word	0xbffdfff8
 8005580:	cccccccd 	.word	0xcccccccd
 8005584:	40020000 	.word	0x40020000
 8005588:	bffdfbf8 	.word	0xbffdfbf8
 800558c:	40020400 	.word	0x40020400
 8005590:	400200a8 	.word	0x400200a8
 8005594:	400204a8 	.word	0x400204a8

08005598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_DMA_Start_IT+0x20>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04b      	b.n	8005650 <HAL_DMA_Start_IT+0xb8>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d13a      	bne.n	8005642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f95f 	bl	80058b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 020e 	orr.w	r2, r2, #14
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e00f      	b.n	8005630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 020a 	orr.w	r2, r2, #10
 800562e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e005      	b.n	800564e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d008      	beq.n	8005682 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e022      	b.n	80056c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 020e 	bic.w	r2, r2, #14
 8005690:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f003 021c 	and.w	r2, r3, #28
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2101      	movs	r1, #1
 80056b0:	fa01 f202 	lsl.w	r2, r1, r2
 80056b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d005      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
 80056f6:	e029      	b.n	800574c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 020e 	bic.w	r2, r2, #14
 8005706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0201 	bic.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	f003 021c 	and.w	r2, r3, #28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2101      	movs	r1, #1
 8005726:	fa01 f202 	lsl.w	r2, r1, r2
 800572a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
    }
  }
  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f003 031c 	and.w	r3, r3, #28
 8005776:	2204      	movs	r2, #4
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d026      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x7a>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d021      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d107      	bne.n	80057aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0204 	bic.w	r2, r2, #4
 80057a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f003 021c 	and.w	r2, r3, #28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2104      	movs	r1, #4
 80057b8:	fa01 f202 	lsl.w	r2, r1, r2
 80057bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d071      	beq.n	80058aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80057ce:	e06c      	b.n	80058aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	f003 031c 	and.w	r3, r3, #28
 80057d8:	2202      	movs	r2, #2
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d02e      	beq.n	8005842 <HAL_DMA_IRQHandler+0xec>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d029      	beq.n	8005842 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020a 	bic.w	r2, r2, #10
 800580a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	f003 021c 	and.w	r2, r3, #28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2102      	movs	r1, #2
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d038      	beq.n	80058aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005840:	e033      	b.n	80058aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f003 031c 	and.w	r3, r3, #28
 800584a:	2208      	movs	r2, #8
 800584c:	409a      	lsls	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02a      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d025      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 020e 	bic.w	r2, r2, #14
 800586e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	f003 021c 	and.w	r2, r3, #28
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f202 	lsl.w	r2, r1, r2
 8005882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
}
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f003 021c 	and.w	r2, r3, #28
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d108      	bne.n	80058f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058f6:	e007      	b.n	8005908 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005922:	e17f      	b.n	8005c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8171 	beq.w	8005c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d005      	beq.n	8005954 <HAL_GPIO_Init+0x40>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d130      	bne.n	80059b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2203      	movs	r2, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800598a:	2201      	movs	r2, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 0201 	and.w	r2, r3, #1
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d118      	bne.n	80059f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80059c8:	2201      	movs	r2, #1
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4013      	ands	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0201 	and.w	r2, r3, #1
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d017      	beq.n	8005a30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	6939      	ldr	r1, [r7, #16]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80ac 	beq.w	8005c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	4b5f      	ldr	r3, [pc, #380]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	4a5e      	ldr	r2, [pc, #376]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8005ad2:	4b5c      	ldr	r3, [pc, #368]	; (8005c44 <HAL_GPIO_Init+0x330>)
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ade:	4a5a      	ldr	r2, [pc, #360]	; (8005c48 <HAL_GPIO_Init+0x334>)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	220f      	movs	r2, #15
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4013      	ands	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b08:	d025      	beq.n	8005b56 <HAL_GPIO_Init+0x242>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a4f      	ldr	r2, [pc, #316]	; (8005c4c <HAL_GPIO_Init+0x338>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01f      	beq.n	8005b52 <HAL_GPIO_Init+0x23e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a4e      	ldr	r2, [pc, #312]	; (8005c50 <HAL_GPIO_Init+0x33c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d019      	beq.n	8005b4e <HAL_GPIO_Init+0x23a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_GPIO_Init+0x340>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_GPIO_Init+0x236>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a4c      	ldr	r2, [pc, #304]	; (8005c58 <HAL_GPIO_Init+0x344>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00d      	beq.n	8005b46 <HAL_GPIO_Init+0x232>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a4b      	ldr	r2, [pc, #300]	; (8005c5c <HAL_GPIO_Init+0x348>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <HAL_GPIO_Init+0x22e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <HAL_GPIO_Init+0x34c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d101      	bne.n	8005b3e <HAL_GPIO_Init+0x22a>
 8005b3a:	2306      	movs	r3, #6
 8005b3c:	e00c      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b3e:	2307      	movs	r3, #7
 8005b40:	e00a      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e008      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b46:	2304      	movs	r3, #4
 8005b48:	e006      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e004      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e002      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <HAL_GPIO_Init+0x244>
 8005b56:	2300      	movs	r3, #0
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	f002 0203 	and.w	r2, r2, #3
 8005b5e:	0092      	lsls	r2, r2, #2
 8005b60:	4093      	lsls	r3, r2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b68:	4937      	ldr	r1, [pc, #220]	; (8005c48 <HAL_GPIO_Init+0x334>)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	089b      	lsrs	r3, r3, #2
 8005b6e:	3302      	adds	r3, #2
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b76:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4013      	ands	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b9a:	4a32      	ldr	r2, [pc, #200]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ba0:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bc4:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bee:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4013      	ands	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c18:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <HAL_GPIO_Init+0x350>)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	3301      	adds	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f47f ae78 	bne.w	8005924 <HAL_GPIO_Init+0x10>
  }
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	48000400 	.word	0x48000400
 8005c50:	48000800 	.word	0x48000800
 8005c54:	48000c00 	.word	0x48000c00
 8005c58:	48001000 	.word	0x48001000
 8005c5c:	48001400 	.word	0x48001400
 8005c60:	48001800 	.word	0x48001800
 8005c64:	40010400 	.word	0x40010400

08005c68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005c76:	e0cd      	b.n	8005e14 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005c78:	2201      	movs	r2, #1
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	4013      	ands	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80c0 	beq.w	8005e0e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005c8e:	4a68      	ldr	r2, [pc, #416]	; (8005e30 <HAL_GPIO_DeInit+0x1c8>)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	3302      	adds	r3, #2
 8005c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	220f      	movs	r2, #15
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cb6:	d025      	beq.n	8005d04 <HAL_GPIO_DeInit+0x9c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a5e      	ldr	r2, [pc, #376]	; (8005e34 <HAL_GPIO_DeInit+0x1cc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d01f      	beq.n	8005d00 <HAL_GPIO_DeInit+0x98>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a5d      	ldr	r2, [pc, #372]	; (8005e38 <HAL_GPIO_DeInit+0x1d0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d019      	beq.n	8005cfc <HAL_GPIO_DeInit+0x94>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a5c      	ldr	r2, [pc, #368]	; (8005e3c <HAL_GPIO_DeInit+0x1d4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_GPIO_DeInit+0x90>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	; (8005e40 <HAL_GPIO_DeInit+0x1d8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_GPIO_DeInit+0x8c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a5a      	ldr	r2, [pc, #360]	; (8005e44 <HAL_GPIO_DeInit+0x1dc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <HAL_GPIO_DeInit+0x88>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a59      	ldr	r2, [pc, #356]	; (8005e48 <HAL_GPIO_DeInit+0x1e0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <HAL_GPIO_DeInit+0x84>
 8005ce8:	2306      	movs	r3, #6
 8005cea:	e00c      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005cec:	2307      	movs	r3, #7
 8005cee:	e00a      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005cf0:	2305      	movs	r3, #5
 8005cf2:	e008      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	e006      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e004      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e002      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_GPIO_DeInit+0x9e>
 8005d04:	2300      	movs	r3, #0
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	f002 0203 	and.w	r2, r2, #3
 8005d0c:	0092      	lsls	r2, r2, #2
 8005d0e:	4093      	lsls	r3, r2
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d132      	bne.n	8005d7c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005d16:	4b4d      	ldr	r3, [pc, #308]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	494b      	ldr	r1, [pc, #300]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005d24:	4b49      	ldr	r3, [pc, #292]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	4947      	ldr	r1, [pc, #284]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005d32:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	4944      	ldr	r1, [pc, #272]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005d40:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	4940      	ldr	r1, [pc, #256]	; (8005e4c <HAL_GPIO_DeInit+0x1e4>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	220f      	movs	r2, #15
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005d5e:	4a34      	ldr	r2, [pc, #208]	; (8005e30 <HAL_GPIO_DeInit+0x1c8>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	4830      	ldr	r0, [pc, #192]	; (8005e30 <HAL_GPIO_DeInit+0x1c8>)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	400a      	ands	r2, r1
 8005d76:	3302      	adds	r3, #2
 8005d78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2103      	movs	r1, #3
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	08da      	lsrs	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3208      	adds	r2, #8
 8005d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	08d2      	lsrs	r2, r2, #3
 8005db0:	4019      	ands	r1, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3208      	adds	r2, #8
 8005db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	2103      	movs	r1, #3
 8005dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	2103      	movs	r1, #3
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	401a      	ands	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	2101      	movs	r1, #1
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	401a      	ands	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3301      	adds	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f47f af2b 	bne.w	8005c78 <HAL_GPIO_DeInit+0x10>
  }
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40010000 	.word	0x40010000
 8005e34:	48000400 	.word	0x48000400
 8005e38:	48000800 	.word	0x48000800
 8005e3c:	48000c00 	.word	0x48000c00
 8005e40:	48001000 	.word	0x48001000
 8005e44:	48001400 	.word	0x48001400
 8005e48:	48001800 	.word	0x48001800
 8005e4c:	40010400 	.word	0x40010400

08005e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e60:	787b      	ldrb	r3, [r7, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e081      	b.n	8005f96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa ffc6 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d107      	bne.n	8005efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ef6:	609a      	str	r2, [r3, #8]
 8005ef8:	e006      	b.n	8005f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d104      	bne.n	8005f1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69d9      	ldr	r1, [r3, #28]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e021      	b.n	8005ff4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	; 0x24
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fa ff93 	bl	8000ef4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4603      	mov	r3, r0
 800600c:	817b      	strh	r3, [r7, #10]
 800600e:	460b      	mov	r3, r1
 8006010:	813b      	strh	r3, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b20      	cmp	r3, #32
 8006020:	f040 80f9 	bne.w	8006216 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_I2C_Mem_Write+0x34>
 800602a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0ed      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_I2C_Mem_Write+0x4e>
 8006046:	2302      	movs	r3, #2
 8006048:	e0e6      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006052:	f7fd facf 	bl	80035f4 <HAL_GetTick>
 8006056:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2319      	movs	r3, #25
 800605e:	2201      	movs	r2, #1
 8006060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fad1 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0d1      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2221      	movs	r2, #33	; 0x21
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a3a      	ldr	r2, [r7, #32]
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800609c:	88f8      	ldrh	r0, [r7, #6]
 800609e:	893a      	ldrh	r2, [r7, #8]
 80060a0:	8979      	ldrh	r1, [r7, #10]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4603      	mov	r3, r0
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f9e1 	bl	8006474 <I2C_RequestMemoryWrite>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0a9      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2bff      	cmp	r3, #255	; 0xff
 80060cc:	d90e      	bls.n	80060ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	22ff      	movs	r2, #255	; 0xff
 80060d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fc39 	bl	800695c <I2C_TransferConfig>
 80060ea:	e00f      	b.n	800610c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fc28 	bl	800695c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fabb 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e07b      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d034      	beq.n	80061c4 <HAL_I2C_Mem_Write+0x1c8>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d130      	bne.n	80061c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	2200      	movs	r2, #0
 800616a:	2180      	movs	r1, #128	; 0x80
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fa4d 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e04d      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2bff      	cmp	r3, #255	; 0xff
 8006184:	d90e      	bls.n	80061a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	22ff      	movs	r2, #255	; 0xff
 800618a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	8979      	ldrh	r1, [r7, #10]
 8006194:	2300      	movs	r3, #0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fbdd 	bl	800695c <I2C_TransferConfig>
 80061a2:	e00f      	b.n	80061c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	8979      	ldrh	r1, [r7, #10]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fbcc 	bl	800695c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d19e      	bne.n	800610c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa9a 	bl	800670c <I2C_WaitOnSTOPFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e01a      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2220      	movs	r2, #32
 80061e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <HAL_I2C_Mem_Write+0x224>)
 80061f6:	400b      	ands	r3, r1
 80061f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	fe00e800 	.word	0xfe00e800

08006224 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	817b      	strh	r3, [r7, #10]
 8006236:	460b      	mov	r3, r1
 8006238:	813b      	strh	r3, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b20      	cmp	r3, #32
 8006248:	f040 80fd 	bne.w	8006446 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_I2C_Mem_Read+0x34>
 8006252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0f1      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_I2C_Mem_Read+0x4e>
 800626e:	2302      	movs	r3, #2
 8006270:	e0ea      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800627a:	f7fd f9bb 	bl	80035f4 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2319      	movs	r3, #25
 8006286:	2201      	movs	r2, #1
 8006288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f9bd 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0d5      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2222      	movs	r2, #34	; 0x22
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2240      	movs	r2, #64	; 0x40
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c4:	88f8      	ldrh	r0, [r7, #6]
 80062c6:	893a      	ldrh	r2, [r7, #8]
 80062c8:	8979      	ldrh	r1, [r7, #10]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4603      	mov	r3, r0
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f921 	bl	800651c <I2C_RequestMemoryRead>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0ad      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2bff      	cmp	r3, #255	; 0xff
 80062f4:	d90e      	bls.n	8006314 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	22ff      	movs	r2, #255	; 0xff
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	8979      	ldrh	r1, [r7, #10]
 8006304:	4b52      	ldr	r3, [pc, #328]	; (8006450 <HAL_I2C_Mem_Read+0x22c>)
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fb25 	bl	800695c <I2C_TransferConfig>
 8006312:	e00f      	b.n	8006334 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	b2da      	uxtb	r2, r3
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	4b4a      	ldr	r3, [pc, #296]	; (8006450 <HAL_I2C_Mem_Read+0x22c>)
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fb14 	bl	800695c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	2200      	movs	r2, #0
 800633c:	2104      	movs	r1, #4
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f964 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e07c      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d034      	beq.n	80063f4 <HAL_I2C_Mem_Read+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d130      	bne.n	80063f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	2200      	movs	r2, #0
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f935 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e04d      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2bff      	cmp	r3, #255	; 0xff
 80063b4:	d90e      	bls.n	80063d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	; 0xff
 80063ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	8979      	ldrh	r1, [r7, #10]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fac5 	bl	800695c <I2C_TransferConfig>
 80063d2:	e00f      	b.n	80063f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	8979      	ldrh	r1, [r7, #10]
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fab4 	bl	800695c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d19a      	bne.n	8006334 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f982 	bl	800670c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e01a      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2220      	movs	r2, #32
 8006418:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_I2C_Mem_Read+0x230>)
 8006426:	400b      	ands	r3, r1
 8006428:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e000      	b.n	8006448 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006446:	2302      	movs	r3, #2
  }
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	80002400 	.word	0x80002400
 8006454:	fe00e800 	.word	0xfe00e800

08006458 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006466:	b2db      	uxtb	r3, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	4603      	mov	r3, r0
 8006484:	817b      	strh	r3, [r7, #10]
 8006486:	460b      	mov	r3, r1
 8006488:	813b      	strh	r3, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	8979      	ldrh	r1, [r7, #10]
 8006494:	4b20      	ldr	r3, [pc, #128]	; (8006518 <I2C_RequestMemoryWrite+0xa4>)
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fa5d 	bl	800695c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f8f0 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e02c      	b.n	8006510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d105      	bne.n	80064c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064bc:	893b      	ldrh	r3, [r7, #8]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28
 80064c6:	e015      	b.n	80064f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064c8:	893b      	ldrh	r3, [r7, #8]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	69b9      	ldr	r1, [r7, #24]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8d6 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e012      	b.n	8006510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2200      	movs	r2, #0
 80064fc:	2180      	movs	r1, #128	; 0x80
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f884 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	80002000 	.word	0x80002000

0800651c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	4603      	mov	r3, r0
 800652c:	817b      	strh	r3, [r7, #10]
 800652e:	460b      	mov	r3, r1
 8006530:	813b      	strh	r3, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <I2C_RequestMemoryRead+0xa4>)
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fa0a 	bl	800695c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f89d 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e02c      	b.n	80065b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006562:	893b      	ldrh	r3, [r7, #8]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
 800656c:	e015      	b.n	800659a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800656e:	893b      	ldrh	r3, [r7, #8]
 8006570:	0a1b      	lsrs	r3, r3, #8
 8006572:	b29b      	uxth	r3, r3
 8006574:	b2da      	uxtb	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f883 	bl	800668c <I2C_WaitOnTXISFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e012      	b.n	80065b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006590:	893b      	ldrh	r3, [r7, #8]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2200      	movs	r2, #0
 80065a2:	2140      	movs	r1, #64	; 0x40
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f831 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	80002000 	.word	0x80002000

080065c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d103      	bne.n	80065e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d007      	beq.n	8006600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	619a      	str	r2, [r3, #24]
  }
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800661c:	e022      	b.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d01e      	beq.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fc ffe5 	bl	80035f4 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e00f      	b.n	8006684 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	429a      	cmp	r2, r3
 8006680:	d0cd      	beq.n	800661e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006698:	e02c      	b.n	80066f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f870 	bl	8006784 <I2C_IsErrorOccurred>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e02a      	b.n	8006704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d01e      	beq.n	80066f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fc ff9d 	bl	80035f4 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e007      	b.n	8006704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d1cb      	bne.n	800669a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006718:	e028      	b.n	800676c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f830 	bl	8006784 <I2C_IsErrorOccurred>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e026      	b.n	800677c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672e:	f7fc ff61 	bl	80035f4 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d113      	bne.n	800676c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e007      	b.n	800677c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d1cf      	bne.n	800671a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d075      	beq.n	800689c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2210      	movs	r2, #16
 80067b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067b8:	e056      	b.n	8006868 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d052      	beq.n	8006868 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fc ff17 	bl	80035f4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <I2C_IsErrorOccurred+0x54>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d147      	bne.n	8006868 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fa:	d12e      	bne.n	800685a <I2C_IsErrorOccurred+0xd6>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006802:	d02a      	beq.n	800685a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006804:	7cfb      	ldrb	r3, [r7, #19]
 8006806:	2b20      	cmp	r3, #32
 8006808:	d027      	beq.n	800685a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006818:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800681a:	f7fc feeb 	bl	80035f4 <HAL_GetTick>
 800681e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006820:	e01b      	b.n	800685a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006822:	f7fc fee7 	bl	80035f4 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b19      	cmp	r3, #25
 800682e:	d914      	bls.n	800685a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d1dc      	bne.n	8006822 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b20      	cmp	r3, #32
 8006874:	d003      	beq.n	800687e <I2C_IsErrorOccurred+0xfa>
 8006876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800687a:	2b00      	cmp	r3, #0
 800687c:	d09d      	beq.n	80067ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800687e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2220      	movs	r2, #32
 800688c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	f043 0308 	orr.w	r3, r3, #8
 80068d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800690a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01c      	beq.n	800694c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fe56 	bl	80065c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6859      	ldr	r1, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <I2C_IsErrorOccurred+0x1d4>)
 8006924:	400b      	ands	r3, r1
 8006926:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800694c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006950:	4618      	mov	r0, r3
 8006952:	3728      	adds	r7, #40	; 0x28
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	fe00e800 	.word	0xfe00e800

0800695c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	817b      	strh	r3, [r7, #10]
 800696a:	4613      	mov	r3, r2
 800696c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800696e:	897b      	ldrh	r3, [r7, #10]
 8006970:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006974:	7a7b      	ldrb	r3, [r7, #9]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800697c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	4313      	orrs	r3, r2
 8006986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800698a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	0d5b      	lsrs	r3, r3, #21
 8006996:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800699a:	4b08      	ldr	r3, [pc, #32]	; (80069bc <I2C_TransferConfig+0x60>)
 800699c:	430b      	orrs	r3, r1
 800699e:	43db      	mvns	r3, r3
 80069a0:	ea02 0103 	and.w	r1, r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	03ff63ff 	.word	0x03ff63ff

080069c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d138      	bne.n	8006a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e032      	b.n	8006a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d139      	bne.n	8006ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e033      	b.n	8006ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2224      	movs	r2, #36	; 0x24
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e0af      	b.n	8006c62 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fa fa0e 	bl	8000f38 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e00a      	b.n	8006b50 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3304      	adds	r3, #4
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b0f      	cmp	r3, #15
 8006b54:	d9f1      	bls.n	8006b3a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0204 	orr.w	r2, r2, #4
 8006b64:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	; (8006c6c <HAL_LCD_Init+0x17c>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6851      	ldr	r1, [r2, #4]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6892      	ldr	r2, [r2, #8]
 8006b78:	4311      	orrs	r1, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006b7e:	4311      	orrs	r1, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b84:	4311      	orrs	r1, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	69d2      	ldr	r2, [r2, #28]
 8006b8a:	4311      	orrs	r1, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6a12      	ldr	r2, [r2, #32]
 8006b90:	4311      	orrs	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6992      	ldr	r2, [r2, #24]
 8006b96:	4311      	orrs	r1, r2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b9c:	4311      	orrs	r1, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f94c 	bl	8006e44 <LCD_WaitForSynchro>
 8006bac:	4603      	mov	r3, r0
 8006bae:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006bb0:	7cfb      	ldrb	r3, [r7, #19]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_LCD_Init+0xca>
  {
    return status;
 8006bb6:	7cfb      	ldrb	r3, [r7, #19]
 8006bb8:	e053      	b.n	8006c62 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006bf2:	f7fc fcff 	bl	80035f4 <HAL_GetTick>
 8006bf6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006bf8:	e00c      	b.n	8006c14 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006bfa:	f7fc fcfb 	bl	80035f4 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c08:	d904      	bls.n	8006c14 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e026      	b.n	8006c62 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d1eb      	bne.n	8006bfa <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006c22:	f7fc fce7 	bl	80035f4 <HAL_GetTick>
 8006c26:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006c28:	e00c      	b.n	8006c44 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006c2a:	f7fc fce3 	bl	80035f4 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c38:	d904      	bls.n	8006c44 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e00e      	b.n	8006c62 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d1eb      	bne.n	8006c2a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	fc00000e 	.word	0xfc00000e

08006c70 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c84:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d002      	beq.n	8006c92 <HAL_LCD_Write+0x22>
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d144      	bne.n	8006d1c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d12a      	bne.n	8006cf4 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_LCD_Write+0x3c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e038      	b.n	8006d1e <HAL_LCD_Write+0xae>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8006cbc:	f7fc fc9a 	bl	80035f4 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006cc2:	e010      	b.n	8006ce6 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006cc4:	f7fc fc96 	bl	80035f4 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cd2:	d908      	bls.n	8006ce6 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e01b      	b.n	8006d1e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d0e7      	beq.n	8006cc4 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	401a      	ands	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	3304      	adds	r3, #4
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d38:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006d3a:	7cbb      	ldrb	r3, [r7, #18]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <HAL_LCD_Clear+0x20>
 8006d40:	7cbb      	ldrb	r3, [r7, #18]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d140      	bne.n	8006dc8 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_LCD_Clear+0x2e>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e03a      	b.n	8006dca <HAL_LCD_Clear+0xa4>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006d64:	f7fc fc46 	bl	80035f4 <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006d6a:	e010      	b.n	8006d8e <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006d6c:	f7fc fc42 	bl	80035f4 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d7a:	d908      	bls.n	8006d8e <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e01d      	b.n	8006dca <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d0e7      	beq.n	8006d6c <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e00a      	b.n	8006db8 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	3304      	adds	r3, #4
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	3301      	adds	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d9f1      	bls.n	8006da2 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f807 	bl	8006dd2 <HAL_LCD_UpdateDisplayRequest>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2208      	movs	r2, #8
 8006de0:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0204 	orr.w	r2, r2, #4
 8006df0:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006df2:	f7fc fbff 	bl	80035f4 <HAL_GetTick>
 8006df6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006df8:	e010      	b.n	8006e1c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006dfa:	f7fc fbfb 	bl	80035f4 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e08:	d908      	bls.n	8006e1c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e00f      	b.n	8006e3c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d1e7      	bne.n	8006dfa <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006e4c:	f7fc fbd2 	bl	80035f4 <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006e52:	e00c      	b.n	8006e6e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006e54:	f7fc fbce 	bl	80035f4 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e62:	d904      	bls.n	8006e6e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e007      	b.n	8006e7e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d1eb      	bne.n	8006e54 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40007000 	.word	0x40007000

08006ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb2:	d130      	bne.n	8006f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eb4:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec0:	d038      	beq.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec2:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eca:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ed2:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2232      	movs	r2, #50	; 0x32
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ede:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee2:	0c9b      	lsrs	r3, r3, #18
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee8:	e002      	b.n	8006ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ef0:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efc:	d102      	bne.n	8006f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f2      	bne.n	8006eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f10:	d110      	bne.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e00f      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f22:	d007      	beq.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f2c:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40007000 	.word	0x40007000
 8006f48:	20000004 	.word	0x20000004
 8006f4c:	431bde83 	.word	0x431bde83

08006f50 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a04      	ldr	r2, [pc, #16]	; (8006f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f5e:	6053      	str	r3, [r2, #4]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40007000 	.word	0x40007000

08006f70 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HAL_PWREx_DisableVddIO2+0x1c>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <HAL_PWREx_DisableVddIO2+0x1c>)
 8006f7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f7e:	6053      	str	r3, [r2, #4]
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40007000 	.word	0x40007000

08006f90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006f98:	f7fc fb2c 	bl	80035f4 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e063      	b.n	8007070 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fa f889 	bl	80010d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006fc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 faf7 	bl	80075ba <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	021a      	lsls	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2120      	movs	r1, #32
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 faef 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d131      	bne.n	8007066 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f023 0310 	bic.w	r3, r3, #16
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6852      	ldr	r2, [r2, #4]
 8007014:	0611      	lsls	r1, r2, #24
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68d2      	ldr	r2, [r2, #12]
 800701a:	4311      	orrs	r1, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	430b      	orrs	r3, r1
 8007022:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_QSPI_Init+0xe8>)
 800702c:	4013      	ands	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6912      	ldr	r2, [r2, #16]
 8007032:	0411      	lsls	r1, r2, #16
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6952      	ldr	r2, [r2, #20]
 8007038:	4311      	orrs	r1, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6992      	ldr	r2, [r2, #24]
 800703e:	4311      	orrs	r1, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	430b      	orrs	r3, r1
 8007046:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800706e:	7afb      	ldrb	r3, [r7, #11]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	ffe0f8fe 	.word	0xffe0f8fe

0800707c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e016      	b.n	80070bc <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fa f85c 	bl	800115c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80070d0:	f7fc fa90 	bl	80035f4 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_QSPI_Command+0x22>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e048      	b.n	8007178 <HAL_QSPI_Command+0xb4>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d137      	bne.n	800716a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2200      	movs	r2, #0
 8007110:	2120      	movs	r1, #32
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fa5f 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d125      	bne.n	800716e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007122:	2200      	movs	r2, #0
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fa8c 	bl	8007644 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	d115      	bne.n	8007160 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2201      	movs	r2, #1
 800713c:	2102      	movs	r1, #2
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa49 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10f      	bne.n	800716e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2202      	movs	r2, #2
 8007154:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800715e:	e006      	b.n	800716e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007168:	e001      	b.n	800716e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800716a:	2302      	movs	r3, #2
 800716c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007190:	f7fc fa30 	bl	80035f4 <HAL_GetTick>
 8007194:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3320      	adds	r3, #32
 800719c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_QSPI_Transmit+0x2e>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e07b      	b.n	80072a6 <HAL_QSPI_Transmit+0x126>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d16a      	bne.n	8007298 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d05b      	beq.n	8007286 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2212      	movs	r2, #18
 80071d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007202:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007204:	e01b      	b.n	800723e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2201      	movs	r2, #1
 800720e:	2104      	movs	r1, #4
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f9e0 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d113      	bne.n	8007248 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1e5a      	subs	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1df      	bne.n	8007206 <HAL_QSPI_Transmit+0x86>
 8007246:	e000      	b.n	800724a <HAL_QSPI_Transmit+0xca>
          break;
 8007248:	bf00      	nop
      }

      if (status == HAL_OK)
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d115      	bne.n	800727c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2201      	movs	r2, #1
 8007258:	2102      	movs	r1, #2
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f9bb 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007264:	7ffb      	ldrb	r3, [r7, #31]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d108      	bne.n	800727c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2202      	movs	r2, #2
 8007270:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f934 	bl	80074e0 <HAL_QSPI_Abort>
 8007278:	4603      	mov	r3, r0
 800727a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007284:	e00a      	b.n	800729c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	f043 0208 	orr.w	r2, r3, #8
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	e001      	b.n	800729c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007298:	2302      	movs	r3, #2
 800729a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80072a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b08a      	sub	sp, #40	; 0x28
 80072b2:	af02      	add	r7, sp, #8
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80072be:	f7fc f999 	bl	80035f4 <HAL_GetTick>
 80072c2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3320      	adds	r3, #32
 80072d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_QSPI_Receive+0x36>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e082      	b.n	80073ea <HAL_QSPI_Receive+0x13c>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d171      	bne.n	80073dc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d062      	beq.n	80073ca <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2222      	movs	r2, #34	; 0x22
 8007308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800733c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007346:	e01c      	b.n	8007382 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2201      	movs	r2, #1
 8007350:	2106      	movs	r1, #6
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f93f 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800735c:	7ffb      	ldrb	r3, [r7, #31]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d114      	bne.n	800738c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1de      	bne.n	8007348 <HAL_QSPI_Receive+0x9a>
 800738a:	e000      	b.n	800738e <HAL_QSPI_Receive+0xe0>
          break;
 800738c:	bf00      	nop
      }

      if (status == HAL_OK)
 800738e:	7ffb      	ldrb	r3, [r7, #31]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d115      	bne.n	80073c0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2201      	movs	r2, #1
 800739c:	2102      	movs	r1, #2
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f919 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2202      	movs	r2, #2
 80073b4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f892 	bl	80074e0 <HAL_QSPI_Abort>
 80073bc:	4603      	mov	r3, r0
 80073be:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80073c8:	e00a      	b.n	80073e0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	f043 0208 	orr.w	r2, r3, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e001      	b.n	80073e0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
 80073de:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80073e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b088      	sub	sp, #32
 80073f6:	af02      	add	r7, sp, #8
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007400:	f7fc f8f8 	bl	80035f4 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_QSPI_AutoPolling+0x24>
 8007412:	2302      	movs	r3, #2
 8007414:	e060      	b.n	80074d8 <HAL_QSPI_AutoPolling+0xe6>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b01      	cmp	r3, #1
 8007428:	d14f      	bne.n	80074ca <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2242      	movs	r2, #66	; 0x42
 8007434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2200      	movs	r2, #0
 8007440:	2120      	movs	r1, #32
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f8c7 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d13d      	bne.n	80074ce <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6852      	ldr	r2, [r2, #4]
 8007464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6892      	ldr	r2, [r2, #8]
 800746e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	431a      	orrs	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007488:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f8d3 	bl	8007644 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2201      	movs	r2, #1
 80074a6:	2108      	movs	r1, #8
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f894 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2208      	movs	r2, #8
 80074be:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80074c8:	e001      	b.n	80074ce <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80074ca:	2302      	movs	r3, #2
 80074cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80074ec:	f7fc f882 	bl	80035f4 <HAL_GetTick>
 80074f0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d056      	beq.n	80075b0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0204 	bic.w	r2, r2, #4
 8007526:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe f893 	bl	8005658 <HAL_DMA_Abort>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	f043 0204 	orr.w	r2, r3, #4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0202 	orr.w	r2, r2, #2
 8007556:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2201      	movs	r2, #1
 8007562:	2102      	movs	r1, #2
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f836 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10e      	bne.n	8007592 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2202      	movs	r2, #2
 800757a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	2120      	movs	r1, #32
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f824 	bl	80075d6 <QSPI_WaitFlagStateUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80075a6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80075e6:	e01a      	b.n	800761e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d016      	beq.n	800761e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f0:	f7fc f800 	bl	80035f4 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2204      	movs	r2, #4
 800760a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	f043 0201 	orr.w	r2, r3, #1
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e00e      	b.n	800763c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	429a      	cmp	r2, r3
 8007638:	d1d6      	bne.n	80075e8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <QSPI_Config+0x28>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800765e:	d005      	beq.n	800766c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3a01      	subs	r2, #1
 800766a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80b9 	beq.w	80077e8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d05f      	beq.n	800773e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	6892      	ldr	r2, [r2, #8]
 8007686:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d031      	beq.n	80076f4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	431a      	orrs	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	431a      	orrs	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	049b      	lsls	r3, r3, #18
 80076ac:	431a      	orrs	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	431a      	orrs	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	431a      	orrs	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	ea42 0103 	orr.w	r1, r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	430a      	orrs	r2, r1
 80076dc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076e4:	f000 812e 	beq.w	8007944 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	6852      	ldr	r2, [r2, #4]
 80076f0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80076f2:	e127      	b.n	8007944 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	431a      	orrs	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	431a      	orrs	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	431a      	orrs	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	049b      	lsls	r3, r3, #18
 8007710:	431a      	orrs	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	431a      	orrs	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	431a      	orrs	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	431a      	orrs	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	431a      	orrs	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	ea42 0103 	orr.w	r1, r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	430a      	orrs	r2, r1
 800773a:	615a      	str	r2, [r3, #20]
}
 800773c:	e102      	b.n	8007944 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d02e      	beq.n	80077a4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	431a      	orrs	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	431a      	orrs	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	431a      	orrs	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	049b      	lsls	r3, r3, #18
 8007762:	431a      	orrs	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	431a      	orrs	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	431a      	orrs	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	431a      	orrs	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	431a      	orrs	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	ea42 0103 	orr.w	r1, r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	430a      	orrs	r2, r1
 800778c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007794:	f000 80d6 	beq.w	8007944 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	619a      	str	r2, [r3, #24]
}
 80077a2:	e0cf      	b.n	8007944 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	049b      	lsls	r3, r3, #18
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	ea42 0103 	orr.w	r1, r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	615a      	str	r2, [r3, #20]
}
 80077e6:	e0ad      	b.n	8007944 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d058      	beq.n	80078a2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	6892      	ldr	r2, [r2, #8]
 80077f8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02d      	beq.n	800785e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	431a      	orrs	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007810:	431a      	orrs	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	431a      	orrs	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	049b      	lsls	r3, r3, #18
 800781e:	431a      	orrs	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	431a      	orrs	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	431a      	orrs	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	431a      	orrs	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	431a      	orrs	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	ea42 0103 	orr.w	r1, r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	430a      	orrs	r2, r1
 8007848:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007850:	d078      	beq.n	8007944 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	6852      	ldr	r2, [r2, #4]
 800785a:	619a      	str	r2, [r3, #24]
}
 800785c:	e072      	b.n	8007944 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	431a      	orrs	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	431a      	orrs	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	049b      	lsls	r3, r3, #18
 800787a:	431a      	orrs	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	431a      	orrs	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	431a      	orrs	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	431a      	orrs	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	ea42 0103 	orr.w	r1, r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	430a      	orrs	r2, r1
 800789e:	615a      	str	r2, [r3, #20]
}
 80078a0:	e050      	b.n	8007944 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02a      	beq.n	8007900 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	431a      	orrs	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	049b      	lsls	r3, r3, #18
 80078c6:	431a      	orrs	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	431a      	orrs	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	ea42 0103 	orr.w	r1, r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078f2:	d027      	beq.n	8007944 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	6852      	ldr	r2, [r2, #4]
 80078fc:	619a      	str	r2, [r3, #24]
}
 80078fe:	e021      	b.n	8007944 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01d      	beq.n	8007944 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	431a      	orrs	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	431a      	orrs	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	431a      	orrs	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	049b      	lsls	r3, r3, #18
 8007924:	431a      	orrs	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	431a      	orrs	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	431a      	orrs	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	ea42 0103 	orr.w	r1, r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	430a      	orrs	r2, r1
 8007942:	615a      	str	r2, [r3, #20]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e3d8      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007962:	4b97      	ldr	r3, [pc, #604]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 030c 	and.w	r3, r3, #12
 800796a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800796c:	4b94      	ldr	r3, [pc, #592]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80e4 	beq.w	8007b4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_RCC_OscConfig+0x4a>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b0c      	cmp	r3, #12
 800798e:	f040 808b 	bne.w	8007aa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b01      	cmp	r3, #1
 8007996:	f040 8087 	bne.w	8007aa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800799a:	4b89      	ldr	r3, [pc, #548]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_RCC_OscConfig+0x62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e3b0      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	4b82      	ldr	r3, [pc, #520]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_RCC_OscConfig+0x7c>
 80079c2:	4b7f      	ldr	r3, [pc, #508]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079ca:	e005      	b.n	80079d8 <HAL_RCC_OscConfig+0x88>
 80079cc:	4b7c      	ldr	r3, [pc, #496]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079d2:	091b      	lsrs	r3, r3, #4
 80079d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d8:	4293      	cmp	r3, r2
 80079da:	d223      	bcs.n	8007a24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fd43 	bl	800846c <RCC_SetFlashLatencyFromMSIRange>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e391      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079f0:	4b73      	ldr	r3, [pc, #460]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a72      	ldr	r2, [pc, #456]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079f6:	f043 0308 	orr.w	r3, r3, #8
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	4b70      	ldr	r3, [pc, #448]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	496d      	ldr	r1, [pc, #436]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a0e:	4b6c      	ldr	r3, [pc, #432]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	4968      	ldr	r1, [pc, #416]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	604b      	str	r3, [r1, #4]
 8007a22:	e025      	b.n	8007a70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a24:	4b66      	ldr	r3, [pc, #408]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a65      	ldr	r2, [pc, #404]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a2a:	f043 0308 	orr.w	r3, r3, #8
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	4b63      	ldr	r3, [pc, #396]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	4960      	ldr	r1, [pc, #384]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a42:	4b5f      	ldr	r3, [pc, #380]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	495b      	ldr	r1, [pc, #364]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fd03 	bl	800846c <RCC_SetFlashLatencyFromMSIRange>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e351      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a70:	f000 fc38 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b52      	ldr	r3, [pc, #328]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	091b      	lsrs	r3, r3, #4
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	4950      	ldr	r1, [pc, #320]	; (8007bc4 <HAL_RCC_OscConfig+0x274>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	4a4e      	ldr	r2, [pc, #312]	; (8007bc8 <HAL_RCC_OscConfig+0x278>)
 8007a8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007a90:	4b4e      	ldr	r3, [pc, #312]	; (8007bcc <HAL_RCC_OscConfig+0x27c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fb fd5d 	bl	8003554 <HAL_InitTick>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d052      	beq.n	8007b4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	e335      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d032      	beq.n	8007b16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ab0:	4b43      	ldr	r3, [pc, #268]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a42      	ldr	r2, [pc, #264]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007abc:	f7fb fd9a 	bl	80035f4 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ac4:	f7fb fd96 	bl	80035f4 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e31e      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ad6:	4b3a      	ldr	r3, [pc, #232]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f0      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ae2:	4b37      	ldr	r3, [pc, #220]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a36      	ldr	r2, [pc, #216]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ae8:	f043 0308 	orr.w	r3, r3, #8
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	4b34      	ldr	r3, [pc, #208]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	4931      	ldr	r1, [pc, #196]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b00:	4b2f      	ldr	r3, [pc, #188]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	492c      	ldr	r1, [pc, #176]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	604b      	str	r3, [r1, #4]
 8007b14:	e01a      	b.n	8007b4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b16:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b22:	f7fb fd67 	bl	80035f4 <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b2a:	f7fb fd63 	bl	80035f4 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e2eb      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007b3c:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <HAL_RCC_OscConfig+0x1da>
 8007b48:	e000      	b.n	8007b4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d074      	beq.n	8007c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d005      	beq.n	8007b6a <HAL_RCC_OscConfig+0x21a>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	d10e      	bne.n	8007b82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d10b      	bne.n	8007b82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d064      	beq.n	8007c40 <HAL_RCC_OscConfig+0x2f0>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d160      	bne.n	8007c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e2c8      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8a:	d106      	bne.n	8007b9a <HAL_RCC_OscConfig+0x24a>
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0b      	ldr	r2, [pc, #44]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	e026      	b.n	8007be8 <HAL_RCC_OscConfig+0x298>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba2:	d115      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x280>
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a05      	ldr	r2, [pc, #20]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a02      	ldr	r2, [pc, #8]	; (8007bc0 <HAL_RCC_OscConfig+0x270>)
 8007bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e014      	b.n	8007be8 <HAL_RCC_OscConfig+0x298>
 8007bbe:	bf00      	nop
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	0800bea0 	.word	0x0800bea0
 8007bc8:	20000004 	.word	0x20000004
 8007bcc:	20000040 	.word	0x20000040
 8007bd0:	4ba0      	ldr	r3, [pc, #640]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a9f      	ldr	r2, [pc, #636]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	4b9d      	ldr	r3, [pc, #628]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a9c      	ldr	r2, [pc, #624]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d013      	beq.n	8007c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fb fd00 	bl	80035f4 <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bf8:	f7fb fcfc 	bl	80035f4 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b64      	cmp	r3, #100	; 0x64
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e284      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c0a:	4b92      	ldr	r3, [pc, #584]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0f0      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x2a8>
 8007c16:	e014      	b.n	8007c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c18:	f7fb fcec 	bl	80035f4 <HAL_GetTick>
 8007c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c20:	f7fb fce8 	bl	80035f4 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b64      	cmp	r3, #100	; 0x64
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e270      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c32:	4b88      	ldr	r3, [pc, #544]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f0      	bne.n	8007c20 <HAL_RCC_OscConfig+0x2d0>
 8007c3e:	e000      	b.n	8007c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d060      	beq.n	8007d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d005      	beq.n	8007c60 <HAL_RCC_OscConfig+0x310>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b0c      	cmp	r3, #12
 8007c58:	d119      	bne.n	8007c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d116      	bne.n	8007c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c60:	4b7c      	ldr	r3, [pc, #496]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_RCC_OscConfig+0x328>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e24d      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c78:	4b76      	ldr	r3, [pc, #472]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	4973      	ldr	r1, [pc, #460]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c8c:	e040      	b.n	8007d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d023      	beq.n	8007cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c96:	4b6f      	ldr	r3, [pc, #444]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a6e      	ldr	r2, [pc, #440]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca2:	f7fb fca7 	bl	80035f4 <HAL_GetTick>
 8007ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007caa:	f7fb fca3 	bl	80035f4 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e22b      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cbc:	4b65      	ldr	r3, [pc, #404]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc8:	4b62      	ldr	r3, [pc, #392]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	061b      	lsls	r3, r3, #24
 8007cd6:	495f      	ldr	r1, [pc, #380]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	604b      	str	r3, [r1, #4]
 8007cdc:	e018      	b.n	8007d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cde:	4b5d      	ldr	r3, [pc, #372]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a5c      	ldr	r2, [pc, #368]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fb fc83 	bl	80035f4 <HAL_GetTick>
 8007cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cf0:	e008      	b.n	8007d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf2:	f7fb fc7f 	bl	80035f4 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e207      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d04:	4b53      	ldr	r3, [pc, #332]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1f0      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d03c      	beq.n	8007d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01c      	beq.n	8007d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d24:	4b4b      	ldr	r3, [pc, #300]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d2a:	4a4a      	ldr	r2, [pc, #296]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d34:	f7fb fc5e 	bl	80035f4 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3c:	f7fb fc5a 	bl	80035f4 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1e2      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d4e:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0ef      	beq.n	8007d3c <HAL_RCC_OscConfig+0x3ec>
 8007d5c:	e01b      	b.n	8007d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d5e:	4b3d      	ldr	r3, [pc, #244]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d64:	4a3b      	ldr	r2, [pc, #236]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6e:	f7fb fc41 	bl	80035f4 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d74:	e008      	b.n	8007d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d76:	f7fb fc3d 	bl	80035f4 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e1c5      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d88:	4b32      	ldr	r3, [pc, #200]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1ef      	bne.n	8007d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 80a6 	beq.w	8007ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007da4:	2300      	movs	r3, #0
 8007da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007da8:	4b2a      	ldr	r3, [pc, #168]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10d      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007db4:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db8:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc0:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	60bb      	str	r3, [r7, #8]
 8007dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dd0:	4b21      	ldr	r3, [pc, #132]	; (8007e58 <HAL_RCC_OscConfig+0x508>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d118      	bne.n	8007e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	; (8007e58 <HAL_RCC_OscConfig+0x508>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1d      	ldr	r2, [pc, #116]	; (8007e58 <HAL_RCC_OscConfig+0x508>)
 8007de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007de8:	f7fb fc04 	bl	80035f4 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007df0:	f7fb fc00 	bl	80035f4 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e188      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <HAL_RCC_OscConfig+0x508>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0f0      	beq.n	8007df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d108      	bne.n	8007e28 <HAL_RCC_OscConfig+0x4d8>
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	4a0d      	ldr	r2, [pc, #52]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e26:	e029      	b.n	8007e7c <HAL_RCC_OscConfig+0x52c>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d115      	bne.n	8007e5c <HAL_RCC_OscConfig+0x50c>
 8007e30:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	4a07      	ldr	r2, [pc, #28]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e38:	f043 0304 	orr.w	r3, r3, #4
 8007e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	4a03      	ldr	r2, [pc, #12]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007e48:	f043 0301 	orr.w	r3, r3, #1
 8007e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e50:	e014      	b.n	8007e7c <HAL_RCC_OscConfig+0x52c>
 8007e52:	bf00      	nop
 8007e54:	40021000 	.word	0x40021000
 8007e58:	40007000 	.word	0x40007000
 8007e5c:	4b91      	ldr	r3, [pc, #580]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e62:	4a90      	ldr	r2, [pc, #576]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e6c:	4b8d      	ldr	r3, [pc, #564]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	4a8c      	ldr	r2, [pc, #560]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007e74:	f023 0304 	bic.w	r3, r3, #4
 8007e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d016      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e84:	f7fb fbb6 	bl	80035f4 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e8a:	e00a      	b.n	8007ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8c:	f7fb fbb2 	bl	80035f4 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e138      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ea2:	4b80      	ldr	r3, [pc, #512]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ed      	beq.n	8007e8c <HAL_RCC_OscConfig+0x53c>
 8007eb0:	e015      	b.n	8007ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb2:	f7fb fb9f 	bl	80035f4 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007eb8:	e00a      	b.n	8007ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eba:	f7fb fb9b 	bl	80035f4 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e121      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ed0:	4b74      	ldr	r3, [pc, #464]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1ed      	bne.n	8007eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ede:	7ffb      	ldrb	r3, [r7, #31]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d105      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ee4:	4b6f      	ldr	r3, [pc, #444]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	4a6e      	ldr	r2, [pc, #440]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 810c 	beq.w	8008112 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f040 80d4 	bne.w	80080ac <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007f04:	4b67      	ldr	r3, [pc, #412]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f003 0203 	and.w	r2, r3, #3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d130      	bne.n	8007f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	3b01      	subs	r3, #1
 8007f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d127      	bne.n	8007f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d11f      	bne.n	8007f7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f44:	2a07      	cmp	r2, #7
 8007f46:	bf14      	ite	ne
 8007f48:	2201      	movne	r2, #1
 8007f4a:	2200      	moveq	r2, #0
 8007f4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d113      	bne.n	8007f7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5c:	085b      	lsrs	r3, r3, #1
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d109      	bne.n	8007f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	3b01      	subs	r3, #1
 8007f74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d06e      	beq.n	8008058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b0c      	cmp	r3, #12
 8007f7e:	d069      	beq.n	8008054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f80:	4b48      	ldr	r3, [pc, #288]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007f8c:	4b45      	ldr	r3, [pc, #276]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0bb      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f9c:	4b41      	ldr	r3, [pc, #260]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a40      	ldr	r2, [pc, #256]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fa8:	f7fb fb24 	bl	80035f4 <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb0:	f7fb fb20 	bl	80035f4 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e0a8      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fc2:	4b38      	ldr	r3, [pc, #224]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1f0      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <HAL_RCC_OscConfig+0x758>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	0112      	lsls	r2, r2, #4
 8007fe2:	4311      	orrs	r1, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fe8:	0212      	lsls	r2, r2, #8
 8007fea:	4311      	orrs	r1, r2
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ff0:	0852      	lsrs	r2, r2, #1
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	0552      	lsls	r2, r2, #21
 8007ff6:	4311      	orrs	r1, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ffc:	0852      	lsrs	r2, r2, #1
 8007ffe:	3a01      	subs	r2, #1
 8008000:	0652      	lsls	r2, r2, #25
 8008002:	4311      	orrs	r1, r2
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008008:	0912      	lsrs	r2, r2, #4
 800800a:	0452      	lsls	r2, r2, #17
 800800c:	430a      	orrs	r2, r1
 800800e:	4925      	ldr	r1, [pc, #148]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008010:	4313      	orrs	r3, r2
 8008012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 800801a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800801e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008020:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	4a1f      	ldr	r2, [pc, #124]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800802a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800802c:	f7fb fae2 	bl	80035f4 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008034:	f7fb fade 	bl	80035f4 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e066      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008046:	4b17      	ldr	r3, [pc, #92]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008052:	e05e      	b.n	8008112 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e05d      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008058:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d156      	bne.n	8008112 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a0e      	ldr	r2, [pc, #56]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 800806a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800807a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800807c:	f7fb faba 	bl	80035f4 <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008084:	f7fb fab6 	bl	80035f4 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e03e      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008096:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <HAL_RCC_OscConfig+0x754>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x734>
 80080a2:	e036      	b.n	8008112 <HAL_RCC_OscConfig+0x7c2>
 80080a4:	40021000 	.word	0x40021000
 80080a8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b0c      	cmp	r3, #12
 80080b0:	d02d      	beq.n	800810e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a19      	ldr	r2, [pc, #100]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	4a13      	ldr	r2, [pc, #76]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080d0:	f023 0303 	bic.w	r3, r3, #3
 80080d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80080d6:	4b11      	ldr	r3, [pc, #68]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	4a10      	ldr	r2, [pc, #64]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 80080dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80080e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e6:	f7fb fa85 	bl	80035f4 <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ee:	f7fb fa81 	bl	80035f4 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e009      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <HAL_RCC_OscConfig+0x7cc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f0      	bne.n	80080ee <HAL_RCC_OscConfig+0x79e>
 800810c:	e001      	b.n	8008112 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40021000 	.word	0x40021000

08008120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e0c8      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008134:	4b66      	ldr	r3, [pc, #408]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d910      	bls.n	8008164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008142:	4b63      	ldr	r3, [pc, #396]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f023 0207 	bic.w	r2, r3, #7
 800814a:	4961      	ldr	r1, [pc, #388]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	4313      	orrs	r3, r2
 8008150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008152:	4b5f      	ldr	r3, [pc, #380]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d001      	beq.n	8008164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e0b0      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d04c      	beq.n	800820a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d107      	bne.n	8008188 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008178:	4b56      	ldr	r3, [pc, #344]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d121      	bne.n	80081c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e09e      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d107      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008190:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d115      	bne.n	80081c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e092      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d107      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80081a8:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e086      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b8:	4b46      	ldr	r3, [pc, #280]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e07e      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081c8:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f023 0203 	bic.w	r2, r3, #3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	493f      	ldr	r1, [pc, #252]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081da:	f7fb fa0b 	bl	80035f4 <HAL_GetTick>
 80081de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e0:	e00a      	b.n	80081f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081e2:	f7fb fa07 	bl	80035f4 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e066      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081f8:	4b36      	ldr	r3, [pc, #216]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 020c 	and.w	r2, r3, #12
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	429a      	cmp	r2, r3
 8008208:	d1eb      	bne.n	80081e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008216:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	492c      	ldr	r1, [pc, #176]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008224:	4313      	orrs	r3, r2
 8008226:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008228:	4b29      	ldr	r3, [pc, #164]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d210      	bcs.n	8008258 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008236:	4b26      	ldr	r3, [pc, #152]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f023 0207 	bic.w	r2, r3, #7
 800823e:	4924      	ldr	r1, [pc, #144]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4313      	orrs	r3, r2
 8008244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008246:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <HAL_RCC_ClockConfig+0x1b0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d001      	beq.n	8008258 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e036      	b.n	80082c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008264:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	4918      	ldr	r1, [pc, #96]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008272:	4313      	orrs	r3, r2
 8008274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4910      	ldr	r1, [pc, #64]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 8008292:	4313      	orrs	r3, r2
 8008294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008296:	f000 f825 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800829a:	4602      	mov	r2, r0
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <HAL_RCC_ClockConfig+0x1b4>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	490c      	ldr	r1, [pc, #48]	; (80082d8 <HAL_RCC_ClockConfig+0x1b8>)
 80082a8:	5ccb      	ldrb	r3, [r1, r3]
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	fa22 f303 	lsr.w	r3, r2, r3
 80082b2:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <HAL_RCC_ClockConfig+0x1bc>)
 80082b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <HAL_RCC_ClockConfig+0x1c0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fb f94a 	bl	8003554 <HAL_InitTick>
 80082c0:	4603      	mov	r3, r0
 80082c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80082c4:	7afb      	ldrb	r3, [r7, #11]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40022000 	.word	0x40022000
 80082d4:	40021000 	.word	0x40021000
 80082d8:	0800bea0 	.word	0x0800bea0
 80082dc:	20000004 	.word	0x20000004
 80082e0:	20000040 	.word	0x20000040

080082e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b089      	sub	sp, #36	; 0x24
 80082e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61fb      	str	r3, [r7, #28]
 80082ee:	2300      	movs	r3, #0
 80082f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f2:	4b3e      	ldr	r3, [pc, #248]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 030c 	and.w	r3, r3, #12
 80082fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082fc:	4b3b      	ldr	r3, [pc, #236]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_RCC_GetSysClockFreq+0x34>
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d121      	bne.n	8008356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d11e      	bne.n	8008356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008318:	4b34      	ldr	r3, [pc, #208]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d107      	bne.n	8008334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008324:	4b31      	ldr	r3, [pc, #196]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 8008326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	e005      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008334:	4b2d      	ldr	r3, [pc, #180]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10d      	bne.n	800836c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008354:	e00a      	b.n	800836c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b04      	cmp	r3, #4
 800835a:	d102      	bne.n	8008362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800835c:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	e004      	b.n	800836c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b08      	cmp	r3, #8
 8008366:	d101      	bne.n	800836c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008368:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800836a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b0c      	cmp	r3, #12
 8008370:	d134      	bne.n	80083dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0xa6>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d003      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0xac>
 8008388:	e005      	b.n	8008396 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800838a:	4b1a      	ldr	r3, [pc, #104]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800838c:	617b      	str	r3, [r7, #20]
      break;
 800838e:	e005      	b.n	800839c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008392:	617b      	str	r3, [r7, #20]
      break;
 8008394:	e002      	b.n	800839c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	617b      	str	r3, [r7, #20]
      break;
 800839a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800839c:	4b13      	ldr	r3, [pc, #76]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	091b      	lsrs	r3, r3, #4
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	3301      	adds	r3, #1
 80083a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80083aa:	4b10      	ldr	r3, [pc, #64]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	fb03 f202 	mul.w	r2, r3, r2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <HAL_RCC_GetSysClockFreq+0x108>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	0e5b      	lsrs	r3, r3, #25
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	3301      	adds	r3, #1
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80083dc:	69bb      	ldr	r3, [r7, #24]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3724      	adds	r7, #36	; 0x24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40021000 	.word	0x40021000
 80083f0:	0800beb8 	.word	0x0800beb8
 80083f4:	00f42400 	.word	0x00f42400
 80083f8:	007a1200 	.word	0x007a1200

080083fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008400:	4b03      	ldr	r3, [pc, #12]	; (8008410 <HAL_RCC_GetHCLKFreq+0x14>)
 8008402:	681b      	ldr	r3, [r3, #0]
}
 8008404:	4618      	mov	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000004 	.word	0x20000004

08008414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008418:	f7ff fff0 	bl	80083fc <HAL_RCC_GetHCLKFreq>
 800841c:	4602      	mov	r2, r0
 800841e:	4b06      	ldr	r3, [pc, #24]	; (8008438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <HAL_RCC_GetPCLK1Freq+0x28>)
 800842a:	5ccb      	ldrb	r3, [r1, r3]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40021000 	.word	0x40021000
 800843c:	0800beb0 	.word	0x0800beb0

08008440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008444:	f7ff ffda 	bl	80083fc <HAL_RCC_GetHCLKFreq>
 8008448:	4602      	mov	r2, r0
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	0adb      	lsrs	r3, r3, #11
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	4904      	ldr	r1, [pc, #16]	; (8008468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008456:	5ccb      	ldrb	r3, [r1, r3]
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40021000 	.word	0x40021000
 8008468:	0800beb0 	.word	0x0800beb0

0800846c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008478:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800847a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008484:	f7fe fd00 	bl	8006e88 <HAL_PWREx_GetVoltageRange>
 8008488:	6178      	str	r0, [r7, #20]
 800848a:	e014      	b.n	80084b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800848c:	4b25      	ldr	r3, [pc, #148]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800848e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008490:	4a24      	ldr	r2, [pc, #144]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008496:	6593      	str	r3, [r2, #88]	; 0x58
 8008498:	4b22      	ldr	r3, [pc, #136]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800849a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80084a4:	f7fe fcf0 	bl	8006e88 <HAL_PWREx_GetVoltageRange>
 80084a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80084aa:	4b1e      	ldr	r3, [pc, #120]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084bc:	d10b      	bne.n	80084d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b80      	cmp	r3, #128	; 0x80
 80084c2:	d919      	bls.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2ba0      	cmp	r3, #160	; 0xa0
 80084c8:	d902      	bls.n	80084d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084ca:	2302      	movs	r3, #2
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e013      	b.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084d0:	2301      	movs	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	e010      	b.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d902      	bls.n	80084e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80084dc:	2303      	movs	r3, #3
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	e00a      	b.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d102      	bne.n	80084ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084e8:	2302      	movs	r3, #2
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	e004      	b.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b70      	cmp	r3, #112	; 0x70
 80084f2:	d101      	bne.n	80084f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084f4:	2301      	movs	r3, #1
 80084f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f023 0207 	bic.w	r2, r3, #7
 8008500:	4909      	ldr	r1, [pc, #36]	; (8008528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	4313      	orrs	r3, r2
 8008506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008508:	4b07      	ldr	r3, [pc, #28]	; (8008528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d001      	beq.n	800851a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40021000 	.word	0x40021000
 8008528:	40022000 	.word	0x40022000

0800852c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008534:	2300      	movs	r3, #0
 8008536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008538:	2300      	movs	r3, #0
 800853a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008544:	2b00      	cmp	r3, #0
 8008546:	d041      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008550:	d02a      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008552:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008556:	d824      	bhi.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008558:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800855c:	d008      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800855e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008562:	d81e      	bhi.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856c:	d010      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800856e:	e018      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008570:	4b86      	ldr	r3, [pc, #536]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a85      	ldr	r2, [pc, #532]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800857c:	e015      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3304      	adds	r3, #4
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f919 	bl	80097bc <RCCEx_PLLSAI1_Config>
 800858a:	4603      	mov	r3, r0
 800858c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800858e:	e00c      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3320      	adds	r3, #32
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fa04 	bl	80099a4 <RCCEx_PLLSAI2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085a0:	e003      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	74fb      	strb	r3, [r7, #19]
      break;
 80085a6:	e000      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80085a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085b0:	4b76      	ldr	r3, [pc, #472]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085be:	4973      	ldr	r1, [pc, #460]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80085c6:	e001      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c8:	7cfb      	ldrb	r3, [r7, #19]
 80085ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d041      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085e0:	d02a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80085e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085e6:	d824      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80085e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ec:	d008      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80085ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f2:	d81e      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80085f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085fc:	d010      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80085fe:	e018      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008600:	4b62      	ldr	r3, [pc, #392]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	4a61      	ldr	r2, [pc, #388]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800860a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800860c:	e015      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f8d1 	bl	80097bc <RCCEx_PLLSAI1_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800861e:	e00c      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3320      	adds	r3, #32
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f9bc 	bl	80099a4 <RCCEx_PLLSAI2_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008630:	e003      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	74fb      	strb	r3, [r7, #19]
      break;
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863a:	7cfb      	ldrb	r3, [r7, #19]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10b      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008640:	4b52      	ldr	r3, [pc, #328]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800864e:	494f      	ldr	r1, [pc, #316]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008656:	e001      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	7cfb      	ldrb	r3, [r7, #19]
 800865a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80a0 	beq.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800866a:	2300      	movs	r3, #0
 800866c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800866e:	4b47      	ldr	r3, [pc, #284]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00d      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008684:	4b41      	ldr	r3, [pc, #260]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	4a40      	ldr	r2, [pc, #256]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800868a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868e:	6593      	str	r3, [r2, #88]	; 0x58
 8008690:	4b3e      	ldr	r3, [pc, #248]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800869c:	2301      	movs	r3, #1
 800869e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086a0:	4b3b      	ldr	r3, [pc, #236]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a3a      	ldr	r2, [pc, #232]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086ac:	f7fa ffa2 	bl	80035f4 <HAL_GetTick>
 80086b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086b2:	e009      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086b4:	f7fa ff9e 	bl	80035f4 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d902      	bls.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	74fb      	strb	r3, [r7, #19]
        break;
 80086c6:	e005      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086c8:	4b31      	ldr	r3, [pc, #196]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0ef      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80086d4:	7cfb      	ldrb	r3, [r7, #19]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d15c      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086da:	4b2c      	ldr	r3, [pc, #176]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01f      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d019      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086f8:	4b24      	ldr	r3, [pc, #144]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008702:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008704:	4b21      	ldr	r3, [pc, #132]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870a:	4a20      	ldr	r2, [pc, #128]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800870c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008714:	4b1d      	ldr	r3, [pc, #116]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	4a1c      	ldr	r2, [pc, #112]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800871c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008724:	4a19      	ldr	r2, [pc, #100]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d016      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008736:	f7fa ff5d 	bl	80035f4 <HAL_GetTick>
 800873a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800873c:	e00b      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800873e:	f7fa ff59 	bl	80035f4 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	f241 3288 	movw	r2, #5000	; 0x1388
 800874c:	4293      	cmp	r3, r2
 800874e:	d902      	bls.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	74fb      	strb	r3, [r7, #19]
            break;
 8008754:	e006      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ec      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008764:	7cfb      	ldrb	r3, [r7, #19]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877a:	4904      	ldr	r1, [pc, #16]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800877c:	4313      	orrs	r3, r2
 800877e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008782:	e009      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008784:	7cfb      	ldrb	r3, [r7, #19]
 8008786:	74bb      	strb	r3, [r7, #18]
 8008788:	e006      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800878a:	bf00      	nop
 800878c:	40021000 	.word	0x40021000
 8008790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	7cfb      	ldrb	r3, [r7, #19]
 8008796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008798:	7c7b      	ldrb	r3, [r7, #17]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d105      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800879e:	4b9e      	ldr	r3, [pc, #632]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a2:	4a9d      	ldr	r2, [pc, #628]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087b6:	4b98      	ldr	r3, [pc, #608]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087bc:	f023 0203 	bic.w	r2, r3, #3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	4994      	ldr	r1, [pc, #592]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087d8:	4b8f      	ldr	r3, [pc, #572]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	f023 020c 	bic.w	r2, r3, #12
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e6:	498c      	ldr	r1, [pc, #560]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087fa:	4b87      	ldr	r3, [pc, #540]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	4983      	ldr	r1, [pc, #524]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800881c:	4b7e      	ldr	r3, [pc, #504]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	497b      	ldr	r1, [pc, #492]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800882c:	4313      	orrs	r3, r2
 800882e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0310 	and.w	r3, r3, #16
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800883e:	4b76      	ldr	r3, [pc, #472]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884c:	4972      	ldr	r1, [pc, #456]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008860:	4b6d      	ldr	r3, [pc, #436]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008866:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886e:	496a      	ldr	r1, [pc, #424]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008870:	4313      	orrs	r3, r2
 8008872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008882:	4b65      	ldr	r3, [pc, #404]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008890:	4961      	ldr	r1, [pc, #388]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088a4:	4b5c      	ldr	r3, [pc, #368]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b2:	4959      	ldr	r1, [pc, #356]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088c6:	4b54      	ldr	r3, [pc, #336]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d4:	4950      	ldr	r1, [pc, #320]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00a      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088e8:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	4948      	ldr	r1, [pc, #288]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800890a:	4b43      	ldr	r3, [pc, #268]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800890c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	493f      	ldr	r1, [pc, #252]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d028      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800892c:	4b3a      	ldr	r3, [pc, #232]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893a:	4937      	ldr	r1, [pc, #220]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800893c:	4313      	orrs	r3, r2
 800893e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800894a:	d106      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4a31      	ldr	r2, [pc, #196]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008956:	60d3      	str	r3, [r2, #12]
 8008958:	e011      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008962:	d10c      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3304      	adds	r3, #4
 8008968:	2101      	movs	r1, #1
 800896a:	4618      	mov	r0, r3
 800896c:	f000 ff26 	bl	80097bc <RCCEx_PLLSAI1_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008974:	7cfb      	ldrb	r3, [r7, #19]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800897a:	7cfb      	ldrb	r3, [r7, #19]
 800897c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d028      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800898a:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008990:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	491f      	ldr	r1, [pc, #124]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089a8:	d106      	bne.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089aa:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	4a1a      	ldr	r2, [pc, #104]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089b4:	60d3      	str	r3, [r2, #12]
 80089b6:	e011      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089c0:	d10c      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2101      	movs	r1, #1
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fef7 	bl	80097bc <RCCEx_PLLSAI1_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089d2:	7cfb      	ldrb	r3, [r7, #19]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80089d8:	7cfb      	ldrb	r3, [r7, #19]
 80089da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02b      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f6:	4908      	ldr	r1, [pc, #32]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a06:	d109      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	4a02      	ldr	r2, [pc, #8]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a12:	60d3      	str	r3, [r2, #12]
 8008a14:	e014      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008a16:	bf00      	nop
 8008a18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a24:	d10c      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fec5 	bl	80097bc <RCCEx_PLLSAI1_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a36:	7cfb      	ldrb	r3, [r7, #19]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02f      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a4c:	4b2b      	ldr	r3, [pc, #172]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a5a:	4928      	ldr	r1, [pc, #160]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a6a:	d10d      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	2102      	movs	r1, #2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fea2 	bl	80097bc <RCCEx_PLLSAI1_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a7c:	7cfb      	ldrb	r3, [r7, #19]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d014      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008a82:	7cfb      	ldrb	r3, [r7, #19]
 8008a84:	74bb      	strb	r3, [r7, #18]
 8008a86:	e011      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a90:	d10c      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3320      	adds	r3, #32
 8008a96:	2102      	movs	r1, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 ff83 	bl	80099a4 <RCCEx_PLLSAI2_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008aa2:	7cfb      	ldrb	r3, [r7, #19]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008aa8:	7cfb      	ldrb	r3, [r7, #19]
 8008aaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ab8:	4b10      	ldr	r3, [pc, #64]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac6:	490d      	ldr	r1, [pc, #52]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ada:	4b08      	ldr	r3, [pc, #32]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aea:	4904      	ldr	r1, [pc, #16]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008af2:	7cbb      	ldrb	r3, [r7, #18]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40021000 	.word	0x40021000

08008b00 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a73      	ldr	r2, [pc, #460]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 8008b0c:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8008b0e:	4b73      	ldr	r3, [pc, #460]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0203 	and.w	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008b1a:	4b70      	ldr	r3, [pc, #448]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	091b      	lsrs	r3, r3, #4
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008b2a:	4b6c      	ldr	r3, [pc, #432]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8008b38:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	0c5b      	lsrs	r3, r3, #17
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	1dda      	adds	r2, r3, #7
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8008b4a:	4b64      	ldr	r3, [pc, #400]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	0d5b      	lsrs	r3, r3, #21
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	3301      	adds	r3, #1
 8008b56:	005a      	lsls	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008b5c:	4b5f      	ldr	r3, [pc, #380]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	0e5b      	lsrs	r3, r3, #25
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	3301      	adds	r3, #1
 8008b68:	005a      	lsls	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008b7e:	4b57      	ldr	r3, [pc, #348]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008b8c:	4b53      	ldr	r3, [pc, #332]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	0c5b      	lsrs	r3, r3, #17
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	1dda      	adds	r2, r3, #7
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008b9e:	4b4f      	ldr	r3, [pc, #316]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	0e5b      	lsrs	r3, r3, #25
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	3301      	adds	r3, #1
 8008baa:	005a      	lsls	r2, r3, #1
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb6:	f003 0203 	and.w	r2, r3, #3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008bbe:	4b47      	ldr	r3, [pc, #284]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc4:	f003 020c 	and.w	r2, r3, #12
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008bcc:	4b43      	ldr	r3, [pc, #268]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8008bda:	4b40      	ldr	r3, [pc, #256]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8008be8:	4b3c      	ldr	r3, [pc, #240]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8008bf6:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bfc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8008c04:	4b35      	ldr	r3, [pc, #212]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8008c12:	4b32      	ldr	r3, [pc, #200]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c18:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8008c20:	4b2e      	ldr	r3, [pc, #184]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008c2e:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c34:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008c3c:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c42:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c50:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8008c58:	4b20      	ldr	r3, [pc, #128]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008c66:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008c76:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008c84:	4b15      	ldr	r3, [pc, #84]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c98:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008ca0:	4b0e      	ldr	r3, [pc, #56]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca6:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008cae:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008cbc:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8008cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	000fffff 	.word	0x000fffff
 8008cdc:	40021000 	.word	0x40021000

08008ce0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf2:	d13e      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008cf4:	4bb2      	ldr	r3, [pc, #712]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfe:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d06:	d028      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d0e:	f200 8542 	bhi.w	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d18:	d005      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d20:	d00e      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8008d22:	f000 bd38 	b.w	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d26:	4ba6      	ldr	r3, [pc, #664]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	f040 8532 	bne.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8008d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3a:	61fb      	str	r3, [r7, #28]
      break;
 8008d3c:	f000 bd2d 	b.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008d40:	4b9f      	ldr	r3, [pc, #636]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	f040 8527 	bne.w	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8008d50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d54:	61fb      	str	r3, [r7, #28]
      break;
 8008d56:	f000 bd22 	b.w	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d5a:	4b99      	ldr	r3, [pc, #612]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d66:	f040 851c 	bne.w	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8008d6a:	4b96      	ldr	r3, [pc, #600]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008d6c:	61fb      	str	r3, [r7, #28]
      break;
 8008d6e:	f000 bd18 	b.w	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d72:	4b93      	ldr	r3, [pc, #588]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d036      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d840      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d003      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d020      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008d94:	e039      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008d96:	4b8a      	ldr	r3, [pc, #552]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d116      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008da2:	4b87      	ldr	r3, [pc, #540]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008dae:	4b84      	ldr	r3, [pc, #528]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	e005      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8008dba:	4b81      	ldr	r3, [pc, #516]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dc0:	0a1b      	lsrs	r3, r3, #8
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	4a80      	ldr	r2, [pc, #512]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008dce:	e01f      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61bb      	str	r3, [r7, #24]
      break;
 8008dd4:	e01c      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008dd6:	4b7a      	ldr	r3, [pc, #488]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8008de4:	4b79      	ldr	r3, [pc, #484]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008de6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008de8:	e012      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61bb      	str	r3, [r7, #24]
      break;
 8008dee:	e00f      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008df0:	4b73      	ldr	r3, [pc, #460]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dfc:	d102      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8008dfe:	4b74      	ldr	r3, [pc, #464]	; (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008e00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008e02:	e005      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
      break;
 8008e08:	e002      	b.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61bb      	str	r3, [r7, #24]
      break;
 8008e0e:	bf00      	nop
    }

    switch(PeriphClk)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e16:	f000 80dd 	beq.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e20:	f200 84c1 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2a:	f000 80d3 	beq.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e34:	f200 84b7 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e3e:	f000 835f 	beq.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e48:	f200 84ad 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e52:	f000 847e 	beq.w	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e5c:	f200 84a3 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e66:	f000 82cd 	beq.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e70:	f200 8499 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e7a:	f000 80ab 	beq.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e84:	f200 848f 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8e:	f000 8090 	beq.w	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e98:	f200 8485 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea2:	d07f      	beq.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eaa:	f200 847c 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	f000 8403 	beq.w	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ebe:	f200 8472 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec8:	f000 83af 	beq.w	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed2:	f200 8468 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008edc:	f000 8379 	beq.w	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee6:	f200 845e 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b80      	cmp	r3, #128	; 0x80
 8008eee:	f000 8344 	beq.w	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b80      	cmp	r3, #128	; 0x80
 8008ef6:	f200 8456 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d84b      	bhi.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 844f 	beq.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	2b1f      	cmp	r3, #31
 8008f0e:	f200 844a 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08009101 	.word	0x08009101
 8008f1c:	0800916f 	.word	0x0800916f
 8008f20:	080097a7 	.word	0x080097a7
 8008f24:	08009203 	.word	0x08009203
 8008f28:	080097a7 	.word	0x080097a7
 8008f2c:	080097a7 	.word	0x080097a7
 8008f30:	080097a7 	.word	0x080097a7
 8008f34:	08009289 	.word	0x08009289
 8008f38:	080097a7 	.word	0x080097a7
 8008f3c:	080097a7 	.word	0x080097a7
 8008f40:	080097a7 	.word	0x080097a7
 8008f44:	080097a7 	.word	0x080097a7
 8008f48:	080097a7 	.word	0x080097a7
 8008f4c:	080097a7 	.word	0x080097a7
 8008f50:	080097a7 	.word	0x080097a7
 8008f54:	08009301 	.word	0x08009301
 8008f58:	080097a7 	.word	0x080097a7
 8008f5c:	080097a7 	.word	0x080097a7
 8008f60:	080097a7 	.word	0x080097a7
 8008f64:	080097a7 	.word	0x080097a7
 8008f68:	080097a7 	.word	0x080097a7
 8008f6c:	080097a7 	.word	0x080097a7
 8008f70:	080097a7 	.word	0x080097a7
 8008f74:	080097a7 	.word	0x080097a7
 8008f78:	080097a7 	.word	0x080097a7
 8008f7c:	080097a7 	.word	0x080097a7
 8008f80:	080097a7 	.word	0x080097a7
 8008f84:	080097a7 	.word	0x080097a7
 8008f88:	080097a7 	.word	0x080097a7
 8008f8c:	080097a7 	.word	0x080097a7
 8008f90:	080097a7 	.word	0x080097a7
 8008f94:	08009383 	.word	0x08009383
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	f000 82c1 	beq.w	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008fa0:	f000 bc01 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008fa4:	69b9      	ldr	r1, [r7, #24]
 8008fa6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008faa:	f000 fdd9 	bl	8009b60 <RCCEx_GetSAIxPeriphCLKFreq>
 8008fae:	61f8      	str	r0, [r7, #28]
      break;
 8008fb0:	e3fa      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008fb2:	69b9      	ldr	r1, [r7, #24]
 8008fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008fb8:	f000 fdd2 	bl	8009b60 <RCCEx_GetSAIxPeriphCLKFreq>
 8008fbc:	61f8      	str	r0, [r7, #28]
      break;
 8008fbe:	e3f3      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	0003d090 	.word	0x0003d090
 8008fc8:	0800beb8 	.word	0x0800beb8
 8008fcc:	00f42400 	.word	0x00f42400
 8008fd0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008fd4:	4ba9      	ldr	r3, [pc, #676]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fe6:	d00c      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fee:	d87f      	bhi.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff6:	d04e      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ffe:	d01d      	beq.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8009000:	e076      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009002:	4b9e      	ldr	r3, [pc, #632]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b02      	cmp	r3, #2
 800900c:	d172      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800900e:	4b9b      	ldr	r3, [pc, #620]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800901a:	4b98      	ldr	r3, [pc, #608]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	091b      	lsrs	r3, r3, #4
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	e005      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8009026:	4b95      	ldr	r3, [pc, #596]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	4a93      	ldr	r2, [pc, #588]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009038:	61fb      	str	r3, [r7, #28]
          break;
 800903a:	e05b      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800903c:	4b8f      	ldr	r3, [pc, #572]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009048:	d156      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800904a:	4b8c      	ldr	r3, [pc, #560]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009056:	d14f      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009058:	4b88      	ldr	r3, [pc, #544]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	0a1b      	lsrs	r3, r3, #8
 800905e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009062:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	fb03 f202 	mul.w	r2, r3, r2
 800906c:	4b83      	ldr	r3, [pc, #524]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	091b      	lsrs	r3, r3, #4
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	3301      	adds	r3, #1
 8009078:	fbb2 f3f3 	udiv	r3, r2, r3
 800907c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800907e:	4b7f      	ldr	r3, [pc, #508]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	0d5b      	lsrs	r3, r3, #21
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	3301      	adds	r3, #1
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009092:	61fb      	str	r3, [r7, #28]
          break;
 8009094:	e030      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009096:	4b79      	ldr	r3, [pc, #484]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a2:	d12b      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80090a4:	4b75      	ldr	r3, [pc, #468]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b0:	d124      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80090b2:	4b72      	ldr	r3, [pc, #456]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090bc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	fb03 f202 	mul.w	r2, r3, r2
 80090c6:	4b6d      	ldr	r3, [pc, #436]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	091b      	lsrs	r3, r3, #4
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	3301      	adds	r3, #1
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80090d8:	4b68      	ldr	r3, [pc, #416]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	0d5b      	lsrs	r3, r3, #21
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	3301      	adds	r3, #1
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ec:	61fb      	str	r3, [r7, #28]
          break;
 80090ee:	e005      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80090f0:	bf00      	nop
 80090f2:	e359      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090f4:	bf00      	nop
 80090f6:	e357      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090f8:	bf00      	nop
 80090fa:	e355      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80090fc:	bf00      	nop
        break;
 80090fe:	e353      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009100:	4b5e      	ldr	r3, [pc, #376]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2b03      	cmp	r3, #3
 8009110:	d827      	bhi.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8009112:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009129 	.word	0x08009129
 800911c:	08009131 	.word	0x08009131
 8009120:	08009139 	.word	0x08009139
 8009124:	0800914d 	.word	0x0800914d
          frequency = HAL_RCC_GetPCLK2Freq();
 8009128:	f7ff f98a 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 800912c:	61f8      	str	r0, [r7, #28]
          break;
 800912e:	e01d      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8009130:	f7ff f8d8 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 8009134:	61f8      	str	r0, [r7, #28]
          break;
 8009136:	e019      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009138:	4b50      	ldr	r3, [pc, #320]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009144:	d10f      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8009146:	4b4f      	ldr	r3, [pc, #316]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009148:	61fb      	str	r3, [r7, #28]
          break;
 800914a:	e00c      	b.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800914c:	4b4b      	ldr	r3, [pc, #300]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800914e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d107      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800915a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800915e:	61fb      	str	r3, [r7, #28]
          break;
 8009160:	e003      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8009162:	bf00      	nop
 8009164:	e320      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009166:	bf00      	nop
 8009168:	e31e      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800916a:	bf00      	nop
        break;
 800916c:	e31c      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800916e:	4b43      	ldr	r3, [pc, #268]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009174:	f003 030c 	and.w	r3, r3, #12
 8009178:	613b      	str	r3, [r7, #16]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b0c      	cmp	r3, #12
 800917e:	d83a      	bhi.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	080091bd 	.word	0x080091bd
 800918c:	080091f7 	.word	0x080091f7
 8009190:	080091f7 	.word	0x080091f7
 8009194:	080091f7 	.word	0x080091f7
 8009198:	080091c5 	.word	0x080091c5
 800919c:	080091f7 	.word	0x080091f7
 80091a0:	080091f7 	.word	0x080091f7
 80091a4:	080091f7 	.word	0x080091f7
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091f7 	.word	0x080091f7
 80091b0:	080091f7 	.word	0x080091f7
 80091b4:	080091f7 	.word	0x080091f7
 80091b8:	080091e1 	.word	0x080091e1
          frequency = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7ff f92a 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 80091c0:	61f8      	str	r0, [r7, #28]
          break;
 80091c2:	e01d      	b.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80091c4:	f7ff f88e 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80091c8:	61f8      	str	r0, [r7, #28]
          break;
 80091ca:	e019      	b.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d8:	d10f      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80091da:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80091dc:	61fb      	str	r3, [r7, #28]
          break;
 80091de:	e00c      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091e0:	4b26      	ldr	r3, [pc, #152]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80091e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d107      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80091ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091f2:	61fb      	str	r3, [r7, #28]
          break;
 80091f4:	e003      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80091f6:	bf00      	nop
 80091f8:	e2d6      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091fa:	bf00      	nop
 80091fc:	e2d4      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80091fe:	bf00      	nop
        break;
 8009200:	e2d2      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009202:	4b1e      	ldr	r3, [pc, #120]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009208:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b30      	cmp	r3, #48	; 0x30
 8009212:	d021      	beq.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b30      	cmp	r3, #48	; 0x30
 8009218:	d829      	bhi.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b20      	cmp	r3, #32
 800921e:	d011      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2b20      	cmp	r3, #32
 8009224:	d823      	bhi.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b10      	cmp	r3, #16
 8009230:	d004      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8009232:	e01c      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009234:	f7ff f8ee 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009238:	61f8      	str	r0, [r7, #28]
          break;
 800923a:	e01d      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800923c:	f7ff f852 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 8009240:	61f8      	str	r0, [r7, #28]
          break;
 8009242:	e019      	b.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009244:	4b0d      	ldr	r3, [pc, #52]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800924c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009250:	d10f      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009254:	61fb      	str	r3, [r7, #28]
          break;
 8009256:	e00c      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d107      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8009266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800926a:	61fb      	str	r3, [r7, #28]
          break;
 800926c:	e003      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800926e:	bf00      	nop
 8009270:	e29a      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009272:	bf00      	nop
 8009274:	e298      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009276:	bf00      	nop
        break;
 8009278:	e296      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800927a:	bf00      	nop
 800927c:	40021000 	.word	0x40021000
 8009280:	0800beb8 	.word	0x0800beb8
 8009284:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009288:	4b9b      	ldr	r3, [pc, #620]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800928a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	2bc0      	cmp	r3, #192	; 0xc0
 8009298:	d021      	beq.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2bc0      	cmp	r3, #192	; 0xc0
 800929e:	d829      	bhi.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d011      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d823      	bhi.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b40      	cmp	r3, #64	; 0x40
 80092b6:	d004      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80092b8:	e01c      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80092ba:	f7ff f8ab 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 80092be:	61f8      	str	r0, [r7, #28]
          break;
 80092c0:	e01d      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80092c2:	f7ff f80f 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80092c6:	61f8      	str	r0, [r7, #28]
          break;
 80092c8:	e019      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092ca:	4b8b      	ldr	r3, [pc, #556]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d6:	d10f      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80092d8:	4b88      	ldr	r3, [pc, #544]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80092da:	61fb      	str	r3, [r7, #28]
          break;
 80092dc:	e00c      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092de:	4b86      	ldr	r3, [pc, #536]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d107      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80092ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f0:	61fb      	str	r3, [r7, #28]
          break;
 80092f2:	e003      	b.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80092f4:	bf00      	nop
 80092f6:	e257      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80092f8:	bf00      	nop
 80092fa:	e255      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80092fc:	bf00      	nop
        break;
 80092fe:	e253      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009300:	4b7d      	ldr	r3, [pc, #500]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009312:	d025      	beq.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800931a:	d82c      	bhi.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009322:	d013      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800932a:	d824      	bhi.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009338:	d004      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800933a:	e01c      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 800933c:	f7ff f86a 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009340:	61f8      	str	r0, [r7, #28]
          break;
 8009342:	e01d      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009344:	f7fe ffce 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 8009348:	61f8      	str	r0, [r7, #28]
          break;
 800934a:	e019      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800934c:	4b6a      	ldr	r3, [pc, #424]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009358:	d10f      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800935a:	4b68      	ldr	r3, [pc, #416]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800935c:	61fb      	str	r3, [r7, #28]
          break;
 800935e:	e00c      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009360:	4b65      	ldr	r3, [pc, #404]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b02      	cmp	r3, #2
 800936c:	d107      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800936e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009372:	61fb      	str	r3, [r7, #28]
          break;
 8009374:	e003      	b.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8009376:	bf00      	nop
 8009378:	e216      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800937a:	bf00      	nop
 800937c:	e214      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800937e:	bf00      	nop
        break;
 8009380:	e212      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009382:	4b5d      	ldr	r3, [pc, #372]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800938c:	613b      	str	r3, [r7, #16]
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009394:	d025      	beq.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800939c:	d82c      	bhi.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093a4:	d013      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ac:	d824      	bhi.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ba:	d004      	beq.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80093bc:	e01c      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80093be:	f7ff f829 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 80093c2:	61f8      	str	r0, [r7, #28]
          break;
 80093c4:	e01d      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80093c6:	f7fe ff8d 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80093ca:	61f8      	str	r0, [r7, #28]
          break;
 80093cc:	e019      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093ce:	4b4a      	ldr	r3, [pc, #296]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093da:	d10f      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80093dc:	4b47      	ldr	r3, [pc, #284]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80093de:	61fb      	str	r3, [r7, #28]
          break;
 80093e0:	e00c      	b.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093e2:	4b45      	ldr	r3, [pc, #276]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d107      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80093f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f4:	61fb      	str	r3, [r7, #28]
          break;
 80093f6:	e003      	b.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80093f8:	bf00      	nop
 80093fa:	e1d5      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80093fc:	bf00      	nop
 80093fe:	e1d3      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009400:	bf00      	nop
        break;
 8009402:	e1d1      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009404:	4b3c      	ldr	r3, [pc, #240]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800940e:	613b      	str	r3, [r7, #16]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009416:	d00c      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800941e:	d864      	bhi.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009426:	d008      	beq.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800942e:	d030      	beq.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8009430:	e05b      	b.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8009432:	f7fe ff57 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 8009436:	61f8      	str	r0, [r7, #28]
          break;
 8009438:	e05c      	b.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800943a:	4b2f      	ldr	r3, [pc, #188]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009446:	d152      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8009448:	4b2b      	ldr	r3, [pc, #172]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d04c      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009454:	4b28      	ldr	r3, [pc, #160]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	fb03 f202 	mul.w	r2, r3, r2
 8009468:	4b23      	ldr	r3, [pc, #140]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	091b      	lsrs	r3, r3, #4
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	3301      	adds	r3, #1
 8009474:	fbb2 f3f3 	udiv	r3, r2, r3
 8009478:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800947a:	4b1f      	ldr	r3, [pc, #124]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	0e5b      	lsrs	r3, r3, #25
 8009480:	f003 0303 	and.w	r3, r3, #3
 8009484:	3301      	adds	r3, #1
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	fbb2 f3f3 	udiv	r3, r2, r3
 800948e:	61fb      	str	r3, [r7, #28]
          break;
 8009490:	e02d      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8009492:	4b19      	ldr	r3, [pc, #100]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800949a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800949e:	d128      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80094a0:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d022      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80094ac:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	0a1b      	lsrs	r3, r3, #8
 80094b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	fb03 f202 	mul.w	r2, r3, r2
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	091b      	lsrs	r3, r3, #4
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	3301      	adds	r3, #1
 80094cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	0e5b      	lsrs	r3, r3, #25
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	3301      	adds	r3, #1
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e6:	61fb      	str	r3, [r7, #28]
          break;
 80094e8:	e003      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80094ea:	bf00      	nop
 80094ec:	e15c      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094ee:	bf00      	nop
 80094f0:	e15a      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094f2:	bf00      	nop
        break;
 80094f4:	e158      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80094f6:	bf00      	nop
 80094f8:	40021000 	.word	0x40021000
 80094fc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009500:	4b9d      	ldr	r3, [pc, #628]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800950a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d103      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009512:	f7fe ff95 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 8009516:	61f8      	str	r0, [r7, #28]
        break;
 8009518:	e146      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800951a:	f7fe fee3 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800951e:	61f8      	str	r0, [r7, #28]
        break;
 8009520:	e142      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009522:	4b95      	ldr	r3, [pc, #596]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009528:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009534:	d013      	beq.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800953c:	d819      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954a:	d004      	beq.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800954c:	e011      	b.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800954e:	f7fe ff61 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009552:	61f8      	str	r0, [r7, #28]
          break;
 8009554:	e010      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8009556:	f7fe fec5 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800955a:	61f8      	str	r0, [r7, #28]
          break;
 800955c:	e00c      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800955e:	4b86      	ldr	r3, [pc, #536]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956a:	d104      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800956c:	4b83      	ldr	r3, [pc, #524]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800956e:	61fb      	str	r3, [r7, #28]
          break;
 8009570:	e001      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8009572:	bf00      	nop
 8009574:	e118      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009576:	bf00      	nop
        break;
 8009578:	e116      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800957a:	4b7f      	ldr	r3, [pc, #508]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800958c:	d013      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009594:	d819      	bhi.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095a2:	d004      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80095a4:	e011      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80095a6:	f7fe ff35 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 80095aa:	61f8      	str	r0, [r7, #28]
          break;
 80095ac:	e010      	b.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80095ae:	f7fe fe99 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80095b2:	61f8      	str	r0, [r7, #28]
          break;
 80095b4:	e00c      	b.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095b6:	4b70      	ldr	r3, [pc, #448]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095c2:	d104      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80095c4:	4b6d      	ldr	r3, [pc, #436]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80095c6:	61fb      	str	r3, [r7, #28]
          break;
 80095c8:	e001      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80095ca:	bf00      	nop
 80095cc:	e0ec      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80095ce:	bf00      	nop
        break;
 80095d0:	e0ea      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80095d2:	4b69      	ldr	r3, [pc, #420]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80095d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e4:	d013      	beq.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ec:	d819      	bhi.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fa:	d004      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80095fc:	e011      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80095fe:	f7fe ff09 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009602:	61f8      	str	r0, [r7, #28]
          break;
 8009604:	e010      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8009606:	f7fe fe6d 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800960a:	61f8      	str	r0, [r7, #28]
          break;
 800960c:	e00c      	b.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800960e:	4b5a      	ldr	r3, [pc, #360]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961a:	d104      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800961c:	4b57      	ldr	r3, [pc, #348]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800961e:	61fb      	str	r3, [r7, #28]
          break;
 8009620:	e001      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8009622:	bf00      	nop
 8009624:	e0c0      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009626:	bf00      	nop
        break;
 8009628:	e0be      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800962a:	4b53      	ldr	r3, [pc, #332]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800962c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009630:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800963c:	d02c      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009644:	d833      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800964c:	d01a      	beq.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009654:	d82b      	bhi.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009662:	d004      	beq.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8009664:	e023      	b.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009666:	f7fe fed5 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800966a:	61f8      	str	r0, [r7, #28]
          break;
 800966c:	e026      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800966e:	4b42      	ldr	r3, [pc, #264]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d11a      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800967c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009680:	61fb      	str	r3, [r7, #28]
          break;
 8009682:	e016      	b.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009684:	4b3c      	ldr	r3, [pc, #240]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800968c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009690:	d111      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8009692:	4b3a      	ldr	r3, [pc, #232]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009694:	61fb      	str	r3, [r7, #28]
          break;
 8009696:	e00e      	b.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009698:	4b37      	ldr	r3, [pc, #220]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d109      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80096a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096aa:	61fb      	str	r3, [r7, #28]
          break;
 80096ac:	e005      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80096ae:	bf00      	nop
 80096b0:	e07a      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096b2:	bf00      	nop
 80096b4:	e078      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096b6:	bf00      	nop
 80096b8:	e076      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096ba:	bf00      	nop
        break;
 80096bc:	e074      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80096be:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d0:	d02c      	beq.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d8:	d833      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e0:	d01a      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e8:	d82b      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f6:	d004      	beq.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80096f8:	e023      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80096fa:	f7fe fe8b 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 80096fe:	61f8      	str	r0, [r7, #28]
          break;
 8009700:	e026      	b.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b02      	cmp	r3, #2
 800970e:	d11a      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8009710:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009714:	61fb      	str	r3, [r7, #28]
          break;
 8009716:	e016      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009724:	d111      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8009726:	4b15      	ldr	r3, [pc, #84]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009728:	61fb      	str	r3, [r7, #28]
          break;
 800972a:	e00e      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b02      	cmp	r3, #2
 8009738:	d109      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800973a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973e:	61fb      	str	r3, [r7, #28]
          break;
 8009740:	e005      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8009742:	bf00      	nop
 8009744:	e030      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009746:	bf00      	nop
 8009748:	e02e      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800974a:	bf00      	nop
 800974c:	e02c      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800974e:	bf00      	nop
        break;
 8009750:	e02a      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800976a:	d009      	beq.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800976c:	e012      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800976e:	f7fe fe51 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009772:	61f8      	str	r0, [r7, #28]
          break;
 8009774:	e00e      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8009776:	bf00      	nop
 8009778:	40021000 	.word	0x40021000
 800977c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009780:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800978c:	d101      	bne.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800978e:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8009790:	61fb      	str	r3, [r7, #28]
          break;
 8009792:	bf00      	nop
        break;
 8009794:	e008      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009796:	bf00      	nop
 8009798:	e006      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800979a:	bf00      	nop
 800979c:	e004      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80097a6:	bf00      	nop
    }
  }

  return(frequency);
 80097a8:	69fb      	ldr	r3, [r7, #28]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40021000 	.word	0x40021000
 80097b8:	00f42400 	.word	0x00f42400

080097bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097ca:	4b75      	ldr	r3, [pc, #468]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d018      	beq.n	8009808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097d6:	4b72      	ldr	r3, [pc, #456]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f003 0203 	and.w	r2, r3, #3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d10d      	bne.n	8009802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
       ||
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80097ee:	4b6c      	ldr	r3, [pc, #432]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	091b      	lsrs	r3, r3, #4
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
       ||
 80097fe:	429a      	cmp	r2, r3
 8009800:	d047      	beq.n	8009892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	73fb      	strb	r3, [r7, #15]
 8009806:	e044      	b.n	8009892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b03      	cmp	r3, #3
 800980e:	d018      	beq.n	8009842 <RCCEx_PLLSAI1_Config+0x86>
 8009810:	2b03      	cmp	r3, #3
 8009812:	d825      	bhi.n	8009860 <RCCEx_PLLSAI1_Config+0xa4>
 8009814:	2b01      	cmp	r3, #1
 8009816:	d002      	beq.n	800981e <RCCEx_PLLSAI1_Config+0x62>
 8009818:	2b02      	cmp	r3, #2
 800981a:	d009      	beq.n	8009830 <RCCEx_PLLSAI1_Config+0x74>
 800981c:	e020      	b.n	8009860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800981e:	4b60      	ldr	r3, [pc, #384]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d11d      	bne.n	8009866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800982e:	e01a      	b.n	8009866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009830:	4b5b      	ldr	r3, [pc, #364]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009838:	2b00      	cmp	r3, #0
 800983a:	d116      	bne.n	800986a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009840:	e013      	b.n	800986a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009842:	4b57      	ldr	r3, [pc, #348]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10f      	bne.n	800986e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800984e:	4b54      	ldr	r3, [pc, #336]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d109      	bne.n	800986e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800985e:	e006      	b.n	800986e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]
      break;
 8009864:	e004      	b.n	8009870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800986e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10d      	bne.n	8009892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009876:	4b4a      	ldr	r3, [pc, #296]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	3b01      	subs	r3, #1
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	430b      	orrs	r3, r1
 800988c:	4944      	ldr	r1, [pc, #272]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800988e:	4313      	orrs	r3, r2
 8009890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d17d      	bne.n	8009994 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009898:	4b41      	ldr	r3, [pc, #260]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a40      	ldr	r2, [pc, #256]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800989e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a4:	f7f9 fea6 	bl	80035f4 <HAL_GetTick>
 80098a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80098aa:	e009      	b.n	80098c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098ac:	f7f9 fea2 	bl	80035f4 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d902      	bls.n	80098c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	73fb      	strb	r3, [r7, #15]
        break;
 80098be:	e005      	b.n	80098cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80098c0:	4b37      	ldr	r3, [pc, #220]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1ef      	bne.n	80098ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d160      	bne.n	8009994 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d111      	bne.n	80098fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098d8:	4b31      	ldr	r3, [pc, #196]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80098e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6892      	ldr	r2, [r2, #8]
 80098e8:	0211      	lsls	r1, r2, #8
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68d2      	ldr	r2, [r2, #12]
 80098ee:	0912      	lsrs	r2, r2, #4
 80098f0:	0452      	lsls	r2, r2, #17
 80098f2:	430a      	orrs	r2, r1
 80098f4:	492a      	ldr	r1, [pc, #168]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	610b      	str	r3, [r1, #16]
 80098fa:	e027      	b.n	800994c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d112      	bne.n	8009928 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009902:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800990a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6892      	ldr	r2, [r2, #8]
 8009912:	0211      	lsls	r1, r2, #8
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6912      	ldr	r2, [r2, #16]
 8009918:	0852      	lsrs	r2, r2, #1
 800991a:	3a01      	subs	r2, #1
 800991c:	0552      	lsls	r2, r2, #21
 800991e:	430a      	orrs	r2, r1
 8009920:	491f      	ldr	r1, [pc, #124]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009922:	4313      	orrs	r3, r2
 8009924:	610b      	str	r3, [r1, #16]
 8009926:	e011      	b.n	800994c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009928:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6892      	ldr	r2, [r2, #8]
 8009938:	0211      	lsls	r1, r2, #8
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	6952      	ldr	r2, [r2, #20]
 800993e:	0852      	lsrs	r2, r2, #1
 8009940:	3a01      	subs	r2, #1
 8009942:	0652      	lsls	r2, r2, #25
 8009944:	430a      	orrs	r2, r1
 8009946:	4916      	ldr	r1, [pc, #88]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009948:	4313      	orrs	r3, r2
 800994a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800994c:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009958:	f7f9 fe4c 	bl	80035f4 <HAL_GetTick>
 800995c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800995e:	e009      	b.n	8009974 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009960:	f7f9 fe48 	bl	80035f4 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d902      	bls.n	8009974 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	73fb      	strb	r3, [r7, #15]
          break;
 8009972:	e005      	b.n	8009980 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0ef      	beq.n	8009960 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009986:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	4904      	ldr	r1, [pc, #16]	; (80099a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009990:	4313      	orrs	r3, r2
 8009992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40021000 	.word	0x40021000

080099a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80099b2:	4b6a      	ldr	r3, [pc, #424]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d018      	beq.n	80099f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80099be:	4b67      	ldr	r3, [pc, #412]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f003 0203 	and.w	r2, r3, #3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d10d      	bne.n	80099ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
       ||
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d009      	beq.n	80099ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80099d6:	4b61      	ldr	r3, [pc, #388]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
       ||
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d047      	beq.n	8009a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	73fb      	strb	r3, [r7, #15]
 80099ee:	e044      	b.n	8009a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d018      	beq.n	8009a2a <RCCEx_PLLSAI2_Config+0x86>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d825      	bhi.n	8009a48 <RCCEx_PLLSAI2_Config+0xa4>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d002      	beq.n	8009a06 <RCCEx_PLLSAI2_Config+0x62>
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d009      	beq.n	8009a18 <RCCEx_PLLSAI2_Config+0x74>
 8009a04:	e020      	b.n	8009a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a06:	4b55      	ldr	r3, [pc, #340]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d11d      	bne.n	8009a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a16:	e01a      	b.n	8009a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a18:	4b50      	ldr	r3, [pc, #320]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d116      	bne.n	8009a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a28:	e013      	b.n	8009a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a2a:	4b4c      	ldr	r3, [pc, #304]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10f      	bne.n	8009a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a36:	4b49      	ldr	r3, [pc, #292]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a46:	e006      	b.n	8009a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a4c:	e004      	b.n	8009a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a4e:	bf00      	nop
 8009a50:	e002      	b.n	8009a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a52:	bf00      	nop
 8009a54:	e000      	b.n	8009a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10d      	bne.n	8009a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009a5e:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6819      	ldr	r1, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	430b      	orrs	r3, r1
 8009a74:	4939      	ldr	r1, [pc, #228]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d167      	bne.n	8009b50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a80:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a35      	ldr	r2, [pc, #212]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a8c:	f7f9 fdb2 	bl	80035f4 <HAL_GetTick>
 8009a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a92:	e009      	b.n	8009aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a94:	f7f9 fdae 	bl	80035f4 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d902      	bls.n	8009aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8009aa6:	e005      	b.n	8009ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009aa8:	4b2c      	ldr	r3, [pc, #176]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1ef      	bne.n	8009a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d14a      	bne.n	8009b50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d111      	bne.n	8009ae4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ac0:	4b26      	ldr	r3, [pc, #152]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6892      	ldr	r2, [r2, #8]
 8009ad0:	0211      	lsls	r1, r2, #8
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	68d2      	ldr	r2, [r2, #12]
 8009ad6:	0912      	lsrs	r2, r2, #4
 8009ad8:	0452      	lsls	r2, r2, #17
 8009ada:	430a      	orrs	r2, r1
 8009adc:	491f      	ldr	r1, [pc, #124]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	614b      	str	r3, [r1, #20]
 8009ae2:	e011      	b.n	8009b08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6892      	ldr	r2, [r2, #8]
 8009af4:	0211      	lsls	r1, r2, #8
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6912      	ldr	r2, [r2, #16]
 8009afa:	0852      	lsrs	r2, r2, #1
 8009afc:	3a01      	subs	r2, #1
 8009afe:	0652      	lsls	r2, r2, #25
 8009b00:	430a      	orrs	r2, r1
 8009b02:	4916      	ldr	r1, [pc, #88]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b08:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b14:	f7f9 fd6e 	bl	80035f4 <HAL_GetTick>
 8009b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b1a:	e009      	b.n	8009b30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b1c:	f7f9 fd6a 	bl	80035f4 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d902      	bls.n	8009b30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8009b2e:	e005      	b.n	8009b3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0ef      	beq.n	8009b1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009b42:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b44:	695a      	ldr	r2, [r3, #20]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	4904      	ldr	r1, [pc, #16]	; (8009b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40021000 	.word	0x40021000

08009b60 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b089      	sub	sp, #36	; 0x24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b7c:	d10c      	bne.n	8009b98 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009b7e:	4b6e      	ldr	r3, [pc, #440]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009b88:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009b90:	d112      	bne.n	8009bb8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b92:	4b6a      	ldr	r3, [pc, #424]	; (8009d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009b94:	61fb      	str	r3, [r7, #28]
 8009b96:	e00f      	b.n	8009bb8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9e:	d10b      	bne.n	8009bb8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009ba0:	4b65      	ldr	r3, [pc, #404]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009baa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bb2:	d101      	bne.n	8009bb8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009bb4:	4b61      	ldr	r3, [pc, #388]	; (8009d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009bb6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 80b4 	bne.w	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bca:	d003      	beq.n	8009bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bd2:	d135      	bne.n	8009c40 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009bd4:	4b58      	ldr	r3, [pc, #352]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be0:	f040 80a1 	bne.w	8009d26 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8009be4:	4b54      	ldr	r3, [pc, #336]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 809a 	beq.w	8009d26 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009bf2:	4b51      	ldr	r3, [pc, #324]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	091b      	lsrs	r3, r3, #4
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c04:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009c06:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c10:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009c18:	4b47      	ldr	r3, [pc, #284]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009c24:	2311      	movs	r3, #17
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e001      	b.n	8009c2e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8009c2a:	2307      	movs	r3, #7
 8009c2c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	fb03 f202 	mul.w	r2, r3, r2
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009c3e:	e072      	b.n	8009d26 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d133      	bne.n	8009cae <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009c46:	4b3c      	ldr	r3, [pc, #240]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c52:	d169      	bne.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009c54:	4b38      	ldr	r3, [pc, #224]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d063      	beq.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c60:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	091b      	lsrs	r3, r3, #4
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c72:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009c74:	4b30      	ldr	r3, [pc, #192]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009c86:	4b2c      	ldr	r3, [pc, #176]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8009c92:	2311      	movs	r3, #17
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	e001      	b.n	8009c9c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009c98:	2307      	movs	r3, #7
 8009c9a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	fb03 f202 	mul.w	r2, r3, r2
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009caa:	61fb      	str	r3, [r7, #28]
 8009cac:	e03c      	b.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb4:	d003      	beq.n	8009cbe <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cbc:	d134      	bne.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009cbe:	4b1e      	ldr	r3, [pc, #120]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cca:	d12d      	bne.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009ccc:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d027      	beq.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	091b      	lsrs	r3, r3, #4
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009cec:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009cfe:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8009d0a:	2311      	movs	r3, #17
 8009d0c:	617b      	str	r3, [r7, #20]
 8009d0e:	e001      	b.n	8009d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8009d10:	2307      	movs	r3, #7
 8009d12:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	fb03 f202 	mul.w	r2, r3, r2
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	61fb      	str	r3, [r7, #28]
 8009d24:	e000      	b.n	8009d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009d26:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8009d28:	69fb      	ldr	r3, [r7, #28]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3724      	adds	r7, #36	; 0x24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40021000 	.word	0x40021000
 8009d3c:	001fff68 	.word	0x001fff68

08009d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d06c      	beq.n	8009e2c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d106      	bne.n	8009d6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7f7 fa16 	bl	8001198 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	22ca      	movs	r2, #202	; 0xca
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2253      	movs	r2, #83	; 0x53
 8009d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f87c 	bl	8009e82 <RTC_EnterInitMode>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d14b      	bne.n	8009e2c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6899      	ldr	r1, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	68d2      	ldr	r2, [r2, #12]
 8009dce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6919      	ldr	r1, [r3, #16]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	041a      	lsls	r2, r3, #16
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f87f 	bl	8009ee8 <RTC_ExitInitMode>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11b      	bne.n	8009e2c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0203 	bic.w	r2, r2, #3
 8009e02:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e4c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009e4e:	f7f9 fbd1 	bl	80035f4 <HAL_GetTick>
 8009e52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e54:	e009      	b.n	8009e6a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e56:	f7f9 fbcd 	bl	80035f4 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e64:	d901      	bls.n	8009e6a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e007      	b.n	8009e7a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f003 0320 	and.w	r3, r3, #32
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0ee      	beq.n	8009e56 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d120      	bne.n	8009ede <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ea6:	f7f9 fba5 	bl	80035f4 <HAL_GetTick>
 8009eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009eac:	e00d      	b.n	8009eca <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009eae:	f7f9 fba1 	bl	80035f4 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebc:	d905      	bls.n	8009eca <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <RTC_EnterInitMode+0x5c>
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d1e7      	bne.n	8009eae <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009ef4:	4b1a      	ldr	r3, [pc, #104]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	4a19      	ldr	r2, [pc, #100]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009efe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f00:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10c      	bne.n	8009f26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff92 	bl	8009e36 <HAL_RTC_WaitForSynchro>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01e      	beq.n	8009f56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2203      	movs	r2, #3
 8009f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	e017      	b.n	8009f56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f26:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009f2c:	f023 0320 	bic.w	r3, r3, #32
 8009f30:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff ff7f 	bl	8009e36 <HAL_RTC_WaitForSynchro>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2203      	movs	r2, #3
 8009f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <RTC_ExitInitMode+0x78>)
 8009f50:	f043 0320 	orr.w	r3, r3, #32
 8009f54:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40002800 	.word	0x40002800

08009f64 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d904      	bls.n	8009f82 <HAL_SAI_InitProtocol+0x1e>
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	3b03      	subs	r3, #3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d812      	bhi.n	8009fa6 <HAL_SAI_InitProtocol+0x42>
 8009f80:	e008      	b.n	8009f94 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fc9d 	bl	800a8c8 <SAI_InitI2S>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]
      break;
 8009f92:	e00b      	b.n	8009fac <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fd46 	bl	800aa2c <SAI_InitPCM>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa4:	e002      	b.n	8009fac <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8009faa:	bf00      	nop
  }

  if (status == HAL_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f808 	bl	8009fc8 <HAL_SAI_Init>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e155      	b.n	800a286 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7f7 f96a 	bl	80012c8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fdd3 	bl	800aba0 <SAI_Disable>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e140      	b.n	800a286 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d00c      	beq.n	800a02e <HAL_SAI_Init+0x66>
 800a014:	2b02      	cmp	r3, #2
 800a016:	d80d      	bhi.n	800a034 <HAL_SAI_Init+0x6c>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <HAL_SAI_Init+0x5a>
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d003      	beq.n	800a028 <HAL_SAI_Init+0x60>
 800a020:	e008      	b.n	800a034 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	61fb      	str	r3, [r7, #28]
      break;
 800a026:	e008      	b.n	800a03a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a028:	2310      	movs	r3, #16
 800a02a:	61fb      	str	r3, [r7, #28]
      break;
 800a02c:	e005      	b.n	800a03a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a02e:	2320      	movs	r3, #32
 800a030:	61fb      	str	r3, [r7, #28]
      break;
 800a032:	e002      	b.n	800a03a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
      break;
 800a038:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d81d      	bhi.n	800a07e <HAL_SAI_Init+0xb6>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <HAL_SAI_Init+0x80>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a05f 	.word	0x0800a05f
 800a050:	0800a067 	.word	0x0800a067
 800a054:	0800a06f 	.word	0x0800a06f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
      break;
 800a05c:	e012      	b.n	800a084 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a062:	617b      	str	r3, [r7, #20]
      break;
 800a064:	e00e      	b.n	800a084 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a06a:	617b      	str	r3, [r7, #20]
      break;
 800a06c:	e00a      	b.n	800a084 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a06e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a072:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	61fb      	str	r3, [r7, #28]
      break;
 800a07c:	e002      	b.n	800a084 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
      break;
 800a082:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a81      	ldr	r2, [pc, #516]	; (800a290 <HAL_SAI_Init+0x2c8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d004      	beq.n	800a098 <HAL_SAI_Init+0xd0>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a80      	ldr	r2, [pc, #512]	; (800a294 <HAL_SAI_Init+0x2cc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d103      	bne.n	800a0a0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800a098:	4a7f      	ldr	r2, [pc, #508]	; (800a298 <HAL_SAI_Init+0x2d0>)
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	e002      	b.n	800a0a6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a0a0:	4a7e      	ldr	r2, [pc, #504]	; (800a29c <HAL_SAI_Init+0x2d4>)
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d041      	beq.n	800a132 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a77      	ldr	r2, [pc, #476]	; (800a290 <HAL_SAI_Init+0x2c8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d004      	beq.n	800a0c2 <HAL_SAI_Init+0xfa>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a75      	ldr	r2, [pc, #468]	; (800a294 <HAL_SAI_Init+0x2cc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d105      	bne.n	800a0ce <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a0c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a0c6:	f7fe fe0b 	bl	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0ca:	6138      	str	r0, [r7, #16]
 800a0cc:	e004      	b.n	800a0d8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a0ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a0d2:	f7fe fe05 	bl	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0d6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	025b      	lsls	r3, r3, #9
 800a0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ee:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4a6b      	ldr	r2, [pc, #428]	; (800a2a0 <HAL_SAI_Init+0x2d8>)
 800a0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f8:	08da      	lsrs	r2, r3, #3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	4b67      	ldr	r3, [pc, #412]	; (800a2a0 <HAL_SAI_Init+0x2d8>)
 800a102:	fba3 2301 	umull	r2, r3, r3, r1
 800a106:	08da      	lsrs	r2, r3, #3
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	1aca      	subs	r2, r1, r3
 800a112:	2a08      	cmp	r2, #8
 800a114:	d904      	bls.n	800a120 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	2b04      	cmp	r3, #4
 800a126:	d104      	bne.n	800a132 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	085a      	lsrs	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_SAI_Init+0x17a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d109      	bne.n	800a156 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d101      	bne.n	800a14e <HAL_SAI_Init+0x186>
 800a14a:	2300      	movs	r3, #0
 800a14c:	e001      	b.n	800a152 <HAL_SAI_Init+0x18a>
 800a14e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a152:	61bb      	str	r3, [r7, #24]
 800a154:	e008      	b.n	800a168 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d102      	bne.n	800a164 <HAL_SAI_Init+0x19c>
 800a15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a162:	e000      	b.n	800a166 <HAL_SAI_Init+0x19e>
 800a164:	2300      	movs	r3, #0
 800a166:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b4c      	ldr	r3, [pc, #304]	; (800a2a4 <HAL_SAI_Init+0x2dc>)
 800a174:	400b      	ands	r3, r1
 800a176:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a186:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a18c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	431a      	orrs	r2, r3
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800a1a0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1ac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	051b      	lsls	r3, r3, #20
 800a1b4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a1cc:	f023 030f 	bic.w	r3, r3, #15
 800a1d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6859      	ldr	r1, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699a      	ldr	r2, [r3, #24]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6899      	ldr	r1, [r3, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <HAL_SAI_Init+0x2e0>)
 800a1fc:	400b      	ands	r3, r1
 800a1fe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6899      	ldr	r1, [r3, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a210:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a216:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a21c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a222:	3b01      	subs	r3, #1
 800a224:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a226:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68d9      	ldr	r1, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a23e:	400b      	ands	r3, r1
 800a240:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68d9      	ldr	r1, [r3, #12]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a250:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a256:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a258:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a25e:	3b01      	subs	r3, #1
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	40015404 	.word	0x40015404
 800a294:	40015424 	.word	0x40015424
 800a298:	40015400 	.word	0x40015400
 800a29c:	40015800 	.word	0x40015800
 800a2a0:	cccccccd 	.word	0xcccccccd
 800a2a4:	ff05c010 	.word	0xff05c010
 800a2a8:	fff88000 	.word	0xfff88000

0800a2ac <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_SAI_DMAStop+0x1a>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e042      	b.n	800a34c <HAL_SAI_DMAStop+0xa0>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a2dc:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b12      	cmp	r3, #18
 800a2e8:	d108      	bne.n	800a2fc <HAL_SAI_DMAStop+0x50>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fb f9ae 	bl	8005658 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b22      	cmp	r3, #34	; 0x22
 800a306:	d108      	bne.n	800a31a <HAL_SAI_DMAStop+0x6e>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a314:	4618      	mov	r0, r3
 800a316:	f7fb f99f 	bl	8005658 <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fc40 	bl	800aba0 <SAI_Disable>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0208 	orr.w	r2, r2, #8
 800a338:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_SAI_Abort+0x1a>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e053      	b.n	800a416 <HAL_SAI_Abort+0xc2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a384:	d125      	bne.n	800a3d2 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a394:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b12      	cmp	r3, #18
 800a3a0:	d108      	bne.n	800a3b4 <HAL_SAI_Abort+0x60>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fb f952 	bl	8005658 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b22      	cmp	r3, #34	; 0x22
 800a3be:	d108      	bne.n	800a3d2 <HAL_SAI_Abort+0x7e>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d004      	beq.n	800a3d2 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fb f943 	bl	8005658 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fbdb 	bl	800aba0 <SAI_Disable>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0208 	orr.w	r2, r2, #8
 800a402:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a42e:	f7f9 f8e1 	bl	80035f4 <HAL_GetTick>
 800a432:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <HAL_SAI_Transmit_DMA+0x20>
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e093      	b.n	800a56c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	f040 808c 	bne.w	800a56a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <HAL_SAI_Transmit_DMA+0x40>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e085      	b.n	800a56c <HAL_SAI_Transmit_DMA+0x14c>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	88fa      	ldrh	r2, [r7, #6]
 800a472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2212      	movs	r2, #18
 800a48a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a492:	4a38      	ldr	r2, [pc, #224]	; (800a574 <HAL_SAI_Transmit_DMA+0x154>)
 800a494:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49a:	4a37      	ldr	r2, [pc, #220]	; (800a578 <HAL_SAI_Transmit_DMA+0x158>)
 800a49c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a2:	4a36      	ldr	r2, [pc, #216]	; (800a57c <HAL_SAI_Transmit_DMA+0x15c>)
 800a4a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	331c      	adds	r3, #28
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a4c6:	f7fb f867 	bl	8005598 <HAL_DMA_Start_IT>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d005      	beq.n	800a4dc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e047      	b.n	800a56c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a4dc:	2100      	movs	r1, #0
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fb26 	bl	800ab30 <SAI_InterruptFlag>
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a502:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a504:	e015      	b.n	800a532 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a506:	f7f9 f875 	bl	80035f4 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a514:	d90d      	bls.n	800a532 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a51c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e01c      	b.n	800a56c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0e2      	beq.n	800a506 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d107      	bne.n	800a55e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a55c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	e000      	b.n	800a56c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800a56a:	2302      	movs	r3, #2
  }
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	0800ac73 	.word	0x0800ac73
 800a578:	0800ac15 	.word	0x0800ac15
 800a57c:	0800ac8f 	.word	0x0800ac8f

0800a580 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8192 	beq.w	800a8ba <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <HAL_SAI_IRQHandler+0x4c>
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f003 0308 	and.w	r3, r3, #8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
 800a5ca:	e176      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01e      	beq.n	800a614 <HAL_SAI_IRQHandler+0x94>
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d019      	beq.n	800a614 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b22      	cmp	r3, #34	; 0x22
 800a5f2:	d101      	bne.n	800a5f8 <HAL_SAI_IRQHandler+0x78>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <HAL_SAI_IRQHandler+0x7a>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	431a      	orrs	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7f7 fdab 	bl	8002168 <HAL_SAI_ErrorCallback>
 800a612:	e152      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d011      	beq.n	800a642 <HAL_SAI_IRQHandler+0xc2>
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00c      	beq.n	800a642 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2202      	movs	r2, #2
 800a62e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8140 	beq.w	800a8ba <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63e:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a640:	e13b      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f003 0320 	and.w	r3, r3, #32
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d055      	beq.n	800a6f8 <HAL_SAI_IRQHandler+0x178>
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d050      	beq.n	800a6f8 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2220      	movs	r2, #32
 800a65c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a664:	f043 0204 	orr.w	r2, r3, #4
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d038      	beq.n	800a6ea <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d016      	beq.n	800a6ae <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a684:	4a8f      	ldr	r2, [pc, #572]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a686:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fb f821 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a69e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7f7 fd5d 	bl	8002168 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 80fc 	beq.w	800a8b0 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6bc:	4a81      	ldr	r2, [pc, #516]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a6be:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fb f805 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 80ef 	beq.w	800a8b0 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7f7 fd40 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6e8:	e0e2      	b.n	800a8b0 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff fe32 	bl	800a354 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7f7 fd39 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6f6:	e0db      	b.n	800a8b0 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d055      	beq.n	800a7ae <HAL_SAI_IRQHandler+0x22e>
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d050      	beq.n	800a7ae <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2240      	movs	r2, #64	; 0x40
 800a712:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a71a:	f043 0208 	orr.w	r2, r3, #8
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d038      	beq.n	800a7a0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d016      	beq.n	800a764 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73a:	4a62      	ldr	r2, [pc, #392]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a742:	4618      	mov	r0, r3
 800a744:	f7fa ffc6 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7f7 fd02 	bl	8002168 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 80a3 	beq.w	800a8b4 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a772:	4a54      	ldr	r2, [pc, #336]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a774:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fa ffaa 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 8096 	beq.w	800a8b4 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7f7 fce5 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a79e:	e089      	b.n	800a8b4 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff fdd7 	bl	800a354 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7f7 fcde 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7ac:	e082      	b.n	800a8b4 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d061      	beq.n	800a87c <HAL_SAI_IRQHandler+0x2fc>
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d05c      	beq.n	800a87c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2204      	movs	r2, #4
 800a7c8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7d0:	f043 0220 	orr.w	r2, r3, #32
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d036      	beq.n	800a852 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d016      	beq.n	800a81a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f0:	4a34      	ldr	r2, [pc, #208]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fa ff6b 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7f7 fca7 	bl	8002168 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04a      	beq.n	800a8b8 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a826:	4a27      	ldr	r2, [pc, #156]	; (800a8c4 <HAL_SAI_IRQHandler+0x344>)
 800a828:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fa ff50 	bl	80056d4 <HAL_DMA_Abort_IT>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d03e      	beq.n	800a8b8 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7f7 fc8c 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a850:	e032      	b.n	800a8b8 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7f7 fc77 	bl	8002168 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a87a:	e01d      	b.n	800a8b8 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f003 0310 	and.w	r3, r3, #16
 800a882:	2b00      	cmp	r3, #0
 800a884:	d019      	beq.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d014      	beq.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2210      	movs	r2, #16
 800a896:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a89e:	f043 0210 	orr.w	r2, r3, #16
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7f7 fc5d 	bl	8002168 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a8ae:	e004      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8b0:	bf00      	nop
 800a8b2:	e002      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8b4:	bf00      	nop
 800a8b6:	e000      	b.n	800a8ba <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8b8:	bf00      	nop
}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800ace1 	.word	0x0800ace1

0800a8c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <SAI_InitI2S+0x2e>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d103      	bne.n	800a8fe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8fc:	e002      	b.n	800a904 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a90a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a912:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e077      	b.n	800aa1e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d107      	bne.n	800a944 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a940:	651a      	str	r2, [r3, #80]	; 0x50
 800a942:	e006      	b.n	800a952 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a94a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b03      	cmp	r3, #3
 800a956:	d84f      	bhi.n	800a9f8 <SAI_InitI2S+0x130>
 800a958:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <SAI_InitI2S+0x98>)
 800a95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95e:	bf00      	nop
 800a960:	0800a971 	.word	0x0800a971
 800a964:	0800a993 	.word	0x0800a993
 800a968:	0800a9b5 	.word	0x0800a9b5
 800a96c:	0800a9d7 	.word	0x0800a9d7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2280      	movs	r2, #128	; 0x80
 800a974:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	085b      	lsrs	r3, r3, #1
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	011a      	lsls	r2, r3, #4
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2240      	movs	r2, #64	; 0x40
 800a98e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a990:	e035      	b.n	800a9fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2280      	movs	r2, #128	; 0x80
 800a996:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	085b      	lsrs	r3, r3, #1
 800a99c:	019a      	lsls	r2, r3, #6
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	085b      	lsrs	r3, r3, #1
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2280      	movs	r2, #128	; 0x80
 800a9b0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a9b2:	e024      	b.n	800a9fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	22c0      	movs	r2, #192	; 0xc0
 800a9b8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	085b      	lsrs	r3, r3, #1
 800a9be:	019a      	lsls	r2, r3, #6
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2280      	movs	r2, #128	; 0x80
 800a9d2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a9d4:	e013      	b.n	800a9fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	22e0      	movs	r2, #224	; 0xe0
 800a9da:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	019a      	lsls	r2, r3, #6
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	085b      	lsrs	r3, r3, #1
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2280      	movs	r2, #128	; 0x80
 800a9f4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a9f6:	e002      	b.n	800a9fe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a9fc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d10b      	bne.n	800aa1c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d102      	bne.n	800aa10 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2210      	movs	r2, #16
 800aa0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d102      	bne.n	800aa1c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2208      	movs	r2, #8
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop

0800aa2c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <SAI_InitPCM+0x2e>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d103      	bne.n	800aa62 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa60:	e002      	b.n	800aa68 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aa74:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aa7c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa90:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b04      	cmp	r3, #4
 800aa96:	d103      	bne.n	800aaa0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	645a      	str	r2, [r3, #68]	; 0x44
 800aa9e:	e002      	b.n	800aaa6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	220d      	movs	r2, #13
 800aaa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d837      	bhi.n	800ab1c <SAI_InitPCM+0xf0>
 800aaac:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <SAI_InitPCM+0x88>)
 800aaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab2:	bf00      	nop
 800aab4:	0800aac5 	.word	0x0800aac5
 800aab8:	0800aadb 	.word	0x0800aadb
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800ab07 	.word	0x0800ab07
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2280      	movs	r2, #128	; 0x80
 800aac8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	011a      	lsls	r2, r3, #4
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2240      	movs	r2, #64	; 0x40
 800aad6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800aad8:	e023      	b.n	800ab22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2280      	movs	r2, #128	; 0x80
 800aade:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2280      	movs	r2, #128	; 0x80
 800aaec:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800aaee:	e018      	b.n	800ab22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	22c0      	movs	r2, #192	; 0xc0
 800aaf4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2280      	movs	r2, #128	; 0x80
 800ab02:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ab04:	e00d      	b.n	800ab22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	22e0      	movs	r2, #224	; 0xe0
 800ab0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2280      	movs	r2, #128	; 0x80
 800ab18:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ab1a:	e002      	b.n	800ab22 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab20:	bf00      	nop
  }

  return status;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d103      	bne.n	800ab4e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f043 0308 	orr.w	r3, r3, #8
 800ab4c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	2b08      	cmp	r3, #8
 800ab54:	d10b      	bne.n	800ab6e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d003      	beq.n	800ab66 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d103      	bne.n	800ab6e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f043 0310 	orr.w	r3, r3, #16
 800ab6c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d003      	beq.n	800ab7e <SAI_InterruptFlag+0x4e>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d104      	bne.n	800ab88 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e003      	b.n	800ab90 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f043 0304 	orr.w	r3, r3, #4
 800ab8e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ab90:	68fb      	ldr	r3, [r7, #12]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
	...

0800aba0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aba8:	4b18      	ldr	r3, [pc, #96]	; (800ac0c <SAI_Disable+0x6c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <SAI_Disable+0x70>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0b1b      	lsrs	r3, r3, #12
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800abca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	72fb      	strb	r3, [r7, #11]
      break;
 800abe6:	e009      	b.n	800abfc <SAI_Disable+0x5c>
    }
    count--;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3b01      	subs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e7      	bne.n	800abcc <SAI_Disable+0x2c>

  return status;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20000004 	.word	0x20000004
 800ac10:	95cbec1b 	.word	0x95cbec1b

0800ac14 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	d01c      	beq.n	800ac64 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ac40:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ac42:	2100      	movs	r1, #0
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7ff ff73 	bl	800ab30 <SAI_InterruptFlag>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	43d9      	mvns	r1, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	691a      	ldr	r2, [r3, #16]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	400a      	ands	r2, r1
 800ac5a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7f7 fa5b 	bl	8002120 <HAL_SAI_TxCpltCallback>
#endif
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7f7 fa5f 	bl	8002144 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aca2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800acba:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff6f 	bl	800aba0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7f7 fa48 	bl	8002168 <HAL_SAI_ErrorCallback>
#endif
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800acfc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2200      	movs	r2, #0
 800ad04:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	d00a      	beq.n	800ad30 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7ff ff40 	bl	800aba0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f042 0208 	orr.w	r2, r2, #8
 800ad2e:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7f7 fa11 	bl	8002168 <HAL_SAI_ErrorCallback>
#endif
}
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e040      	b.n	800ade2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7f6 fa43 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2224      	movs	r2, #36	; 0x24
 800ad7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fb2f 	bl	800b3f0 <UART_SetConfig>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e022      	b.n	800ade2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fddb 	bl	800b960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f042 0201 	orr.w	r2, r2, #1
 800add8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fe62 	bl	800baa4 <UART_CheckIdleState>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b0ba      	sub	sp, #232	; 0xe8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ae16:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ae20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d115      	bne.n	800ae54 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00f      	beq.n	800ae54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 82a6 	beq.w	800b396 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
      }
      return;
 800ae52:	e2a0      	b.n	800b396 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ae54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 8117 	beq.w	800b08c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae6e:	4b85      	ldr	r3, [pc, #532]	; (800b084 <HAL_UART_IRQHandler+0x298>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 810a 	beq.w	800b08c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d011      	beq.n	800aea8 <HAL_UART_IRQHandler+0xbc>
 800ae84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2201      	movs	r2, #1
 800ae96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9e:	f043 0201 	orr.w	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d011      	beq.n	800aed8 <HAL_UART_IRQHandler+0xec>
 800aeb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2202      	movs	r2, #2
 800aec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aece:	f043 0204 	orr.w	r2, r3, #4
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d011      	beq.n	800af08 <HAL_UART_IRQHandler+0x11c>
 800aee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2204      	movs	r2, #4
 800aef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aefe:	f043 0202 	orr.w	r2, r3, #2
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	2b00      	cmp	r3, #0
 800af12:	d017      	beq.n	800af44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d105      	bne.n	800af2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2208      	movs	r2, #8
 800af32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3a:	f043 0208 	orr.w	r2, r3, #8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d012      	beq.n	800af76 <HAL_UART_IRQHandler+0x18a>
 800af50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6c:	f043 0220 	orr.w	r2, r3, #32
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 820c 	beq.w	800b39a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00d      	beq.n	800afaa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b00      	cmp	r3, #0
 800af98:	d007      	beq.n	800afaa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d005      	beq.n	800afce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d04f      	beq.n	800b06e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fe75 	bl	800bcbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d141      	bne.n	800b066 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800affc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3308      	adds	r3, #8
 800b00a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b00e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b01a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1d9      	bne.n	800afe2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b032:	2b00      	cmp	r3, #0
 800b034:	d013      	beq.n	800b05e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b03a:	4a13      	ldr	r2, [pc, #76]	; (800b088 <HAL_UART_IRQHandler+0x29c>)
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b042:	4618      	mov	r0, r3
 800b044:	f7fa fb46 	bl	80056d4 <HAL_DMA_Abort_IT>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d017      	beq.n	800b07e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b05c:	e00f      	b.n	800b07e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f9b0 	bl	800b3c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b064:	e00b      	b.n	800b07e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f9ac 	bl	800b3c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b06c:	e007      	b.n	800b07e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f9a8 	bl	800b3c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b07c:	e18d      	b.n	800b39a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b07e:	bf00      	nop
    return;
 800b080:	e18b      	b.n	800b39a <HAL_UART_IRQHandler+0x5ae>
 800b082:	bf00      	nop
 800b084:	04000120 	.word	0x04000120
 800b088:	0800bd85 	.word	0x0800bd85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b090:	2b01      	cmp	r3, #1
 800b092:	f040 8146 	bne.w	800b322 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 813f 	beq.w	800b322 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8138 	beq.w	800b322 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c4:	2b40      	cmp	r3, #64	; 0x40
 800b0c6:	f040 80b4 	bne.w	800b232 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 815f 	beq.w	800b39e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	f080 8157 	bcs.w	800b39e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 8085 	bne.w	800b216 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b13a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b142:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1da      	bne.n	800b10c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3308      	adds	r3, #8
 800b15c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b168:	f023 0301 	bic.w	r3, r3, #1
 800b16c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3308      	adds	r3, #8
 800b176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b17a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b17e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e1      	bne.n	800b156 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3308      	adds	r3, #8
 800b198:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1be:	e841 2300 	strex	r3, r2, [r1]
 800b1c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e3      	bne.n	800b192 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e6:	f023 0310 	bic.w	r3, r3, #16
 800b1ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e4      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b210:	4618      	mov	r0, r3
 800b212:	f7fa fa21 	bl	8005658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b222:	b29b      	uxth	r3, r3
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	b29b      	uxth	r3, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8d4 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b230:	e0b5      	b.n	800b39e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b23e:	b29b      	uxth	r3, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 80a7 	beq.w	800b3a2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 80a2 	beq.w	800b3a2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b280:	647b      	str	r3, [r7, #68]	; 0x44
 800b282:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e4      	bne.n	800b25e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3308      	adds	r3, #8
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	623b      	str	r3, [r7, #32]
   return(result);
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	f023 0301 	bic.w	r3, r3, #1
 800b2aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2b8:	633a      	str	r2, [r7, #48]	; 0x30
 800b2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c0:	e841 2300 	strex	r3, r2, [r1]
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e3      	bne.n	800b294 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0310 	bic.w	r3, r3, #16
 800b2f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	617b      	str	r3, [r7, #20]
   return(result);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e4      	bne.n	800b2de <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f85c 	bl	800b3d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b320:	e03f      	b.n	800b3a2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00e      	beq.n	800b34c <HAL_UART_IRQHandler+0x560>
 800b32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b342:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fd5d 	bl	800be04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b34a:	e02d      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00e      	beq.n	800b376 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b360:	2b00      	cmp	r3, #0
 800b362:	d008      	beq.n	800b376 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01c      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	4798      	blx	r3
    }
    return;
 800b374:	e017      	b.n	800b3a6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d012      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
 800b382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00c      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fd0e 	bl	800bdb0 <UART_EndTransmit_IT>
    return;
 800b394:	e008      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b396:	bf00      	nop
 800b398:	e006      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b39a:	bf00      	nop
 800b39c:	e004      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b39e:	bf00      	nop
 800b3a0:	e002      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b3a2:	bf00      	nop
 800b3a4:	e000      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b3a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b3a8:	37e8      	adds	r7, #232	; 0xe8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop

0800b3b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f4:	b08a      	sub	sp, #40	; 0x28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	431a      	orrs	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	431a      	orrs	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	4313      	orrs	r3, r2
 800b416:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4ba4      	ldr	r3, [pc, #656]	; (800b6b0 <UART_SetConfig+0x2c0>)
 800b420:	4013      	ands	r3, r2
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b428:	430b      	orrs	r3, r1
 800b42a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a99      	ldr	r2, [pc, #612]	; (800b6b4 <UART_SetConfig+0x2c4>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d004      	beq.n	800b45c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b458:	4313      	orrs	r3, r2
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	430a      	orrs	r2, r1
 800b46e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a90      	ldr	r2, [pc, #576]	; (800b6b8 <UART_SetConfig+0x2c8>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d126      	bne.n	800b4c8 <UART_SetConfig+0xd8>
 800b47a:	4b90      	ldr	r3, [pc, #576]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b480:	f003 0303 	and.w	r3, r3, #3
 800b484:	2b03      	cmp	r3, #3
 800b486:	d81b      	bhi.n	800b4c0 <UART_SetConfig+0xd0>
 800b488:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <UART_SetConfig+0xa0>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b4a1 	.word	0x0800b4a1
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b4b9 	.word	0x0800b4b9
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4a6:	e116      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ae:	e112      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4b6:	e10e      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4be:	e10a      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c6:	e106      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a7c      	ldr	r2, [pc, #496]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d138      	bne.n	800b544 <UART_SetConfig+0x154>
 800b4d2:	4b7a      	ldr	r3, [pc, #488]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	f003 030c 	and.w	r3, r3, #12
 800b4dc:	2b0c      	cmp	r3, #12
 800b4de:	d82d      	bhi.n	800b53c <UART_SetConfig+0x14c>
 800b4e0:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <UART_SetConfig+0xf8>)
 800b4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e6:	bf00      	nop
 800b4e8:	0800b51d 	.word	0x0800b51d
 800b4ec:	0800b53d 	.word	0x0800b53d
 800b4f0:	0800b53d 	.word	0x0800b53d
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b52d 	.word	0x0800b52d
 800b4fc:	0800b53d 	.word	0x0800b53d
 800b500:	0800b53d 	.word	0x0800b53d
 800b504:	0800b53d 	.word	0x0800b53d
 800b508:	0800b525 	.word	0x0800b525
 800b50c:	0800b53d 	.word	0x0800b53d
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	0800b53d 	.word	0x0800b53d
 800b518:	0800b535 	.word	0x0800b535
 800b51c:	2300      	movs	r3, #0
 800b51e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b522:	e0d8      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b524:	2302      	movs	r3, #2
 800b526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b52a:	e0d4      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b532:	e0d0      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b53a:	e0cc      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b542:	e0c8      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a5e      	ldr	r2, [pc, #376]	; (800b6c4 <UART_SetConfig+0x2d4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d125      	bne.n	800b59a <UART_SetConfig+0x1aa>
 800b54e:	4b5b      	ldr	r3, [pc, #364]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d016      	beq.n	800b58a <UART_SetConfig+0x19a>
 800b55c:	2b30      	cmp	r3, #48	; 0x30
 800b55e:	d818      	bhi.n	800b592 <UART_SetConfig+0x1a2>
 800b560:	2b20      	cmp	r3, #32
 800b562:	d00a      	beq.n	800b57a <UART_SetConfig+0x18a>
 800b564:	2b20      	cmp	r3, #32
 800b566:	d814      	bhi.n	800b592 <UART_SetConfig+0x1a2>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <UART_SetConfig+0x182>
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	d008      	beq.n	800b582 <UART_SetConfig+0x192>
 800b570:	e00f      	b.n	800b592 <UART_SetConfig+0x1a2>
 800b572:	2300      	movs	r3, #0
 800b574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b578:	e0ad      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b57a:	2302      	movs	r3, #2
 800b57c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b580:	e0a9      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b582:	2304      	movs	r3, #4
 800b584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b588:	e0a5      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b58a:	2308      	movs	r3, #8
 800b58c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b590:	e0a1      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b592:	2310      	movs	r3, #16
 800b594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b598:	e09d      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a4a      	ldr	r2, [pc, #296]	; (800b6c8 <UART_SetConfig+0x2d8>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d125      	bne.n	800b5f0 <UART_SetConfig+0x200>
 800b5a4:	4b45      	ldr	r3, [pc, #276]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5ae:	2bc0      	cmp	r3, #192	; 0xc0
 800b5b0:	d016      	beq.n	800b5e0 <UART_SetConfig+0x1f0>
 800b5b2:	2bc0      	cmp	r3, #192	; 0xc0
 800b5b4:	d818      	bhi.n	800b5e8 <UART_SetConfig+0x1f8>
 800b5b6:	2b80      	cmp	r3, #128	; 0x80
 800b5b8:	d00a      	beq.n	800b5d0 <UART_SetConfig+0x1e0>
 800b5ba:	2b80      	cmp	r3, #128	; 0x80
 800b5bc:	d814      	bhi.n	800b5e8 <UART_SetConfig+0x1f8>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <UART_SetConfig+0x1d8>
 800b5c2:	2b40      	cmp	r3, #64	; 0x40
 800b5c4:	d008      	beq.n	800b5d8 <UART_SetConfig+0x1e8>
 800b5c6:	e00f      	b.n	800b5e8 <UART_SetConfig+0x1f8>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ce:	e082      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5d6:	e07e      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b5d8:	2304      	movs	r3, #4
 800b5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5de:	e07a      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5e6:	e076      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b5e8:	2310      	movs	r3, #16
 800b5ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ee:	e072      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a35      	ldr	r2, [pc, #212]	; (800b6cc <UART_SetConfig+0x2dc>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d12a      	bne.n	800b650 <UART_SetConfig+0x260>
 800b5fa:	4b30      	ldr	r3, [pc, #192]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b608:	d01a      	beq.n	800b640 <UART_SetConfig+0x250>
 800b60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b60e:	d81b      	bhi.n	800b648 <UART_SetConfig+0x258>
 800b610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b614:	d00c      	beq.n	800b630 <UART_SetConfig+0x240>
 800b616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61a:	d815      	bhi.n	800b648 <UART_SetConfig+0x258>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <UART_SetConfig+0x238>
 800b620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b624:	d008      	beq.n	800b638 <UART_SetConfig+0x248>
 800b626:	e00f      	b.n	800b648 <UART_SetConfig+0x258>
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b62e:	e052      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b630:	2302      	movs	r3, #2
 800b632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b636:	e04e      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b63e:	e04a      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b646:	e046      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b648:	2310      	movs	r3, #16
 800b64a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b64e:	e042      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a17      	ldr	r2, [pc, #92]	; (800b6b4 <UART_SetConfig+0x2c4>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d13a      	bne.n	800b6d0 <UART_SetConfig+0x2e0>
 800b65a:	4b18      	ldr	r3, [pc, #96]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b668:	d01a      	beq.n	800b6a0 <UART_SetConfig+0x2b0>
 800b66a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b66e:	d81b      	bhi.n	800b6a8 <UART_SetConfig+0x2b8>
 800b670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b674:	d00c      	beq.n	800b690 <UART_SetConfig+0x2a0>
 800b676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b67a:	d815      	bhi.n	800b6a8 <UART_SetConfig+0x2b8>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <UART_SetConfig+0x298>
 800b680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b684:	d008      	beq.n	800b698 <UART_SetConfig+0x2a8>
 800b686:	e00f      	b.n	800b6a8 <UART_SetConfig+0x2b8>
 800b688:	2300      	movs	r3, #0
 800b68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b68e:	e022      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b690:	2302      	movs	r3, #2
 800b692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b696:	e01e      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b698:	2304      	movs	r3, #4
 800b69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b69e:	e01a      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b6a0:	2308      	movs	r3, #8
 800b6a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6a6:	e016      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ae:	e012      	b.n	800b6d6 <UART_SetConfig+0x2e6>
 800b6b0:	efff69f3 	.word	0xefff69f3
 800b6b4:	40008000 	.word	0x40008000
 800b6b8:	40013800 	.word	0x40013800
 800b6bc:	40021000 	.word	0x40021000
 800b6c0:	40004400 	.word	0x40004400
 800b6c4:	40004800 	.word	0x40004800
 800b6c8:	40004c00 	.word	0x40004c00
 800b6cc:	40005000 	.word	0x40005000
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a9f      	ldr	r2, [pc, #636]	; (800b958 <UART_SetConfig+0x568>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d17a      	bne.n	800b7d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6e4:	2b08      	cmp	r3, #8
 800b6e6:	d824      	bhi.n	800b732 <UART_SetConfig+0x342>
 800b6e8:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <UART_SetConfig+0x300>)
 800b6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ee:	bf00      	nop
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b733 	.word	0x0800b733
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b733 	.word	0x0800b733
 800b700:	0800b723 	.word	0x0800b723
 800b704:	0800b733 	.word	0x0800b733
 800b708:	0800b733 	.word	0x0800b733
 800b70c:	0800b733 	.word	0x0800b733
 800b710:	0800b72b 	.word	0x0800b72b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b714:	f7fc fe7e 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800b718:	61f8      	str	r0, [r7, #28]
        break;
 800b71a:	e010      	b.n	800b73e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b71c:	4b8f      	ldr	r3, [pc, #572]	; (800b95c <UART_SetConfig+0x56c>)
 800b71e:	61fb      	str	r3, [r7, #28]
        break;
 800b720:	e00d      	b.n	800b73e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b722:	f7fc fddf 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800b726:	61f8      	str	r0, [r7, #28]
        break;
 800b728:	e009      	b.n	800b73e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b72a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72e:	61fb      	str	r3, [r7, #28]
        break;
 800b730:	e005      	b.n	800b73e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b73c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 80fb 	beq.w	800b93c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4413      	add	r3, r2
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	429a      	cmp	r2, r3
 800b754:	d305      	bcc.n	800b762 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b75c:	69fa      	ldr	r2, [r7, #28]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d903      	bls.n	800b76a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b768:	e0e8      	b.n	800b93c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	2200      	movs	r2, #0
 800b76e:	461c      	mov	r4, r3
 800b770:	4615      	mov	r5, r2
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	f04f 0300 	mov.w	r3, #0
 800b77a:	022b      	lsls	r3, r5, #8
 800b77c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b780:	0222      	lsls	r2, r4, #8
 800b782:	68f9      	ldr	r1, [r7, #12]
 800b784:	6849      	ldr	r1, [r1, #4]
 800b786:	0849      	lsrs	r1, r1, #1
 800b788:	2000      	movs	r0, #0
 800b78a:	4688      	mov	r8, r1
 800b78c:	4681      	mov	r9, r0
 800b78e:	eb12 0a08 	adds.w	sl, r2, r8
 800b792:	eb43 0b09 	adc.w	fp, r3, r9
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	603b      	str	r3, [r7, #0]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	f7f4 fd0e 	bl	80001c8 <__aeabi_uldivmod>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ba:	d308      	bcc.n	800b7ce <UART_SetConfig+0x3de>
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7c2:	d204      	bcs.n	800b7ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69ba      	ldr	r2, [r7, #24]
 800b7ca:	60da      	str	r2, [r3, #12]
 800b7cc:	e0b6      	b.n	800b93c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b7d4:	e0b2      	b.n	800b93c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7de:	d15e      	bne.n	800b89e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b7e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7e4:	2b08      	cmp	r3, #8
 800b7e6:	d828      	bhi.n	800b83a <UART_SetConfig+0x44a>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <UART_SetConfig+0x400>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b815 	.word	0x0800b815
 800b7f4:	0800b81d 	.word	0x0800b81d
 800b7f8:	0800b825 	.word	0x0800b825
 800b7fc:	0800b83b 	.word	0x0800b83b
 800b800:	0800b82b 	.word	0x0800b82b
 800b804:	0800b83b 	.word	0x0800b83b
 800b808:	0800b83b 	.word	0x0800b83b
 800b80c:	0800b83b 	.word	0x0800b83b
 800b810:	0800b833 	.word	0x0800b833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b814:	f7fc fdfe 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800b818:	61f8      	str	r0, [r7, #28]
        break;
 800b81a:	e014      	b.n	800b846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b81c:	f7fc fe10 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 800b820:	61f8      	str	r0, [r7, #28]
        break;
 800b822:	e010      	b.n	800b846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b824:	4b4d      	ldr	r3, [pc, #308]	; (800b95c <UART_SetConfig+0x56c>)
 800b826:	61fb      	str	r3, [r7, #28]
        break;
 800b828:	e00d      	b.n	800b846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b82a:	f7fc fd5b 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800b82e:	61f8      	str	r0, [r7, #28]
        break;
 800b830:	e009      	b.n	800b846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b836:	61fb      	str	r3, [r7, #28]
        break;
 800b838:	e005      	b.n	800b846 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d077      	beq.n	800b93c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	005a      	lsls	r2, r3, #1
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	085b      	lsrs	r3, r3, #1
 800b856:	441a      	add	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b0f      	cmp	r3, #15
 800b866:	d916      	bls.n	800b896 <UART_SetConfig+0x4a6>
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86e:	d212      	bcs.n	800b896 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	b29b      	uxth	r3, r3
 800b874:	f023 030f 	bic.w	r3, r3, #15
 800b878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	085b      	lsrs	r3, r3, #1
 800b87e:	b29b      	uxth	r3, r3
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	b29a      	uxth	r2, r3
 800b886:	8afb      	ldrh	r3, [r7, #22]
 800b888:	4313      	orrs	r3, r2
 800b88a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	8afa      	ldrh	r2, [r7, #22]
 800b892:	60da      	str	r2, [r3, #12]
 800b894:	e052      	b.n	800b93c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b89c:	e04e      	b.n	800b93c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b89e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8a2:	2b08      	cmp	r3, #8
 800b8a4:	d827      	bhi.n	800b8f6 <UART_SetConfig+0x506>
 800b8a6:	a201      	add	r2, pc, #4	; (adr r2, 800b8ac <UART_SetConfig+0x4bc>)
 800b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ac:	0800b8d1 	.word	0x0800b8d1
 800b8b0:	0800b8d9 	.word	0x0800b8d9
 800b8b4:	0800b8e1 	.word	0x0800b8e1
 800b8b8:	0800b8f7 	.word	0x0800b8f7
 800b8bc:	0800b8e7 	.word	0x0800b8e7
 800b8c0:	0800b8f7 	.word	0x0800b8f7
 800b8c4:	0800b8f7 	.word	0x0800b8f7
 800b8c8:	0800b8f7 	.word	0x0800b8f7
 800b8cc:	0800b8ef 	.word	0x0800b8ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8d0:	f7fc fda0 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800b8d4:	61f8      	str	r0, [r7, #28]
        break;
 800b8d6:	e014      	b.n	800b902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8d8:	f7fc fdb2 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 800b8dc:	61f8      	str	r0, [r7, #28]
        break;
 800b8de:	e010      	b.n	800b902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <UART_SetConfig+0x56c>)
 800b8e2:	61fb      	str	r3, [r7, #28]
        break;
 800b8e4:	e00d      	b.n	800b902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8e6:	f7fc fcfd 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800b8ea:	61f8      	str	r0, [r7, #28]
        break;
 800b8ec:	e009      	b.n	800b902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8f2:	61fb      	str	r3, [r7, #28]
        break;
 800b8f4:	e005      	b.n	800b902 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b900:	bf00      	nop
    }

    if (pclk != 0U)
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d019      	beq.n	800b93c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	085a      	lsrs	r2, r3, #1
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	441a      	add	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	2b0f      	cmp	r3, #15
 800b920:	d909      	bls.n	800b936 <UART_SetConfig+0x546>
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b928:	d205      	bcs.n	800b936 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60da      	str	r2, [r3, #12]
 800b934:	e002      	b.n	800b93c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3728      	adds	r7, #40	; 0x28
 800b950:	46bd      	mov	sp, r7
 800b952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b956:	bf00      	nop
 800b958:	40008000 	.word	0x40008000
 800b95c:	00f42400 	.word	0x00f42400

0800b960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	f003 0308 	and.w	r3, r3, #8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01a      	beq.n	800ba76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba5e:	d10a      	bne.n	800ba76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	430a      	orrs	r2, r1
 800ba96:	605a      	str	r2, [r3, #4]
  }
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bab4:	f7f7 fd9e 	bl	80035f4 <HAL_GetTick>
 800bab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d10e      	bne.n	800bae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f82d 	bl	800bb36 <UART_WaitOnFlagUntilTimeout>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e023      	b.n	800bb2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0304 	and.w	r3, r3, #4
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d10e      	bne.n	800bb12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f817 	bl	800bb36 <UART_WaitOnFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e00d      	b.n	800bb2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2220      	movs	r2, #32
 800bb16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b09c      	sub	sp, #112	; 0x70
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	603b      	str	r3, [r7, #0]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb46:	e0a5      	b.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4e:	f000 80a1 	beq.w	800bc94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb52:	f7f7 fd4f 	bl	80035f4 <HAL_GetTick>
 800bb56:	4602      	mov	r2, r0
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d302      	bcc.n	800bb68 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d13e      	bne.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb7c:	667b      	str	r3, [r7, #100]	; 0x64
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb8e:	e841 2300 	strex	r3, r2, [r1]
 800bb92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1e6      	bne.n	800bb68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3308      	adds	r3, #8
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba4:	e853 3f00 	ldrex	r3, [r3]
 800bba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbac:	f023 0301 	bic.w	r3, r3, #1
 800bbb0:	663b      	str	r3, [r7, #96]	; 0x60
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bbba:	64ba      	str	r2, [r7, #72]	; 0x48
 800bbbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e5      	bne.n	800bb9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e067      	b.n	800bcb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d04f      	beq.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	69db      	ldr	r3, [r3, #28]
 800bbfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc02:	d147      	bne.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e6      	bne.n	800bc0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3308      	adds	r3, #8
 800bc46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	e853 3f00 	ldrex	r3, [r3]
 800bc4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f023 0301 	bic.w	r3, r3, #1
 800bc56:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc60:	623a      	str	r2, [r7, #32]
 800bc62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc64:	69f9      	ldr	r1, [r7, #28]
 800bc66:	6a3a      	ldr	r2, [r7, #32]
 800bc68:	e841 2300 	strex	r3, r2, [r1]
 800bc6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e5      	bne.n	800bc40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2220      	movs	r2, #32
 800bc78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2220      	movs	r2, #32
 800bc84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e010      	b.n	800bcb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	69da      	ldr	r2, [r3, #28]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	bf0c      	ite	eq
 800bca4:	2301      	moveq	r3, #1
 800bca6:	2300      	movne	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	461a      	mov	r2, r3
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	f43f af4a 	beq.w	800bb48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3770      	adds	r7, #112	; 0x70
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b095      	sub	sp, #84	; 0x54
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcce:	e853 3f00 	ldrex	r3, [r3]
 800bcd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	643b      	str	r3, [r7, #64]	; 0x40
 800bce6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e6      	bne.n	800bcc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	f023 0301 	bic.w	r3, r3, #1
 800bd0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3308      	adds	r3, #8
 800bd16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e5      	bne.n	800bcf8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d118      	bne.n	800bd66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	e853 3f00 	ldrex	r3, [r3]
 800bd40:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f023 0310 	bic.w	r3, r3, #16
 800bd48:	647b      	str	r3, [r7, #68]	; 0x44
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd52:	61bb      	str	r3, [r7, #24]
 800bd54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd56:	6979      	ldr	r1, [r7, #20]
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	e841 2300 	strex	r3, r2, [r1]
 800bd5e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1e6      	bne.n	800bd34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bd78:	bf00      	nop
 800bd7a:	3754      	adds	r7, #84	; 0x54
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fb0e 	bl	800b3c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	61bb      	str	r3, [r7, #24]
 800bdd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdda:	6979      	ldr	r1, [r7, #20]
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	e841 2300 	strex	r3, r2, [r1]
 800bde2:	613b      	str	r3, [r7, #16]
   return(result);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1e6      	bne.n	800bdb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fada 	bl	800b3b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdfc:	bf00      	nop
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <__libc_init_array>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	4d0d      	ldr	r5, [pc, #52]	; (800be50 <__libc_init_array+0x38>)
 800be1c:	4c0d      	ldr	r4, [pc, #52]	; (800be54 <__libc_init_array+0x3c>)
 800be1e:	1b64      	subs	r4, r4, r5
 800be20:	10a4      	asrs	r4, r4, #2
 800be22:	2600      	movs	r6, #0
 800be24:	42a6      	cmp	r6, r4
 800be26:	d109      	bne.n	800be3c <__libc_init_array+0x24>
 800be28:	4d0b      	ldr	r5, [pc, #44]	; (800be58 <__libc_init_array+0x40>)
 800be2a:	4c0c      	ldr	r4, [pc, #48]	; (800be5c <__libc_init_array+0x44>)
 800be2c:	f000 f820 	bl	800be70 <_init>
 800be30:	1b64      	subs	r4, r4, r5
 800be32:	10a4      	asrs	r4, r4, #2
 800be34:	2600      	movs	r6, #0
 800be36:	42a6      	cmp	r6, r4
 800be38:	d105      	bne.n	800be46 <__libc_init_array+0x2e>
 800be3a:	bd70      	pop	{r4, r5, r6, pc}
 800be3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be40:	4798      	blx	r3
 800be42:	3601      	adds	r6, #1
 800be44:	e7ee      	b.n	800be24 <__libc_init_array+0xc>
 800be46:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4a:	4798      	blx	r3
 800be4c:	3601      	adds	r6, #1
 800be4e:	e7f2      	b.n	800be36 <__libc_init_array+0x1e>
 800be50:	0800bf38 	.word	0x0800bf38
 800be54:	0800bf38 	.word	0x0800bf38
 800be58:	0800bf38 	.word	0x0800bf38
 800be5c:	0800bf3c 	.word	0x0800bf3c

0800be60 <memset>:
 800be60:	4402      	add	r2, r0
 800be62:	4603      	mov	r3, r0
 800be64:	4293      	cmp	r3, r2
 800be66:	d100      	bne.n	800be6a <memset+0xa>
 800be68:	4770      	bx	lr
 800be6a:	f803 1b01 	strb.w	r1, [r3], #1
 800be6e:	e7f9      	b.n	800be64 <memset+0x4>

0800be70 <_init>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	bf00      	nop
 800be74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be76:	bc08      	pop	{r3}
 800be78:	469e      	mov	lr, r3
 800be7a:	4770      	bx	lr

0800be7c <_fini>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	bf00      	nop
 800be80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be82:	bc08      	pop	{r3}
 800be84:	469e      	mov	lr, r3
 800be86:	4770      	bx	lr
