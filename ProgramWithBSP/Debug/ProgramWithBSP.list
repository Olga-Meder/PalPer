
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c6c  08006c6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c74  08006c74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  08006c88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006c88  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c205  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003180  00000000  00000000  0003c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0003f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a247  00000000  00000000  000422e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5d7  00000000  00000000  0006c52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110e1f  00000000  00000000  00087b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c8  00000000  00000000  00198978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c0c 	.word	0x08006c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006c0c 	.word	0x08006c0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff22 	bl	8001318 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f817 	bl	8000506 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d8:	f000 f868 	bl	80005ac <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fab2 	bl	8000a44 <MX_GPIO_Init>
  MX_LCD_Init();
 80004e0:	f000 f980 	bl	80007e4 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80004e4:	f000 f9b8 	bl	8000858 <MX_QUADSPI_Init>
  MX_DFSDM1_Init();
 80004e8:	f000 f904 	bl	80006f4 <MX_DFSDM1_Init>
  MX_RTC_Init();
 80004ec:	f000 f9da 	bl	80008a4 <MX_RTC_Init>
  MX_I2C1_Init();
 80004f0:	f000 f938 	bl	8000764 <MX_I2C1_Init>
  MX_DMA_Init();
 80004f4:	f000 fa88 	bl	8000a08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80004f8:	f000 fa56 	bl	80009a8 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80004fc:	f000 f9fa 	bl	80008f4 <MX_SAI1_Init>
  MX_ADC1_Init();
 8000500:	f000 f882 	bl	8000608 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>

08000506 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b096      	sub	sp, #88	; 0x58
 800050a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2244      	movs	r2, #68	; 0x44
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f006 fb71 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000528:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052c:	f003 f9b4 	bl	8003898 <HAL_PWREx_ControlVoltageScaling>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000536:	f000 fb51 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800053a:	230a      	movs	r3, #10
 800053c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	2310      	movs	r3, #16
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000558:	230a      	movs	r3, #10
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055c:	2307      	movs	r3, #7
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4618      	mov	r0, r3
 800056e:	f003 faa5 	bl	8003abc <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000578:	f000 fb30 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2303      	movs	r3, #3
 8000582:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	2104      	movs	r1, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fe79 	bl	800428c <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005a0:	f000 fb1c 	bl	8000bdc <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3758      	adds	r7, #88	; 0x58
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b0a2      	sub	sp, #136	; 0x88
 80005b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2288      	movs	r2, #136	; 0x88
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 fb1f 	bl	8006bfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 80005be:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80005c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005cc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005da:	2307      	movs	r3, #7
 80005dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <PeriphCommonClock_Config+0x58>)
 80005e8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 f853 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80005f8:	f000 faf0 	bl	8000bdc <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3788      	adds	r7, #136	; 0x88
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	01010000 	.word	0x01010000

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
 8000628:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <MX_ADC1_Init+0xe4>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000638:	2210      	movs	r2, #16
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800064a:	2204      	movs	r2, #4
 800064c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	4817      	ldr	r0, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xe0>)
 800068c:	f001 f88e 	bl	80017ac <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000696:	f000 faa1 	bl	8000bdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <MX_ADC1_Init+0xe0>)
 80006a6:	f002 f857 	bl	8002758 <HAL_ADCEx_MultiModeConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b0:	f000 fa94 	bl	8000bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_ADC1_Init+0xe8>)
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2306      	movs	r3, #6
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80006bc:	2306      	movs	r3, #6
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c0:	237f      	movs	r3, #127	; 0x7f
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c4:	2304      	movs	r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC1_Init+0xe0>)
 80006d2:	f001 fbf9 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006dc:	f000 fa7e 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028
 80006ec:	50040000 	.word	0x50040000
 80006f0:	21800100 	.word	0x21800100

080006f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_Init 0 */
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */
  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_DFSDM1_Init+0x68>)
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <MX_DFSDM1_Init+0x6c>)
 80006fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_DFSDM1_Init+0x68>)
 800070c:	2202      	movs	r2, #2
 800070e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000716:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_DFSDM1_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DFSDM1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000738:	2201      	movs	r2, #1
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_DFSDM1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_DFSDM1_Init+0x68>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_DFSDM1_Init+0x68>)
 800074a:	f002 f9c7 	bl	8002adc <HAL_DFSDM_ChannelInit>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000754:	f000 fa42 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */
  /* USER CODE END DFSDM1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40016000 	.word	0x40016000

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	f002 fe64 	bl	800346c <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fa17 	bl	8000bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007b2:	f002 feea 	bl	800358a <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fa0e 	bl	8000bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007c4:	f002 ff2c 	bl	8003620 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fa05 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	40005400 	.word	0x40005400
 80007e0:	10909cec 	.word	0x10909cec

080007e4 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_LCD_Init+0x6c>)
 80007ea:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <MX_LCD_Init+0x70>)
 80007ec:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_LCD_Init+0x6c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_LCD_Init+0x6c>)
 80007f6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80007fa:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_LCD_Init+0x6c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_LCD_Init+0x6c>)
 8000804:	2240      	movs	r2, #64	; 0x40
 8000806:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_LCD_Init+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_LCD_Init+0x6c>)
 8000810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000814:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_LCD_Init+0x6c>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_LCD_Init+0x6c>)
 800081e:	2240      	movs	r2, #64	; 0x40
 8000820:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_LCD_Init+0x6c>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_LCD_Init+0x6c>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_LCD_Init+0x6c>)
 8000830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_LCD_Init+0x6c>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_LCD_Init+0x6c>)
 800083e:	f002 ff3b 	bl	80036b8 <HAL_LCD_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LCD_Init+0x68>
  {
    Error_Handler();
 8000848:	f000 f9c8 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000110 	.word	0x20000110
 8000854:	40002400 	.word	0x40002400

08000858 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_QUADSPI_Init+0x44>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_QUADSPI_Init+0x48>)
 8000860:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_QUADSPI_Init+0x44>)
 8000864:	2201      	movs	r2, #1
 8000866:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_QUADSPI_Init+0x44>)
 800086a:	2204      	movs	r2, #4
 800086c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_QUADSPI_Init+0x44>)
 8000870:	2210      	movs	r2, #16
 8000872:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_QUADSPI_Init+0x44>)
 8000876:	2218      	movs	r2, #24
 8000878:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_QUADSPI_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_QUADSPI_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_QUADSPI_Init+0x44>)
 8000888:	f003 f85c 	bl	8003944 <HAL_QSPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000892:	f000 f9a3 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000014c 	.word	0x2000014c
 80008a0:	a0001000 	.word	0xa0001000

080008a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_RTC_Init+0x48>)
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_RTC_Init+0x4c>)
 80008ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_RTC_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_RTC_Init+0x48>)
 80008b6:	227f      	movs	r2, #127	; 0x7f
 80008b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_RTC_Init+0x48>)
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_RTC_Init+0x48>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_RTC_Init+0x48>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_RTC_Init+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_RTC_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_RTC_Init+0x48>)
 80008da:	f005 f9f7 	bl	8005ccc <HAL_RTC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008e4:	f000 f97a 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000190 	.word	0x20000190
 80008f0:	40002800 	.word	0x40002800

080008f4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_SAI1_Init+0xa8>)
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <MX_SAI1_Init+0xac>)
 80008fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_SAI1_Init+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_SAI1_Init+0xa8>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_SAI1_Init+0xa8>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_SAI1_Init+0xa8>)
 8000912:	2200      	movs	r2, #0
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_SAI1_Init+0xa8>)
 8000918:	2200      	movs	r2, #0
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_SAI1_Init+0xa8>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_SAI1_Init+0xa8>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_SAI1_Init+0xa8>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SAI1_Init+0xa8>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_SAI1_Init+0xa8>)
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_SAI1_Init+0xb0>)
 8000938:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SAI1_Init+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SAI1_Init+0xa8>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SAI1_Init+0xa8>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SAI1_Init+0xa8>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SAI1_Init+0xa8>)
 8000954:	2220      	movs	r2, #32
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SAI1_Init+0xa8>)
 800095a:	2201      	movs	r2, #1
 800095c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SAI1_Init+0xa8>)
 8000960:	2200      	movs	r2, #0
 8000962:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_SAI1_Init+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SAI1_Init+0xa8>)
 800096c:	2200      	movs	r2, #0
 800096e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SAI1_Init+0xa8>)
 8000972:	2200      	movs	r2, #0
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SAI1_Init+0xa8>)
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SAI1_Init+0xa8>)
 800097e:	2201      	movs	r2, #1
 8000980:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SAI1_Init+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SAI1_Init+0xa8>)
 800098a:	f005 fab1 	bl	8005ef0 <HAL_SAI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000994:	f000 f922 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001b4 	.word	0x200001b4
 80009a0:	40015404 	.word	0x40015404
 80009a4:	0002ee00 	.word	0x0002ee00

080009a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART3_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART3_UART_Init+0x58>)
 80009ec:	f005 fc2c 	bl	8006248 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f8f1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000280 	.word	0x20000280
 8000a04:	40004800 	.word	0x40004800

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6493      	str	r3, [r2, #72]	; 0x48
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2038      	movs	r0, #56	; 0x38
 8000a2c:	f002 f81f 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000a30:	2038      	movs	r0, #56	; 0x38
 8000a32:	f002 f838 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a56      	ldr	r2, [pc, #344]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b54      	ldr	r3, [pc, #336]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b48      	ldr	r3, [pc, #288]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <MX_GPIO_Init+0x18c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000ad8:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <MX_GPIO_Init+0x190>)
 8000ada:	f002 fcaf 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f002 fca9 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f002 fca3 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2104      	movs	r1, #4
 8000afa:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x194>)
 8000afc:	f002 fc9e 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000b00:	2308      	movs	r3, #8
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <MX_GPIO_Init+0x190>)
 8000b18:	f002 fae6 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f002 fad9 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8000b36:	2302      	movs	r3, #2
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f002 faca 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_Y2_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIGITIZER_IN_Y2_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f002 fabd 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f002 faae 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_GPIO_Init+0x194>)
 8000ba4:	f002 faa0 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0x190>)
 8000bc2:	f002 fa91 	bl	80030e8 <HAL_GPIO_Init>

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	48000400 	.word	0x48000400

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_ADC_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_ADC_MspInit+0x88>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c86:	230b      	movs	r3, #11
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f002 fa26 	bl	80030e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2012      	movs	r0, #18
 8000ca2:	f001 fee4 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca6:	2012      	movs	r0, #18
 8000ca8:	f001 fefd 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	50040000 	.word	0x50040000
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ac      	sub	sp, #176	; 0xb0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2288      	movs	r2, #136	; 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 ff8d 	bl	8006bfc <memset>
  if(hi2c->Instance==I2C1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <HAL_I2C_MspInit+0xb0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d13a      	bne.n	8000d62 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fccd 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d04:	f7ff ff6a 	bl	8000bdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d20:	23c0      	movs	r3, #192	; 0xc0
 8000d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0xb8>)
 8000d46:	f002 f9cf 	bl	80030e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0xb4>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	37b0      	adds	r7, #176	; 0xb0
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ae      	sub	sp, #184	; 0xb8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2288      	movs	r2, #136	; 0x88
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 ff2f 	bl	8006bfc <memset>
  if(hlcd->Instance==LCD)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a57      	ldr	r2, [pc, #348]	; (8000f00 <HAL_LCD_MspInit+0x188>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 80a6 	bne.w	8000ef6 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 fc6b 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000dc8:	f7ff ff08 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000dcc:	4b4d      	ldr	r3, [pc, #308]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd8:	4b4a      	ldr	r3, [pc, #296]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a40      	ldr	r2, [pc, #256]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <HAL_LCD_MspInit+0x18c>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000e44:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000e5e:	230b      	movs	r3, #11
 8000e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4827      	ldr	r0, [pc, #156]	; (8000f08 <HAL_LCD_MspInit+0x190>)
 8000e6c:	f002 f93c 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000e70:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f002 f925 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000e9e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <HAL_LCD_MspInit+0x194>)
 8000ec6:	f002 f90f 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000eca:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	; (8000f10 <HAL_LCD_MspInit+0x198>)
 8000ef2:	f002 f8f9 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	37b8      	adds	r7, #184	; 0xb8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40002400 	.word	0x40002400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000800 	.word	0x48000800
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000c00 	.word	0x48000c00

08000f14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_QSPI_MspInit+0x7c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d128      	bne.n	8000f88 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6513      	str	r3, [r2, #80]	; 0x50
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_QSPI_MspInit+0x80>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000f66:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f6a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f78:	230a      	movs	r3, #10
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_QSPI_MspInit+0x84>)
 8000f84:	f002 f8b0 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	a0001000 	.word	0xa0001000
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48001000 	.word	0x48001000

08000f9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0a4      	sub	sp, #144	; 0x90
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2288      	movs	r2, #136	; 0x88
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fe25 	bl	8006bfc <memset>
  if(hrtc->Instance==RTC)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_RTC_MspInit+0x5c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d118      	bne.n	8000fee <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fb62 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fda:	f7ff fdff 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_RTC_MspInit+0x60>)
 8000fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_RTC_MspInit+0x60>)
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3790      	adds	r7, #144	; 0x90
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40002800 	.word	0x40002800
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ac      	sub	sp, #176	; 0xb0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2288      	movs	r2, #136	; 0x88
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fdeb 	bl	8006bfc <memset>
  if(huart->Instance==USART3)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <HAL_UART_MspInit+0xb0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13b      	bne.n	80010a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001030:	2304      	movs	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fb2b 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f7ff fdc8 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 8001052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001056:	6593      	str	r3, [r2, #88]	; 0x58
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0xb4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800107c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001096:	2307      	movs	r3, #7
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0xb8>)
 80010a4:	f002 f820 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	37b0      	adds	r7, #176	; 0xb0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004800 	.word	0x40004800
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000400 	.word	0x48000400

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f962 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <ADC1_2_IRQHandler+0x10>)
 8001116:	f000 fc9f 	bl	8001a58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000028 	.word	0x20000028

08001124 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Channel1_IRQHandler+0x10>)
 800112a:	f001 ff2d 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000238 	.word	0x20000238

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f005 fd13 	bl	8006bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118e:	f7ff f99d 	bl	80004cc <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001194:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a0:	08006c7c 	.word	0x08006c7c
  ldr r2, =_sbss
 80011a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011a8:	20000374 	.word	0x20000374

080011ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC3_IRQHandler>
	...

080011b0 <HAL_SAI_MspInit>:
  * @brief  SAI MSP Init
  * @param  hsai : pointer to a SAI_HandleTypeDef structure
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable SAI clock */
  AUDIO_SAIx_CLK_ENABLE();
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011bc:	4a36      	ldr	r2, [pc, #216]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c2:	6613      	str	r3, [r2, #96]	; 0x60
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_SAIx_MCK_SCK_SD_FS_ENABLE();
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	4a30      	ldr	r2, [pc, #192]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011dc:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_SAIx_FS_PIN | AUDIO_SAIx_SCK_PIN | AUDIO_SAIx_SD_PIN | AUDIO_SAIx_MCK_PIN;
 80011e8:	2374      	movs	r3, #116	; 0x74
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_SAIx_MCK_SCK_SD_FS_AF;
 80011f8:	230d      	movs	r3, #13
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_SAIx_MCK_SCK_SD_FS_GPIO_PORT, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <HAL_SAI_MspInit+0xec>)
 8001204:	f001 ff70 	bl	80030e8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_SAIx_DMAx_CLK_ENABLE();
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 800120a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6493      	str	r3, [r2, #72]	; 0x48
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_SAI_MspInit+0xe8>)
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

  if (hsai->Instance == AUDIO_SAIx)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_SAI_MspInit+0xf0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d129      	bne.n	800127e <HAL_SAI_MspInit+0xce>
  {
    /* Configure the hDmaSai handle parameters */
    hDmaSai.Init.Request             = DMA_REQUEST_1;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
    hDmaSai.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001232:	2210      	movs	r2, #16
 8001234:	609a      	str	r2, [r3, #8]
    hDmaSai.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hDmaSai.Init.MemInc              = DMA_MINC_ENABLE;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	611a      	str	r2, [r3, #16]
    hDmaSai.Init.PeriphDataAlignment = AUDIO_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	615a      	str	r2, [r3, #20]
    hDmaSai.Init.MemDataAlignment    = AUDIO_SAIx_DMAx_MEM_DATA_SIZE;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	619a      	str	r2, [r3, #24]
    hDmaSai.Init.Mode                = DMA_NORMAL;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
    hDmaSai.Init.Priority            = DMA_PRIORITY_HIGH;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800125a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125e:	621a      	str	r2, [r3, #32]

    hDmaSai.Instance = AUDIO_SAIx_DMAx_CHANNEL;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_SAI_MspInit+0xf8>)
 8001264:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hDmaSai);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800126a:	66da      	str	r2, [r3, #108]	; 0x6c
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6293      	str	r3, [r2, #40]	; 0x28

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hDmaSai);
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 8001274:	f001 fdf6 	bl	8002e64 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hDmaSai);
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <HAL_SAI_MspInit+0xf4>)
 800127a:	f001 fd3b 	bl	8002cf4 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2105      	movs	r1, #5
 8001282:	2038      	movs	r0, #56	; 0x38
 8001284:	f001 fbf3 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_SAIx_DMAx_IRQ);
 8001288:	2038      	movs	r0, #56	; 0x38
 800128a:	f001 fc0c 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	48001000 	.word	0x48001000
 80012a0:	40015404 	.word	0x40015404
 80012a4:	20000304 	.word	0x20000304
 80012a8:	40020408 	.word	0x40020408

080012ac <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initializes the DFSDM channel MSP.
  * @param  hdfsdm_channel : DFSDM channel handle.
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_CLK_ENABLE();
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_DFSDM_ChannelMspInit+0x64>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN | AUDIO_DFSDMx_DMIC_DATIN_PIN;
 80012e4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_DMIC_DATIN_AF;
 80012f6:	2306      	movs	r3, #6
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <HAL_DFSDM_ChannelMspInit+0x68>)
 8001302:	f001 fef1 	bl	80030e8 <HAL_GPIO_Init>
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	48001000 	.word	0x48001000

08001318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Init+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x3c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f001 fb92 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f80f 	bl	8001358 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e001      	b.n	800134a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001346:	f7ff fc4f 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_InitTick+0x70>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_InitTick+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fb9d 	bl	8002ac2 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d809      	bhi.n	80013a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f001 fb67 	bl	8002a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_InitTick+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e004      	b.n	80013b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e001      	b.n	80013b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	2000034c 	.word	0x2000034c

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000034c 	.word	0x2000034c

08001410 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3360      	adds	r3, #96	; 0x60
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <LL_ADC_SetOffset+0x44>)
 800149a:	4013      	ands	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	03fff000 	.word	0x03fff000

080014c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3360      	adds	r3, #96	; 0x60
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3360      	adds	r3, #96	; 0x60
 80014fc:	461a      	mov	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3330      	adds	r3, #48	; 0x30
 8001558:	461a      	mov	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	211f      	movs	r1, #31
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	0e9b      	lsrs	r3, r3, #26
 8001580:	f003 011f 	and.w	r1, r3, #31
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3314      	adds	r3, #20
 80015d6:	461a      	mov	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0e5b      	lsrs	r3, r3, #25
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0d1b      	lsrs	r3, r3, #20
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	2107      	movs	r1, #7
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	0d1b      	lsrs	r3, r3, #20
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	43db      	mvns	r3, r3
 8001636:	401a      	ands	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0318 	and.w	r3, r3, #24
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001640:	40d9      	lsrs	r1, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	400b      	ands	r3, r1
 8001646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164a:	431a      	orrs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	0007ffff 	.word	0x0007ffff

08001664 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 031f 	and.w	r3, r3, #31
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6093      	str	r3, [r2, #8]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d4:	d101      	bne.n	80016da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001724:	d101      	bne.n	800172a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <LL_ADC_IsEnabled+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_ADC_IsEnabled+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b04      	cmp	r3, #4
 8001770:	d101      	bne.n	8001776 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b08      	cmp	r3, #8
 8001796:	d101      	bne.n	800179c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e136      	b.n	8001a34 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fa2b 	bl	8000c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff67 	bl	80016c0 <LL_ADC_IsDeepPowerDownEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff4d 	bl	800169c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff82 	bl	8001710 <LL_ADC_IsInternalRegulatorEnabled>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff66 	bl	80016e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800181c:	4b87      	ldr	r3, [pc, #540]	; (8001a3c <HAL_ADC_Init+0x290>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	4a87      	ldr	r2, [pc, #540]	; (8001a40 <HAL_ADC_Init+0x294>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001830:	e002      	b.n	8001838 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff64 	bl	8001710 <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff75 	bl	800175e <LL_ADC_REG_IsConversionOngoing>
 8001874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 80cf 	bne.w	8001a22 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80cb 	bne.w	8001a22 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001894:	f043 0202 	orr.w	r2, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff49 	bl	8001738 <LL_ADC_IsEnabled>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d115      	bne.n	80018d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ac:	4865      	ldr	r0, [pc, #404]	; (8001a44 <HAL_ADC_Init+0x298>)
 80018ae:	f7ff ff43 	bl	8001738 <LL_ADC_IsEnabled>
 80018b2:	4604      	mov	r4, r0
 80018b4:	4864      	ldr	r0, [pc, #400]	; (8001a48 <HAL_ADC_Init+0x29c>)
 80018b6:	f7ff ff3f 	bl	8001738 <LL_ADC_IsEnabled>
 80018ba:	4603      	mov	r3, r0
 80018bc:	431c      	orrs	r4, r3
 80018be:	4863      	ldr	r0, [pc, #396]	; (8001a4c <HAL_ADC_Init+0x2a0>)
 80018c0:	f7ff ff3a 	bl	8001738 <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	485f      	ldr	r0, [pc, #380]	; (8001a50 <HAL_ADC_Init+0x2a4>)
 80018d4:	f7ff fd9c 	bl	8001410 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7e5b      	ldrb	r3, [r3, #25]
 80018dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	045b      	lsls	r3, r3, #17
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_ADC_Init+0x2a8>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	430b      	orrs	r3, r1
 8001942:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff08 	bl	800175e <LL_ADC_REG_IsConversionOngoing>
 800194e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff15 	bl	8001784 <LL_ADC_INJ_IsConversionOngoing>
 800195a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d13d      	bne.n	80019de <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d13a      	bne.n	80019de <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800196c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001974:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001984:	f023 0302 	bic.w	r3, r3, #2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	69b9      	ldr	r1, [r7, #24]
 800198e:	430b      	orrs	r3, r1
 8001990:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001998:	2b01      	cmp	r3, #1
 800199a:	d118      	bne.n	80019ce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019be:	430a      	orrs	r2, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	e007      	b.n	80019de <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10c      	bne.n	8001a00 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f023 010f 	bic.w	r1, r3, #15
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
 80019fe:	e007      	b.n	8001a10 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020f 	bic.w	r2, r2, #15
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	f023 0303 	bic.w	r3, r3, #3
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a20:	e007      	b.n	8001a32 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3724      	adds	r7, #36	; 0x24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	053e2d63 	.word	0x053e2d63
 8001a44:	50040000 	.word	0x50040000
 8001a48:	50040100 	.word	0x50040100
 8001a4c:	50040200 	.word	0x50040200
 8001a50:	50040300 	.word	0x50040300
 8001a54:	fff0c007 	.word	0xfff0c007

08001a58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a74:	4882      	ldr	r0, [pc, #520]	; (8001c80 <HAL_ADC_IRQHandler+0x228>)
 8001a76:	f7ff fdf5 	bl	8001664 <LL_ADC_GetMultimode>
 8001a7a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d017      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x5e>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d012      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fe4b 	bl	8002744 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_IRQHandler+0x72>
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8083 	beq.w	8001bdc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d07d      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fd10 	bl	8001522 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d062      	beq.n	8001bce <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_ADC_IRQHandler+0x22c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d002      	beq.n	8001b18 <HAL_ADC_IRQHandler+0xc0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e000      	b.n	8001b1a <HAL_ADC_IRQHandler+0xc2>
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_ADC_IRQHandler+0x230>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d008      	beq.n	8001b34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d002      	beq.n	8001b34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d104      	bne.n	8001b3e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	e00c      	b.n	8001b58 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_ADC_IRQHandler+0x22c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_IRQHandler+0xf6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_IRQHandler+0xf8>
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <HAL_ADC_IRQHandler+0x230>)
 8001b50:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d135      	bne.n	8001bce <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d12e      	bne.n	8001bce <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdf2 	bl	800175e <LL_ADC_REG_IsConversionOngoing>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d11a      	bne.n	8001bb6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 020c 	bic.w	r2, r2, #12
 8001b8e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d112      	bne.n	8001bce <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
 8001bb4:	e00b      	b.n	8001bce <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f95c 	bl	8001e8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_ADC_IRQHandler+0x198>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 809f 	beq.w	8001d3a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8099 	beq.w	8001d3a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fcbb 	bl	80015a0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c2a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fc76 	bl	8001522 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c36:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_ADC_IRQHandler+0x22c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d002      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x1f0>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <HAL_ADC_IRQHandler+0x1f2>
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_ADC_IRQHandler+0x230>)
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d008      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d002      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b07      	cmp	r3, #7
 8001c62:	d104      	bne.n	8001c6e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	e013      	b.n	8001c96 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_ADC_IRQHandler+0x22c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_ADC_IRQHandler+0x234>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_ADC_IRQHandler+0x236>
 8001c7e:	bf00      	nop
 8001c80:	50040300 	.word	0x50040300
 8001c84:	50040100 	.word	0x50040100
 8001c88:	50040000 	.word	0x50040000
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <HAL_ADC_IRQHandler+0x42c>)
 8001c8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d047      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x25e>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03f      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d13a      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d133      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12e      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fd56 	bl	8001784 <LL_ADC_INJ_IsConversionOngoing>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11a      	bne.n	8001d14 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d112      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
 8001d12:	e00b      	b.n	8001d2c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fce1 	bl	80026f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2260      	movs	r2, #96	; 0x60
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d011      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x310>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8a0 	bl	8001ea0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d012      	beq.n	8001d98 <HAL_ADC_IRQHandler+0x340>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fcc7 	bl	800271c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x370>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fcb9 	bl	8002730 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d036      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x3e8>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d031      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e014      	b.n	8001e14 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001df0:	4825      	ldr	r0, [pc, #148]	; (8001e88 <HAL_ADC_IRQHandler+0x430>)
 8001df2:	f7ff fc45 	bl	8001680 <LL_ADC_GetMultiDMATransfer>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	e008      	b.n	8001e14 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e10:	2301      	movs	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f83e 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d018      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x424>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	f043 0208 	orr.w	r2, r3, #8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e74:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fc46 	bl	8002708 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	50040000 	.word	0x50040000
 8001e88:	50040300 	.word	0x50040300

08001e8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b6      	sub	sp, #216	; 0xd8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x22>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e3c7      	b.n	800267a <HAL_ADC_ConfigChannel+0x7b2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc31 	bl	800175e <LL_ADC_REG_IsConversionOngoing>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 83a8 	bne.w	8002654 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3b02      	subs	r3, #2
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d81b      	bhi.n	8001f4e <HAL_ADC_ConfigChannel+0x86>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_ADC_ConfigChannel+0x54>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f35 	.word	0x08001f35
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f45 	.word	0x08001f45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	605a      	str	r2, [r3, #4]
          break;
 8001f32:	e011      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2212      	movs	r2, #18
 8001f38:	605a      	str	r2, [r3, #4]
          break;
 8001f3a:	e00d      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2218      	movs	r2, #24
 8001f40:	605a      	str	r2, [r3, #4]
          break;
 8001f42:	e009      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	605a      	str	r2, [r3, #4]
          break;
 8001f4c:	e004      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2206      	movs	r2, #6
 8001f52:	605a      	str	r2, [r3, #4]
          break;
 8001f54:	e000      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f7ff faef 	bl	8001548 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fbf5 	bl	800175e <LL_ADC_REG_IsConversionOngoing>
 8001f74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc01 	bl	8001784 <LL_ADC_INJ_IsConversionOngoing>
 8001f82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 81a6 	bne.w	80022dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 81a1 	bne.w	80022dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f7ff fb0d 	bl	80015c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fde:	f7ff fa4b 	bl	8001478 <LL_ADC_SetOffset>
 8001fe2:	e17b      	b.n	80022dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fa68 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x148>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fa5d 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	f003 021f 	and.w	r2, r3, #31
 800200e:	e01e      	b.n	800204e <HAL_ADC_ConfigChannel+0x186>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa52 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e004      	b.n	800204c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x19e>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	e018      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800207a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800207e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800208a:	2320      	movs	r3, #32
 800208c:	e004      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800208e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fa21 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fa05 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x20e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f9fa 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	e01e      	b.n	8002114 <HAL_ADC_ConfigChannel+0x24c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9ef 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e004      	b.n	8002112 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_ADC_ConfigChannel+0x264>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	e018      	b.n	800215e <HAL_ADC_ConfigChannel+0x296>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e004      	b.n	800215e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800215e:	429a      	cmp	r2, r3
 8002160:	d106      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	2101      	movs	r1, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f9be 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2102      	movs	r1, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9a2 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10a      	bne.n	800219c <HAL_ADC_ConfigChannel+0x2d4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2102      	movs	r1, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff f997 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	0e9b      	lsrs	r3, r3, #26
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	e01e      	b.n	80021da <HAL_ADC_ConfigChannel+0x312>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f98c 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x32a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	e016      	b.n	8002220 <HAL_ADC_ConfigChannel+0x358>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800220a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e004      	b.n	8002220 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002220:	429a      	cmp	r2, r3
 8002222:	d106      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f95d 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2103      	movs	r1, #3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f941 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <HAL_ADC_ConfigChannel+0x396>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2103      	movs	r1, #3
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f936 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	e017      	b.n	800228e <HAL_ADC_ConfigChannel+0x3c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2103      	movs	r1, #3
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f92b 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002278:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800227a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x3de>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	e011      	b.n	80022ca <HAL_ADC_ConfigChannel+0x402>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80022c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2103      	movs	r1, #3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f908 	bl	80014ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa29 	bl	8001738 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 813f 	bne.w	800256c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f7ff f98e 	bl	800161c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a8e      	ldr	r2, [pc, #568]	; (8002540 <HAL_ADC_ConfigChannel+0x678>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 8130 	bne.w	800256c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x46c>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2b09      	cmp	r3, #9
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e019      	b.n	8002368 <HAL_ADC_ConfigChannel+0x4a0>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002344:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e003      	b.n	8002358 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2b09      	cmp	r3, #9
 8002360:	bf94      	ite	ls
 8002362:	2301      	movls	r3, #1
 8002364:	2300      	movhi	r3, #0
 8002366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	2b00      	cmp	r3, #0
 800236a:	d079      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x4c0>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	069b      	lsls	r3, r3, #26
 8002382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002386:	e015      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4ec>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002398:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x50c>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	e017      	b.n	8002404 <HAL_ADC_ConfigChannel+0x53c>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x562>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	051b      	lsls	r3, r3, #20
 8002428:	e018      	b.n	800245c <HAL_ADC_ConfigChannel+0x594>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
 800245e:	e080      	b.n	8002562 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_ADC_ConfigChannel+0x5b4>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	e015      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x5e0>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x600>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	e017      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x630>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	61fb      	str	r3, [r7, #28]
  return result;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x65c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	3b1e      	subs	r3, #30
 800251c:	051b      	lsls	r3, r3, #20
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002522:	e01d      	b.n	8002560 <HAL_ADC_ConfigChannel+0x698>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	613b      	str	r3, [r7, #16]
  return result;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e005      	b.n	800254c <HAL_ADC_ConfigChannel+0x684>
 8002540:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	3b1e      	subs	r3, #30
 800255a:	051b      	lsls	r3, r3, #20
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	430b      	orrs	r3, r1
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	4619      	mov	r1, r3
 8002568:	f7ff f82d 	bl	80015c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b44      	ldr	r3, [pc, #272]	; (8002684 <HAL_ADC_ConfigChannel+0x7bc>)
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d07a      	beq.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002578:	4843      	ldr	r0, [pc, #268]	; (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 800257a:	f7fe ff6f 	bl	800145c <LL_ADC_GetCommonPathInternalCh>
 800257e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a41      	ldr	r2, [pc, #260]	; (800268c <HAL_ADC_ConfigChannel+0x7c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d12c      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800258c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d126      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_ADC_ConfigChannel+0x7c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x6e4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <HAL_ADC_ConfigChannel+0x7cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d15d      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b4:	4619      	mov	r1, r3
 80025b6:	4834      	ldr	r0, [pc, #208]	; (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 80025b8:	f7fe ff3d 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025bc:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_ADC_ConfigChannel+0x7d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	4a36      	ldr	r2, [pc, #216]	; (800269c <HAL_ADC_ConfigChannel+0x7d4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025d6:	e002      	b.n	80025de <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3b01      	subs	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f9      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e4:	e040      	b.n	8002668 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d118      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x75a>
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d112      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_ADC_ConfigChannel+0x7c8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x748>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_ADC_ConfigChannel+0x7cc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d12d      	bne.n	800266c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002618:	4619      	mov	r1, r3
 800261a:	481b      	ldr	r0, [pc, #108]	; (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 800261c:	f7fe ff0b 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002620:	e024      	b.n	800266c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d120      	bne.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11a      	bne.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_ADC_ConfigChannel+0x7c8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d115      	bne.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264a:	4619      	mov	r1, r3
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <HAL_ADC_ConfigChannel+0x7c0>)
 800264e:	f7fe fef2 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
 8002652:	e00c      	b.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002666:	e002      	b.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	bf00      	nop
 800266a:	e000      	b.n	800266e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800266c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002676:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800267a:	4618      	mov	r0, r3
 800267c:	37d8      	adds	r7, #216	; 0xd8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	80080000 	.word	0x80080000
 8002688:	50040300 	.word	0x50040300
 800268c:	c7520000 	.word	0xc7520000
 8002690:	50040000 	.word	0x50040000
 8002694:	50040200 	.word	0x50040200
 8002698:	20000000 	.word	0x20000000
 800269c:	053e2d63 	.word	0x053e2d63
 80026a0:	cb840000 	.word	0xcb840000
 80026a4:	80000001 	.word	0x80000001

080026a8 <LL_ADC_IsEnabled>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <LL_ADC_IsEnabled+0x18>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <LL_ADC_IsEnabled+0x1a>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_REG_IsConversionOngoing>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b09f      	sub	sp, #124	; 0x7c
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002772:	2302      	movs	r3, #2
 8002774:	e093      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800277e:	2300      	movs	r3, #0
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002782:	2300      	movs	r3, #0
 8002784:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d102      	bne.n	8002796 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	e001      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e072      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff87 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 80027c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff81 	bl	80026ce <LL_ADC_REG_IsConversionOngoing>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d154      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d151      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80027da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d02c      	beq.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f6:	035b      	lsls	r3, r3, #13
 80027f8:	430b      	orrs	r3, r1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002800:	4829      	ldr	r0, [pc, #164]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002802:	f7ff ff51 	bl	80026a8 <LL_ADC_IsEnabled>
 8002806:	4604      	mov	r4, r0
 8002808:	4828      	ldr	r0, [pc, #160]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800280a:	f7ff ff4d 	bl	80026a8 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	431c      	orrs	r4, r3
 8002812:	4828      	ldr	r0, [pc, #160]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002814:	f7ff ff48 	bl	80026a8 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d137      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002828:	f023 030f 	bic.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6892      	ldr	r2, [r2, #8]
 8002834:	430a      	orrs	r2, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800283c:	e028      	b.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002848:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284a:	4817      	ldr	r0, [pc, #92]	; (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800284c:	f7ff ff2c 	bl	80026a8 <LL_ADC_IsEnabled>
 8002850:	4604      	mov	r4, r0
 8002852:	4816      	ldr	r0, [pc, #88]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002854:	f7ff ff28 	bl	80026a8 <LL_ADC_IsEnabled>
 8002858:	4603      	mov	r3, r0
 800285a:	431c      	orrs	r4, r3
 800285c:	4815      	ldr	r0, [pc, #84]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800285e:	f7ff ff23 	bl	80026a8 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	4323      	orrs	r3, r4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d112      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002872:	f023 030f 	bic.w	r3, r3, #15
 8002876:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002878:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800287a:	e009      	b.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800288e:	e000      	b.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800289a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800289e:	4618      	mov	r0, r3
 80028a0:	377c      	adds	r7, #124	; 0x7c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	50040000 	.word	0x50040000
 80028ac:	50040100 	.word	0x50040100
 80028b0:	50040300 	.word	0x50040300
 80028b4:	50040200 	.word	0x50040200

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0ac      	b.n	8002c48 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f8b2 	bl	8002c5c <DFSDM_GetChannelFromInstance>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a55      	ldr	r2, [pc, #340]	; (8002c50 <HAL_DFSDM_ChannelInit+0x174>)
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e09f      	b.n	8002c48 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe fbcf 	bl	80012ac <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_DFSDM_ChannelInit+0x178>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_DFSDM_ChannelInit+0x178>)
 8002b16:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002b18:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_DFSDM_ChannelInit+0x178>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d125      	bne.n	8002b6c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b20:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b2c:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4948      	ldr	r1, [pc, #288]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b44:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b4e:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	493f      	ldr	r1, [pc, #252]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b7a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b8a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b90:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020f 	bic.w	r2, r2, #15
 8002ba8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002bd0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 0207 	and.w	r2, r2, #7
 8002bfc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c28:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f810 	bl	8002c5c <DFSDM_GetChannelFromInstance>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4904      	ldr	r1, [pc, #16]	; (8002c50 <HAL_DFSDM_ChannelInit+0x174>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000354 	.word	0x20000354
 8002c54:	20000350 	.word	0x20000350
 8002c58:	40016000 	.word	0x40016000

08002c5c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e02b      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <DFSDM_GetChannelFromInstance+0x80>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d102      	bne.n	8002c80 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e024      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <DFSDM_GetChannelFromInstance+0x84>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d102      	bne.n	8002c8e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e01d      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <DFSDM_GetChannelFromInstance+0x88>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d102      	bne.n	8002c9c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c96:	2304      	movs	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e016      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d102      	bne.n	8002caa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002ca4:	2305      	movs	r3, #5
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e00f      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <DFSDM_GetChannelFromInstance+0x90>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d102      	bne.n	8002cb8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e008      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <DFSDM_GetChannelFromInstance+0x94>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40016000 	.word	0x40016000
 8002cdc:	40016020 	.word	0x40016020
 8002ce0:	40016040 	.word	0x40016040
 8002ce4:	40016080 	.word	0x40016080
 8002ce8:	400160a0 	.word	0x400160a0
 8002cec:	400160c0 	.word	0x400160c0
 8002cf0:	400160e0 	.word	0x400160e0

08002cf4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e098      	b.n	8002e38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_DMA_Init+0x150>)
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d80f      	bhi.n	8002d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_DMA_Init+0x154>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a4b      	ldr	r2, [pc, #300]	; (8002e4c <HAL_DMA_Init+0x158>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	009a      	lsls	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_DMA_Init+0x15c>)
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d30:	e00e      	b.n	8002d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_DMA_Init+0x160>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_DMA_Init+0x158>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_DMA_Init+0x164>)
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002daa:	d039      	beq.n	8002e20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <HAL_DMA_Init+0x15c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d11a      	bne.n	8002dec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_DMA_Init+0x168>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 031c 	and.w	r3, r3, #28
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4924      	ldr	r1, [pc, #144]	; (8002e5c <HAL_DMA_Init+0x168>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_DMA_Init+0x168>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f003 031c 	and.w	r3, r3, #28
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	491d      	ldr	r1, [pc, #116]	; (8002e5c <HAL_DMA_Init+0x168>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
 8002dea:	e019      	b.n	8002e20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_DMA_Init+0x16c>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 031c 	and.w	r3, r3, #28
 8002df8:	210f      	movs	r1, #15
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4917      	ldr	r1, [pc, #92]	; (8002e60 <HAL_DMA_Init+0x16c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_DMA_Init+0x16c>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f003 031c 	and.w	r3, r3, #28
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	4911      	ldr	r1, [pc, #68]	; (8002e60 <HAL_DMA_Init+0x16c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40020407 	.word	0x40020407
 8002e48:	bffdfff8 	.word	0xbffdfff8
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	40020000 	.word	0x40020000
 8002e54:	bffdfbf8 	.word	0xbffdfbf8
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	400200a8 	.word	0x400200a8
 8002e60:	400204a8 	.word	0x400204a8

08002e64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e072      	b.n	8002f5c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_DMA_DeInit+0x104>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d80f      	bhi.n	8002eb2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_DMA_DeInit+0x108>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <HAL_DMA_DeInit+0x10c>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	009a      	lsls	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_DMA_DeInit+0x110>)
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb0:	e00e      	b.n	8002ed0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_DMA_DeInit+0x114>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <HAL_DMA_DeInit+0x10c>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_DMA_DeInit+0x118>)
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f003 021c 	and.w	r2, r3, #28
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_DMA_DeInit+0x110>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10d      	bne.n	8002f12 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_DMA_DeInit+0x11c>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 031c 	and.w	r3, r3, #28
 8002f02:	210f      	movs	r1, #15
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	491d      	ldr	r1, [pc, #116]	; (8002f80 <HAL_DMA_DeInit+0x11c>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e00c      	b.n	8002f2c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_DMA_DeInit+0x120>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f003 031c 	and.w	r3, r3, #28
 8002f1e:	210f      	movs	r1, #15
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4917      	ldr	r1, [pc, #92]	; (8002f84 <HAL_DMA_DeInit+0x120>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40020407 	.word	0x40020407
 8002f6c:	bffdfff8 	.word	0xbffdfff8
 8002f70:	cccccccd 	.word	0xcccccccd
 8002f74:	40020000 	.word	0x40020000
 8002f78:	bffdfbf8 	.word	0xbffdfbf8
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	400200a8 	.word	0x400200a8
 8002f84:	400204a8 	.word	0x400204a8

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	f003 031c 	and.w	r3, r3, #28
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d026      	beq.n	8003002 <HAL_DMA_IRQHandler+0x7a>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d021      	beq.n	8003002 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f003 021c 	and.w	r2, r3, #28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2104      	movs	r1, #4
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d071      	beq.n	80030dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003000:	e06c      	b.n	80030dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 031c 	and.w	r3, r3, #28
 800300a:	2202      	movs	r2, #2
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02e      	beq.n	8003074 <HAL_DMA_IRQHandler+0xec>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d029      	beq.n	8003074 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 020a 	bic.w	r2, r2, #10
 800303c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f003 021c 	and.w	r2, r3, #28
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2102      	movs	r1, #2
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d038      	beq.n	80030dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003072:	e033      	b.n	80030dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f003 031c 	and.w	r3, r3, #28
 800307c:	2208      	movs	r2, #8
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02a      	beq.n	80030de <HAL_DMA_IRQHandler+0x156>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d025      	beq.n	80030de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 020e 	bic.w	r2, r2, #14
 80030a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 021c 	and.w	r2, r3, #28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
}
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f6:	e17f      	b.n	80033f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8171 	beq.w	80033f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x40>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b03      	cmp	r3, #3
 8003194:	d118      	bne.n	80031c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800319c:	2201      	movs	r2, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f003 0201 	and.w	r2, r3, #1
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d017      	beq.n	8003204 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d123      	bne.n	8003258 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80ac 	beq.w	80033f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <HAL_GPIO_Init+0x330>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6613      	str	r3, [r2, #96]	; 0x60
 80032a6:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b2:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_GPIO_Init+0x334>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x242>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x338>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x33c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_GPIO_Init+0x340>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x344>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <HAL_GPIO_Init+0x348>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_GPIO_Init+0x34c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x22a>
 800330e:	2306      	movs	r3, #6
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003312:	2307      	movs	r3, #7
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x244>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x244>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x244>
 800332a:	2300      	movs	r3, #0
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333c:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_GPIO_Init+0x334>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_GPIO_Init+0x350>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800336e:	4a32      	ldr	r2, [pc, #200]	; (8003438 <HAL_GPIO_Init+0x350>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003374:	4b30      	ldr	r3, [pc, #192]	; (8003438 <HAL_GPIO_Init+0x350>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_GPIO_Init+0x350>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <HAL_GPIO_Init+0x350>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_GPIO_Init+0x350>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_GPIO_Init+0x350>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <HAL_GPIO_Init+0x350>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	f47f ae78 	bne.w	80030f8 <HAL_GPIO_Init+0x10>
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40010000 	.word	0x40010000
 8003420:	48000400 	.word	0x48000400
 8003424:	48000800 	.word	0x48000800
 8003428:	48000c00 	.word	0x48000c00
 800342c:	48001000 	.word	0x48001000
 8003430:	48001400 	.word	0x48001400
 8003434:	48001800 	.word	0x48001800
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e081      	b.n	8003582 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fc12 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	e006      	b.n	80034f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d104      	bne.n	8003506 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b20      	cmp	r3, #32
 800359e:	d138      	bne.n	8003612 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e032      	b.n	8003614 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2224      	movs	r2, #36	; 0x24
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d139      	bne.n	80036aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003640:	2302      	movs	r3, #2
 8003642:	e033      	b.n	80036ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	; 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003672:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0af      	b.n	800382a <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fb4a 	bl	8000d78 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e00a      	b.n	8003718 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3304      	adds	r3, #4
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d9f1      	bls.n	8003702 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0204 	orr.w	r2, r2, #4
 800372c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_LCD_Init+0x17c>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6851      	ldr	r1, [r2, #4]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	69d2      	ldr	r2, [r2, #28]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6a12      	ldr	r2, [r2, #32]
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6992      	ldr	r2, [r2, #24]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	430b      	orrs	r3, r1
 800376c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f862 	bl	8003838 <LCD_WaitForSynchro>
 8003774:	4603      	mov	r3, r0
 8003776:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_LCD_Init+0xca>
  {
    return status;
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	e053      	b.n	800382a <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80037ba:	f7fd fe1d 	bl	80013f8 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80037c0:	e00c      	b.n	80037dc <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80037c2:	f7fd fe19 	bl	80013f8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d0:	d904      	bls.n	80037dc <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2208      	movs	r2, #8
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e026      	b.n	800382a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d1eb      	bne.n	80037c2 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80037ea:	f7fd fe05 	bl	80013f8 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80037f0:	e00c      	b.n	800380c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80037f2:	f7fd fe01 	bl	80013f8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003800:	d904      	bls.n	800380c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2210      	movs	r2, #16
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e00e      	b.n	800382a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	d1eb      	bne.n	80037f2 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	fc00000e 	.word	0xfc00000e

08003838 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003840:	f7fd fdda 	bl	80013f8 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003846:	e00c      	b.n	8003862 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003848:	f7fd fdd6 	bl	80013f8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003856:	d904      	bls.n	8003862 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e007      	b.n	8003872 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b20      	cmp	r3, #32
 800386e:	d1eb      	bne.n	8003848 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_PWREx_GetVoltageRange+0x18>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40007000 	.word	0x40007000

08003898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a6:	d130      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d038      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2232      	movs	r2, #50	; 0x32
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038dc:	e002      	b.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f0:	d102      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f2      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d110      	bne.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d007      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003920:	4a05      	ldr	r2, [pc, #20]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000
 800393c:	20000000 	.word	0x20000000
 8003940:	431bde83 	.word	0x431bde83

08003944 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7fd fd54 	bl	80013f8 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e063      	b.n	8003a24 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd facf 	bl	8000f14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003976:	f241 3188 	movw	r1, #5000	; 0x1388
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f858 	bl	8003a30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2120      	movs	r1, #32
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f850 	bl	8003a4c <QSPI_WaitFlagStateUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d131      	bne.n	8003a1a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039c0:	f023 0310 	bic.w	r3, r3, #16
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6852      	ldr	r2, [r2, #4]
 80039c8:	0611      	lsls	r1, r2, #24
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68d2      	ldr	r2, [r2, #12]
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_QSPI_Init+0xe8>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6912      	ldr	r2, [r2, #16]
 80039e6:	0411      	lsls	r1, r2, #16
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6952      	ldr	r2, [r2, #20]
 80039ec:	4311      	orrs	r1, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6992      	ldr	r2, [r2, #24]
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003a22:	7afb      	ldrb	r3, [r7, #11]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	ffe0f8fe 	.word	0xffe0f8fe

08003a30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a5c:	e01a      	b.n	8003a94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d016      	beq.n	8003a94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fd fcc7 	bl	80013f8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00e      	b.n	8003ab2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1d6      	bne.n	8003a5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e3d8      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b97      	ldr	r3, [pc, #604]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad8:	4b94      	ldr	r3, [pc, #592]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80e4 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4a>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	f040 808b 	bne.w	8003c14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 8087 	bne.w	8003c14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e3b0      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_RCC_OscConfig+0x7c>
 8003b2e:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b36:	e005      	b.n	8003b44 <HAL_RCC_OscConfig+0x88>
 8003b38:	4b7c      	ldr	r3, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d223      	bcs.n	8003b90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fd43 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e391      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5c:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b62:	f043 0308 	orr.w	r3, r3, #8
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	496d      	ldr	r1, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	4968      	ldr	r1, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
 8003b8e:	e025      	b.n	8003bdc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b90:	4b66      	ldr	r3, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b96:	f043 0308 	orr.w	r3, r3, #8
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4960      	ldr	r1, [pc, #384]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	495b      	ldr	r1, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fd03 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e351      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bdc:	f000 fc38 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	4950      	ldr	r1, [pc, #320]	; (8003d30 <HAL_RCC_OscConfig+0x274>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	4a4e      	ldr	r2, [pc, #312]	; (8003d34 <HAL_RCC_OscConfig+0x278>)
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bfc:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fba9 	bl	8001358 <HAL_InitTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d052      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	e335      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d032      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c1c:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a42      	ldr	r2, [pc, #264]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c28:	f7fd fbe6 	bl	80013f8 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c30:	f7fd fbe2 	bl	80013f8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e31e      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c42:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a36      	ldr	r2, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4931      	ldr	r1, [pc, #196]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	492c      	ldr	r1, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e01a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fbb3 	bl	80013f8 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c96:	f7fd fbaf 	bl	80013f8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e2eb      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x1da>
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d074      	beq.n	8003dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x21a>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d10e      	bne.n	8003cee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d10b      	bne.n	8003cee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d064      	beq.n	8003dac <HAL_RCC_OscConfig+0x2f0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d160      	bne.n	8003dac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e2c8      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x24a>
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e026      	b.n	8003d54 <HAL_RCC_OscConfig+0x298>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0e:	d115      	bne.n	8003d3c <HAL_RCC_OscConfig+0x280>
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a02      	ldr	r2, [pc, #8]	; (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e014      	b.n	8003d54 <HAL_RCC_OscConfig+0x298>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08006c24 	.word	0x08006c24
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	4ba0      	ldr	r3, [pc, #640]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a9f      	ldr	r2, [pc, #636]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b9d      	ldr	r3, [pc, #628]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a9c      	ldr	r2, [pc, #624]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fb4c 	bl	80013f8 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fb48 	bl	80013f8 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e284      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d76:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2a8>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd fb38 	bl	80013f8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fb34 	bl	80013f8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e270      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d9e:	4b88      	ldr	r3, [pc, #544]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x2d0>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d060      	beq.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_OscConfig+0x310>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d119      	bne.n	8003dfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d116      	bne.n	8003dfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dcc:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_OscConfig+0x328>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e24d      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	4973      	ldr	r1, [pc, #460]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df8:	e040      	b.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d023      	beq.n	8003e4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e02:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6e      	ldr	r2, [pc, #440]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd faf3 	bl	80013f8 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd faef 	bl	80013f8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e22b      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e28:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	495f      	ldr	r1, [pc, #380]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
 8003e48:	e018      	b.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fd facf 	bl	80013f8 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5e:	f7fd facb 	bl	80013f8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e207      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d03c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01c      	beq.n	8003eca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e96:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd faaa 	bl	80013f8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fd faa6 	bl	80013f8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1e2      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ef      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x3ec>
 8003ec8:	e01b      	b.n	8003f02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fd fa8d 	bl	80013f8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fd fa89 	bl	80013f8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e1c5      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ef      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a6 	beq.w	800405c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f14:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_OscConfig+0x508>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d118      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_OscConfig+0x508>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x508>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f54:	f7fd fa50 	bl	80013f8 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fd fa4c 	bl	80013f8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e188      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x508>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4d8>
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f92:	e029      	b.n	8003fe8 <HAL_RCC_OscConfig+0x52c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x50c>
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	4a03      	ldr	r2, [pc, #12]	; (8003fc0 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fbc:	e014      	b.n	8003fe8 <HAL_RCC_OscConfig+0x52c>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	4b91      	ldr	r3, [pc, #580]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	4a90      	ldr	r2, [pc, #576]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd8:	4b8d      	ldr	r3, [pc, #564]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a8c      	ldr	r2, [pc, #560]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d016      	beq.n	800401e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fd fa02 	bl	80013f8 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f9fe 	bl	80013f8 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e138      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400e:	4b80      	ldr	r3, [pc, #512]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ed      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x53c>
 800401c:	e015      	b.n	800404a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401e:	f7fd f9eb 	bl	80013f8 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fd f9e7 	bl	80013f8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e121      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800403c:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ed      	bne.n	8004026 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004050:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 810c 	beq.w	800427e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	2b02      	cmp	r3, #2
 800406c:	f040 80d4 	bne.w	8004218 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004070:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	429a      	cmp	r2, r3
 8004082:	d130      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	3b01      	subs	r3, #1
 8004090:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d127      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d11f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b0:	2a07      	cmp	r2, #7
 80040b2:	bf14      	ite	ne
 80040b4:	2201      	movne	r2, #1
 80040b6:	2200      	moveq	r2, #0
 80040b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d113      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d06e      	beq.n	80041c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d069      	beq.n	80041c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040ec:	4b48      	ldr	r3, [pc, #288]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0bb      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004108:	4b41      	ldr	r3, [pc, #260]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a40      	ldr	r2, [pc, #256]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004114:	f7fd f970 	bl	80013f8 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fd f96c 	bl	80013f8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0a8      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413a:	4b35      	ldr	r3, [pc, #212]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_RCC_OscConfig+0x758>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800414a:	3a01      	subs	r2, #1
 800414c:	0112      	lsls	r2, r2, #4
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004154:	0212      	lsls	r2, r2, #8
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800415c:	0852      	lsrs	r2, r2, #1
 800415e:	3a01      	subs	r2, #1
 8004160:	0552      	lsls	r2, r2, #21
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004168:	0852      	lsrs	r2, r2, #1
 800416a:	3a01      	subs	r2, #1
 800416c:	0652      	lsls	r2, r2, #25
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004174:	0912      	lsrs	r2, r2, #4
 8004176:	0452      	lsls	r2, r2, #17
 8004178:	430a      	orrs	r2, r1
 800417a:	4925      	ldr	r1, [pc, #148]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800417c:	4313      	orrs	r3, r2
 800417e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004198:	f7fd f92e 	bl	80013f8 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd f92a 	bl	80013f8 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e066      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041be:	e05e      	b.n	800427e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e05d      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d156      	bne.n	800427e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 80041e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e8:	f7fd f906 	bl	80013f8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd f902 	bl	80013f8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e03e      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004202:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_RCC_OscConfig+0x754>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x734>
 800420e:	e036      	b.n	800427e <HAL_RCC_OscConfig+0x7c2>
 8004210:	40021000 	.word	0x40021000
 8004214:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d02d      	beq.n	800427a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 8004224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004228:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 800423c:	f023 0303 	bic.w	r3, r3, #3
 8004240:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a10      	ldr	r2, [pc, #64]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 8004248:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800424c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004250:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd f8d1 	bl	80013f8 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fd f8cd 	bl	80013f8 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e009      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCC_OscConfig+0x7cc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x79e>
 8004278:	e001      	b.n	800427e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0c8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d910      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 0207 	bic.w	r2, r3, #7
 80042b6:	4961      	ldr	r1, [pc, #388]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0b0      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d04c      	beq.n	8004376 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e4:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d121      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e09e      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d107      	bne.n	800430c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e092      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e086      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b46      	ldr	r3, [pc, #280]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e07e      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	493f      	ldr	r1, [pc, #252]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fd f857 	bl	80013f8 <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434c:	e00a      	b.n	8004364 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434e:	f7fd f853 	bl	80013f8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e066      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 020c 	and.w	r2, r3, #12
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	429a      	cmp	r2, r3
 8004374:	d1eb      	bne.n	800434e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	492c      	ldr	r1, [pc, #176]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d210      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 0207 	bic.w	r2, r3, #7
 80043aa:	4924      	ldr	r1, [pc, #144]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1b0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e036      	b.n	8004432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4918      	ldr	r1, [pc, #96]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4910      	ldr	r1, [pc, #64]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004402:	f000 f825 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RCC_ClockConfig+0x1b4>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	490c      	ldr	r1, [pc, #48]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc ff96 	bl	8001358 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004430:	7afb      	ldrb	r3, [r7, #11]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	08006c24 	.word	0x08006c24
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d121      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11e      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004490:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e005      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ac:	4a2b      	ldr	r2, [pc, #172]	; (800455c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e004      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b23      	ldr	r3, [pc, #140]	; (8004564 <HAL_RCC_GetSysClockFreq+0x114>)
 80044d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d134      	bne.n	8004548 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044de:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d003      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0xac>
 80044f4:	e005      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044f8:	617b      	str	r3, [r7, #20]
      break;
 80044fa:	e005      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_GetSysClockFreq+0x114>)
 80044fe:	617b      	str	r3, [r7, #20]
      break;
 8004500:	e002      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	617b      	str	r3, [r7, #20]
      break;
 8004506:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	3301      	adds	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	fb03 f202 	mul.w	r2, r3, r2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0e5b      	lsrs	r3, r3, #25
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	3301      	adds	r3, #1
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004548:	69bb      	ldr	r3, [r7, #24]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	08006c3c 	.word	0x08006c3c
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000000 	.word	0x20000000

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004584:	f7ff fff0 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08006c34 	.word	0x08006c34

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045b0:	f7ff ffda 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0adb      	lsrs	r3, r3, #11
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08006c34 	.word	0x08006c34

080045d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045f0:	f7ff f944 	bl	800387c <HAL_PWREx_GetVoltageRange>
 80045f4:	6178      	str	r0, [r7, #20]
 80045f6:	e014      	b.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004602:	6593      	str	r3, [r2, #88]	; 0x58
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004610:	f7ff f934 	bl	800387c <HAL_PWREx_GetVoltageRange>
 8004614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004620:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004628:	d10b      	bne.n	8004642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d919      	bls.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2ba0      	cmp	r3, #160	; 0xa0
 8004634:	d902      	bls.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004636:	2302      	movs	r3, #2
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e013      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800463c:	2301      	movs	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e010      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d902      	bls.n	800464e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004648:	2303      	movs	r3, #3
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	e00a      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d102      	bne.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004654:	2302      	movs	r3, #2
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e004      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d101      	bne.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004660:	2301      	movs	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 0207 	bic.w	r2, r3, #7
 800466c:	4909      	ldr	r1, [pc, #36]	; (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000
 8004694:	40022000 	.word	0x40022000

08004698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046a0:	2300      	movs	r3, #0
 80046a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046a4:	2300      	movs	r3, #0
 80046a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d041      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046bc:	d02a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046c2:	d824      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ce:	d81e      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046da:	e018      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046dc:	4b86      	ldr	r3, [pc, #536]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a85      	ldr	r2, [pc, #532]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 f829 	bl	8005748 <RCCEx_PLLSAI1_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046fa:	e00c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3320      	adds	r3, #32
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f001 f914 	bl	8005930 <RCCEx_PLLSAI2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	74fb      	strb	r3, [r7, #19]
      break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800471c:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800472a:	4973      	ldr	r1, [pc, #460]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d041      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800474c:	d02a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800474e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004752:	d824      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004758:	d008      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800475a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800475e:	d81e      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004768:	d010      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800476a:	e018      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800476c:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004778:	e015      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ffe1 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478a:	e00c      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3320      	adds	r3, #32
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f8cc 	bl	8005930 <RCCEx_PLLSAI2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	74fb      	strb	r3, [r7, #19]
      break;
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ac:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ba:	494f      	ldr	r1, [pc, #316]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a0 	beq.w	8004916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4a40      	ldr	r2, [pc, #256]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3a      	ldr	r2, [pc, #232]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004818:	f7fc fdee 	bl	80013f8 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800481e:	e009      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fc fdea 	bl	80013f8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	74fb      	strb	r3, [r7, #19]
        break;
 8004832:	e005      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d15c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc fda9 	bl	80013f8 <HAL_GetTick>
 80048a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00b      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fc fda5 	bl	80013f8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
            break;
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ec      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e6:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ee:	e009      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
 80048f4:	e006      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004904:	7c7b      	ldrb	r3, [r7, #17]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b9e      	ldr	r3, [pc, #632]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	4a9d      	ldr	r2, [pc, #628]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004922:	4b98      	ldr	r3, [pc, #608]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f023 0203 	bic.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	4994      	ldr	r1, [pc, #592]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004944:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 020c 	bic.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	498c      	ldr	r1, [pc, #560]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004966:	4b87      	ldr	r3, [pc, #540]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	4983      	ldr	r1, [pc, #524]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	497b      	ldr	r1, [pc, #492]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049aa:	4b76      	ldr	r3, [pc, #472]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b8:	4972      	ldr	r1, [pc, #456]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049cc:	4b6d      	ldr	r3, [pc, #436]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	496a      	ldr	r1, [pc, #424]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ee:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	4961      	ldr	r1, [pc, #388]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a10:	4b5c      	ldr	r3, [pc, #368]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	4959      	ldr	r1, [pc, #356]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a32:	4b54      	ldr	r3, [pc, #336]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	4950      	ldr	r1, [pc, #320]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a54:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	4948      	ldr	r1, [pc, #288]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a76:	4b43      	ldr	r3, [pc, #268]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	493f      	ldr	r1, [pc, #252]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d028      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a98:	4b3a      	ldr	r3, [pc, #232]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	4937      	ldr	r1, [pc, #220]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a31      	ldr	r2, [pc, #196]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	e011      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ace:	d10c      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fe36 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d028      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	491f      	ldr	r1, [pc, #124]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b20:	60d3      	str	r3, [r2, #12]
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fe07 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02b      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	4908      	ldr	r1, [pc, #32]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b72:	d109      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a02      	ldr	r2, [pc, #8]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7e:	60d3      	str	r3, [r2, #12]
 8004b80:	e014      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fdd5 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc6:	4928      	ldr	r1, [pc, #160]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fdb2 	bl	8005748 <RCCEx_PLLSAI1_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d014      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	74bb      	strb	r3, [r7, #18]
 8004bf2:	e011      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3320      	adds	r3, #32
 8004c02:	2102      	movs	r1, #2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fe93 	bl	8005930 <RCCEx_PLLSAI2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c32:	490d      	ldr	r1, [pc, #52]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c56:	4904      	ldr	r1, [pc, #16]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000

08004c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d13e      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004c80:	4bb2      	ldr	r3, [pc, #712]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d028      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9a:	f200 8542 	bhi.w	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cac:	d00e      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004cae:	f000 bd38 	b.w	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cb2:	4ba6      	ldr	r3, [pc, #664]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	f040 8532 	bne.w	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	61fb      	str	r3, [r7, #28]
      break;
 8004cc8:	f000 bd2d 	b.w	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ccc:	4b9f      	ldr	r3, [pc, #636]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f040 8527 	bne.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004cdc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ce0:	61fb      	str	r3, [r7, #28]
      break;
 8004ce2:	f000 bd22 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ce6:	4b99      	ldr	r3, [pc, #612]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf2:	f040 851c 	bne.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004cf6:	4b96      	ldr	r3, [pc, #600]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004cf8:	61fb      	str	r3, [r7, #28]
      break;
 8004cfa:	f000 bd18 	b.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cfe:	4b93      	ldr	r3, [pc, #588]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d036      	beq.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d840      	bhi.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004d20:	e039      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d22:	4b8a      	ldr	r3, [pc, #552]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d116      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d2e:	4b87      	ldr	r3, [pc, #540]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004d3a:	4b84      	ldr	r3, [pc, #528]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	e005      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004d46:	4b81      	ldr	r3, [pc, #516]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a80      	ldr	r2, [pc, #512]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d5a:	e01f      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
      break;
 8004d60:	e01c      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d62:	4b7a      	ldr	r3, [pc, #488]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004d70:	4b79      	ldr	r3, [pc, #484]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004d72:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d74:	e012      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
      break;
 8004d7a:	e00f      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d7c:	4b73      	ldr	r3, [pc, #460]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d88:	d102      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004d8a:	4b74      	ldr	r3, [pc, #464]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d8e:	e005      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
      break;
 8004d94:	e002      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
      break;
 8004d9a:	bf00      	nop
    }

    switch(PeriphClk)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004da2:	f000 80dd 	beq.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dac:	f200 84c1 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db6:	f000 80d3 	beq.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc0:	f200 84b7 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	f000 835f 	beq.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	f200 84ad 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dde:	f000 847e 	beq.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	f200 84a3 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df2:	f000 82cd 	beq.w	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfc:	f200 8499 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	f000 80ab 	beq.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	f200 848f 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	f000 8090 	beq.w	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	f200 8485 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2e:	d07f      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	f200 847c 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e40:	f000 8403 	beq.w	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	f200 8472 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	f000 83af 	beq.w	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5e:	f200 8468 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e68:	f000 8379 	beq.w	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	f200 845e 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	f000 8344 	beq.w	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	f200 8456 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d84b      	bhi.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 844f 	beq.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	2b1f      	cmp	r3, #31
 8004e9a:	f200 844a 	bhi.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	0800508d 	.word	0x0800508d
 8004ea8:	080050fb 	.word	0x080050fb
 8004eac:	08005733 	.word	0x08005733
 8004eb0:	0800518f 	.word	0x0800518f
 8004eb4:	08005733 	.word	0x08005733
 8004eb8:	08005733 	.word	0x08005733
 8004ebc:	08005733 	.word	0x08005733
 8004ec0:	08005215 	.word	0x08005215
 8004ec4:	08005733 	.word	0x08005733
 8004ec8:	08005733 	.word	0x08005733
 8004ecc:	08005733 	.word	0x08005733
 8004ed0:	08005733 	.word	0x08005733
 8004ed4:	08005733 	.word	0x08005733
 8004ed8:	08005733 	.word	0x08005733
 8004edc:	08005733 	.word	0x08005733
 8004ee0:	0800528d 	.word	0x0800528d
 8004ee4:	08005733 	.word	0x08005733
 8004ee8:	08005733 	.word	0x08005733
 8004eec:	08005733 	.word	0x08005733
 8004ef0:	08005733 	.word	0x08005733
 8004ef4:	08005733 	.word	0x08005733
 8004ef8:	08005733 	.word	0x08005733
 8004efc:	08005733 	.word	0x08005733
 8004f00:	08005733 	.word	0x08005733
 8004f04:	08005733 	.word	0x08005733
 8004f08:	08005733 	.word	0x08005733
 8004f0c:	08005733 	.word	0x08005733
 8004f10:	08005733 	.word	0x08005733
 8004f14:	08005733 	.word	0x08005733
 8004f18:	08005733 	.word	0x08005733
 8004f1c:	08005733 	.word	0x08005733
 8004f20:	0800530f 	.word	0x0800530f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	f000 82c1 	beq.w	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004f2c:	f000 bc01 	b.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f36:	f000 fdd9 	bl	8005aec <RCCEx_GetSAIxPeriphCLKFreq>
 8004f3a:	61f8      	str	r0, [r7, #28]
      break;
 8004f3c:	e3fa      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004f3e:	69b9      	ldr	r1, [r7, #24]
 8004f40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f44:	f000 fdd2 	bl	8005aec <RCCEx_GetSAIxPeriphCLKFreq>
 8004f48:	61f8      	str	r0, [r7, #28]
      break;
 8004f4a:	e3f3      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	0003d090 	.word	0x0003d090
 8004f54:	08006c3c 	.word	0x08006c3c
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004f60:	4ba9      	ldr	r3, [pc, #676]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f72:	d00c      	beq.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f7a:	d87f      	bhi.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f82:	d04e      	beq.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004f8c:	e076      	b.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f8e:	4b9e      	ldr	r3, [pc, #632]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d172      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f9a:	4b9b      	ldr	r3, [pc, #620]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004fa6:	4b98      	ldr	r3, [pc, #608]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004fb2:	4b95      	ldr	r3, [pc, #596]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a93      	ldr	r2, [pc, #588]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc4:	61fb      	str	r3, [r7, #28]
          break;
 8004fc6:	e05b      	b.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fd4:	d156      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004fd6:	4b8c      	ldr	r3, [pc, #560]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe2:	d14f      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fee:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	fb03 f202 	mul.w	r2, r3, r2
 8004ff8:	4b83      	ldr	r3, [pc, #524]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	3301      	adds	r3, #1
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800500a:	4b7f      	ldr	r3, [pc, #508]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	0d5b      	lsrs	r3, r3, #21
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	3301      	adds	r3, #1
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	61fb      	str	r3, [r7, #28]
          break;
 8005020:	e030      	b.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005022:	4b79      	ldr	r3, [pc, #484]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502e:	d12b      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005030:	4b75      	ldr	r3, [pc, #468]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503c:	d124      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800503e:	4b72      	ldr	r3, [pc, #456]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005048:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	fb03 f202 	mul.w	r2, r3, r2
 8005052:	4b6d      	ldr	r3, [pc, #436]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	3301      	adds	r3, #1
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005064:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	0d5b      	lsrs	r3, r3, #21
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	61fb      	str	r3, [r7, #28]
          break;
 800507a:	e005      	b.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800507c:	bf00      	nop
 800507e:	e359      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005080:	bf00      	nop
 8005082:	e357      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005084:	bf00      	nop
 8005086:	e355      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005088:	bf00      	nop
        break;
 800508a:	e353      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800508c:	4b5e      	ldr	r3, [pc, #376]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d827      	bhi.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050d9 	.word	0x080050d9
          frequency = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7ff fa7a 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 80050b8:	61f8      	str	r0, [r7, #28]
          break;
 80050ba:	e01d      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80050bc:	f7ff f9c8 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80050c0:	61f8      	str	r0, [r7, #28]
          break;
 80050c2:	e019      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80050d4:	61fb      	str	r3, [r7, #28]
          break;
 80050d6:	e00c      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d107      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
          break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80050ee:	bf00      	nop
 80050f0:	e320      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050f2:	bf00      	nop
 80050f4:	e31e      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050f6:	bf00      	nop
        break;
 80050f8:	e31c      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80050fa:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d83a      	bhi.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005149 	.word	0x08005149
 8005118:	08005183 	.word	0x08005183
 800511c:	08005183 	.word	0x08005183
 8005120:	08005183 	.word	0x08005183
 8005124:	08005151 	.word	0x08005151
 8005128:	08005183 	.word	0x08005183
 800512c:	08005183 	.word	0x08005183
 8005130:	08005183 	.word	0x08005183
 8005134:	08005159 	.word	0x08005159
 8005138:	08005183 	.word	0x08005183
 800513c:	08005183 	.word	0x08005183
 8005140:	08005183 	.word	0x08005183
 8005144:	0800516d 	.word	0x0800516d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005148:	f7ff fa1a 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800514c:	61f8      	str	r0, [r7, #28]
          break;
 800514e:	e01d      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005150:	f7ff f97e 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8005154:	61f8      	str	r0, [r7, #28]
          break;
 8005156:	e019      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005158:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d10f      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8005166:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005168:	61fb      	str	r3, [r7, #28]
          break;
 800516a:	e00c      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800516c:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d107      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	61fb      	str	r3, [r7, #28]
          break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8005182:	bf00      	nop
 8005184:	e2d6      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005186:	bf00      	nop
 8005188:	e2d4      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800518a:	bf00      	nop
        break;
 800518c:	e2d2      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b30      	cmp	r3, #48	; 0x30
 800519e:	d021      	beq.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b30      	cmp	r3, #48	; 0x30
 80051a4:	d829      	bhi.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d011      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d823      	bhi.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d004      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80051be:	e01c      	b.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7ff f9de 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
          break;
 80051c6:	e01d      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80051c8:	f7ff f942 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80051cc:	61f8      	str	r0, [r7, #28]
          break;
 80051ce:	e019      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051dc:	d10f      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80051e0:	61fb      	str	r3, [r7, #28]
          break;
 80051e2:	e00c      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d107      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	61fb      	str	r3, [r7, #28]
          break;
 80051f8:	e003      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80051fa:	bf00      	nop
 80051fc:	e29a      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051fe:	bf00      	nop
 8005200:	e298      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005202:	bf00      	nop
        break;
 8005204:	e296      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	08006c3c 	.word	0x08006c3c
 8005210:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005214:	4b9b      	ldr	r3, [pc, #620]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2bc0      	cmp	r3, #192	; 0xc0
 8005224:	d021      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2bc0      	cmp	r3, #192	; 0xc0
 800522a:	d829      	bhi.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d011      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d823      	bhi.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d004      	beq.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8005244:	e01c      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005246:	f7ff f99b 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800524a:	61f8      	str	r0, [r7, #28]
          break;
 800524c:	e01d      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800524e:	f7ff f8ff 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8005252:	61f8      	str	r0, [r7, #28]
          break;
 8005254:	e019      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005256:	4b8b      	ldr	r3, [pc, #556]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005262:	d10f      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8005264:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005266:	61fb      	str	r3, [r7, #28]
          break;
 8005268:	e00c      	b.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800526a:	4b86      	ldr	r3, [pc, #536]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d107      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527c:	61fb      	str	r3, [r7, #28]
          break;
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005280:	bf00      	nop
 8005282:	e257      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005284:	bf00      	nop
 8005286:	e255      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005288:	bf00      	nop
        break;
 800528a:	e253      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800528c:	4b7d      	ldr	r3, [pc, #500]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529e:	d025      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a6:	d82c      	bhi.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ae:	d013      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b6:	d824      	bhi.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d004      	beq.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80052c6:	e01c      	b.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7ff f95a 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
          break;
 80052ce:	e01d      	b.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80052d0:	f7ff f8be 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80052d4:	61f8      	str	r0, [r7, #28]
          break;
 80052d6:	e019      	b.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d10f      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80052e6:	4b68      	ldr	r3, [pc, #416]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80052e8:	61fb      	str	r3, [r7, #28]
          break;
 80052ea:	e00c      	b.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052ec:	4b65      	ldr	r3, [pc, #404]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fe:	61fb      	str	r3, [r7, #28]
          break;
 8005300:	e003      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005302:	bf00      	nop
 8005304:	e216      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005306:	bf00      	nop
 8005308:	e214      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800530a:	bf00      	nop
        break;
 800530c:	e212      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800530e:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005320:	d025      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005328:	d82c      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005330:	d013      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d824      	bhi.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005346:	d004      	beq.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005348:	e01c      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800534a:	f7ff f919 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800534e:	61f8      	str	r0, [r7, #28]
          break;
 8005350:	e01d      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005352:	f7ff f87d 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8005356:	61f8      	str	r0, [r7, #28]
          break;
 8005358:	e019      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800535a:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d10f      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005368:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800536a:	61fb      	str	r3, [r7, #28]
          break;
 800536c:	e00c      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800536e:	4b45      	ldr	r3, [pc, #276]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d107      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800537c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005380:	61fb      	str	r3, [r7, #28]
          break;
 8005382:	e003      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005384:	bf00      	nop
 8005386:	e1d5      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005388:	bf00      	nop
 800538a:	e1d3      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800538c:	bf00      	nop
        break;
 800538e:	e1d1      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005390:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053a2:	d00c      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053aa:	d864      	bhi.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b2:	d008      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ba:	d030      	beq.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80053bc:	e05b      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80053be:	f7ff f847 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
          break;
 80053c4:	e05c      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053d2:	d152      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d04c      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	fb03 f202 	mul.w	r2, r3, r2
 80053f4:	4b23      	ldr	r3, [pc, #140]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	3301      	adds	r3, #1
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005406:	4b1f      	ldr	r3, [pc, #124]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	0e5b      	lsrs	r3, r3, #25
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	3301      	adds	r3, #1
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
          break;
 800541c:	e02d      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800541e:	4b19      	ldr	r3, [pc, #100]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542a:	d128      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d022      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005438:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005442:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	fb03 f202 	mul.w	r2, r3, r2
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	3301      	adds	r3, #1
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	0e5b      	lsrs	r3, r3, #25
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	3301      	adds	r3, #1
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	61fb      	str	r3, [r7, #28]
          break;
 8005474:	e003      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005476:	bf00      	nop
 8005478:	e15c      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800547a:	bf00      	nop
 800547c:	e15a      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800547e:	bf00      	nop
        break;
 8005480:	e158      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000
 8005488:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800548c:	4b9d      	ldr	r3, [pc, #628]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005496:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800549e:	f7ff f885 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 80054a2:	61f8      	str	r0, [r7, #28]
        break;
 80054a4:	e146      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fe ffd3 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80054aa:	61f8      	str	r0, [r7, #28]
        break;
 80054ac:	e142      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80054ae:	4b95      	ldr	r3, [pc, #596]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c0:	d013      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d819      	bhi.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d004      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80054d8:	e011      	b.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054da:	f7ff f851 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80054de:	61f8      	str	r0, [r7, #28]
          break;
 80054e0:	e010      	b.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80054e2:	f7fe ffb5 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80054e6:	61f8      	str	r0, [r7, #28]
          break;
 80054e8:	e00c      	b.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ea:	4b86      	ldr	r3, [pc, #536]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d104      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80054f8:	4b83      	ldr	r3, [pc, #524]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80054fa:	61fb      	str	r3, [r7, #28]
          break;
 80054fc:	e001      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80054fe:	bf00      	nop
 8005500:	e118      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005502:	bf00      	nop
        break;
 8005504:	e116      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005506:	4b7f      	ldr	r3, [pc, #508]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005518:	d013      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005520:	d819      	bhi.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552e:	d004      	beq.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005530:	e011      	b.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005532:	f7ff f825 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8005536:	61f8      	str	r0, [r7, #28]
          break;
 8005538:	e010      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800553a:	f7fe ff89 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800553e:	61f8      	str	r0, [r7, #28]
          break;
 8005540:	e00c      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005542:	4b70      	ldr	r3, [pc, #448]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d104      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005550:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005552:	61fb      	str	r3, [r7, #28]
          break;
 8005554:	e001      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005556:	bf00      	nop
 8005558:	e0ec      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800555a:	bf00      	nop
        break;
 800555c:	e0ea      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800555e:	4b69      	ldr	r3, [pc, #420]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005570:	d013      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005578:	d819      	bhi.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d004      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005588:	e011      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800558a:	f7fe fff9 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800558e:	61f8      	str	r0, [r7, #28]
          break;
 8005590:	e010      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005592:	f7fe ff5d 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8005596:	61f8      	str	r0, [r7, #28]
          break;
 8005598:	e00c      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800559a:	4b5a      	ldr	r3, [pc, #360]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d104      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80055a8:	4b57      	ldr	r3, [pc, #348]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80055aa:	61fb      	str	r3, [r7, #28]
          break;
 80055ac:	e001      	b.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80055ae:	bf00      	nop
 80055b0:	e0c0      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055b2:	bf00      	nop
        break;
 80055b4:	e0be      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80055b6:	4b53      	ldr	r3, [pc, #332]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055c8:	d02c      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055d0:	d833      	bhi.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055d8:	d01a      	beq.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055e0:	d82b      	bhi.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80055f0:	e023      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7fe ffc5 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80055f6:	61f8      	str	r0, [r7, #28]
          break;
 80055f8:	e026      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80055fa:	4b42      	ldr	r3, [pc, #264]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11a      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005608:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800560c:	61fb      	str	r3, [r7, #28]
          break;
 800560e:	e016      	b.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005610:	4b3c      	ldr	r3, [pc, #240]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d111      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800561e:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005620:	61fb      	str	r3, [r7, #28]
          break;
 8005622:	e00e      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005624:	4b37      	ldr	r3, [pc, #220]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d109      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	61fb      	str	r3, [r7, #28]
          break;
 8005638:	e005      	b.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800563a:	bf00      	nop
 800563c:	e07a      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800563e:	bf00      	nop
 8005640:	e078      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005642:	bf00      	nop
 8005644:	e076      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005646:	bf00      	nop
        break;
 8005648:	e074      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800564a:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800565c:	d02c      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005664:	d833      	bhi.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566c:	d01a      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005674:	d82b      	bhi.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005682:	d004      	beq.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005684:	e023      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005686:	f7fe ff7b 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800568a:	61f8      	str	r0, [r7, #28]
          break;
 800568c:	e026      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800568e:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b02      	cmp	r3, #2
 800569a:	d11a      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 800569c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056a0:	61fb      	str	r3, [r7, #28]
          break;
 80056a2:	e016      	b.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056a4:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b0:	d111      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80056b4:	61fb      	str	r3, [r7, #28]
          break;
 80056b6:	e00e      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d109      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80056c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ca:	61fb      	str	r3, [r7, #28]
          break;
 80056cc:	e005      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80056ce:	bf00      	nop
 80056d0:	e030      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056d2:	bf00      	nop
 80056d4:	e02e      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056d6:	bf00      	nop
 80056d8:	e02c      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056da:	bf00      	nop
        break;
 80056dc:	e02a      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d009      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80056f8:	e012      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7fe ff41 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80056fe:	61f8      	str	r0, [r7, #28]
          break;
 8005700:	e00e      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000
 8005708:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005718:	d101      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800571c:	61fb      	str	r3, [r7, #28]
          break;
 800571e:	bf00      	nop
        break;
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005722:	bf00      	nop
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005726:	bf00      	nop
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005732:	bf00      	nop
    }
  }

  return(frequency);
 8005734:	69fb      	ldr	r3, [r7, #28]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	00f42400 	.word	0x00f42400

08005748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005756:	4b75      	ldr	r3, [pc, #468]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005762:	4b72      	ldr	r3, [pc, #456]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0203 	and.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d10d      	bne.n	800578e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
       ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800577a:	4b6c      	ldr	r3, [pc, #432]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
       ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d047      	beq.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e044      	b.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d018      	beq.n	80057ce <RCCEx_PLLSAI1_Config+0x86>
 800579c:	2b03      	cmp	r3, #3
 800579e:	d825      	bhi.n	80057ec <RCCEx_PLLSAI1_Config+0xa4>
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x62>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d009      	beq.n	80057bc <RCCEx_PLLSAI1_Config+0x74>
 80057a8:	e020      	b.n	80057ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057aa:	4b60      	ldr	r3, [pc, #384]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11d      	bne.n	80057f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ba:	e01a      	b.n	80057f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057bc:	4b5b      	ldr	r3, [pc, #364]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057cc:	e013      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057da:	4b54      	ldr	r3, [pc, #336]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ea:	e006      	b.n	80057fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e004      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10d      	bne.n	800581e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005802:	4b4a      	ldr	r3, [pc, #296]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	3b01      	subs	r3, #1
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	430b      	orrs	r3, r1
 8005818:	4944      	ldr	r1, [pc, #272]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d17d      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005824:	4b41      	ldr	r3, [pc, #260]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a40      	ldr	r2, [pc, #256]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 800582a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800582e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fb fde2 	bl	80013f8 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005836:	e009      	b.n	800584c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005838:	f7fb fdde 	bl	80013f8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d902      	bls.n	800584c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	73fb      	strb	r3, [r7, #15]
        break;
 800584a:	e005      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800584c:	4b37      	ldr	r3, [pc, #220]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ef      	bne.n	8005838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d160      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d111      	bne.n	8005888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005864:	4b31      	ldr	r3, [pc, #196]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800586c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	0211      	lsls	r1, r2, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68d2      	ldr	r2, [r2, #12]
 800587a:	0912      	lsrs	r2, r2, #4
 800587c:	0452      	lsls	r2, r2, #17
 800587e:	430a      	orrs	r2, r1
 8005880:	492a      	ldr	r1, [pc, #168]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
 8005886:	e027      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d112      	bne.n	80058b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588e:	4b27      	ldr	r3, [pc, #156]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6892      	ldr	r2, [r2, #8]
 800589e:	0211      	lsls	r1, r2, #8
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6912      	ldr	r2, [r2, #16]
 80058a4:	0852      	lsrs	r2, r2, #1
 80058a6:	3a01      	subs	r2, #1
 80058a8:	0552      	lsls	r2, r2, #21
 80058aa:	430a      	orrs	r2, r1
 80058ac:	491f      	ldr	r1, [pc, #124]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]
 80058b2:	e011      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058b4:	4b1d      	ldr	r3, [pc, #116]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	0211      	lsls	r1, r2, #8
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6952      	ldr	r2, [r2, #20]
 80058ca:	0852      	lsrs	r2, r2, #1
 80058cc:	3a01      	subs	r2, #1
 80058ce:	0652      	lsls	r2, r2, #25
 80058d0:	430a      	orrs	r2, r1
 80058d2:	4916      	ldr	r1, [pc, #88]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fb fd88 	bl	80013f8 <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ea:	e009      	b.n	8005900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ec:	f7fb fd84 	bl	80013f8 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d902      	bls.n	8005900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	73fb      	strb	r3, [r7, #15]
          break;
 80058fe:	e005      	b.n	800590c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ef      	beq.n	80058ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	4904      	ldr	r1, [pc, #16]	; (800592c <RCCEx_PLLSAI1_Config+0x1e4>)
 800591c:	4313      	orrs	r3, r2
 800591e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000

08005930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593e:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800594a:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d10d      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
       ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005962:	4b61      	ldr	r3, [pc, #388]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
       ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d047      	beq.n	8005a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	e044      	b.n	8005a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d018      	beq.n	80059b6 <RCCEx_PLLSAI2_Config+0x86>
 8005984:	2b03      	cmp	r3, #3
 8005986:	d825      	bhi.n	80059d4 <RCCEx_PLLSAI2_Config+0xa4>
 8005988:	2b01      	cmp	r3, #1
 800598a:	d002      	beq.n	8005992 <RCCEx_PLLSAI2_Config+0x62>
 800598c:	2b02      	cmp	r3, #2
 800598e:	d009      	beq.n	80059a4 <RCCEx_PLLSAI2_Config+0x74>
 8005990:	e020      	b.n	80059d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005992:	4b55      	ldr	r3, [pc, #340]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d11d      	bne.n	80059da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a2:	e01a      	b.n	80059da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d116      	bne.n	80059de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b4:	e013      	b.n	80059de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b6:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c2:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d2:	e006      	b.n	80059e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e004      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	430b      	orrs	r3, r1
 8005a00:	4939      	ldr	r1, [pc, #228]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d167      	bne.n	8005adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a35      	ldr	r2, [pc, #212]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a18:	f7fb fcee 	bl	80013f8 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a1e:	e009      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a20:	f7fb fcea 	bl	80013f8 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d902      	bls.n	8005a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	73fb      	strb	r3, [r7, #15]
        break;
 8005a32:	e005      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a34:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ef      	bne.n	8005a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d14a      	bne.n	8005adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d111      	bne.n	8005a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a4c:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6892      	ldr	r2, [r2, #8]
 8005a5c:	0211      	lsls	r1, r2, #8
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68d2      	ldr	r2, [r2, #12]
 8005a62:	0912      	lsrs	r2, r2, #4
 8005a64:	0452      	lsls	r2, r2, #17
 8005a66:	430a      	orrs	r2, r1
 8005a68:	491f      	ldr	r1, [pc, #124]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	614b      	str	r3, [r1, #20]
 8005a6e:	e011      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
 8005a80:	0211      	lsls	r1, r2, #8
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6912      	ldr	r2, [r2, #16]
 8005a86:	0852      	lsrs	r2, r2, #1
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0652      	lsls	r2, r2, #25
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fb fcaa 	bl	80013f8 <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aa6:	e009      	b.n	8005abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aa8:	f7fb fca6 	bl	80013f8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d902      	bls.n	8005abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8005aba:	e005      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000

08005aec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b089      	sub	sp, #36	; 0x24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b08:	d10c      	bne.n	8005b24 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005b0a:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005b14:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b1c:	d112      	bne.n	8005b44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e00f      	b.n	8005b44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d10b      	bne.n	8005b44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005b2c:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b36:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3e:	d101      	bne.n	8005b44 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005b42:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80b4 	bne.w	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b56:	d003      	beq.n	8005b60 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b5e:	d135      	bne.n	8005bcc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b60:	4b58      	ldr	r3, [pc, #352]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6c:	f040 80a1 	bne.w	8005cb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005b70:	4b54      	ldr	r3, [pc, #336]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 809a 	beq.w	8005cb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b7e:	4b51      	ldr	r3, [pc, #324]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	3301      	adds	r3, #1
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b92:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005ba4:	4b47      	ldr	r3, [pc, #284]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005bb0:	2311      	movs	r3, #17
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e001      	b.n	8005bba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005bb6:	2307      	movs	r3, #7
 8005bb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	fb03 f202 	mul.w	r2, r3, r2
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005bca:	e072      	b.n	8005cb2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d133      	bne.n	8005c3a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005bd2:	4b3c      	ldr	r3, [pc, #240]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d169      	bne.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005be0:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d063      	beq.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005c1e:	2311      	movs	r3, #17
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e001      	b.n	8005c28 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005c24:	2307      	movs	r3, #7
 8005c26:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	fb03 f202 	mul.w	r2, r3, r2
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e03c      	b.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c40:	d003      	beq.n	8005c4a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c48:	d134      	bne.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c56:	d12d      	bne.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d027      	beq.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	3301      	adds	r3, #1
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	0a1b      	lsrs	r3, r3, #8
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005c96:	2311      	movs	r3, #17
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e001      	b.n	8005ca0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	fb03 f202 	mul.w	r2, r3, r2
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e000      	b.n	8005cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005cb2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3724      	adds	r7, #36	; 0x24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	001fff68 	.word	0x001fff68

08005ccc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d06c      	beq.n	8005db8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb f952 	bl	8000f9c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	22ca      	movs	r2, #202	; 0xca
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2253      	movs	r2, #83	; 0x53
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f87c 	bl	8005e0e <RTC_EnterInitMode>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d14b      	bne.n	8005db8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d32:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6919      	ldr	r1, [r3, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	041a      	lsls	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f87f 	bl	8005e74 <RTC_ExitInitMode>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d11b      	bne.n	8005db8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0203 	bic.w	r2, r2, #3
 8005d8e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dd8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005dda:	f7fb fb0d 	bl	80013f8 <HAL_GetTick>
 8005dde:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005de0:	e009      	b.n	8005df6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005de2:	f7fb fb09 	bl	80013f8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df0:	d901      	bls.n	8005df6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e007      	b.n	8005e06 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d120      	bne.n	8005e6a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e32:	f7fb fae1 	bl	80013f8 <HAL_GetTick>
 8005e36:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e38:	e00d      	b.n	8005e56 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e3a:	f7fb fadd 	bl	80013f8 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e48:	d905      	bls.n	8005e56 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2203      	movs	r2, #3
 8005e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <RTC_EnterInitMode+0x5c>
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d1e7      	bne.n	8005e3a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e8c:	4b17      	ldr	r3, [pc, #92]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10c      	bne.n	8005eb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff92 	bl	8005dc2 <HAL_RTC_WaitForSynchro>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01e      	beq.n	8005ee2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	e017      	b.n	8005ee2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005eb8:	f023 0320 	bic.w	r3, r3, #32
 8005ebc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ff7f 	bl	8005dc2 <HAL_RTC_WaitForSynchro>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	4a04      	ldr	r2, [pc, #16]	; (8005eec <RTC_ExitInitMode+0x78>)
 8005edc:	f043 0320 	orr.w	r3, r3, #32
 8005ee0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40002800 	.word	0x40002800

08005ef0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e155      	b.n	80061ae <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb f94a 	bl	80011b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f959 	bl	80061d4 <SAI_Disable>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e140      	b.n	80061ae <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d00c      	beq.n	8005f56 <HAL_SAI_Init+0x66>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d80d      	bhi.n	8005f5c <HAL_SAI_Init+0x6c>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_SAI_Init+0x5a>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d003      	beq.n	8005f50 <HAL_SAI_Init+0x60>
 8005f48:	e008      	b.n	8005f5c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
      break;
 8005f4e:	e008      	b.n	8005f62 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005f50:	2310      	movs	r3, #16
 8005f52:	61fb      	str	r3, [r7, #28]
      break;
 8005f54:	e005      	b.n	8005f62 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005f56:	2320      	movs	r3, #32
 8005f58:	61fb      	str	r3, [r7, #28]
      break;
 8005f5a:	e002      	b.n	8005f62 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]
      break;
 8005f60:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d81d      	bhi.n	8005fa6 <HAL_SAI_Init+0xb6>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <HAL_SAI_Init+0x80>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f87 	.word	0x08005f87
 8005f78:	08005f8f 	.word	0x08005f8f
 8005f7c:	08005f97 	.word	0x08005f97
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
      break;
 8005f84:	e012      	b.n	8005fac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f8a:	617b      	str	r3, [r7, #20]
      break;
 8005f8c:	e00e      	b.n	8005fac <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f92:	617b      	str	r3, [r7, #20]
      break;
 8005f94:	e00a      	b.n	8005fac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f9a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
      break;
 8005fa4:	e002      	b.n	8005fac <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
      break;
 8005faa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a81      	ldr	r2, [pc, #516]	; (80061b8 <HAL_SAI_Init+0x2c8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_SAI_Init+0xd0>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a80      	ldr	r2, [pc, #512]	; (80061bc <HAL_SAI_Init+0x2cc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005fc0:	4a7f      	ldr	r2, [pc, #508]	; (80061c0 <HAL_SAI_Init+0x2d0>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e002      	b.n	8005fce <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005fc8:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <HAL_SAI_Init+0x2d4>)
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d041      	beq.n	800605a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a77      	ldr	r2, [pc, #476]	; (80061b8 <HAL_SAI_Init+0x2c8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_SAI_Init+0xfa>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a75      	ldr	r2, [pc, #468]	; (80061bc <HAL_SAI_Init+0x2cc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d105      	bne.n	8005ff6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005fea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005fee:	f7fe fe3d 	bl	8004c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ff2:	6138      	str	r0, [r7, #16]
 8005ff4:	e004      	b.n	8006000 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005ff6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005ffa:	f7fe fe37 	bl	8004c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ffe:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	025b      	lsls	r3, r3, #9
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a6b      	ldr	r2, [pc, #428]	; (80061c8 <HAL_SAI_Init+0x2d8>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	08da      	lsrs	r2, r3, #3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	4b67      	ldr	r3, [pc, #412]	; (80061c8 <HAL_SAI_Init+0x2d8>)
 800602a:	fba3 2301 	umull	r2, r3, r3, r1
 800602e:	08da      	lsrs	r2, r3, #3
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	1aca      	subs	r2, r1, r3
 800603a:	2a08      	cmp	r2, #8
 800603c:	d904      	bls.n	8006048 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	2b04      	cmp	r3, #4
 800604e:	d104      	bne.n	800605a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	085a      	lsrs	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_SAI_Init+0x17a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d109      	bne.n	800607e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_SAI_Init+0x186>
 8006072:	2300      	movs	r3, #0
 8006074:	e001      	b.n	800607a <HAL_SAI_Init+0x18a>
 8006076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	e008      	b.n	8006090 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <HAL_SAI_Init+0x19c>
 8006086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608a:	e000      	b.n	800608e <HAL_SAI_Init+0x19e>
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6819      	ldr	r1, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b4c      	ldr	r3, [pc, #304]	; (80061cc <HAL_SAI_Init+0x2dc>)
 800609c:	400b      	ands	r3, r1
 800609e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6819      	ldr	r1, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80060b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	431a      	orrs	r2, r3
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80060c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80060d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	051b      	lsls	r3, r3, #20
 80060dc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80060f4:	f023 030f 	bic.w	r3, r3, #15
 80060f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6899      	ldr	r1, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_SAI_Init+0x2e0>)
 8006124:	400b      	ands	r3, r1
 8006126:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006138:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800613e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006144:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	3b01      	subs	r3, #1
 800614c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800614e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68d9      	ldr	r1, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006166:	400b      	ands	r3, r1
 8006168:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006180:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006186:	3b01      	subs	r3, #1
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40015404 	.word	0x40015404
 80061bc:	40015424 	.word	0x40015424
 80061c0:	40015400 	.word	0x40015400
 80061c4:	40015800 	.word	0x40015800
 80061c8:	cccccccd 	.word	0xcccccccd
 80061cc:	ff05c010 	.word	0xff05c010
 80061d0:	fff88000 	.word	0xfff88000

080061d4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <SAI_Disable+0x6c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <SAI_Disable+0x70>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0b1b      	lsrs	r3, r3, #12
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	72fb      	strb	r3, [r7, #11]
      break;
 800621a:	e009      	b.n	8006230 <SAI_Disable+0x5c>
    }
    count--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e7      	bne.n	8006200 <SAI_Disable+0x2c>

  return status;
 8006230:	7afb      	ldrb	r3, [r7, #11]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000000 	.word	0x20000000
 8006244:	95cbec1b 	.word	0x95cbec1b

08006248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e040      	b.n	80062dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fa fec8 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2224      	movs	r2, #36	; 0x24
 8006274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f82c 	bl	80062e4 <UART_SetConfig>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e022      	b.n	80062dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fad8 	bl	8006854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fb5f 	bl	8006998 <UART_CheckIdleState>
 80062da:	4603      	mov	r3, r0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b08a      	sub	sp, #40	; 0x28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	431a      	orrs	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4ba4      	ldr	r3, [pc, #656]	; (80065a4 <UART_SetConfig+0x2c0>)
 8006314:	4013      	ands	r3, r2
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800631c:	430b      	orrs	r3, r1
 800631e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a99      	ldr	r2, [pc, #612]	; (80065a8 <UART_SetConfig+0x2c4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	4313      	orrs	r3, r2
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a90      	ldr	r2, [pc, #576]	; (80065ac <UART_SetConfig+0x2c8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d126      	bne.n	80063bc <UART_SetConfig+0xd8>
 800636e:	4b90      	ldr	r3, [pc, #576]	; (80065b0 <UART_SetConfig+0x2cc>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	2b03      	cmp	r3, #3
 800637a:	d81b      	bhi.n	80063b4 <UART_SetConfig+0xd0>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0xa0>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006395 	.word	0x08006395
 8006388:	080063a5 	.word	0x080063a5
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e116      	b.n	80065ca <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a2:	e112      	b.n	80065ca <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063aa:	e10e      	b.n	80065ca <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b2:	e10a      	b.n	80065ca <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ba:	e106      	b.n	80065ca <UART_SetConfig+0x2e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7c      	ldr	r2, [pc, #496]	; (80065b4 <UART_SetConfig+0x2d0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d138      	bne.n	8006438 <UART_SetConfig+0x154>
 80063c6:	4b7a      	ldr	r3, [pc, #488]	; (80065b0 <UART_SetConfig+0x2cc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d82d      	bhi.n	8006430 <UART_SetConfig+0x14c>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0xf8>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006411 	.word	0x08006411
 80063e0:	08006431 	.word	0x08006431
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006421 	.word	0x08006421
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006431 	.word	0x08006431
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006419 	.word	0x08006419
 8006400:	08006431 	.word	0x08006431
 8006404:	08006431 	.word	0x08006431
 8006408:	08006431 	.word	0x08006431
 800640c:	08006429 	.word	0x08006429
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006416:	e0d8      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006418:	2302      	movs	r3, #2
 800641a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641e:	e0d4      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006420:	2304      	movs	r3, #4
 8006422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006426:	e0d0      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006428:	2308      	movs	r3, #8
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642e:	e0cc      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006430:	2310      	movs	r3, #16
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006436:	e0c8      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5e      	ldr	r2, [pc, #376]	; (80065b8 <UART_SetConfig+0x2d4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d125      	bne.n	800648e <UART_SetConfig+0x1aa>
 8006442:	4b5b      	ldr	r3, [pc, #364]	; (80065b0 <UART_SetConfig+0x2cc>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d016      	beq.n	800647e <UART_SetConfig+0x19a>
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d818      	bhi.n	8006486 <UART_SetConfig+0x1a2>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d00a      	beq.n	800646e <UART_SetConfig+0x18a>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d814      	bhi.n	8006486 <UART_SetConfig+0x1a2>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <UART_SetConfig+0x182>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d008      	beq.n	8006476 <UART_SetConfig+0x192>
 8006464:	e00f      	b.n	8006486 <UART_SetConfig+0x1a2>
 8006466:	2300      	movs	r3, #0
 8006468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646c:	e0ad      	b.n	80065ca <UART_SetConfig+0x2e6>
 800646e:	2302      	movs	r3, #2
 8006470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006474:	e0a9      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006476:	2304      	movs	r3, #4
 8006478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647c:	e0a5      	b.n	80065ca <UART_SetConfig+0x2e6>
 800647e:	2308      	movs	r3, #8
 8006480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006484:	e0a1      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006486:	2310      	movs	r3, #16
 8006488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648c:	e09d      	b.n	80065ca <UART_SetConfig+0x2e6>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4a      	ldr	r2, [pc, #296]	; (80065bc <UART_SetConfig+0x2d8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d125      	bne.n	80064e4 <UART_SetConfig+0x200>
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <UART_SetConfig+0x2cc>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a2:	2bc0      	cmp	r3, #192	; 0xc0
 80064a4:	d016      	beq.n	80064d4 <UART_SetConfig+0x1f0>
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d818      	bhi.n	80064dc <UART_SetConfig+0x1f8>
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d00a      	beq.n	80064c4 <UART_SetConfig+0x1e0>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x1f8>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <UART_SetConfig+0x1d8>
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d008      	beq.n	80064cc <UART_SetConfig+0x1e8>
 80064ba:	e00f      	b.n	80064dc <UART_SetConfig+0x1f8>
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e082      	b.n	80065ca <UART_SetConfig+0x2e6>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e07e      	b.n	80065ca <UART_SetConfig+0x2e6>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d2:	e07a      	b.n	80065ca <UART_SetConfig+0x2e6>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e076      	b.n	80065ca <UART_SetConfig+0x2e6>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e2:	e072      	b.n	80065ca <UART_SetConfig+0x2e6>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <UART_SetConfig+0x2dc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d12a      	bne.n	8006544 <UART_SetConfig+0x260>
 80064ee:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <UART_SetConfig+0x2cc>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fc:	d01a      	beq.n	8006534 <UART_SetConfig+0x250>
 80064fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006502:	d81b      	bhi.n	800653c <UART_SetConfig+0x258>
 8006504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006508:	d00c      	beq.n	8006524 <UART_SetConfig+0x240>
 800650a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650e:	d815      	bhi.n	800653c <UART_SetConfig+0x258>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <UART_SetConfig+0x238>
 8006514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006518:	d008      	beq.n	800652c <UART_SetConfig+0x248>
 800651a:	e00f      	b.n	800653c <UART_SetConfig+0x258>
 800651c:	2300      	movs	r3, #0
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e052      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006524:	2302      	movs	r3, #2
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e04e      	b.n	80065ca <UART_SetConfig+0x2e6>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006532:	e04a      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653a:	e046      	b.n	80065ca <UART_SetConfig+0x2e6>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006542:	e042      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <UART_SetConfig+0x2c4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d13a      	bne.n	80065c4 <UART_SetConfig+0x2e0>
 800654e:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <UART_SetConfig+0x2cc>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800655c:	d01a      	beq.n	8006594 <UART_SetConfig+0x2b0>
 800655e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006562:	d81b      	bhi.n	800659c <UART_SetConfig+0x2b8>
 8006564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006568:	d00c      	beq.n	8006584 <UART_SetConfig+0x2a0>
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656e:	d815      	bhi.n	800659c <UART_SetConfig+0x2b8>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <UART_SetConfig+0x298>
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006578:	d008      	beq.n	800658c <UART_SetConfig+0x2a8>
 800657a:	e00f      	b.n	800659c <UART_SetConfig+0x2b8>
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006582:	e022      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006584:	2302      	movs	r3, #2
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658a:	e01e      	b.n	80065ca <UART_SetConfig+0x2e6>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006592:	e01a      	b.n	80065ca <UART_SetConfig+0x2e6>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659a:	e016      	b.n	80065ca <UART_SetConfig+0x2e6>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e012      	b.n	80065ca <UART_SetConfig+0x2e6>
 80065a4:	efff69f3 	.word	0xefff69f3
 80065a8:	40008000 	.word	0x40008000
 80065ac:	40013800 	.word	0x40013800
 80065b0:	40021000 	.word	0x40021000
 80065b4:	40004400 	.word	0x40004400
 80065b8:	40004800 	.word	0x40004800
 80065bc:	40004c00 	.word	0x40004c00
 80065c0:	40005000 	.word	0x40005000
 80065c4:	2310      	movs	r3, #16
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a9f      	ldr	r2, [pc, #636]	; (800684c <UART_SetConfig+0x568>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d17a      	bne.n	80066ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d824      	bhi.n	8006626 <UART_SetConfig+0x342>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x300>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006627 	.word	0x08006627
 80065ec:	08006611 	.word	0x08006611
 80065f0:	08006627 	.word	0x08006627
 80065f4:	08006617 	.word	0x08006617
 80065f8:	08006627 	.word	0x08006627
 80065fc:	08006627 	.word	0x08006627
 8006600:	08006627 	.word	0x08006627
 8006604:	0800661f 	.word	0x0800661f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fd ffba 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800660c:	61f8      	str	r0, [r7, #28]
        break;
 800660e:	e010      	b.n	8006632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006610:	4b8f      	ldr	r3, [pc, #572]	; (8006850 <UART_SetConfig+0x56c>)
 8006612:	61fb      	str	r3, [r7, #28]
        break;
 8006614:	e00d      	b.n	8006632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006616:	f7fd ff1b 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800661a:	61f8      	str	r0, [r7, #28]
        break;
 800661c:	e009      	b.n	8006632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	61fb      	str	r3, [r7, #28]
        break;
 8006624:	e005      	b.n	8006632 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80fb 	beq.w	8006830 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4413      	add	r3, r2
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	429a      	cmp	r2, r3
 8006648:	d305      	bcc.n	8006656 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	429a      	cmp	r2, r3
 8006654:	d903      	bls.n	800665e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800665c:	e0e8      	b.n	8006830 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	2200      	movs	r2, #0
 8006662:	461c      	mov	r4, r3
 8006664:	4615      	mov	r5, r2
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	022b      	lsls	r3, r5, #8
 8006670:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006674:	0222      	lsls	r2, r4, #8
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	6849      	ldr	r1, [r1, #4]
 800667a:	0849      	lsrs	r1, r1, #1
 800667c:	2000      	movs	r0, #0
 800667e:	4688      	mov	r8, r1
 8006680:	4681      	mov	r9, r0
 8006682:	eb12 0a08 	adds.w	sl, r2, r8
 8006686:	eb43 0b09 	adc.w	fp, r3, r9
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7f9 fd94 	bl	80001c8 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4613      	mov	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ae:	d308      	bcc.n	80066c2 <UART_SetConfig+0x3de>
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b6:	d204      	bcs.n	80066c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	60da      	str	r2, [r3, #12]
 80066c0:	e0b6      	b.n	8006830 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066c8:	e0b2      	b.n	8006830 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d2:	d15e      	bne.n	8006792 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80066d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d828      	bhi.n	800672e <UART_SetConfig+0x44a>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x400>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006711 	.word	0x08006711
 80066ec:	08006719 	.word	0x08006719
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	0800671f 	.word	0x0800671f
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	0800672f 	.word	0x0800672f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	08006727 	.word	0x08006727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006708:	f7fd ff3a 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 800670c:	61f8      	str	r0, [r7, #28]
        break;
 800670e:	e014      	b.n	800673a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7fd ff4c 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8006714:	61f8      	str	r0, [r7, #28]
        break;
 8006716:	e010      	b.n	800673a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4b4d      	ldr	r3, [pc, #308]	; (8006850 <UART_SetConfig+0x56c>)
 800671a:	61fb      	str	r3, [r7, #28]
        break;
 800671c:	e00d      	b.n	800673a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671e:	f7fd fe97 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8006722:	61f8      	str	r0, [r7, #28]
        break;
 8006724:	e009      	b.n	800673a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672a:	61fb      	str	r3, [r7, #28]
        break;
 800672c:	e005      	b.n	800673a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d077      	beq.n	8006830 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	005a      	lsls	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	441a      	add	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d916      	bls.n	800678a <UART_SetConfig+0x4a6>
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006762:	d212      	bcs.n	800678a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f023 030f 	bic.w	r3, r3, #15
 800676c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	b29b      	uxth	r3, r3
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	b29a      	uxth	r2, r3
 800677a:	8afb      	ldrh	r3, [r7, #22]
 800677c:	4313      	orrs	r3, r2
 800677e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	8afa      	ldrh	r2, [r7, #22]
 8006786:	60da      	str	r2, [r3, #12]
 8006788:	e052      	b.n	8006830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006790:	e04e      	b.n	8006830 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006796:	2b08      	cmp	r3, #8
 8006798:	d827      	bhi.n	80067ea <UART_SetConfig+0x506>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x4bc>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd fedc 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61f8      	str	r0, [r7, #28]
        break;
 80067ca:	e014      	b.n	80067f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fd feee 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 80067d0:	61f8      	str	r0, [r7, #28]
        break;
 80067d2:	e010      	b.n	80067f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <UART_SetConfig+0x56c>)
 80067d6:	61fb      	str	r3, [r7, #28]
        break;
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fd fe39 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80067de:	61f8      	str	r0, [r7, #28]
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067f4:	bf00      	nop
    }

    if (pclk != 0U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d019      	beq.n	8006830 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	085a      	lsrs	r2, r3, #1
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	441a      	add	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d909      	bls.n	800682a <UART_SetConfig+0x546>
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d205      	bcs.n	800682a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	e002      	b.n	8006830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800683c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800684a:	bf00      	nop
 800684c:	40008000 	.word	0x40008000
 8006850:	00f42400 	.word	0x00f42400

08006854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01a      	beq.n	800696a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006952:	d10a      	bne.n	800696a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	605a      	str	r2, [r3, #4]
  }
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af02      	add	r7, sp, #8
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a8:	f7fa fd26 	bl	80013f8 <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d10e      	bne.n	80069da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f82d 	bl	8006a2a <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e023      	b.n	8006a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d10e      	bne.n	8006a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f817 	bl	8006a2a <UART_WaitOnFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e00d      	b.n	8006a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b09c      	sub	sp, #112	; 0x70
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3a:	e0a5      	b.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	f000 80a1 	beq.w	8006b88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fa fcd7 	bl	80013f8 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d302      	bcc.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d13e      	bne.n	8006ada <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a70:	667b      	str	r3, [r7, #100]	; 0x64
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e6      	bne.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e067      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d04f      	beq.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af6:	d147      	bne.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	613b      	str	r3, [r7, #16]
   return(result);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b54:	623a      	str	r2, [r7, #32]
 8006b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	69f9      	ldr	r1, [r7, #28]
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e010      	b.n	8006baa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4013      	ands	r3, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	bf0c      	ite	eq
 8006b98:	2301      	moveq	r3, #1
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	f43f af4a 	beq.w	8006a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3770      	adds	r7, #112	; 0x70
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <__libc_init_array>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4d0d      	ldr	r5, [pc, #52]	; (8006bec <__libc_init_array+0x38>)
 8006bb8:	4c0d      	ldr	r4, [pc, #52]	; (8006bf0 <__libc_init_array+0x3c>)
 8006bba:	1b64      	subs	r4, r4, r5
 8006bbc:	10a4      	asrs	r4, r4, #2
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	42a6      	cmp	r6, r4
 8006bc2:	d109      	bne.n	8006bd8 <__libc_init_array+0x24>
 8006bc4:	4d0b      	ldr	r5, [pc, #44]	; (8006bf4 <__libc_init_array+0x40>)
 8006bc6:	4c0c      	ldr	r4, [pc, #48]	; (8006bf8 <__libc_init_array+0x44>)
 8006bc8:	f000 f820 	bl	8006c0c <_init>
 8006bcc:	1b64      	subs	r4, r4, r5
 8006bce:	10a4      	asrs	r4, r4, #2
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	42a6      	cmp	r6, r4
 8006bd4:	d105      	bne.n	8006be2 <__libc_init_array+0x2e>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bdc:	4798      	blx	r3
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7ee      	b.n	8006bc0 <__libc_init_array+0xc>
 8006be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be6:	4798      	blx	r3
 8006be8:	3601      	adds	r6, #1
 8006bea:	e7f2      	b.n	8006bd2 <__libc_init_array+0x1e>
 8006bec:	08006c74 	.word	0x08006c74
 8006bf0:	08006c74 	.word	0x08006c74
 8006bf4:	08006c74 	.word	0x08006c74
 8006bf8:	08006c78 	.word	0x08006c78

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
