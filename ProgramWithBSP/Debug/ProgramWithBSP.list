
ProgramWithBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b0  0800b9b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b0  0800b9b0  0001b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b8  0800b9b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800b9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002684  2000000c  0800b9cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002690  0800b9cc  00022690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebc5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ad  00000000  00000000  0003ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  000423b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00043d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bde8  00000000  00000000  00045590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d745  00000000  00000000  00071378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011501b  00000000  00000000  0008eabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  001a3b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b714 	.word	0x0800b714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800b714 	.word	0x0800b714

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <cs43l22_write>:

/* USER CODE BEGIN PV */


static void cs43l22_write(uint8_t reg, uint8_t value)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	4603      	mov	r3, r0
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, AUDIO_I2C_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2301      	movs	r3, #1
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	1dbb      	adds	r3, r7, #6
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2194      	movs	r1, #148	; 0x94
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <cs43l22_write+0x34>)
 8000df0:	f004 fb5e 	bl	80054b0 <HAL_I2C_Mem_Write>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20002324 	.word	0x20002324

08000e00 <cs43l22_init>:

static void cs43l22_init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2108      	movs	r1, #8
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <cs43l22_init+0x2c>)
 8000e0a:	f004 faa9 	bl	8005360 <HAL_GPIO_WritePin>

	cs43l22_write(0x04, 0xaf);
 8000e0e:	21af      	movs	r1, #175	; 0xaf
 8000e10:	2004      	movs	r0, #4
 8000e12:	f7ff ffd9 	bl	8000dc8 <cs43l22_write>
	cs43l22_write(0x06, 0x07);
 8000e16:	2107      	movs	r1, #7
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f7ff ffd5 	bl	8000dc8 <cs43l22_write>
	cs43l22_write(0x02, 0x9e);
 8000e1e:	219e      	movs	r1, #158	; 0x9e
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff ffd1 	bl	8000dc8 <cs43l22_write>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	48001000 	.word	0x48001000

08000e30 <HAL_ADC_ConvCpltCallback>:
    pBuffer[tmpIndex] = znak + tmpIndex;
  }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e3a:	f002 fc29 	bl	8003690 <HAL_ADC_GetValue>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20002288 	.word	0x20002288
 8000e54:	20002564 	.word	0x20002564

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f002 f853 	bl	8002f08 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f891 	bl	8000f88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e66:	f000 f8e3 	bl	8001030 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 fb09 	bl	8001480 <MX_GPIO_Init>
  MX_LCD_Init();
 8000e6e:	f000 f9fb 	bl	8001268 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000e72:	f000 fa33 	bl	80012dc <MX_QUADSPI_Init>
  MX_DFSDM1_Init();
 8000e76:	f000 f97f 	bl	8001178 <MX_DFSDM1_Init>
  MX_RTC_Init();
 8000e7a:	f000 fa55 	bl	8001328 <MX_RTC_Init>
  MX_I2C1_Init();
 8000e7e:	f000 f9b3 	bl	80011e8 <MX_I2C1_Init>
  MX_DMA_Init();
 8000e82:	f000 fadf 	bl	8001444 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e86:	f000 faad 	bl	80013e4 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000e8a:	f000 fa75 	bl	8001378 <MX_SAI1_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f8fd 	bl	800108c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_GLASS_Init();
 8000e92:	f000 ffa9 	bl	8001de8 <BSP_LCD_GLASS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"      WITAMY W PALPER", 1, SCROLL_SPEED_LOW);
 8000e96:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4834      	ldr	r0, [pc, #208]	; (8000f70 <main+0x118>)
 8000e9e:	f001 f80b 	bl	8001eb8 <BSP_LCD_GLASS_ScrollSentence>

  static QSPI_Info pQSPI_Info;
   uint8_t status;
   status = BSP_QSPI_Init();
 8000ea2:	f001 fe47 	bl	8002b34 <BSP_QSPI_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]

   if (status == QSPI_OK) {
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10e      	bne.n	8000ece <main+0x76>
  	  pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <main+0x11c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
  	  pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <main+0x11c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  	  pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <main+0x11c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  	  pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <main+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  	  pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <main+0x11c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]

 //  HAL_ADC_Start(&hadc1);



   for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	e039      	b.n	8000f48 <main+0xf0>
       int16_t value = (int16_t)(32000.0 * sin(2.0 * M_PI * i / 22.0));
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fac9 	bl	800046c <__aeabi_i2d>
 8000eda:	a323      	add	r3, pc, #140	; (adr r3, 8000f68 <main+0x110>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff fb2e 	bl	8000540 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <main+0x120>)
 8000ef2:	f7ff fc4f 	bl	8000794 <__aeabi_ddiv>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	ec43 2b17 	vmov	d7, r2, r3
 8000efe:	eeb0 0a47 	vmov.f32	s0, s14
 8000f02:	eef0 0a67 	vmov.f32	s1, s15
 8000f06:	f009 fbbb 	bl	800a680 <sin>
 8000f0a:	ec51 0b10 	vmov	r0, r1, d0
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <main+0x124>)
 8000f14:	f7ff fb14 	bl	8000540 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fda8 	bl	8000a74 <__aeabi_d2iz>
 8000f24:	4603      	mov	r3, r0
 8000f26:	803b      	strh	r3, [r7, #0]
       audio_data[i * 2] = value;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4914      	ldr	r1, [pc, #80]	; (8000f80 <main+0x128>)
 8000f2e:	883a      	ldrh	r2, [r7, #0]
 8000f30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
       audio_data[i * 2 + 1] = value;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4911      	ldr	r1, [pc, #68]	; (8000f80 <main+0x128>)
 8000f3c:	883a      	ldrh	r2, [r7, #0]
 8000f3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f640 0297 	movw	r2, #2199	; 0x897
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	ddc0      	ble.n	8000ed4 <main+0x7c>
   }

   cs43l22_init();
 8000f52:	f7ff ff55 	bl	8000e00 <cs43l22_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	   HAL_SAI_Transmit(&hsai_BlockA1, (uint16_t *) audio_data, 2*BUFFER_SIZE, HAL_MAX_DELAY);
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	f241 1230 	movw	r2, #4400	; 0x1130
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <main+0x128>)
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <main+0x12c>)
 8000f62:	f008 f971 	bl	8009248 <HAL_SAI_Transmit>
 8000f66:	e7f6      	b.n	8000f56 <main+0xfe>
 8000f68:	54442d18 	.word	0x54442d18
 8000f6c:	401921fb 	.word	0x401921fb
 8000f70:	0800b730 	.word	0x0800b730
 8000f74:	20002568 	.word	0x20002568
 8000f78:	40360000 	.word	0x40360000
 8000f7c:	40df4000 	.word	0x40df4000
 8000f80:	20000028 	.word	0x20000028
 8000f84:	20002414 	.word	0x20002414

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b096      	sub	sp, #88	; 0x58
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2244      	movs	r2, #68	; 0x44
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fb6a 	bl	800a670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000faa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fae:	f005 f857 	bl	8006060 <HAL_PWREx_ControlVoltageScaling>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb8:	f000 fb3e 	bl	8001638 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fd6c 	bl	8006acc <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ffa:	f000 fb1d 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	2104      	movs	r1, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f006 f940 	bl	800729c <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001022:	f000 fb09 	bl	8001638 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3758      	adds	r7, #88	; 0x58
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0a2      	sub	sp, #136	; 0x88
 8001034:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2288      	movs	r2, #136	; 0x88
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f009 fb17 	bl	800a670 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8001042:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001046:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001048:	2300      	movs	r3, #0
 800104a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800104c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001050:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800105a:	230a      	movs	r3, #10
 800105c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800105e:	2307      	movs	r3, #7
 8001060:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <PeriphCommonClock_Config+0x58>)
 800106c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f006 fb19 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800107c:	f000 fadc 	bl	8001638 <Error_Handler>
  }
}
 8001080:	bf00      	nop
 8001082:	3788      	adds	r7, #136	; 0x88
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	01010000 	.word	0x01010000

0800108c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_ADC1_Init+0xe0>)
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <MX_ADC1_Init+0xe4>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_ADC1_Init+0xe0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_ADC1_Init+0xe0>)
 80010bc:	2210      	movs	r2, #16
 80010be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_ADC1_Init+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_ADC1_Init+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_ADC1_Init+0xe0>)
 80010ce:	2204      	movs	r2, #4
 80010d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_ADC1_Init+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_ADC1_Init+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_ADC1_Init+0xe0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC1_Init+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC1_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_ADC1_Init+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC1_Init+0xe0>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_ADC1_Init+0xe0>)
 8001110:	f002 f968 	bl	80033e4 <HAL_ADC_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800111a:	f000 fa8d 	bl	8001638 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <MX_ADC1_Init+0xe0>)
 800112a:	f003 f935 	bl	8004398 <HAL_ADCEx_MultiModeConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001134:	f000 fa80 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_ADC1_Init+0xe8>)
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113c:	2306      	movs	r3, #6
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001140:	2306      	movs	r3, #6
 8001142:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001144:	237f      	movs	r3, #127	; 0x7f
 8001146:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001148:	2304      	movs	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_ADC1_Init+0xe0>)
 8001156:	f002 fcd7 	bl	8003b08 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001160:	f000 fa6a 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20002288 	.word	0x20002288
 8001170:	50040000 	.word	0x50040000
 8001174:	21800100 	.word	0x21800100

08001178 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_Init 0 */
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */
  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <MX_DFSDM1_Init+0x6c>)
 8001180:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 8001190:	2202      	movs	r2, #2
 8001192:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011bc:	2201      	movs	r2, #1
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_DFSDM1_Init+0x68>)
 80011ce:	f003 faa5 	bl	800471c <HAL_DFSDM_ChannelInit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80011d8:	f000 fa2e 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */
  /* USER CODE END DFSDM1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200022ec 	.word	0x200022ec
 80011e4:	40016000 	.word	0x40016000

080011e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_I2C1_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_I2C1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_I2C1_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <MX_I2C1_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_I2C1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_I2C1_Init+0x74>)
 8001224:	f004 f8b4 	bl	8005390 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800122e:	f000 fa03 	bl	8001638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <MX_I2C1_Init+0x74>)
 8001236:	f004 fca1 	bl	8005b7c <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 f9fa 	bl	8001638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_I2C1_Init+0x74>)
 8001248:	f004 fce3 	bl	8005c12 <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 f9f1 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20002324 	.word	0x20002324
 8001260:	40005400 	.word	0x40005400
 8001264:	10909cec 	.word	0x10909cec

08001268 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_Init 0 */
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */
  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_LCD_Init+0x6c>)
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <MX_LCD_Init+0x70>)
 8001270:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_LCD_Init+0x6c>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_LCD_Init+0x6c>)
 800127a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800127e:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_LCD_Init+0x6c>)
 8001282:	220c      	movs	r2, #12
 8001284:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_LCD_Init+0x6c>)
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_LCD_Init+0x6c>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_2;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_LCD_Init+0x6c>)
 8001294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001298:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_LCD_Init+0x6c>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_4;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV32;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_LCD_Init+0x6c>)
 80012c2:	f004 fcf3 	bl	8005cac <HAL_LCD_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 80012cc:	f000 f9b4 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */
  /* USER CODE END LCD_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20002370 	.word	0x20002370
 80012d8:	40002400 	.word	0x40002400

080012dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */
  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_QUADSPI_Init+0x44>)
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <MX_QUADSPI_Init+0x48>)
 80012e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_QUADSPI_Init+0x44>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_QUADSPI_Init+0x44>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_QUADSPI_Init+0x44>)
 80012f4:	2210      	movs	r2, #16
 80012f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_QUADSPI_Init+0x44>)
 80012fa:	2218      	movs	r2, #24
 80012fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_QUADSPI_Init+0x44>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_QUADSPI_Init+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_QUADSPI_Init+0x44>)
 800130c:	f004 fefe 	bl	800610c <HAL_QSPI_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001316:	f000 f98f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* USER CODE END QUADSPI_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200023ac 	.word	0x200023ac
 8001324:	a0001000 	.word	0xa0001000

08001328 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_RTC_Init+0x48>)
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_RTC_Init+0x4c>)
 8001330:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_RTC_Init+0x48>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MX_RTC_Init+0x48>)
 800133a:	227f      	movs	r2, #127	; 0x7f
 800133c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_RTC_Init+0x48>)
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_RTC_Init+0x48>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_RTC_Init+0x48>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_RTC_Init+0x48>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_RTC_Init+0x48>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_RTC_Init+0x48>)
 800135e:	f007 fcbd 	bl	8008cdc <HAL_RTC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001368:	f000 f966 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200023f0 	.word	0x200023f0
 8001374:	40002800 	.word	0x40002800

08001378 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_Init 0 */
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */
  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SAI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SAI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SAI1_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SAI1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_SAI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SAI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_SAI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SAI1_Init+0x64>)
 80013a2:	f245 6222 	movw	r2, #22050	; 0x5622
 80013a6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SAI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_SAI1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SAI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_SAI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80013c0:	2302      	movs	r3, #2
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_SAI1_Init+0x64>)
 80013c8:	f007 fd9a 	bl	8008f00 <HAL_SAI_InitProtocol>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80013d2:	f000 f931 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20002414 	.word	0x20002414
 80013e0:	40015404 	.word	0x40015404

080013e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_USART3_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USART3_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART3_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART3_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART3_UART_Init+0x58>)
 8001428:	f008 fc47 	bl	8009cba <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 f901 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200024e0 	.word	0x200024e0
 8001440:	40004800 	.word	0x40004800

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_DMA_Init+0x38>)
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <MX_DMA_Init+0x38>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6493      	str	r3, [r2, #72]	; 0x48
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_DMA_Init+0x38>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2038      	movs	r0, #56	; 0x38
 8001468:	f003 f921 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800146c:	2038      	movs	r0, #56	; 0x38
 800146e:	f003 f93a 	bl	80046e6 <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <MX_GPIO_Init+0x1ac>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a64      	ldr	r2, [pc, #400]	; (800162c <MX_GPIO_Init+0x1ac>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a58      	ldr	r2, [pc, #352]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a52      	ldr	r2, [pc, #328]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b4d      	ldr	r3, [pc, #308]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a4c      	ldr	r2, [pc, #304]	; (800162c <MX_GPIO_Init+0x1ac>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <MX_GPIO_Init+0x1ac>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <MX_GPIO_Init+0x1ac>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a46      	ldr	r2, [pc, #280]	; (800162c <MX_GPIO_Init+0x1ac>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <MX_GPIO_Init+0x1ac>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_RST_GPIO_Port, AUDIO_RST_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2108      	movs	r1, #8
 800152a:	4841      	ldr	r0, [pc, #260]	; (8001630 <MX_GPIO_Init+0x1b0>)
 800152c:	f003 ff18 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_OUT_X1_GPIO_Port, DIGITIZER_OUT_X1_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2102      	movs	r1, #2
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f003 ff12 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITIZER_IN_X2_GPIO_Port, DIGITIZER_IN_X2_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f003 ff0c 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2104      	movs	r1, #4
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <MX_GPIO_Init+0x1b4>)
 800154e:	f003 ff07 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	4835      	ldr	r0, [pc, #212]	; (8001630 <MX_GPIO_Init+0x1b0>)
 800155a:	f003 ff01 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800155e:	2308      	movs	r3, #8
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	482e      	ldr	r0, [pc, #184]	; (8001630 <MX_GPIO_Init+0x1b0>)
 8001576:	f003 fc55 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001582:	2302      	movs	r3, #2
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f003 fc48 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_OUT_X1_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_OUT_X1_Pin;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_OUT_X1_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f003 fc39 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_Y2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_Y2_Pin;
 80015b2:	2304      	movs	r3, #4
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIGITIZER_IN_Y2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f003 fc2c 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITIZER_IN_X2_Pin */
  GPIO_InitStruct.Pin = DIGITIZER_IN_X2_Pin;
 80015cc:	2320      	movs	r3, #32
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d4:	2302      	movs	r3, #2
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIGITIZER_IN_X2_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f003 fc1d 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80015ea:	2304      	movs	r3, #4
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_GPIO_Init+0x1b4>)
 8001602:	f003 fc0f 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_GPIO_Init+0x1b0>)
 8001620:	f003 fc00 	bl	8004e24 <HAL_GPIO_Init>

}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	48001000 	.word	0x48001000
 8001634:	48000400 	.word	0x48000400

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x44>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x44>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6613      	str	r3, [r2, #96]	; 0x60
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x44>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x44>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x44>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x44>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_ADC_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_ADC_MspInit+0x88>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DIGITIZER_IN_Y1_Pin;
 80016de:	2308      	movs	r3, #8
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016e2:	230b      	movs	r3, #11
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DIGITIZER_IN_Y1_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f003 fb96 	bl	8004e24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2012      	movs	r0, #18
 80016fe:	f002 ffd6 	bl	80046ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001702:	2012      	movs	r0, #18
 8001704:	f002 ffef 	bl	80046e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	50040000 	.word	0x50040000
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0ac      	sub	sp, #176	; 0xb0
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2288      	movs	r2, #136	; 0x88
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f008 ff99 	bl	800a670 <memset>
  if(hi2c->Instance==I2C1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_I2C_MspInit+0xb0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d13a      	bne.n	80017be <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001748:	2340      	movs	r3, #64	; 0x40
 800174a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800174c:	2300      	movs	r3, #0
 800174e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4618      	mov	r0, r3
 8001756:	f005 ffa7 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001760:	f7ff ff6a 	bl	8001638 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a18      	ldr	r2, [pc, #96]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800177c:	23c0      	movs	r3, #192	; 0xc0
 800177e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001782:	2312      	movs	r3, #18
 8001784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001788:	2301      	movs	r3, #1
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001794:	2304      	movs	r3, #4
 8001796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_I2C_MspInit+0xb8>)
 80017a2:	f003 fb3f 	bl	8004e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 80017ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_I2C_MspInit+0xb4>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	37b0      	adds	r7, #176	; 0xb0
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000400 	.word	0x48000400

080017d4 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0ae      	sub	sp, #184	; 0xb8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2288      	movs	r2, #136	; 0x88
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f008 ff3b 	bl	800a670 <memset>
  if(hlcd->Instance==LCD)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a57      	ldr	r2, [pc, #348]	; (800195c <HAL_LCD_MspInit+0x188>)
 8001800:	4293      	cmp	r3, r2
 8001802:	f040 80a6 	bne.w	8001952 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4618      	mov	r0, r3
 800181a:	f005 ff45 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8001824:	f7ff ff08 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184c:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4a40      	ldr	r2, [pc, #256]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	4a3a      	ldr	r2, [pc, #232]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_LCD_MspInit+0x18c>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 80018a0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80018a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80018ba:	230b      	movs	r3, #11
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4827      	ldr	r0, [pc, #156]	; (8001964 <HAL_LCD_MspInit+0x190>)
 80018c8:	f003 faac 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 80018cc:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80018d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80018e6:	230b      	movs	r3, #11
 80018e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f003 fa95 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80018fa:	f24f 2333 	movw	r3, #62003	; 0xf233
 80018fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001914:	230b      	movs	r3, #11
 8001916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800191e:	4619      	mov	r1, r3
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <HAL_LCD_MspInit+0x194>)
 8001922:	f003 fa7f 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8001926:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800192a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001940:	230b      	movs	r3, #11
 8001942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <HAL_LCD_MspInit+0x198>)
 800194e:	f003 fa69 	bl	8004e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	37b8      	adds	r7, #184	; 0xb8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40002400 	.word	0x40002400
 8001960:	40021000 	.word	0x40021000
 8001964:	48000800 	.word	0x48000800
 8001968:	48000400 	.word	0x48000400
 800196c:	48000c00 	.word	0x48000c00

08001970 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_QSPI_MspInit+0x7c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d128      	bne.n	80019e4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6513      	str	r3, [r2, #80]	; 0x50
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_QSPI_MspInit+0x80>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 80019c2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019c6:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019d4:	230a      	movs	r3, #10
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_QSPI_MspInit+0x84>)
 80019e0:	f003 fa20 	bl	8004e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	a0001000 	.word	0xa0001000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48001000 	.word	0x48001000

080019f8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_QSPI_MspDeInit+0x30>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10a      	bne.n	8001a20 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_QSPI_MspDeInit+0x34>)
 8001a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_QSPI_MspDeInit+0x34>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a14:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001a16:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_QSPI_MspDeInit+0x38>)
 8001a1c:	f003 fbac 	bl	8005178 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	a0001000 	.word	0xa0001000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48001000 	.word	0x48001000

08001a34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a4      	sub	sp, #144	; 0x90
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	2288      	movs	r2, #136	; 0x88
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f008 fe13 	bl	800a670 <memset>
  if(hrtc->Instance==RTC)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_RTC_MspInit+0x5c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d118      	bne.n	8001a86 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fe1e 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a72:	f7ff fde1 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_RTC_MspInit+0x60>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_RTC_MspInit+0x60>)
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3790      	adds	r7, #144	; 0x90
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40002800 	.word	0x40002800
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0ac      	sub	sp, #176	; 0xb0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2288      	movs	r2, #136	; 0x88
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 fdd9 	bl	800a670 <memset>
  if(huart->Instance==USART3)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <HAL_UART_MspInit+0xb0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d13b      	bne.n	8001b40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fde7 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae0:	f7ff fdaa 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_UART_MspInit+0xb4>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_MspInit+0xb8>)
 8001b3c:	f003 f972 	bl	8004e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	37b0      	adds	r7, #176	; 0xb0
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f001 fa0e 	bl	8002fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <ADC1_2_IRQHandler+0x10>)
 8001bae:	f001 fd7d 	bl	80036ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002288 	.word	0x20002288

08001bbc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA2_Channel1_IRQHandler+0x10>)
 8001bc2:	f003 f880 	bl	8004cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20002498 	.word	0x20002498

08001bd0 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <SAI1_IRQHandler+0x10>)
 8001bd6:	f007 fca3 	bl	8009520 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20002414 	.word	0x20002414

08001be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff ffea 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	; (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	; (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f008 fcf7 	bl	800a628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7ff f90d 	bl	8000e58 <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c4c:	0800b9c0 	.word	0x0800b9c0
  ldr r2, =_sbss
 8001c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c54:	20002690 	.word	0x20002690

08001c58 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC3_IRQHandler>
	...

08001c5c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Invoke the registered 'ErrorCallback' callback function (if any) */
  if (hAudioOut.CbError != (Audio_CallbackTypeDef)NULL)
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_SAI_ErrorCallback+0x20>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_SAI_ErrorCallback+0x16>
  {
    hAudioOut.CbError();
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_SAI_ErrorCallback+0x20>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4798      	blx	r3
  }
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000257c 	.word	0x2000257c

08001c80 <HAL_SAI_MspInit>:
  * @brief  SAI MSP Init
  * @param  hsai : pointer to a SAI_HandleTypeDef structure
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable SAI clock */
  AUDIO_SAIx_CLK_ENABLE();
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	6613      	str	r3, [r2, #96]	; 0x60
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_SAIx_MCK_SCK_SD_FS_ENABLE();
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_SAIx_FS_PIN | AUDIO_SAIx_SCK_PIN | AUDIO_SAIx_SD_PIN | AUDIO_SAIx_MCK_PIN;
 8001cb8:	2374      	movs	r3, #116	; 0x74
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_SAIx_MCK_SCK_SD_FS_AF;
 8001cc8:	230d      	movs	r3, #13
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_SAIx_MCK_SCK_SD_FS_GPIO_PORT, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4826      	ldr	r0, [pc, #152]	; (8001d6c <HAL_SAI_MspInit+0xec>)
 8001cd4:	f003 f8a6 	bl	8004e24 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_SAIx_DMAx_CLK_ENABLE();
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	6493      	str	r3, [r2, #72]	; 0x48
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_SAI_MspInit+0xe8>)
 8001ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

  if (hsai->Instance == AUDIO_SAIx)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_SAI_MspInit+0xf0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d129      	bne.n	8001d4e <HAL_SAI_MspInit+0xce>
  {
    /* Configure the hDmaSai handle parameters */
    hDmaSai.Init.Request             = DMA_REQUEST_1;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	605a      	str	r2, [r3, #4]
    hDmaSai.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d02:	2210      	movs	r2, #16
 8001d04:	609a      	str	r2, [r3, #8]
    hDmaSai.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
    hDmaSai.Init.MemInc              = DMA_MINC_ENABLE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	611a      	str	r2, [r3, #16]
    hDmaSai.Init.PeriphDataAlignment = AUDIO_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d18:	615a      	str	r2, [r3, #20]
    hDmaSai.Init.MemDataAlignment    = AUDIO_SAIx_DMAx_MEM_DATA_SIZE;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d20:	619a      	str	r2, [r3, #24]
    hDmaSai.Init.Mode                = DMA_NORMAL;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
    hDmaSai.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2e:	621a      	str	r2, [r3, #32]

    hDmaSai.Instance = AUDIO_SAIx_DMAx_CHANNEL;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d32:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <HAL_SAI_MspInit+0xf8>)
 8001d34:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hDmaSai);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6293      	str	r3, [r2, #40]	; 0x28

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hDmaSai);
 8001d42:	480c      	ldr	r0, [pc, #48]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d44:	f002 feae 	bl	8004aa4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hDmaSai);
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <HAL_SAI_MspInit+0xf4>)
 8001d4a:	f002 fdf3 	bl	8004934 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2105      	movs	r1, #5
 8001d52:	2038      	movs	r0, #56	; 0x38
 8001d54:	f002 fcab 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_SAIx_DMAx_IRQ);
 8001d58:	2038      	movs	r0, #56	; 0x38
 8001d5a:	f002 fcc4 	bl	80046e6 <HAL_NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	40015404 	.word	0x40015404
 8001d74:	2000258c 	.word	0x2000258c
 8001d78:	40020408 	.word	0x40020408

08001d7c <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initializes the DFSDM channel MSP.
  * @param  hdfsdm_channel : DFSDM channel handle.
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO clock */
  AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_CLK_ENABLE();
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x64>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN | AUDIO_DFSDMx_DMIC_DATIN_PIN;
 8001db4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_DMIC_DATIN_AF;
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4804      	ldr	r0, [pc, #16]	; (8001de4 <HAL_DFSDM_ChannelMspInit+0x68>)
 8001dd2:	f003 f827 	bl	8004e24 <HAL_GPIO_Init>
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48001000 	.word	0x48001000

08001de8 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001dee:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <BSP_LCD_GLASS_Init+0x70>)
 8001df0:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001dfa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dfe:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e14:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001e18:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e42:	f000 f8eb 	bl	800201c <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <BSP_LCD_GLASS_Init+0x6c>)
 8001e48:	f003 ff30 	bl	8005cac <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8001e4c:	f000 f82a 	bl	8001ea4 <BSP_LCD_GLASS_Clear>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200025d8 	.word	0x200025d8
 8001e58:	40002400 	.word	0x40002400

08001e5c <BSP_LCD_GLASS_DisplayString>:
  * @brief  Write a character string in the LCD RAM buffer.
  * @param  ptr: Pointer to string to display on the LCD Glass.
  * @retval None
  */
void BSP_LCD_GLASS_DisplayString(uint8_t *ptr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  DigitPosition_Typedef position = LCD_DIGIT_POSITION_1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8001e68:	e00b      	b.n	8001e82 <BSP_LCD_GLASS_DisplayString+0x26>
  {
    /* Write one character on LCD */
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fadf 	bl	8002434 <WriteChar>

    /* Point on the next character */
    ptr++;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]

    /* Increment the character counter */
    position++;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <BSP_LCD_GLASS_DisplayString+0x34>
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d9ec      	bls.n	8001e6a <BSP_LCD_GLASS_DisplayString+0xe>
  }
  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <BSP_LCD_GLASS_DisplayString+0x44>)
 8001e92:	f004 f87c 	bl	8005f8e <HAL_LCD_UpdateDisplayRequest>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200025d8 	.word	0x200025d8

08001ea4 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <BSP_LCD_GLASS_Clear+0x10>)
 8001eaa:	f004 f81a 	bl	8005ee2 <HAL_LCD_Clear>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200025d8 	.word	0x200025d8

08001eb8 <BSP_LCD_GLASS_ScrollSentence>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_ScrollSentence(uint8_t *ptr, uint16_t nScroll, uint16_t ScrollSpeed)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	803b      	strh	r3, [r7, #0]
  uint8_t repetition = 0, nbrchar = 0, sizestr = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75bb      	strb	r3, [r7, #22]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	757b      	strb	r3, [r7, #21]
  uint8_t *ptr1;
  uint8_t str[6] = "";
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	81bb      	strh	r3, [r7, #12]

  /* Reset interrupt variable in case key was press before entering function */
  bLCDGlass_KeyPressed = 0;
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

  if (ptr == 0)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8092 	beq.w	800200e <BSP_LCD_GLASS_ScrollSentence+0x156>
  {
    return;
  }

  /* To calculate end of string */
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	757b      	strb	r3, [r7, #21]
 8001ef2:	e005      	b.n	8001f00 <BSP_LCD_GLASS_ScrollSentence+0x48>
 8001ef4:	7d7b      	ldrb	r3, [r7, #21]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	757b      	strb	r3, [r7, #21]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	3301      	adds	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f5      	bne.n	8001ef4 <BSP_LCD_GLASS_ScrollSentence+0x3c>

  ptr1 = ptr;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	613b      	str	r3, [r7, #16]

  BSP_LCD_GLASS_DisplayString(str);
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ffa3 	bl	8001e5c <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 8001f16:	883b      	ldrh	r3, [r7, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 f871 	bl	8003000 <HAL_Delay>

  /* To shift the string for scrolling display*/
  for (repetition = 0; repetition < nScroll; repetition++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
 8001f22:	e06e      	b.n	8002002 <BSP_LCD_GLASS_ScrollSentence+0x14a>
  {
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	75bb      	strb	r3, [r7, #22]
 8001f28:	e064      	b.n	8001ff4 <BSP_LCD_GLASS_ScrollSentence+0x13c>
    {
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001f2a:	7dbb      	ldrb	r3, [r7, #22]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	7d7a      	ldrb	r2, [r7, #21]
 8001f30:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f34:	fb01 f202 	mul.w	r2, r1, r2
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	723b      	strb	r3, [r7, #8]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8001f44:	7dbb      	ldrb	r3, [r7, #22]
 8001f46:	3302      	adds	r3, #2
 8001f48:	7d7a      	ldrb	r2, [r7, #21]
 8001f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f4e:	fb01 f202 	mul.w	r2, r1, r2
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	727b      	strb	r3, [r7, #9]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8001f5e:	7dbb      	ldrb	r3, [r7, #22]
 8001f60:	3303      	adds	r3, #3
 8001f62:	7d7a      	ldrb	r2, [r7, #21]
 8001f64:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f68:	fb01 f202 	mul.w	r2, r1, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	72bb      	strb	r3, [r7, #10]
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8001f78:	7dbb      	ldrb	r3, [r7, #22]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	7d7a      	ldrb	r2, [r7, #21]
 8001f7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f82:	fb01 f202 	mul.w	r2, r1, r2
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	72fb      	strb	r3, [r7, #11]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 8001f92:	7dbb      	ldrb	r3, [r7, #22]
 8001f94:	3305      	adds	r3, #5
 8001f96:	7d7a      	ldrb	r2, [r7, #21]
 8001f98:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f9c:	fb01 f202 	mul.w	r2, r1, r2
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	733b      	strb	r3, [r7, #12]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 8001fac:	7dbb      	ldrb	r3, [r7, #22]
 8001fae:	3306      	adds	r3, #6
 8001fb0:	7d7a      	ldrb	r2, [r7, #21]
 8001fb2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fb6:	fb01 f202 	mul.w	r2, r1, r2
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	737b      	strb	r3, [r7, #13]
      BSP_LCD_GLASS_Clear();
 8001fc6:	f7ff ff6d 	bl	8001ea4 <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff44 	bl	8001e5c <BSP_LCD_GLASS_DisplayString>

      /* user button pressed stop the scrolling sentence */
      if (bLCDGlass_KeyPressed)
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <BSP_LCD_GLASS_ScrollSentence+0x12e>
      {
        bLCDGlass_KeyPressed = 0;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <BSP_LCD_GLASS_ScrollSentence+0x160>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
        return;
 8001fe4:	e014      	b.n	8002010 <BSP_LCD_GLASS_ScrollSentence+0x158>
      }
      HAL_Delay(ScrollSpeed);
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f809 	bl	8003000 <HAL_Delay>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8001fee:	7dbb      	ldrb	r3, [r7, #22]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	75bb      	strb	r3, [r7, #22]
 8001ff4:	7dba      	ldrb	r2, [r7, #22]
 8001ff6:	7d7b      	ldrb	r3, [r7, #21]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d396      	bcc.n	8001f2a <BSP_LCD_GLASS_ScrollSentence+0x72>
  for (repetition = 0; repetition < nScroll; repetition++)
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	3301      	adds	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	b29b      	uxth	r3, r3
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	429a      	cmp	r2, r3
 800200a:	d88b      	bhi.n	8001f24 <BSP_LCD_GLASS_ScrollSentence+0x6c>
 800200c:	e000      	b.n	8002010 <BSP_LCD_GLASS_ScrollSentence+0x158>
    return;
 800200e:	bf00      	nop
    }
  }
}
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200025d4 	.word	0x200025d4

0800201c <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0c0      	sub	sp, #256	; 0x100
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002024:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8002034:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002038:	2244      	movs	r2, #68	; 0x44
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f008 fb17 	bl	800a670 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	2288      	movs	r2, #136	; 0x88
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f008 fb10 	bl	800a670 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b51      	ldr	r3, [pc, #324]	; (8002198 <LCD_MspInit+0x17c>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <LCD_MspInit+0x17c>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <LCD_MspInit+0x17c>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8002068:	2304      	movs	r3, #4
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8002074:	2301      	movs	r3, #1
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 800207a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fd24 	bl	8006acc <HAL_RCC_OscConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d000      	beq.n	800208c <LCD_MspInit+0x70>
  {
    while (1);
 800208a:	e7fe      	b.n	800208a <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800208c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002090:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	4618      	mov	r0, r3
 80020a0:	f005 fb02 	bl	80076a8 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <LCD_MspInit+0x17c>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <LCD_MspInit+0x17c>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <LCD_MspInit+0x17c>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <LCD_MspInit+0x17c>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a35      	ldr	r2, [pc, #212]	; (8002198 <LCD_MspInit+0x17c>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <LCD_MspInit+0x17c>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <LCD_MspInit+0x17c>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <LCD_MspInit+0x17c>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <LCD_MspInit+0x17c>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <LCD_MspInit+0x17c>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <LCD_MspInit+0x17c>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <LCD_MspInit+0x17c>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002104:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800211e:	230b      	movs	r3, #11
 8002120:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002124:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f002 fe79 	bl	8004e24 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8002132:	f24f 2333 	movw	r3, #62003	; 0xf233
 8002136:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800213a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800213e:	4619      	mov	r1, r3
 8002140:	4816      	ldr	r0, [pc, #88]	; (800219c <LCD_MspInit+0x180>)
 8002142:	f002 fe6f 	bl	8004e24 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8002146:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800214a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800214e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002152:	4619      	mov	r1, r3
 8002154:	4812      	ldr	r0, [pc, #72]	; (80021a0 <LCD_MspInit+0x184>)
 8002156:	f002 fe65 	bl	8004e24 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 800215a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800215e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8002162:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002166:	4619      	mov	r1, r3
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <LCD_MspInit+0x188>)
 800216a:	f002 fe5b 	bl	8004e24 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 800216e:	2002      	movs	r0, #2
 8002170:	f000 ff46 	bl	8003000 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <LCD_MspInit+0x17c>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <LCD_MspInit+0x17c>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LCD_MspInit+0x17c>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
}
 800218c:	bf00      	nop
 800218e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	48000c00 	.word	0x48000c00

080021a8 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
 80021b4:	4613      	mov	r3, r2
 80021b6:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 80021b8:	2300      	movs	r3, #0
 80021ba:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	737b      	strb	r3, [r7, #13]
 80021c0:	2300      	movs	r3, #0
 80021c2:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b6e      	cmp	r3, #110	; 0x6e
 80021ca:	f300 80a9 	bgt.w	8002320 <Convert+0x178>
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	f2c0 80dd 	blt.w	800238e <Convert+0x1e6>
 80021d4:	3b20      	subs	r3, #32
 80021d6:	2b4e      	cmp	r3, #78	; 0x4e
 80021d8:	f200 80d9 	bhi.w	800238e <Convert+0x1e6>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <Convert+0x3c>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	08002327 	.word	0x08002327
 80021e8:	0800238f 	.word	0x0800238f
 80021ec:	0800238f 	.word	0x0800238f
 80021f0:	0800238f 	.word	0x0800238f
 80021f4:	0800238f 	.word	0x0800238f
 80021f8:	0800236f 	.word	0x0800236f
 80021fc:	0800238f 	.word	0x0800238f
 8002200:	0800238f 	.word	0x0800238f
 8002204:	08002335 	.word	0x08002335
 8002208:	0800233b 	.word	0x0800233b
 800220c:	0800232d 	.word	0x0800232d
 8002210:	08002361 	.word	0x08002361
 8002214:	0800238f 	.word	0x0800238f
 8002218:	08002359 	.word	0x08002359
 800221c:	0800238f 	.word	0x0800238f
 8002220:	08002369 	.word	0x08002369
 8002224:	0800237f 	.word	0x0800237f
 8002228:	0800237f 	.word	0x0800237f
 800222c:	0800237f 	.word	0x0800237f
 8002230:	0800237f 	.word	0x0800237f
 8002234:	0800237f 	.word	0x0800237f
 8002238:	0800237f 	.word	0x0800237f
 800223c:	0800237f 	.word	0x0800237f
 8002240:	0800237f 	.word	0x0800237f
 8002244:	0800237f 	.word	0x0800237f
 8002248:	0800237f 	.word	0x0800237f
 800224c:	0800238f 	.word	0x0800238f
 8002250:	0800238f 	.word	0x0800238f
 8002254:	0800238f 	.word	0x0800238f
 8002258:	0800238f 	.word	0x0800238f
 800225c:	0800238f 	.word	0x0800238f
 8002260:	0800238f 	.word	0x0800238f
 8002264:	0800238f 	.word	0x0800238f
 8002268:	0800238f 	.word	0x0800238f
 800226c:	0800238f 	.word	0x0800238f
 8002270:	0800238f 	.word	0x0800238f
 8002274:	0800238f 	.word	0x0800238f
 8002278:	0800238f 	.word	0x0800238f
 800227c:	0800238f 	.word	0x0800238f
 8002280:	0800238f 	.word	0x0800238f
 8002284:	0800238f 	.word	0x0800238f
 8002288:	0800238f 	.word	0x0800238f
 800228c:	0800238f 	.word	0x0800238f
 8002290:	0800238f 	.word	0x0800238f
 8002294:	0800238f 	.word	0x0800238f
 8002298:	0800238f 	.word	0x0800238f
 800229c:	0800238f 	.word	0x0800238f
 80022a0:	0800238f 	.word	0x0800238f
 80022a4:	0800238f 	.word	0x0800238f
 80022a8:	0800238f 	.word	0x0800238f
 80022ac:	0800238f 	.word	0x0800238f
 80022b0:	0800238f 	.word	0x0800238f
 80022b4:	0800238f 	.word	0x0800238f
 80022b8:	0800238f 	.word	0x0800238f
 80022bc:	0800238f 	.word	0x0800238f
 80022c0:	0800238f 	.word	0x0800238f
 80022c4:	0800238f 	.word	0x0800238f
 80022c8:	0800238f 	.word	0x0800238f
 80022cc:	0800238f 	.word	0x0800238f
 80022d0:	0800238f 	.word	0x0800238f
 80022d4:	0800238f 	.word	0x0800238f
 80022d8:	0800238f 	.word	0x0800238f
 80022dc:	0800238f 	.word	0x0800238f
 80022e0:	0800238f 	.word	0x0800238f
 80022e4:	0800238f 	.word	0x0800238f
 80022e8:	0800238f 	.word	0x0800238f
 80022ec:	0800238f 	.word	0x0800238f
 80022f0:	0800238f 	.word	0x0800238f
 80022f4:	08002341 	.word	0x08002341
 80022f8:	0800238f 	.word	0x0800238f
 80022fc:	0800238f 	.word	0x0800238f
 8002300:	0800238f 	.word	0x0800238f
 8002304:	0800238f 	.word	0x0800238f
 8002308:	0800238f 	.word	0x0800238f
 800230c:	0800238f 	.word	0x0800238f
 8002310:	0800238f 	.word	0x0800238f
 8002314:	0800238f 	.word	0x0800238f
 8002318:	08002349 	.word	0x08002349
 800231c:	08002351 	.word	0x08002351
 8002320:	2bff      	cmp	r3, #255	; 0xff
 8002322:	d028      	beq.n	8002376 <Convert+0x1ce>
 8002324:	e033      	b.n	800238e <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	81fb      	strh	r3, [r7, #14]
      break;
 800232a:	e04f      	b.n	80023cc <Convert+0x224>

    case '*':
      ch = C_STAR;
 800232c:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8002330:	81fb      	strh	r3, [r7, #14]
      break;
 8002332:	e04b      	b.n	80023cc <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 8002334:	2328      	movs	r3, #40	; 0x28
 8002336:	81fb      	strh	r3, [r7, #14]
      break;
 8002338:	e048      	b.n	80023cc <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 800233a:	2311      	movs	r3, #17
 800233c:	81fb      	strh	r3, [r7, #14]
      break;
 800233e:	e045      	b.n	80023cc <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 8002340:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002344:	81fb      	strh	r3, [r7, #14]
      break;
 8002346:	e041      	b.n	80023cc <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 8002348:	f24b 2310 	movw	r3, #45584	; 0xb210
 800234c:	81fb      	strh	r3, [r7, #14]
      break;
 800234e:	e03d      	b.n	80023cc <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 8002350:	f242 2310 	movw	r3, #8720	; 0x2210
 8002354:	81fb      	strh	r3, [r7, #14]
      break;
 8002356:	e039      	b.n	80023cc <Convert+0x224>
    case '�' :
      ch = C_UMAP;
      break;

    case '-' :
      ch = C_MINUS;
 8002358:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800235c:	81fb      	strh	r3, [r7, #14]
      break;
 800235e:	e035      	b.n	80023cc <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 8002360:	f24a 0314 	movw	r3, #40980	; 0xa014
 8002364:	81fb      	strh	r3, [r7, #14]
      break;
 8002366:	e031      	b.n	80023cc <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 8002368:	23c0      	movs	r3, #192	; 0xc0
 800236a:	81fb      	strh	r3, [r7, #14]
      break;
 800236c:	e02e      	b.n	80023cc <Convert+0x224>

      break;
    case '%' :
      ch = C_PERCENT_2;
 800236e:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 8002372:	81fb      	strh	r3, [r7, #14]
      break;
 8002374:	e02a      	b.n	80023cc <Convert+0x224>
    case 255 :
      ch = C_FULL;
 8002376:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 800237a:	81fb      	strh	r3, [r7, #14]
      break ;
 800237c:	e026      	b.n	80023cc <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	3b30      	subs	r3, #48	; 0x30
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <Convert+0x280>)
 8002386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800238a:	81fb      	strh	r3, [r7, #14]
      break;
 800238c:	e01e      	b.n	80023cc <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b5a      	cmp	r3, #90	; 0x5a
 8002394:	d80a      	bhi.n	80023ac <Convert+0x204>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d906      	bls.n	80023ac <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3b41      	subs	r3, #65	; 0x41
 80023a4:	4a21      	ldr	r2, [pc, #132]	; (800242c <Convert+0x284>)
 80023a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023aa:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b7a      	cmp	r3, #122	; 0x7a
 80023b2:	d80a      	bhi.n	80023ca <Convert+0x222>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b60      	cmp	r3, #96	; 0x60
 80023ba:	d906      	bls.n	80023ca <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3b61      	subs	r3, #97	; 0x61
 80023c2:	4a1a      	ldr	r2, [pc, #104]	; (800242c <Convert+0x284>)
 80023c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c8:	81fb      	strh	r3, [r7, #14]
      }
      break;
 80023ca:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d103      	bne.n	80023da <Convert+0x232>
  {
    ch |= 0x0002;
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 80023da:	78bb      	ldrb	r3, [r7, #2]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d103      	bne.n	80023e8 <Convert+0x240>
  {
    ch |= 0x0020;
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 80023e8:	230c      	movs	r3, #12
 80023ea:	737b      	strb	r3, [r7, #13]
 80023ec:	2300      	movs	r3, #0
 80023ee:	733b      	strb	r3, [r7, #12]
 80023f0:	e010      	b.n	8002414 <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80023f2:	89fa      	ldrh	r2, [r7, #14]
 80023f4:	7b7b      	ldrb	r3, [r7, #13]
 80023f6:	fa42 f303 	asr.w	r3, r2, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	7b3b      	ldrb	r3, [r7, #12]
 80023fe:	f002 020f 	and.w	r2, r2, #15
 8002402:	490b      	ldr	r1, [pc, #44]	; (8002430 <Convert+0x288>)
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8002408:	7b7b      	ldrb	r3, [r7, #13]
 800240a:	3b04      	subs	r3, #4
 800240c:	737b      	strb	r3, [r7, #13]
 800240e:	7b3b      	ldrb	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	733b      	strb	r3, [r7, #12]
 8002414:	7b3b      	ldrb	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d9eb      	bls.n	80023f2 <Convert+0x24a>
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	0800b7c4 	.word	0x0800b7c4
 800242c:	0800b790 	.word	0x0800b790
 8002430:	20002614 	.word	0x20002614

08002434 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	70fb      	strb	r3, [r7, #3]
 8002446:	460b      	mov	r3, r1
 8002448:	70bb      	strb	r3, [r7, #2]
 800244a:	4613      	mov	r3, r2
 800244c:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 8002452:	78ba      	ldrb	r2, [r7, #2]
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fea5 	bl	80021a8 <Convert>

  switch (Position)
 800245e:	787b      	ldrb	r3, [r7, #1]
 8002460:	2b05      	cmp	r3, #5
 8002462:	f200 835b 	bhi.w	8002b1c <WriteChar+0x6e8>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <WriteChar+0x38>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	08002485 	.word	0x08002485
 8002470:	0800257f 	.word	0x0800257f
 8002474:	08002699 	.word	0x08002699
 8002478:	0800279b 	.word	0x0800279b
 800247c:	080028c9 	.word	0x080028c9
 8002480:	08002a13 	.word	0x08002a13
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002484:	4b80      	ldr	r3, [pc, #512]	; (8002688 <WriteChar+0x254>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	f003 0210 	and.w	r2, r3, #16
 800248e:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <WriteChar+0x254>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	05db      	lsls	r3, r3, #23
 8002496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249a:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800249c:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <WriteChar+0x254>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	059b      	lsls	r3, r3, #22
 80024a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a8:	431a      	orrs	r2, r3
 80024aa:	4b77      	ldr	r3, [pc, #476]	; (8002688 <WriteChar+0x254>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a74      	ldr	r2, [pc, #464]	; (800268c <WriteChar+0x258>)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4874      	ldr	r0, [pc, #464]	; (8002690 <WriteChar+0x25c>)
 80024be:	f003 fcb5 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <WriteChar+0x254>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	f003 0210 	and.w	r2, r3, #16
 80024cc:	4b6e      	ldr	r3, [pc, #440]	; (8002688 <WriteChar+0x254>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	05db      	lsls	r3, r3, #23
 80024d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d8:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80024da:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <WriteChar+0x254>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	059b      	lsls	r3, r3, #22
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	431a      	orrs	r2, r3
 80024e8:	4b67      	ldr	r3, [pc, #412]	; (8002688 <WriteChar+0x254>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <WriteChar+0x258>)
 80024f8:	2102      	movs	r1, #2
 80024fa:	4865      	ldr	r0, [pc, #404]	; (8002690 <WriteChar+0x25c>)
 80024fc:	f003 fc96 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <WriteChar+0x254>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	f003 0210 	and.w	r2, r3, #16
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <WriteChar+0x254>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002516:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002518:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <WriteChar+0x254>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	059b      	lsls	r3, r3, #22
 8002520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002524:	431a      	orrs	r2, r3
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <WriteChar+0x254>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a55      	ldr	r2, [pc, #340]	; (800268c <WriteChar+0x258>)
 8002536:	2104      	movs	r1, #4
 8002538:	4855      	ldr	r0, [pc, #340]	; (8002690 <WriteChar+0x25c>)
 800253a:	f003 fc77 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <WriteChar+0x254>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	f003 0210 	and.w	r2, r3, #16
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <WriteChar+0x254>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	05db      	lsls	r3, r3, #23
 8002550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002554:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <WriteChar+0x254>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	059b      	lsls	r3, r3, #22
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	431a      	orrs	r2, r3
 8002564:	4b48      	ldr	r3, [pc, #288]	; (8002688 <WriteChar+0x254>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <WriteChar+0x258>)
 8002574:	2106      	movs	r1, #6
 8002576:	4846      	ldr	r0, [pc, #280]	; (8002690 <WriteChar+0x25c>)
 8002578:	f003 fc58 	bl	8005e2c <HAL_LCD_Write>
      break;
 800257c:	e2cf      	b.n	8002b1e <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <WriteChar+0x254>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	019b      	lsls	r3, r3, #6
 8002584:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <WriteChar+0x254>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	035b      	lsls	r3, r3, #13
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8002596:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <WriteChar+0x254>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	031b      	lsls	r3, r3, #12
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	431a      	orrs	r2, r3
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <WriteChar+0x254>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a37      	ldr	r2, [pc, #220]	; (8002694 <WriteChar+0x260>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	4835      	ldr	r0, [pc, #212]	; (8002690 <WriteChar+0x25c>)
 80025bc:	f003 fc36 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <WriteChar+0x254>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80025ca:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <WriteChar+0x254>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	035b      	lsls	r3, r3, #13
 80025d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d6:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <WriteChar+0x254>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	031b      	lsls	r3, r3, #12
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <WriteChar+0x254>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a26      	ldr	r2, [pc, #152]	; (8002694 <WriteChar+0x260>)
 80025fa:	2102      	movs	r1, #2
 80025fc:	4824      	ldr	r0, [pc, #144]	; (8002690 <WriteChar+0x25c>)
 80025fe:	f003 fc15 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <WriteChar+0x254>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <WriteChar+0x254>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	035b      	lsls	r3, r3, #13
 8002614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002618:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <WriteChar+0x254>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	031b      	lsls	r3, r3, #12
 8002622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002626:	431a      	orrs	r2, r3
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <WriteChar+0x254>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <WriteChar+0x260>)
 800263c:	2104      	movs	r1, #4
 800263e:	4814      	ldr	r0, [pc, #80]	; (8002690 <WriteChar+0x25c>)
 8002640:	f003 fbf4 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <WriteChar+0x254>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <WriteChar+0x254>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	035b      	lsls	r3, r3, #13
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <WriteChar+0x254>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	031b      	lsls	r3, r3, #12
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	431a      	orrs	r2, r3
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <WriteChar+0x254>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	015b      	lsls	r3, r3, #5
 8002672:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <WriteChar+0x260>)
 800267e:	2106      	movs	r1, #6
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <WriteChar+0x25c>)
 8002682:	f003 fbd3 	bl	8005e2c <HAL_LCD_Write>
      break;
 8002686:	e24a      	b.n	8002b1e <WriteChar+0x6ea>
 8002688:	20002614 	.word	0x20002614
 800268c:	ff3fffe7 	.word	0xff3fffe7
 8002690:	200025d8 	.word	0x200025d8
 8002694:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002698:	4b88      	ldr	r3, [pc, #544]	; (80028bc <WriteChar+0x488>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	03db      	lsls	r3, r3, #15
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b86      	ldr	r3, [pc, #536]	; (80028bc <WriteChar+0x488>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	075b      	lsls	r3, r3, #29
 80026a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ac:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80026ae:	4b83      	ldr	r3, [pc, #524]	; (80028bc <WriteChar+0x488>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	431a      	orrs	r2, r3
 80026bc:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <WriteChar+0x488>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	039b      	lsls	r3, r3, #14
 80026c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a7c      	ldr	r2, [pc, #496]	; (80028c0 <WriteChar+0x48c>)
 80026d0:	2100      	movs	r1, #0
 80026d2:	487c      	ldr	r0, [pc, #496]	; (80028c4 <WriteChar+0x490>)
 80026d4:	f003 fbaa 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <WriteChar+0x488>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	03db      	lsls	r3, r3, #15
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b76      	ldr	r3, [pc, #472]	; (80028bc <WriteChar+0x488>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	075b      	lsls	r3, r3, #29
 80026e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ec:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80026ee:	4b73      	ldr	r3, [pc, #460]	; (80028bc <WriteChar+0x488>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	071b      	lsls	r3, r3, #28
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	431a      	orrs	r2, r3
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <WriteChar+0x488>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <WriteChar+0x48c>)
 8002710:	2102      	movs	r1, #2
 8002712:	486c      	ldr	r0, [pc, #432]	; (80028c4 <WriteChar+0x490>)
 8002714:	f003 fb8a 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <WriteChar+0x488>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	03db      	lsls	r3, r3, #15
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b66      	ldr	r3, [pc, #408]	; (80028bc <WriteChar+0x488>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	075b      	lsls	r3, r3, #29
 8002728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800272c:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <WriteChar+0x488>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	071b      	lsls	r3, r3, #28
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	431a      	orrs	r2, r3
 800273c:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <WriteChar+0x488>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a5c      	ldr	r2, [pc, #368]	; (80028c0 <WriteChar+0x48c>)
 8002750:	2104      	movs	r1, #4
 8002752:	485c      	ldr	r0, [pc, #368]	; (80028c4 <WriteChar+0x490>)
 8002754:	f003 fb6a 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <WriteChar+0x488>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	03db      	lsls	r3, r3, #15
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <WriteChar+0x488>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	075b      	lsls	r3, r3, #29
 8002768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276c:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <WriteChar+0x488>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	071b      	lsls	r3, r3, #28
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	431a      	orrs	r2, r3
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <WriteChar+0x488>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	039b      	lsls	r3, r3, #14
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a4c      	ldr	r2, [pc, #304]	; (80028c0 <WriteChar+0x48c>)
 8002790:	2106      	movs	r1, #6
 8002792:	484c      	ldr	r0, [pc, #304]	; (80028c4 <WriteChar+0x490>)
 8002794:	f003 fb4a 	bl	8005e2c <HAL_LCD_Write>
      break;
 8002798:	e1c1      	b.n	8002b1e <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <WriteChar+0x488>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	07da      	lsls	r2, r3, #31
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <WriteChar+0x488>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	079b      	lsls	r3, r3, #30
 80027a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80027b6:	2100      	movs	r1, #0
 80027b8:	4842      	ldr	r0, [pc, #264]	; (80028c4 <WriteChar+0x490>)
 80027ba:	f003 fb37 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <WriteChar+0x488>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0202 	and.w	r2, r3, #2
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <WriteChar+0x488>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f06f 0203 	mvn.w	r2, #3
 80027da:	2101      	movs	r1, #1
 80027dc:	4839      	ldr	r0, [pc, #228]	; (80028c4 <WriteChar+0x490>)
 80027de:	f003 fb25 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <WriteChar+0x488>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	07da      	lsls	r2, r3, #31
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <WriteChar+0x488>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	079b      	lsls	r3, r3, #30
 80027f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80027fe:	2102      	movs	r1, #2
 8002800:	4830      	ldr	r0, [pc, #192]	; (80028c4 <WriteChar+0x490>)
 8002802:	f003 fb13 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <WriteChar+0x488>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0202 	and.w	r2, r3, #2
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <WriteChar+0x488>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f06f 0203 	mvn.w	r2, #3
 8002822:	2103      	movs	r1, #3
 8002824:	4827      	ldr	r0, [pc, #156]	; (80028c4 <WriteChar+0x490>)
 8002826:	f003 fb01 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <WriteChar+0x488>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	07da      	lsls	r2, r3, #31
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <WriteChar+0x488>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	079b      	lsls	r3, r3, #30
 8002838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002846:	2104      	movs	r1, #4
 8002848:	481e      	ldr	r0, [pc, #120]	; (80028c4 <WriteChar+0x490>)
 800284a:	f003 faef 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <WriteChar+0x488>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0202 	and.w	r2, r3, #2
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <WriteChar+0x488>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f06f 0203 	mvn.w	r2, #3
 800286a:	2105      	movs	r1, #5
 800286c:	4815      	ldr	r0, [pc, #84]	; (80028c4 <WriteChar+0x490>)
 800286e:	f003 fadd 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <WriteChar+0x488>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	07da      	lsls	r2, r3, #31
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <WriteChar+0x488>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	079b      	lsls	r3, r3, #30
 8002880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800288e:	2106      	movs	r1, #6
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <WriteChar+0x490>)
 8002892:	f003 facb 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <WriteChar+0x488>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0202 	and.w	r2, r3, #2
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <WriteChar+0x488>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f06f 0203 	mvn.w	r2, #3
 80028b2:	2107      	movs	r1, #7
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <WriteChar+0x490>)
 80028b6:	f003 fab9 	bl	8005e2c <HAL_LCD_Write>
      break;
 80028ba:	e130      	b.n	8002b1e <WriteChar+0x6ea>
 80028bc:	20002614 	.word	0x20002614
 80028c0:	cfff3fff 	.word	0xcfff3fff
 80028c4:	200025d8 	.word	0x200025d8

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80028c8:	4b97      	ldr	r3, [pc, #604]	; (8002b28 <WriteChar+0x6f4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	065b      	lsls	r3, r3, #25
 80028d0:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80028d4:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <WriteChar+0x6f4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80028ea:	2100      	movs	r1, #0
 80028ec:	488f      	ldr	r0, [pc, #572]	; (8002b2c <WriteChar+0x6f8>)
 80028ee:	f003 fa9d 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80028f2:	4b8d      	ldr	r3, [pc, #564]	; (8002b28 <WriteChar+0x6f4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	f003 0208 	and.w	r2, r3, #8
 80028fc:	4b8a      	ldr	r3, [pc, #552]	; (8002b28 <WriteChar+0x6f4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f06f 020c 	mvn.w	r2, #12
 8002912:	2101      	movs	r1, #1
 8002914:	4885      	ldr	r0, [pc, #532]	; (8002b2c <WriteChar+0x6f8>)
 8002916:	f003 fa89 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800291a:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <WriteChar+0x6f4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	065b      	lsls	r3, r3, #25
 8002922:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002926:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <WriteChar+0x6f4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800293c:	2102      	movs	r1, #2
 800293e:	487b      	ldr	r0, [pc, #492]	; (8002b2c <WriteChar+0x6f8>)
 8002940:	f003 fa74 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <WriteChar+0x6f4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	f003 0208 	and.w	r2, r3, #8
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <WriteChar+0x6f4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f06f 020c 	mvn.w	r2, #12
 8002964:	2103      	movs	r1, #3
 8002966:	4871      	ldr	r0, [pc, #452]	; (8002b2c <WriteChar+0x6f8>)
 8002968:	f003 fa60 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800296c:	4b6e      	ldr	r3, [pc, #440]	; (8002b28 <WriteChar+0x6f4>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	065b      	lsls	r3, r3, #25
 8002974:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002978:	4b6b      	ldr	r3, [pc, #428]	; (8002b28 <WriteChar+0x6f4>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800298e:	2104      	movs	r1, #4
 8002990:	4866      	ldr	r0, [pc, #408]	; (8002b2c <WriteChar+0x6f8>)
 8002992:	f003 fa4b 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002996:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <WriteChar+0x6f4>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f003 0208 	and.w	r2, r3, #8
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <WriteChar+0x6f4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f06f 020c 	mvn.w	r2, #12
 80029b6:	2105      	movs	r1, #5
 80029b8:	485c      	ldr	r0, [pc, #368]	; (8002b2c <WriteChar+0x6f8>)
 80029ba:	f003 fa37 	bl	8005e2c <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80029be:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <WriteChar+0x6f4>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	065b      	lsls	r3, r3, #25
 80029c6:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <WriteChar+0x6f4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80029e0:	2106      	movs	r1, #6
 80029e2:	4852      	ldr	r0, [pc, #328]	; (8002b2c <WriteChar+0x6f8>)
 80029e4:	f003 fa22 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80029e8:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <WriteChar+0x6f4>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f003 0208 	and.w	r2, r3, #8
 80029f2:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <WriteChar+0x6f4>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f06f 020c 	mvn.w	r2, #12
 8002a08:	2107      	movs	r1, #7
 8002a0a:	4848      	ldr	r0, [pc, #288]	; (8002b2c <WriteChar+0x6f8>)
 8002a0c:	f003 fa0e 	bl	8005e2c <HAL_LCD_Write>
      break;
 8002a10:	e085      	b.n	8002b1e <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <WriteChar+0x6f4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	045b      	lsls	r3, r3, #17
 8002a18:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002a1c:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <WriteChar+0x6f4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <WriteChar+0x6f4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	025b      	lsls	r3, r3, #9
 8002a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a36:	431a      	orrs	r2, r3
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <WriteChar+0x6f4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	069b      	lsls	r3, r3, #26
 8002a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <WriteChar+0x6fc>)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4837      	ldr	r0, [pc, #220]	; (8002b2c <WriteChar+0x6f8>)
 8002a50:	f003 f9ec 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <WriteChar+0x6f4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	045b      	lsls	r3, r3, #17
 8002a5a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002a5e:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <WriteChar+0x6f4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <WriteChar+0x6f4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	025b      	lsls	r3, r3, #9
 8002a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <WriteChar+0x6f4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	069b      	lsls	r3, r3, #26
 8002a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <WriteChar+0x6fc>)
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4826      	ldr	r0, [pc, #152]	; (8002b2c <WriteChar+0x6f8>)
 8002a92:	f003 f9cb 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <WriteChar+0x6f4>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	045b      	lsls	r3, r3, #17
 8002a9c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <WriteChar+0x6f4>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <WriteChar+0x6f4>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	431a      	orrs	r2, r3
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <WriteChar+0x6f4>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <WriteChar+0x6fc>)
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	4816      	ldr	r0, [pc, #88]	; (8002b2c <WriteChar+0x6f8>)
 8002ad4:	f003 f9aa 	bl	8005e2c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <WriteChar+0x6f4>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	045b      	lsls	r3, r3, #17
 8002ade:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <WriteChar+0x6f4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <WriteChar+0x6f4>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	025b      	lsls	r3, r3, #9
 8002af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afc:	431a      	orrs	r2, r3
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <WriteChar+0x6f4>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	08db      	lsrs	r3, r3, #3
 8002b04:	069b      	lsls	r3, r3, #26
 8002b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <WriteChar+0x6fc>)
 8002b12:	2106      	movs	r1, #6
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <WriteChar+0x6f8>)
 8002b16:	f003 f989 	bl	8005e2c <HAL_LCD_Write>
      break;
 8002b1a:	e000      	b.n	8002b1e <WriteChar+0x6ea>

    default:
      break;
 8002b1c:	bf00      	nop
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20002614 	.word	0x20002614
 8002b2c:	200025d8 	.word	0x200025d8
 8002b30:	fbfdfcff 	.word	0xfbfdfcff

08002b34 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <BSP_QSPI_Init+0xa8>)
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002b40:	4825      	ldr	r0, [pc, #148]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b42:	f003 fb59 	bl	80061f8 <HAL_QSPI_DeInit>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e03f      	b.n	8002bd0 <BSP_QSPI_Init+0x9c>
  }

  /* System level initialization */
  QSPI_MspInit();
 8002b50:	f000 f846 	bl	8002be0 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002b54:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b62:	2210      	movs	r2, #16
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e003      	b.n	8002b8a <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b90:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002b9e:	480e      	ldr	r0, [pc, #56]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002ba0:	f003 fab4 	bl	800610c <HAL_QSPI_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e010      	b.n	8002bd0 <BSP_QSPI_Init+0x9c>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002bae:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002bb0:	f000 f862 	bl	8002c78 <QSPI_ResetMemory>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e008      	b.n	8002bd0 <BSP_QSPI_Init+0x9c>
  }

  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <BSP_QSPI_Init+0xa4>)
 8002bc0:	f000 f89e 	bl	8002d00 <QSPI_DummyCyclesCfg>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <BSP_QSPI_Init+0x9a>
  {
    return QSPI_NOT_SUPPORTED;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e000      	b.n	8002bd0 <BSP_QSPI_Init+0x9c>
  }

  return QSPI_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20002624 	.word	0x20002624
 8002bdc:	a0001000 	.word	0xa0001000

08002be0 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <QSPI_MspInit+0x90>)
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <QSPI_MspInit+0x90>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6513      	str	r3, [r2, #80]	; 0x50
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <QSPI_MspInit+0x90>)
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c1c:	f043 0310 	orr.w	r3, r3, #16
 8002c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <QSPI_MspInit+0x90>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 8002c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c40:	230a      	movs	r3, #10
 8002c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480a      	ldr	r0, [pc, #40]	; (8002c74 <QSPI_MspInit+0x94>)
 8002c4c:	f002 f8ea 	bl	8004e24 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8002c50:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8002c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4804      	ldr	r0, [pc, #16]	; (8002c74 <QSPI_MspInit+0x94>)
 8002c62:	f002 f8df 	bl	8004e24 <HAL_GPIO_Init>
}
 8002c66:	bf00      	nop
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48001000 	.word	0x48001000

08002c78 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b090      	sub	sp, #64	; 0x40
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c84:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8002c86:	2366      	movs	r3, #102	; 0x66
 8002c88:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4812      	ldr	r0, [pc, #72]	; (8002cfc <QSPI_ResetMemory+0x84>)
 8002cb2:	f003 fac5 	bl	8006240 <HAL_QSPI_Command>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e019      	b.n	8002cf4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8002cc0:	2399      	movs	r3, #153	; 0x99
 8002cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <QSPI_ResetMemory+0x84>)
 8002cd0:	f003 fab6 	bl	8006240 <HAL_QSPI_Command>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e00a      	b.n	8002cf4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002cde:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ce2:	4806      	ldr	r0, [pc, #24]	; (8002cfc <QSPI_ResetMemory+0x84>)
 8002ce4:	f000 f8d6 	bl	8002e94 <QSPI_AutoPollingMemReady>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3740      	adds	r7, #64	; 0x40
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20002624 	.word	0x20002624

08002d00 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b094      	sub	sp, #80	; 0x50
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8002d0e:	2385      	movs	r3, #133	; 0x85
 8002d10:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d30:	2300      	movs	r3, #0
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	482e      	ldr	r0, [pc, #184]	; (8002df8 <QSPI_DummyCyclesCfg+0xf8>)
 8002d40:	f003 fa7e 	bl	8006240 <HAL_QSPI_Command>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e04f      	b.n	8002dee <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d4e:	f107 030b 	add.w	r3, r7, #11
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4619      	mov	r1, r3
 8002d58:	4827      	ldr	r0, [pc, #156]	; (8002df8 <QSPI_DummyCyclesCfg+0xf8>)
 8002d5a:	f003 fb66 	bl	800642a <HAL_QSPI_Receive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e042      	b.n	8002dee <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002d68:	4823      	ldr	r0, [pc, #140]	; (8002df8 <QSPI_DummyCyclesCfg+0xf8>)
 8002d6a:	f000 f847 	bl	8002dfc <QSPI_WriteEnable>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e03a      	b.n	8002dee <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002d78:	2381      	movs	r3, #129	; 0x81
 8002d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	b25a      	sxtb	r2, r3
 8002d86:	23f0      	movs	r3, #240	; 0xf0
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	230a      	movs	r3, #10
 8002dac:	408b      	lsls	r3, r1
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <QSPI_DummyCyclesCfg+0xf8>)
 8002dc4:	f003 fa3c 	bl	8006240 <HAL_QSPI_Command>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00d      	b.n	8002dee <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dd2:	f107 030b 	add.w	r3, r7, #11
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4806      	ldr	r0, [pc, #24]	; (8002df8 <QSPI_DummyCyclesCfg+0xf8>)
 8002dde:	f003 fa8d 	bl	80062fc <HAL_QSPI_Transmit>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3750      	adds	r7, #80	; 0x50
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20002624 	.word	0x20002624

08002dfc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b096      	sub	sp, #88	; 0x58
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e22:	2300      	movs	r3, #0
 8002e24:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e26:	2300      	movs	r3, #0
 8002e28:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e2a:	f107 0320 	add.w	r3, r7, #32
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4619      	mov	r1, r3
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <QSPI_WriteEnable+0x94>)
 8002e36:	f003 fa03 	bl	8006240 <HAL_QSPI_Command>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e020      	b.n	8002e86 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8002e44:	2302      	movs	r3, #2
 8002e46:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002e54:	2310      	movs	r3, #16
 8002e56:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8002e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e68:	f107 0208 	add.w	r2, r7, #8
 8002e6c:	f107 0120 	add.w	r1, r7, #32
 8002e70:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e74:	4806      	ldr	r0, [pc, #24]	; (8002e90 <QSPI_WriteEnable+0x94>)
 8002e76:	f003 fb7a 	bl	800656e <HAL_QSPI_AutoPolling>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3758      	adds	r7, #88	; 0x58
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20002624 	.word	0x20002624

08002e94 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b096      	sub	sp, #88	; 0x58
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002ea4:	2305      	movs	r3, #5
 8002ea6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ede:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8002ee0:	f107 0208 	add.w	r2, r7, #8
 8002ee4:	f107 0120 	add.w	r1, r7, #32
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <QSPI_AutoPollingMemReady+0x70>)
 8002eec:	f003 fb3f 	bl	800656e <HAL_QSPI_AutoPolling>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3758      	adds	r7, #88	; 0x58
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20002624 	.word	0x20002624

08002f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_Init+0x3c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <HAL_Init+0x3c>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f001 fbba 	bl	8004698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f80f 	bl	8002f48 <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	e001      	b.n	8002f3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f36:	f7fe fb85 	bl	8001644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_InitTick+0x6c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d023      	beq.n	8002fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_InitTick+0x70>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_InitTick+0x6c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fbc5 	bl	8004702 <HAL_SYSTICK_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d809      	bhi.n	8002f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f84:	2200      	movs	r2, #0
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f001 fb8f 	bl	80046ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_InitTick+0x74>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e007      	b.n	8002fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e004      	b.n	8002fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e001      	b.n	8002fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000008 	.word	0x20000008
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x20>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	20002668 	.word	0x20002668

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20002668 	.word	0x20002668

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff ffee 	bl	8002fe8 <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d005      	beq.n	8003026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_Delay+0x44>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003026:	bf00      	nop
 8003028:	f7ff ffde 	bl	8002fe8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d8f7      	bhi.n	8003028 <HAL_Delay+0x28>
  {
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000008 	.word	0x20000008

08003048 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <LL_ADC_SetOffset+0x44>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	03fff000 	.word	0x03fff000

080030f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	461a      	mov	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3360      	adds	r3, #96	; 0x60
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3330      	adds	r3, #48	; 0x30
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	211f      	movs	r1, #31
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	f003 011f 	and.w	r1, r3, #31
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	431a      	orrs	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3314      	adds	r3, #20
 800320e:	461a      	mov	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	0e5b      	lsrs	r3, r3, #25
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	4413      	add	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0d1b      	lsrs	r3, r3, #20
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2107      	movs	r1, #7
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	0d1b      	lsrs	r3, r3, #20
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0318 	and.w	r3, r3, #24
 8003276:	4908      	ldr	r1, [pc, #32]	; (8003298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003278:	40d9      	lsrs	r1, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	400b      	ands	r3, r1
 800327e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003282:	431a      	orrs	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	0007ffff 	.word	0x0007ffff

0800329c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 031f 	and.w	r3, r3, #31
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80032e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6093      	str	r3, [r2, #8]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800330c:	d101      	bne.n	8003312 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003334:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335c:	d101      	bne.n	8003362 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <LL_ADC_IsEnabled+0x18>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <LL_ADC_IsEnabled+0x1a>
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d101      	bne.n	80033ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d101      	bne.n	80033d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e136      	b.n	800366c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fe f93d 	bl	800168c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff67 	bl	80032f8 <LL_ADC_IsDeepPowerDownEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff4d 	bl	80032d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff82 	bl	8003348 <LL_ADC_IsInternalRegulatorEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff66 	bl	8003320 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003454:	4b87      	ldr	r3, [pc, #540]	; (8003674 <HAL_ADC_Init+0x290>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	4a87      	ldr	r2, [pc, #540]	; (8003678 <HAL_ADC_Init+0x294>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003468:	e002      	b.n	8003470 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f9      	bne.n	800346a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff64 	bl	8003348 <LL_ADC_IsInternalRegulatorEnabled>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff75 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 80034ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80cf 	bne.w	800365a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 80cb 	bne.w	800365a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034cc:	f043 0202 	orr.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff49 	bl	8003370 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d115      	bne.n	8003510 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e4:	4865      	ldr	r0, [pc, #404]	; (800367c <HAL_ADC_Init+0x298>)
 80034e6:	f7ff ff43 	bl	8003370 <LL_ADC_IsEnabled>
 80034ea:	4604      	mov	r4, r0
 80034ec:	4864      	ldr	r0, [pc, #400]	; (8003680 <HAL_ADC_Init+0x29c>)
 80034ee:	f7ff ff3f 	bl	8003370 <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	431c      	orrs	r4, r3
 80034f6:	4863      	ldr	r0, [pc, #396]	; (8003684 <HAL_ADC_Init+0x2a0>)
 80034f8:	f7ff ff3a 	bl	8003370 <LL_ADC_IsEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4323      	orrs	r3, r4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4619      	mov	r1, r3
 800350a:	485f      	ldr	r0, [pc, #380]	; (8003688 <HAL_ADC_Init+0x2a4>)
 800350c:	f7ff fd9c 	bl	8003048 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7e5b      	ldrb	r3, [r3, #25]
 8003514:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800351a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003520:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003526:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d106      	bne.n	800354c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	3b01      	subs	r3, #1
 8003544:	045b      	lsls	r3, r3, #17
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_ADC_Init+0x2a8>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	69b9      	ldr	r1, [r7, #24]
 8003578:	430b      	orrs	r3, r1
 800357a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff08 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 8003586:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff15 	bl	80033bc <LL_ADC_INJ_IsConversionOngoing>
 8003592:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d13d      	bne.n	8003616 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d13a      	bne.n	8003616 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	430b      	orrs	r3, r1
 80035c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d118      	bne.n	8003606 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035f6:	430a      	orrs	r2, r1
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	611a      	str	r2, [r3, #16]
 8003604:	e007      	b.n	8003616 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10c      	bne.n	8003638 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f023 010f 	bic.w	r1, r3, #15
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
 8003636:	e007      	b.n	8003648 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 020f 	bic.w	r2, r2, #15
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f023 0303 	bic.w	r3, r3, #3
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
 8003658:	e007      	b.n	800366a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800366a:	7ffb      	ldrb	r3, [r7, #31]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3724      	adds	r7, #36	; 0x24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	20000000 	.word	0x20000000
 8003678:	053e2d63 	.word	0x053e2d63
 800367c:	50040000 	.word	0x50040000
 8003680:	50040100 	.word	0x50040100
 8003684:	50040200 	.word	0x50040200
 8003688:	50040300 	.word	0x50040300
 800368c:	fff0c007 	.word	0xfff0c007

08003690 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c8:	4882      	ldr	r0, [pc, #520]	; (80038d4 <HAL_ADC_IRQHandler+0x228>)
 80036ca:	f7ff fde7 	bl	800329c <LL_ADC_GetMultimode>
 80036ce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d017      	beq.n	800370a <HAL_ADC_IRQHandler+0x5e>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fe41 	bl	8004384 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2202      	movs	r2, #2
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_ADC_IRQHandler+0x72>
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8083 	beq.w	8003830 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d07d      	beq.n	8003830 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fd02 	bl	800315a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d062      	beq.n	8003822 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <HAL_ADC_IRQHandler+0x22c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d002      	beq.n	800376c <HAL_ADC_IRQHandler+0xc0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e000      	b.n	800376e <HAL_ADC_IRQHandler+0xc2>
 800376c:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <HAL_ADC_IRQHandler+0x230>)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	4293      	cmp	r3, r2
 8003774:	d008      	beq.n	8003788 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d002      	beq.n	8003788 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d104      	bne.n	8003792 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	623b      	str	r3, [r7, #32]
 8003790:	e00c      	b.n	80037ac <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <HAL_ADC_IRQHandler+0x22c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d002      	beq.n	80037a2 <HAL_ADC_IRQHandler+0xf6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	e000      	b.n	80037a4 <HAL_ADC_IRQHandler+0xf8>
 80037a2:	4b4e      	ldr	r3, [pc, #312]	; (80038dc <HAL_ADC_IRQHandler+0x230>)
 80037a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d135      	bne.n	8003822 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d12e      	bne.n	8003822 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fde4 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d11a      	bne.n	800380a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020c 	bic.w	r2, r2, #12
 80037e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d112      	bne.n	8003822 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
 8003808:	e00b      	b.n	8003822 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fb04 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	220c      	movs	r2, #12
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_ADC_IRQHandler+0x198>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 809f 	beq.w	800398e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8099 	beq.w	800398e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fcad 	bl	80031d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800387e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fc68 	bl	800315a <LL_ADC_REG_IsTriggerSourceSWStart>
 800388a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_ADC_IRQHandler+0x22c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d002      	beq.n	800389c <HAL_ADC_IRQHandler+0x1f0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	e000      	b.n	800389e <HAL_ADC_IRQHandler+0x1f2>
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_ADC_IRQHandler+0x230>)
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d008      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d002      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	d104      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	e013      	b.n	80038ea <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_ADC_IRQHandler+0x22c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x234>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	e007      	b.n	80038e2 <HAL_ADC_IRQHandler+0x236>
 80038d2:	bf00      	nop
 80038d4:	50040300 	.word	0x50040300
 80038d8:	50040100 	.word	0x50040100
 80038dc:	50040000 	.word	0x50040000
 80038e0:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <HAL_ADC_IRQHandler+0x42c>)
 80038e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d047      	beq.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_ADC_IRQHandler+0x25e>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03f      	beq.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d13a      	bne.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d133      	bne.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d12e      	bne.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fd48 	bl	80033bc <LL_ADC_INJ_IsConversionOngoing>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11a      	bne.n	8003968 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003940:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d112      	bne.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
 8003966:	e00b      	b.n	8003980 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fcd7 	bl	8004334 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2260      	movs	r2, #96	; 0x60
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d011      	beq.n	80039bc <HAL_ADC_IRQHandler+0x310>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f896 	bl	8003ae0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <HAL_ADC_IRQHandler+0x340>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fcbd 	bl	800435c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x370>
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fcaf 	bl	8004370 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d036      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x3e8>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d031      	beq.n	8003a94 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e014      	b.n	8003a68 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a44:	4825      	ldr	r0, [pc, #148]	; (8003adc <HAL_ADC_IRQHandler+0x430>)
 8003a46:	f7ff fc37 	bl	80032b8 <LL_ADC_GetMultiDMATransfer>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003a50:	2301      	movs	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	e008      	b.n	8003a68 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003a64:	2301      	movs	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10e      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f834 	bl	8003af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x424>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f043 0208 	orr.w	r2, r3, #8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fc3c 	bl	8004348 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003ad0:	bf00      	nop
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	50040000 	.word	0x50040000
 8003adc:	50040300 	.word	0x50040300

08003ae0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b0b6      	sub	sp, #216	; 0xd8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x22>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e3c7      	b.n	80042ba <HAL_ADC_ConfigChannel+0x7b2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fc2d 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 83a8 	bne.w	8004294 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d824      	bhi.n	8003b96 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	3b02      	subs	r3, #2
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d81b      	bhi.n	8003b8e <HAL_ADC_ConfigChannel+0x86>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_ADC_ConfigChannel+0x54>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b7d 	.word	0x08003b7d
 8003b68:	08003b85 	.word	0x08003b85
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	220c      	movs	r2, #12
 8003b70:	605a      	str	r2, [r3, #4]
          break;
 8003b72:	e011      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2212      	movs	r2, #18
 8003b78:	605a      	str	r2, [r3, #4]
          break;
 8003b7a:	e00d      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2218      	movs	r2, #24
 8003b80:	605a      	str	r2, [r3, #4]
          break;
 8003b82:	e009      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8a:	605a      	str	r2, [r3, #4]
          break;
 8003b8c:	e004      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2206      	movs	r2, #6
 8003b92:	605a      	str	r2, [r3, #4]
          break;
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003b96:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f7ff faeb 	bl	8003180 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fbf1 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 8003bb4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fbfd 	bl	80033bc <LL_ADC_INJ_IsConversionOngoing>
 8003bc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 81a6 	bne.w	8003f1c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 81a1 	bne.w	8003f1c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff fb09 	bl	80031fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d00a      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c1e:	f7ff fa47 	bl	80030b0 <LL_ADC_SetOffset>
 8003c22:	e17b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fa64 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x148>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fa59 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	e01e      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x186>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fa4e 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	e004      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8003c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x19e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	e018      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x1d0>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e004      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d106      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fa1d 	bl	8003124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fa01 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff f9f6 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	e01e      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x24c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff f9eb 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003d44:	2320      	movs	r3, #32
 8003d46:	e004      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x264>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	e018      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x296>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003d90:	2320      	movs	r3, #32
 8003d92:	e004      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d106      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f9ba 	bl	8003124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f99e 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x2d4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff f993 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	e01e      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x312>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2102      	movs	r1, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f988 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	e004      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x32a>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0e9b      	lsrs	r3, r3, #26
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	e016      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x358>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f959 	bl	8003124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2103      	movs	r1, #3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f93d 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x396>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f932 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	e017      	b.n	8003ece <HAL_ADC_ConfigChannel+0x3c6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f927 	bl	80030f8 <LL_ADC_GetOffsetChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e003      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x3de>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	0e9b      	lsrs	r3, r3, #26
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	e011      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x402>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003efe:	2320      	movs	r3, #32
 8003f00:	e003      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d106      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2103      	movs	r1, #3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f904 	bl	8003124 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fa25 	bl	8003370 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 813f 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7ff f98a 	bl	8003254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a8e      	ldr	r2, [pc, #568]	; (8004180 <HAL_ADC_ConfigChannel+0x678>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f040 8130 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x46c>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	bf94      	ite	ls
 8003f6c:	2301      	movls	r3, #1
 8003f6e:	2300      	movhi	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e019      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x4a0>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e003      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	2b09      	cmp	r3, #9
 8003fa0:	bf94      	ite	ls
 8003fa2:	2301      	movls	r3, #1
 8003fa4:	2300      	movhi	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d079      	beq.n	80040a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x4c0>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	069b      	lsls	r3, r3, #26
 8003fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc6:	e015      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x4ec>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e003      	b.n	8003fec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x50c>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	3301      	adds	r3, #1
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	e017      	b.n	8004044 <HAL_ADC_ConfigChannel+0x53c>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800402c:	2320      	movs	r3, #32
 800402e:	e003      	b.n	8004038 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	ea42 0103 	orr.w	r1, r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_ADC_ConfigChannel+0x562>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	3301      	adds	r3, #1
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	051b      	lsls	r3, r3, #20
 8004068:	e018      	b.n	800409c <HAL_ADC_ConfigChannel+0x594>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e003      	b.n	800408e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	f003 021f 	and.w	r2, r3, #31
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800409c:	430b      	orrs	r3, r1
 800409e:	e080      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x5b4>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	3301      	adds	r3, #1
 80040b4:	069b      	lsls	r3, r3, #26
 80040b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ba:	e015      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x5e0>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80040d4:	2320      	movs	r3, #32
 80040d6:	e003      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	069b      	lsls	r3, r3, #26
 80040e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x600>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	3301      	adds	r3, #1
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	e017      	b.n	8004138 <HAL_ADC_ConfigChannel+0x630>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	61fb      	str	r3, [r7, #28]
  return result;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004120:	2320      	movs	r3, #32
 8004122:	e003      	b.n	800412c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x65c>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	f003 021f 	and.w	r2, r3, #31
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	3b1e      	subs	r3, #30
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004162:	e01d      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x698>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	613b      	str	r3, [r7, #16]
  return result;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800417c:	2320      	movs	r3, #32
 800417e:	e005      	b.n	800418c <HAL_ADC_ConfigChannel+0x684>
 8004180:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f003 021f 	and.w	r2, r3, #31
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	3b1e      	subs	r3, #30
 800419a:	051b      	lsls	r3, r3, #20
 800419c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a0:	430b      	orrs	r3, r1
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	6892      	ldr	r2, [r2, #8]
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7ff f829 	bl	80031fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d07a      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b8:	4843      	ldr	r0, [pc, #268]	; (80042c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80041ba:	f7fe ff6b 	bl	8003094 <LL_ADC_GetCommonPathInternalCh>
 80041be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a41      	ldr	r2, [pc, #260]	; (80042cc <HAL_ADC_ConfigChannel+0x7c4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d12c      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d126      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x6e4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d15d      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041f4:	4619      	mov	r1, r3
 80041f6:	4834      	ldr	r0, [pc, #208]	; (80042c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80041f8:	f7fe ff39 	bl	800306e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	4a36      	ldr	r2, [pc, #216]	; (80042dc <HAL_ADC_ConfigChannel+0x7d4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004216:	e002      	b.n	800421e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b01      	subs	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f9      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004224:	e040      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d118      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x75a>
 8004230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d112      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_ADC_ConfigChannel+0x748>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_ADC_ConfigChannel+0x7cc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d12d      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004258:	4619      	mov	r1, r3
 800425a:	481b      	ldr	r0, [pc, #108]	; (80042c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800425c:	f7fe ff07 	bl	800306e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004260:	e024      	b.n	80042ac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d120      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800426c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11a      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <HAL_ADC_ConfigChannel+0x7c8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d115      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800428a:	4619      	mov	r1, r3
 800428c:	480e      	ldr	r0, [pc, #56]	; (80042c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800428e:	f7fe feee 	bl	800306e <LL_ADC_SetCommonPathInternalCh>
 8004292:	e00c      	b.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80042a6:	e002      	b.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	37d8      	adds	r7, #216	; 0xd8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	80080000 	.word	0x80080000
 80042c8:	50040300 	.word	0x50040300
 80042cc:	c7520000 	.word	0xc7520000
 80042d0:	50040000 	.word	0x50040000
 80042d4:	50040200 	.word	0x50040200
 80042d8:	20000000 	.word	0x20000000
 80042dc:	053e2d63 	.word	0x053e2d63
 80042e0:	cb840000 	.word	0xcb840000
 80042e4:	80000001 	.word	0x80000001

080042e8 <LL_ADC_IsEnabled>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <LL_ADC_IsEnabled+0x18>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <LL_ADC_IsEnabled+0x1a>
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_REG_IsConversionOngoing>:
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d101      	bne.n	8004326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b09f      	sub	sp, #124	; 0x7c
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e093      	b.n	80044de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80043be:	2300      	movs	r3, #0
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80043c2:	2300      	movs	r3, #0
 80043c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a47      	ldr	r2, [pc, #284]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d102      	bne.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043d0:	4b46      	ldr	r3, [pc, #280]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	e001      	b.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e072      	b.n	80044de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff87 	bl	800430e <LL_ADC_REG_IsConversionOngoing>
 8004400:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff81 	bl	800430e <LL_ADC_REG_IsConversionOngoing>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d154      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004414:	2b00      	cmp	r3, #0
 8004416:	d151      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004418:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800441a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02c      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004436:	035b      	lsls	r3, r3, #13
 8004438:	430b      	orrs	r3, r1
 800443a:	431a      	orrs	r2, r3
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004440:	4829      	ldr	r0, [pc, #164]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004442:	f7ff ff51 	bl	80042e8 <LL_ADC_IsEnabled>
 8004446:	4604      	mov	r4, r0
 8004448:	4828      	ldr	r0, [pc, #160]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800444a:	f7ff ff4d 	bl	80042e8 <LL_ADC_IsEnabled>
 800444e:	4603      	mov	r3, r0
 8004450:	431c      	orrs	r4, r3
 8004452:	4828      	ldr	r0, [pc, #160]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004454:	f7ff ff48 	bl	80042e8 <LL_ADC_IsEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	4323      	orrs	r3, r4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d137      	bne.n	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004468:	f023 030f 	bic.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	6811      	ldr	r1, [r2, #0]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	6892      	ldr	r2, [r2, #8]
 8004474:	430a      	orrs	r2, r1
 8004476:	431a      	orrs	r2, r3
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447c:	e028      	b.n	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800448a:	4817      	ldr	r0, [pc, #92]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800448c:	f7ff ff2c 	bl	80042e8 <LL_ADC_IsEnabled>
 8004490:	4604      	mov	r4, r0
 8004492:	4816      	ldr	r0, [pc, #88]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004494:	f7ff ff28 	bl	80042e8 <LL_ADC_IsEnabled>
 8004498:	4603      	mov	r3, r0
 800449a:	431c      	orrs	r4, r3
 800449c:	4815      	ldr	r0, [pc, #84]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800449e:	f7ff ff23 	bl	80042e8 <LL_ADC_IsEnabled>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4323      	orrs	r3, r4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d112      	bne.n	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044b2:	f023 030f 	bic.w	r3, r3, #15
 80044b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ba:	e009      	b.n	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f043 0220 	orr.w	r2, r3, #32
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80044ce:	e000      	b.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80044de:	4618      	mov	r0, r3
 80044e0:	377c      	adds	r7, #124	; 0x7c
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd90      	pop	{r4, r7, pc}
 80044e6:	bf00      	nop
 80044e8:	50040000 	.word	0x50040000
 80044ec:	50040100 	.word	0x50040100
 80044f0:	50040300 	.word	0x50040300
 80044f4:	50040200 	.word	0x50040200

080044f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60d3      	str	r3, [r2, #12]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <__NVIC_GetPriorityGrouping+0x18>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 0307 	and.w	r3, r3, #7
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db0b      	blt.n	8004586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	4907      	ldr	r1, [pc, #28]	; (8004594 <__NVIC_EnableIRQ+0x38>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2001      	movs	r0, #1
 800457e:	fa00 f202 	lsl.w	r2, r0, r2
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db0a      	blt.n	80045c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	490c      	ldr	r1, [pc, #48]	; (80045e4 <__NVIC_SetPriority+0x4c>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	440b      	add	r3, r1
 80045bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c0:	e00a      	b.n	80045d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4908      	ldr	r1, [pc, #32]	; (80045e8 <__NVIC_SetPriority+0x50>)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3b04      	subs	r3, #4
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	440b      	add	r3, r1
 80045d6:	761a      	strb	r2, [r3, #24]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf28      	it	cs
 800460a:	2304      	movcs	r3, #4
 800460c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3304      	adds	r3, #4
 8004612:	2b06      	cmp	r3, #6
 8004614:	d902      	bls.n	800461c <NVIC_EncodePriority+0x30>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3b03      	subs	r3, #3
 800461a:	e000      	b.n	800461e <NVIC_EncodePriority+0x32>
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	401a      	ands	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004634:	f04f 31ff 	mov.w	r1, #4294967295
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	43d9      	mvns	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	4313      	orrs	r3, r2
         );
}
 8004646:	4618      	mov	r0, r3
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3b01      	subs	r3, #1
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004664:	d301      	bcc.n	800466a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004666:	2301      	movs	r3, #1
 8004668:	e00f      	b.n	800468a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <SysTick_Config+0x40>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004672:	210f      	movs	r1, #15
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	f7ff ff8e 	bl	8004598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <SysTick_Config+0x40>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <SysTick_Config+0x40>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	e000e010 	.word	0xe000e010

08004698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ff29 	bl	80044f8 <__NVIC_SetPriorityGrouping>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	4603      	mov	r3, r0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046c0:	f7ff ff3e 	bl	8004540 <__NVIC_GetPriorityGrouping>
 80046c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff ff8e 	bl	80045ec <NVIC_EncodePriority>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff5d 	bl	8004598 <__NVIC_SetPriority>
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff31 	bl	800455c <__NVIC_EnableIRQ>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ffa2 	bl	8004654 <SysTick_Config>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0ac      	b.n	8004888 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f8b2 	bl	800489c <DFSDM_GetChannelFromInstance>
 8004738:	4603      	mov	r3, r0
 800473a:	4a55      	ldr	r2, [pc, #340]	; (8004890 <HAL_DFSDM_ChannelInit+0x174>)
 800473c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e09f      	b.n	8004888 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fd fb17 	bl	8001d7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800474e:	4b51      	ldr	r3, [pc, #324]	; (8004894 <HAL_DFSDM_ChannelInit+0x178>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	4a4f      	ldr	r2, [pc, #316]	; (8004894 <HAL_DFSDM_ChannelInit+0x178>)
 8004756:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004758:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <HAL_DFSDM_ChannelInit+0x178>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d125      	bne.n	80047ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a4c      	ldr	r2, [pc, #304]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 8004766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800476a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800476c:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4948      	ldr	r1, [pc, #288]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a46      	ldr	r2, [pc, #280]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 8004780:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004784:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d108      	bne.n	80047a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	493f      	ldr	r1, [pc, #252]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80047a0:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <HAL_DFSDM_ChannelInit+0x17c>)
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80047ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80047d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 020f 	bic.w	r2, r2, #15
 80047e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004810:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 0207 	and.w	r2, r2, #7
 800483c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004868:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f810 	bl	800489c <DFSDM_GetChannelFromInstance>
 800487c:	4602      	mov	r2, r0
 800487e:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_DFSDM_ChannelInit+0x174>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20002670 	.word	0x20002670
 8004894:	2000266c 	.word	0x2000266c
 8004898:	40016000 	.word	0x40016000

0800489c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <DFSDM_GetChannelFromInstance+0x7c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d102      	bne.n	80048b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e02b      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <DFSDM_GetChannelFromInstance+0x80>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d102      	bne.n	80048c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e024      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <DFSDM_GetChannelFromInstance+0x84>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d102      	bne.n	80048ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80048c8:	2302      	movs	r3, #2
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e01d      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <DFSDM_GetChannelFromInstance+0x88>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d102      	bne.n	80048dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80048d6:	2304      	movs	r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e016      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <DFSDM_GetChannelFromInstance+0x8c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d102      	bne.n	80048ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80048e4:	2305      	movs	r3, #5
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e00f      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a0f      	ldr	r2, [pc, #60]	; (800492c <DFSDM_GetChannelFromInstance+0x90>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d102      	bne.n	80048f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80048f2:	2306      	movs	r3, #6
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e008      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <DFSDM_GetChannelFromInstance+0x94>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d102      	bne.n	8004906 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004900:	2307      	movs	r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e001      	b.n	800490a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004906:	2303      	movs	r3, #3
 8004908:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40016000 	.word	0x40016000
 800491c:	40016020 	.word	0x40016020
 8004920:	40016040 	.word	0x40016040
 8004924:	40016080 	.word	0x40016080
 8004928:	400160a0 	.word	0x400160a0
 800492c:	400160c0 	.word	0x400160c0
 8004930:	400160e0 	.word	0x400160e0

08004934 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e098      	b.n	8004a78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <HAL_DMA_Init+0x150>)
 800494e:	429a      	cmp	r2, r3
 8004950:	d80f      	bhi.n	8004972 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <HAL_DMA_Init+0x154>)
 800495a:	4413      	add	r3, r2
 800495c:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <HAL_DMA_Init+0x158>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	009a      	lsls	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a48      	ldr	r2, [pc, #288]	; (8004a90 <HAL_DMA_Init+0x15c>)
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
 8004970:	e00e      	b.n	8004990 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	4b46      	ldr	r3, [pc, #280]	; (8004a94 <HAL_DMA_Init+0x160>)
 800497a:	4413      	add	r3, r2
 800497c:	4a43      	ldr	r2, [pc, #268]	; (8004a8c <HAL_DMA_Init+0x158>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	009a      	lsls	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a42      	ldr	r2, [pc, #264]	; (8004a98 <HAL_DMA_Init+0x164>)
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ea:	d039      	beq.n	8004a60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4a27      	ldr	r2, [pc, #156]	; (8004a90 <HAL_DMA_Init+0x15c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d11a      	bne.n	8004a2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049f6:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_DMA_Init+0x168>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f003 031c 	and.w	r3, r3, #28
 8004a02:	210f      	movs	r1, #15
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	4924      	ldr	r1, [pc, #144]	; (8004a9c <HAL_DMA_Init+0x168>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_DMA_Init+0x168>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f003 031c 	and.w	r3, r3, #28
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	491d      	ldr	r1, [pc, #116]	; (8004a9c <HAL_DMA_Init+0x168>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]
 8004a2a:	e019      	b.n	8004a60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <HAL_DMA_Init+0x16c>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f003 031c 	and.w	r3, r3, #28
 8004a38:	210f      	movs	r1, #15
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	4917      	ldr	r1, [pc, #92]	; (8004aa0 <HAL_DMA_Init+0x16c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_DMA_Init+0x16c>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6859      	ldr	r1, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f003 031c 	and.w	r3, r3, #28
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	4911      	ldr	r1, [pc, #68]	; (8004aa0 <HAL_DMA_Init+0x16c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40020407 	.word	0x40020407
 8004a88:	bffdfff8 	.word	0xbffdfff8
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	40020000 	.word	0x40020000
 8004a94:	bffdfbf8 	.word	0xbffdfbf8
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	400200a8 	.word	0x400200a8
 8004aa0:	400204a8 	.word	0x400204a8

08004aa4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e072      	b.n	8004b9c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_DMA_DeInit+0x104>)
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d80f      	bhi.n	8004af2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b34      	ldr	r3, [pc, #208]	; (8004bac <HAL_DMA_DeInit+0x108>)
 8004ada:	4413      	add	r3, r2
 8004adc:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <HAL_DMA_DeInit+0x10c>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	009a      	lsls	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_DMA_DeInit+0x110>)
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
 8004af0:	e00e      	b.n	8004b10 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_DMA_DeInit+0x114>)
 8004afa:	4413      	add	r3, r2
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <HAL_DMA_DeInit+0x10c>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	009a      	lsls	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <HAL_DMA_DeInit+0x118>)
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	f003 021c 	and.w	r2, r3, #28
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_DMA_DeInit+0x110>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10d      	bne.n	8004b52 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b36:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <HAL_DMA_DeInit+0x11c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f003 031c 	and.w	r3, r3, #28
 8004b42:	210f      	movs	r1, #15
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	491d      	ldr	r1, [pc, #116]	; (8004bc0 <HAL_DMA_DeInit+0x11c>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	e00c      	b.n	8004b6c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <HAL_DMA_DeInit+0x120>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f003 031c 	and.w	r3, r3, #28
 8004b5e:	210f      	movs	r1, #15
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	4917      	ldr	r1, [pc, #92]	; (8004bc4 <HAL_DMA_DeInit+0x120>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40020407 	.word	0x40020407
 8004bac:	bffdfff8 	.word	0xbffdfff8
 8004bb0:	cccccccd 	.word	0xcccccccd
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	bffdfbf8 	.word	0xbffdfbf8
 8004bbc:	40020400 	.word	0x40020400
 8004bc0:	400200a8 	.word	0x400200a8
 8004bc4:	400204a8 	.word	0x400204a8

08004bc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d008      	beq.n	8004bf2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2204      	movs	r2, #4
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e022      	b.n	8004c38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 020e 	bic.w	r2, r2, #14
 8004c00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	f003 021c 	and.w	r2, r3, #28
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f202 	lsl.w	r2, r1, r2
 8004c24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d005      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
 8004c66:	e029      	b.n	8004cbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 020e 	bic.w	r2, r2, #14
 8004c76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	f003 021c 	and.w	r2, r3, #28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
    }
  }
  return status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f003 031c 	and.w	r3, r3, #28
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d026      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x7a>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d021      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0204 	bic.w	r2, r2, #4
 8004d18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f003 021c 	and.w	r2, r3, #28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2104      	movs	r1, #4
 8004d28:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d071      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004d3e:	e06c      	b.n	8004e1a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	f003 031c 	and.w	r3, r3, #28
 8004d48:	2202      	movs	r2, #2
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02e      	beq.n	8004db2 <HAL_DMA_IRQHandler+0xec>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d029      	beq.n	8004db2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 020a 	bic.w	r2, r2, #10
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f003 021c 	and.w	r2, r3, #28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2102      	movs	r1, #2
 8004d92:	fa01 f202 	lsl.w	r2, r1, r2
 8004d96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d038      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004db0:	e033      	b.n	8004e1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f003 031c 	and.w	r3, r3, #28
 8004dba:	2208      	movs	r2, #8
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02a      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x156>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d025      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 020e 	bic.w	r2, r2, #14
 8004dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f003 021c 	and.w	r2, r3, #28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f202 	lsl.w	r2, r1, r2
 8004df2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
}
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e32:	e17f      	b.n	8005134 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2101      	movs	r1, #1
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8171 	beq.w	800512e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d005      	beq.n	8004e64 <HAL_GPIO_Init+0x40>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d130      	bne.n	8004ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f003 0201 	and.w	r2, r3, #1
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d118      	bne.n	8004f04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ed8:	2201      	movs	r2, #1
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f003 0201 	and.w	r2, r3, #1
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d017      	beq.n	8004f40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d123      	bne.n	8004f94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	08da      	lsrs	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3208      	adds	r2, #8
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	220f      	movs	r2, #15
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	08da      	lsrs	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3208      	adds	r2, #8
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0203 	and.w	r2, r3, #3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80ac 	beq.w	800512e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_GPIO_Init+0x330>)
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	4a5e      	ldr	r2, [pc, #376]	; (8005154 <HAL_GPIO_Init+0x330>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_GPIO_Init+0x330>)
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fee:	4a5a      	ldr	r2, [pc, #360]	; (8005158 <HAL_GPIO_Init+0x334>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	220f      	movs	r2, #15
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4013      	ands	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005018:	d025      	beq.n	8005066 <HAL_GPIO_Init+0x242>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a4f      	ldr	r2, [pc, #316]	; (800515c <HAL_GPIO_Init+0x338>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <HAL_GPIO_Init+0x23e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a4e      	ldr	r2, [pc, #312]	; (8005160 <HAL_GPIO_Init+0x33c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_GPIO_Init+0x23a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a4d      	ldr	r2, [pc, #308]	; (8005164 <HAL_GPIO_Init+0x340>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_GPIO_Init+0x236>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4c      	ldr	r2, [pc, #304]	; (8005168 <HAL_GPIO_Init+0x344>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_GPIO_Init+0x232>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a4b      	ldr	r2, [pc, #300]	; (800516c <HAL_GPIO_Init+0x348>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x22e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4a      	ldr	r2, [pc, #296]	; (8005170 <HAL_GPIO_Init+0x34c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_GPIO_Init+0x22a>
 800504a:	2306      	movs	r3, #6
 800504c:	e00c      	b.n	8005068 <HAL_GPIO_Init+0x244>
 800504e:	2307      	movs	r3, #7
 8005050:	e00a      	b.n	8005068 <HAL_GPIO_Init+0x244>
 8005052:	2305      	movs	r3, #5
 8005054:	e008      	b.n	8005068 <HAL_GPIO_Init+0x244>
 8005056:	2304      	movs	r3, #4
 8005058:	e006      	b.n	8005068 <HAL_GPIO_Init+0x244>
 800505a:	2303      	movs	r3, #3
 800505c:	e004      	b.n	8005068 <HAL_GPIO_Init+0x244>
 800505e:	2302      	movs	r3, #2
 8005060:	e002      	b.n	8005068 <HAL_GPIO_Init+0x244>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_GPIO_Init+0x244>
 8005066:	2300      	movs	r3, #0
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	f002 0203 	and.w	r2, r2, #3
 800506e:	0092      	lsls	r2, r2, #2
 8005070:	4093      	lsls	r3, r2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005078:	4937      	ldr	r1, [pc, #220]	; (8005158 <HAL_GPIO_Init+0x334>)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	3302      	adds	r3, #2
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_GPIO_Init+0x350>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050aa:	4a32      	ldr	r2, [pc, #200]	; (8005174 <HAL_GPIO_Init+0x350>)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050b0:	4b30      	ldr	r3, [pc, #192]	; (8005174 <HAL_GPIO_Init+0x350>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050d4:	4a27      	ldr	r2, [pc, #156]	; (8005174 <HAL_GPIO_Init+0x350>)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <HAL_GPIO_Init+0x350>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <HAL_GPIO_Init+0x350>)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_GPIO_Init+0x350>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	43db      	mvns	r3, r3
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005128:	4a12      	ldr	r2, [pc, #72]	; (8005174 <HAL_GPIO_Init+0x350>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f ae78 	bne.w	8004e34 <HAL_GPIO_Init+0x10>
  }
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
 8005158:	40010000 	.word	0x40010000
 800515c:	48000400 	.word	0x48000400
 8005160:	48000800 	.word	0x48000800
 8005164:	48000c00 	.word	0x48000c00
 8005168:	48001000 	.word	0x48001000
 800516c:	48001400 	.word	0x48001400
 8005170:	48001800 	.word	0x48001800
 8005174:	40010400 	.word	0x40010400

08005178 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005186:	e0cd      	b.n	8005324 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005188:	2201      	movs	r2, #1
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80c0 	beq.w	800531e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800519e:	4a68      	ldr	r2, [pc, #416]	; (8005340 <HAL_GPIO_DeInit+0x1c8>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	089b      	lsrs	r3, r3, #2
 80051a4:	3302      	adds	r3, #2
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	220f      	movs	r2, #15
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051c6:	d025      	beq.n	8005214 <HAL_GPIO_DeInit+0x9c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a5e      	ldr	r2, [pc, #376]	; (8005344 <HAL_GPIO_DeInit+0x1cc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01f      	beq.n	8005210 <HAL_GPIO_DeInit+0x98>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a5d      	ldr	r2, [pc, #372]	; (8005348 <HAL_GPIO_DeInit+0x1d0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d019      	beq.n	800520c <HAL_GPIO_DeInit+0x94>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a5c      	ldr	r2, [pc, #368]	; (800534c <HAL_GPIO_DeInit+0x1d4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_GPIO_DeInit+0x90>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a5b      	ldr	r2, [pc, #364]	; (8005350 <HAL_GPIO_DeInit+0x1d8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00d      	beq.n	8005204 <HAL_GPIO_DeInit+0x8c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a5a      	ldr	r2, [pc, #360]	; (8005354 <HAL_GPIO_DeInit+0x1dc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <HAL_GPIO_DeInit+0x88>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a59      	ldr	r2, [pc, #356]	; (8005358 <HAL_GPIO_DeInit+0x1e0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <HAL_GPIO_DeInit+0x84>
 80051f8:	2306      	movs	r3, #6
 80051fa:	e00c      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 80051fc:	2307      	movs	r3, #7
 80051fe:	e00a      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 8005200:	2305      	movs	r3, #5
 8005202:	e008      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 8005204:	2304      	movs	r3, #4
 8005206:	e006      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 8005208:	2303      	movs	r3, #3
 800520a:	e004      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 800520c:	2302      	movs	r3, #2
 800520e:	e002      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_GPIO_DeInit+0x9e>
 8005214:	2300      	movs	r3, #0
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	f002 0203 	and.w	r2, r2, #3
 800521c:	0092      	lsls	r2, r2, #2
 800521e:	4093      	lsls	r3, r2
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	429a      	cmp	r2, r3
 8005224:	d132      	bne.n	800528c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005226:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	494b      	ldr	r1, [pc, #300]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 8005230:	4013      	ands	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005234:	4b49      	ldr	r3, [pc, #292]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	43db      	mvns	r3, r3
 800523c:	4947      	ldr	r1, [pc, #284]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 800523e:	4013      	ands	r3, r2
 8005240:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005242:	4b46      	ldr	r3, [pc, #280]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	43db      	mvns	r3, r3
 800524a:	4944      	ldr	r1, [pc, #272]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 800524c:	4013      	ands	r3, r2
 800524e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005250:	4b42      	ldr	r3, [pc, #264]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	4940      	ldr	r1, [pc, #256]	; (800535c <HAL_GPIO_DeInit+0x1e4>)
 800525a:	4013      	ands	r3, r2
 800525c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	220f      	movs	r2, #15
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800526e:	4a34      	ldr	r2, [pc, #208]	; (8005340 <HAL_GPIO_DeInit+0x1c8>)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	3302      	adds	r3, #2
 8005276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	43da      	mvns	r2, r3
 800527e:	4830      	ldr	r0, [pc, #192]	; (8005340 <HAL_GPIO_DeInit+0x1c8>)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	400a      	ands	r2, r1
 8005286:	3302      	adds	r3, #2
 8005288:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2103      	movs	r1, #3
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	08da      	lsrs	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3208      	adds	r2, #8
 80052a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	220f      	movs	r2, #15
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	08d2      	lsrs	r2, r2, #3
 80052c0:	4019      	ands	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3208      	adds	r2, #8
 80052c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2103      	movs	r1, #3
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2101      	movs	r1, #1
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	2103      	movs	r1, #3
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	401a      	ands	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	2101      	movs	r1, #1
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	401a      	ands	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	f47f af2b 	bne.w	8005188 <HAL_GPIO_DeInit+0x10>
  }
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40010000 	.word	0x40010000
 8005344:	48000400 	.word	0x48000400
 8005348:	48000800 	.word	0x48000800
 800534c:	48000c00 	.word	0x48000c00
 8005350:	48001000 	.word	0x48001000
 8005354:	48001400 	.word	0x48001400
 8005358:	48001800 	.word	0x48001800
 800535c:	40010400 	.word	0x40010400

08005360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
 800536c:	4613      	mov	r3, r2
 800536e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005370:	787b      	ldrb	r3, [r7, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800537c:	e002      	b.n	8005384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e081      	b.n	80054a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc f9ae 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	e006      	b.n	8005418 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005416:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d104      	bne.n	800542a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005428:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800544c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	460b      	mov	r3, r1
 80054c4:	813b      	strh	r3, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	f040 80f9 	bne.w	80056ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_I2C_Mem_Write+0x34>
 80054de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0ed      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_I2C_Mem_Write+0x4e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0e6      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005506:	f7fd fd6f 	bl	8002fe8 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2319      	movs	r3, #25
 8005512:	2201      	movs	r2, #1
 8005514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f955 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0d1      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2221      	movs	r2, #33	; 0x21
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2240      	movs	r2, #64	; 0x40
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005550:	88f8      	ldrh	r0, [r7, #6]
 8005552:	893a      	ldrh	r2, [r7, #8]
 8005554:	8979      	ldrh	r1, [r7, #10]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4603      	mov	r3, r0
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f8b9 	bl	80056d8 <I2C_RequestMemoryWrite>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0a9      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2bff      	cmp	r3, #255	; 0xff
 8005580:	d90e      	bls.n	80055a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	b2da      	uxtb	r2, r3
 800558e:	8979      	ldrh	r1, [r7, #10]
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fabd 	bl	8005b18 <I2C_TransferConfig>
 800559e:	e00f      	b.n	80055c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	8979      	ldrh	r1, [r7, #10]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 faac 	bl	8005b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f93f 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e07b      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d034      	beq.n	8005678 <HAL_I2C_Mem_Write+0x1c8>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d130      	bne.n	8005678 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	; 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f8d1 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04d      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2bff      	cmp	r3, #255	; 0xff
 8005638:	d90e      	bls.n	8005658 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	b2da      	uxtb	r2, r3
 8005646:	8979      	ldrh	r1, [r7, #10]
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fa61 	bl	8005b18 <I2C_TransferConfig>
 8005656:	e00f      	b.n	8005678 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	b2da      	uxtb	r2, r3
 8005668:	8979      	ldrh	r1, [r7, #10]
 800566a:	2300      	movs	r3, #0
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fa50 	bl	8005b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d19e      	bne.n	80055c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f91e 	bl	80058c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e01a      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2220      	movs	r2, #32
 800569c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <HAL_I2C_Mem_Write+0x224>)
 80056aa:	400b      	ands	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
  }
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	fe00e800 	.word	0xfe00e800

080056d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	460b      	mov	r3, r1
 80056ec:	813b      	strh	r3, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	8979      	ldrh	r1, [r7, #10]
 80056f8:	4b20      	ldr	r3, [pc, #128]	; (800577c <I2C_RequestMemoryWrite+0xa4>)
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fa09 	bl	8005b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f89c 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e02c      	b.n	8005774 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
 800572a:	e015      	b.n	8005758 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800572c:	893b      	ldrh	r3, [r7, #8]
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	b29b      	uxth	r3, r3
 8005732:	b2da      	uxtb	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f882 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e012      	b.n	8005774 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800574e:	893b      	ldrh	r3, [r7, #8]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2200      	movs	r2, #0
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f830 	bl	80057c8 <I2C_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	80002000 	.word	0x80002000

08005780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b02      	cmp	r3, #2
 8005794:	d103      	bne.n	800579e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d007      	beq.n	80057bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	619a      	str	r2, [r3, #24]
  }
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d8:	e022      	b.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d01e      	beq.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fd fc01 	bl	8002fe8 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e00f      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d0cd      	beq.n	80057da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005854:	e02c      	b.n	80058b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f870 	bl	8005940 <I2C_IsErrorOccurred>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e02a      	b.n	80058c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d01e      	beq.n	80058b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fd fbb9 	bl	8002fe8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d113      	bne.n	80058b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e007      	b.n	80058c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d1cb      	bne.n	8005856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d4:	e028      	b.n	8005928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f830 	bl	8005940 <I2C_IsErrorOccurred>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e026      	b.n	8005938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fd fb7d 	bl	8002fe8 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d113      	bne.n	8005928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e007      	b.n	8005938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b20      	cmp	r3, #32
 8005934:	d1cf      	bne.n	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	d075      	beq.n	8005a58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2210      	movs	r2, #16
 8005972:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005974:	e056      	b.n	8005a24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d052      	beq.n	8005a24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fd fb33 	bl	8002fe8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_IsErrorOccurred+0x54>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d147      	bne.n	8005a24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d12e      	bne.n	8005a16 <I2C_IsErrorOccurred+0xd6>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059be:	d02a      	beq.n	8005a16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d027      	beq.n	8005a16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059d6:	f7fd fb07 	bl	8002fe8 <HAL_GetTick>
 80059da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059dc:	e01b      	b.n	8005a16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059de:	f7fd fb03 	bl	8002fe8 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b19      	cmp	r3, #25
 80059ea:	d914      	bls.n	8005a16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d1dc      	bne.n	80059de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d003      	beq.n	8005a3a <I2C_IsErrorOccurred+0xfa>
 8005a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d09d      	beq.n	8005976 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2220      	movs	r2, #32
 8005a48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f043 0304 	orr.w	r3, r3, #4
 8005a50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	f043 0308 	orr.w	r3, r3, #8
 8005a92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01c      	beq.n	8005b08 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fe56 	bl	8005780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <I2C_IsErrorOccurred+0x1d4>)
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	; 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	fe00e800 	.word	0xfe00e800

08005b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	817b      	strh	r3, [r7, #10]
 8005b26:	4613      	mov	r3, r2
 8005b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b30:	7a7b      	ldrb	r3, [r7, #9]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b38:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b46:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	0d5b      	lsrs	r3, r3, #21
 8005b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <I2C_TransferConfig+0x60>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	ea02 0103 	and.w	r1, r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	03ff63ff 	.word	0x03ff63ff

08005b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d138      	bne.n	8005c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e032      	b.n	8005c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	; 0x24
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d139      	bne.n	8005c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e033      	b.n	8005c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2224      	movs	r2, #36	; 0x24
 8005c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0af      	b.n	8005e1e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fd7e 	bl	80017d4 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e00a      	b.n	8005d0c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d9f1      	bls.n	8005cf6 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0204 	orr.w	r2, r2, #4
 8005d20:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <HAL_LCD_Init+0x17c>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6851      	ldr	r1, [r2, #4]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	4311      	orrs	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d40:	4311      	orrs	r1, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	69d2      	ldr	r2, [r2, #28]
 8005d46:	4311      	orrs	r1, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6a12      	ldr	r2, [r2, #32]
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6992      	ldr	r2, [r2, #24]
 8005d52:	4311      	orrs	r1, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f94c 	bl	8006000 <LCD_WaitForSynchro>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_LCD_Init+0xca>
  {
    return status;
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	e053      	b.n	8005e1e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005dae:	f7fd f91b 	bl	8002fe8 <HAL_GetTick>
 8005db2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005db4:	e00c      	b.n	8005dd0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005db6:	f7fd f917 	bl	8002fe8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc4:	d904      	bls.n	8005dd0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e026      	b.n	8005e1e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d1eb      	bne.n	8005db6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005dde:	f7fd f903 	bl	8002fe8 <HAL_GetTick>
 8005de2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005de4:	e00c      	b.n	8005e00 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005de6:	f7fd f8ff 	bl	8002fe8 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df4:	d904      	bls.n	8005e00 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e00e      	b.n	8005e1e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d1eb      	bne.n	8005de6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	fc00000e 	.word	0xfc00000e

08005e2c <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e40:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d002      	beq.n	8005e4e <HAL_LCD_Write+0x22>
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d144      	bne.n	8005ed8 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d12a      	bne.n	8005eb0 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_LCD_Write+0x3c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e038      	b.n	8005eda <HAL_LCD_Write+0xae>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8005e78:	f7fd f8b6 	bl	8002fe8 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005e7e:	e010      	b.n	8005ea2 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005e80:	f7fd f8b2 	bl	8002fe8 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e8e:	d908      	bls.n	8005ea2 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e01b      	b.n	8005eda <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d0e7      	beq.n	8005e80 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef4:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8005ef6:	7cbb      	ldrb	r3, [r7, #18]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d002      	beq.n	8005f02 <HAL_LCD_Clear+0x20>
 8005efc:	7cbb      	ldrb	r3, [r7, #18]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d140      	bne.n	8005f84 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_LCD_Clear+0x2e>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e03a      	b.n	8005f86 <HAL_LCD_Clear+0xa4>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f20:	f7fd f862 	bl	8002fe8 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005f26:	e010      	b.n	8005f4a <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005f28:	f7fd f85e 	bl	8002fe8 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f36:	d908      	bls.n	8005f4a <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e01d      	b.n	8005f86 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d0e7      	beq.n	8005f28 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e00a      	b.n	8005f74 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3304      	adds	r3, #4
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3301      	adds	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d9f1      	bls.n	8005f5e <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f807 	bl	8005f8e <HAL_LCD_UpdateDisplayRequest>
 8005f80:	4603      	mov	r3, r0
 8005f82:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0204 	orr.w	r2, r2, #4
 8005fac:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005fae:	f7fd f81b 	bl	8002fe8 <HAL_GetTick>
 8005fb2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8005fb4:	e010      	b.n	8005fd8 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005fb6:	f7fd f817 	bl	8002fe8 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc4:	d908      	bls.n	8005fd8 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e00f      	b.n	8005ff8 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d1e7      	bne.n	8005fb6 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006008:	f7fc ffee 	bl	8002fe8 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800600e:	e00c      	b.n	800602a <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006010:	f7fc ffea 	bl	8002fe8 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800601e:	d904      	bls.n	800602a <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e007      	b.n	800603a <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b20      	cmp	r3, #32
 8006036:	d1eb      	bne.n	8006010 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <HAL_PWREx_GetVoltageRange+0x18>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40007000 	.word	0x40007000

08006060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606e:	d130      	bne.n	80060d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006070:	4b23      	ldr	r3, [pc, #140]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d038      	beq.n	80060f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2232      	movs	r2, #50	; 0x32
 8006094:	fb02 f303 	mul.w	r3, r2, r3
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	0c9b      	lsrs	r3, r3, #18
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060a4:	e002      	b.n	80060ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d102      	bne.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f2      	bne.n	80060a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060cc:	d110      	bne.n	80060f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e00f      	b.n	80060f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d007      	beq.n	80060f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060e8:	4a05      	ldr	r2, [pc, #20]	; (8006100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40007000 	.word	0x40007000
 8006104:	20000000 	.word	0x20000000
 8006108:	431bde83 	.word	0x431bde83

0800610c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006114:	f7fc ff68 	bl	8002fe8 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e063      	b.n	80061ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb fc19 	bl	8001970 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800613e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 faf7 	bl	8006736 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	3b01      	subs	r3, #1
 8006158:	021a      	lsls	r2, r3, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	2120      	movs	r1, #32
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 faef 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d131      	bne.n	80061e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006188:	f023 0310 	bic.w	r3, r3, #16
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	0611      	lsls	r1, r2, #24
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	430b      	orrs	r3, r1
 800619e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_QSPI_Init+0xe8>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6912      	ldr	r2, [r2, #16]
 80061ae:	0411      	lsls	r1, r2, #16
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6952      	ldr	r2, [r2, #20]
 80061b4:	4311      	orrs	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6992      	ldr	r2, [r2, #24]
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	ffe0f8fe 	.word	0xffe0f8fe

080061f8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e016      	b.n	8006238 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb fbec 	bl	80019f8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800624c:	f7fc fecc 	bl	8002fe8 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_QSPI_Command+0x22>
 800625e:	2302      	movs	r3, #2
 8006260:	e048      	b.n	80062f4 <HAL_QSPI_Command+0xb4>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d137      	bne.n	80062e6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2200      	movs	r2, #0
 800628c:	2120      	movs	r1, #32
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa5f 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d125      	bne.n	80062ea <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800629e:	2200      	movs	r2, #0
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fa8c 	bl	80067c0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d115      	bne.n	80062dc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2201      	movs	r2, #1
 80062b8:	2102      	movs	r1, #2
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa49 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2202      	movs	r2, #2
 80062d0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80062da:	e006      	b.n	80062ea <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80062e4:	e001      	b.n	80062ea <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800630c:	f7fc fe6c 	bl	8002fe8 <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3320      	adds	r3, #32
 8006318:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_QSPI_Transmit+0x2e>
 8006326:	2302      	movs	r3, #2
 8006328:	e07b      	b.n	8006422 <HAL_QSPI_Transmit+0x126>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	d16a      	bne.n	8006414 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d05b      	beq.n	8006402 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2212      	movs	r2, #18
 800634e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800637e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006380:	e01b      	b.n	80063ba <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2201      	movs	r2, #1
 800638a:	2104      	movs	r1, #4
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f9e0 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006396:	7ffb      	ldrb	r3, [r7, #31]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d113      	bne.n	80063c4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	1e5a      	subs	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1df      	bne.n	8006382 <HAL_QSPI_Transmit+0x86>
 80063c2:	e000      	b.n	80063c6 <HAL_QSPI_Transmit+0xca>
          break;
 80063c4:	bf00      	nop
      }

      if (status == HAL_OK)
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d115      	bne.n	80063f8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2201      	movs	r2, #1
 80063d4:	2102      	movs	r1, #2
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f9bb 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80063e0:	7ffb      	ldrb	r3, [r7, #31]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2202      	movs	r2, #2
 80063ec:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f934 	bl	800665c <HAL_QSPI_Abort>
 80063f4:	4603      	mov	r3, r0
 80063f6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006400:	e00a      	b.n	8006418 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	f043 0208 	orr.w	r2, r3, #8
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e001      	b.n	8006418 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006420:	7ffb      	ldrb	r3, [r7, #31]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b08a      	sub	sp, #40	; 0x28
 800642e:	af02      	add	r7, sp, #8
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800643a:	f7fc fdd5 	bl	8002fe8 <HAL_GetTick>
 800643e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3320      	adds	r3, #32
 800644e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_QSPI_Receive+0x36>
 800645c:	2302      	movs	r3, #2
 800645e:	e082      	b.n	8006566 <HAL_QSPI_Receive+0x13c>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d171      	bne.n	8006558 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d062      	beq.n	8006546 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2222      	movs	r2, #34	; 0x22
 8006484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064b8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80064c2:	e01c      	b.n	80064fe <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2201      	movs	r2, #1
 80064cc:	2106      	movs	r1, #6
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f93f 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80064d8:	7ffb      	ldrb	r3, [r7, #31]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d114      	bne.n	8006508 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	1e5a      	subs	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1de      	bne.n	80064c4 <HAL_QSPI_Receive+0x9a>
 8006506:	e000      	b.n	800650a <HAL_QSPI_Receive+0xe0>
          break;
 8006508:	bf00      	nop
      }

      if (status == HAL_OK)
 800650a:	7ffb      	ldrb	r3, [r7, #31]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d115      	bne.n	800653c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2201      	movs	r2, #1
 8006518:	2102      	movs	r1, #2
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f919 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006524:	7ffb      	ldrb	r3, [r7, #31]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2202      	movs	r2, #2
 8006530:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f892 	bl	800665c <HAL_QSPI_Abort>
 8006538:	4603      	mov	r3, r0
 800653a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006544:	e00a      	b.n	800655c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	f043 0208 	orr.w	r2, r3, #8
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e001      	b.n	800655c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006564:	7ffb      	ldrb	r3, [r7, #31]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b088      	sub	sp, #32
 8006572:	af02      	add	r7, sp, #8
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800657c:	f7fc fd34 	bl	8002fe8 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_QSPI_AutoPolling+0x24>
 800658e:	2302      	movs	r3, #2
 8006590:	e060      	b.n	8006654 <HAL_QSPI_AutoPolling+0xe6>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d14f      	bne.n	8006646 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2242      	movs	r2, #66	; 0x42
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2120      	movs	r1, #32
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f8c7 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13d      	bne.n	800664a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6852      	ldr	r2, [r2, #4]
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6892      	ldr	r2, [r2, #8]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006604:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800660e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f8d3 	bl	80067c0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2201      	movs	r2, #1
 8006622:	2108      	movs	r1, #8
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f894 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2208      	movs	r2, #8
 800663a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006644:	e001      	b.n	800664a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006652:	7dfb      	ldrb	r3, [r7, #23]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006668:	f7fc fcbe 	bl	8002fe8 <HAL_GetTick>
 800666c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d056      	beq.n	800672c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0204 	bic.w	r2, r2, #4
 80066a2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fa8d 	bl	8004bc8 <HAL_DMA_Abort>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	f043 0204 	orr.w	r2, r3, #4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0202 	orr.w	r2, r2, #2
 80066d2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2201      	movs	r2, #1
 80066de:	2102      	movs	r1, #2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f836 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10e      	bne.n	800670e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2202      	movs	r2, #2
 80066f6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	2120      	movs	r1, #32
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f824 	bl	8006752 <QSPI_WaitFlagStateUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695a      	ldr	r2, [r3, #20]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006722:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006762:	e01a      	b.n	800679a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d016      	beq.n	800679a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676c:	f7fc fc3c 	bl	8002fe8 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2204      	movs	r2, #4
 8006786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	f043 0201 	orr.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e00e      	b.n	80067b8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d1d6      	bne.n	8006764 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <QSPI_Config+0x28>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067da:	d005      	beq.n	80067e8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80b9 	beq.w	8006964 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d05f      	beq.n	80068ba <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	6892      	ldr	r2, [r2, #8]
 8006802:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d031      	beq.n	8006870 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	431a      	orrs	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	431a      	orrs	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	431a      	orrs	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	049b      	lsls	r3, r3, #18
 8006828:	431a      	orrs	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	431a      	orrs	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	431a      	orrs	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	431a      	orrs	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	431a      	orrs	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	431a      	orrs	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	ea42 0103 	orr.w	r1, r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	430a      	orrs	r2, r1
 8006858:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006860:	f000 812e 	beq.w	8006ac0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	6852      	ldr	r2, [r2, #4]
 800686c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800686e:	e127      	b.n	8006ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	431a      	orrs	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	431a      	orrs	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	431a      	orrs	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	049b      	lsls	r3, r3, #18
 800688c:	431a      	orrs	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	431a      	orrs	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	431a      	orrs	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	431a      	orrs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	ea42 0103 	orr.w	r1, r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	615a      	str	r2, [r3, #20]
}
 80068b8:	e102      	b.n	8006ac0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02e      	beq.n	8006920 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	431a      	orrs	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	049b      	lsls	r3, r3, #18
 80068de:	431a      	orrs	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	ea42 0103 	orr.w	r1, r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	430a      	orrs	r2, r1
 8006908:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006910:	f000 80d6 	beq.w	8006ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	619a      	str	r2, [r3, #24]
}
 800691e:	e0cf      	b.n	8006ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	431a      	orrs	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	431a      	orrs	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	431a      	orrs	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	049b      	lsls	r3, r3, #18
 800693c:	431a      	orrs	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	431a      	orrs	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	431a      	orrs	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	431a      	orrs	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	ea42 0103 	orr.w	r1, r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	430a      	orrs	r2, r1
 8006960:	615a      	str	r2, [r3, #20]
}
 8006962:	e0ad      	b.n	8006ac0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d058      	beq.n	8006a1e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d02d      	beq.n	80069da <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	431a      	orrs	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	431a      	orrs	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	431a      	orrs	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	049b      	lsls	r3, r3, #18
 800699a:	431a      	orrs	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069cc:	d078      	beq.n	8006ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6852      	ldr	r2, [r2, #4]
 80069d6:	619a      	str	r2, [r3, #24]
}
 80069d8:	e072      	b.n	8006ac0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	431a      	orrs	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	431a      	orrs	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	049b      	lsls	r3, r3, #18
 80069f6:	431a      	orrs	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	ea42 0103 	orr.w	r1, r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	615a      	str	r2, [r3, #20]
}
 8006a1c:	e050      	b.n	8006ac0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02a      	beq.n	8006a7c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	049b      	lsls	r3, r3, #18
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	ea42 0103 	orr.w	r1, r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a6e:	d027      	beq.n	8006ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	6852      	ldr	r2, [r2, #4]
 8006a78:	619a      	str	r2, [r3, #24]
}
 8006a7a:	e021      	b.n	8006ac0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01d      	beq.n	8006ac0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	049b      	lsls	r3, r3, #18
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	ea42 0103 	orr.w	r1, r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	615a      	str	r2, [r3, #20]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e3d8      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ade:	4b97      	ldr	r3, [pc, #604]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae8:	4b94      	ldr	r3, [pc, #592]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80e4 	beq.w	8006cc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_RCC_OscConfig+0x4a>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b0c      	cmp	r3, #12
 8006b0a:	f040 808b 	bne.w	8006c24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 8087 	bne.w	8006c24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b16:	4b89      	ldr	r3, [pc, #548]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_RCC_OscConfig+0x62>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e3b0      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1a      	ldr	r2, [r3, #32]
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_RCC_OscConfig+0x7c>
 8006b3e:	4b7f      	ldr	r3, [pc, #508]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b46:	e005      	b.n	8006b54 <HAL_RCC_OscConfig+0x88>
 8006b48:	4b7c      	ldr	r3, [pc, #496]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d223      	bcs.n	8006ba0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fd43 	bl	80075e8 <RCC_SetFlashLatencyFromMSIRange>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e391      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b6c:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a72      	ldr	r2, [pc, #456]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b72:	f043 0308 	orr.w	r3, r3, #8
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b70      	ldr	r3, [pc, #448]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	496d      	ldr	r1, [pc, #436]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b8a:	4b6c      	ldr	r3, [pc, #432]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	4968      	ldr	r1, [pc, #416]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]
 8006b9e:	e025      	b.n	8006bec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ba0:	4b66      	ldr	r3, [pc, #408]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006ba6:	f043 0308 	orr.w	r3, r3, #8
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	4b63      	ldr	r3, [pc, #396]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	4960      	ldr	r1, [pc, #384]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bbe:	4b5f      	ldr	r3, [pc, #380]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	495b      	ldr	r1, [pc, #364]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fd03 	bl	80075e8 <RCC_SetFlashLatencyFromMSIRange>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e351      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bec:	f000 fc38 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	091b      	lsrs	r3, r3, #4
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	4950      	ldr	r1, [pc, #320]	; (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006bfe:	5ccb      	ldrb	r3, [r1, r3]
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
 8006c08:	4a4e      	ldr	r2, [pc, #312]	; (8006d44 <HAL_RCC_OscConfig+0x278>)
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c0c:	4b4e      	ldr	r3, [pc, #312]	; (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fc f999 	bl	8002f48 <HAL_InitTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d052      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	e335      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d032      	beq.n	8006c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c2c:	4b43      	ldr	r3, [pc, #268]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a42      	ldr	r2, [pc, #264]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c38:	f7fc f9d6 	bl	8002fe8 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c40:	f7fc f9d2 	bl	8002fe8 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e31e      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c52:	4b3a      	ldr	r3, [pc, #232]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a36      	ldr	r2, [pc, #216]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c64:	f043 0308 	orr.w	r3, r3, #8
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	4931      	ldr	r1, [pc, #196]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c7c:	4b2f      	ldr	r3, [pc, #188]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	492c      	ldr	r1, [pc, #176]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	604b      	str	r3, [r1, #4]
 8006c90:	e01a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c9e:	f7fc f9a3 	bl	8002fe8 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ca6:	f7fc f99f 	bl	8002fe8 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e2eb      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cb8:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f0      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x1da>
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d074      	beq.n	8006dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d005      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x21a>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d10e      	bne.n	8006cfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d10b      	bne.n	8006cfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce6:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d064      	beq.n	8006dbc <HAL_RCC_OscConfig+0x2f0>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d160      	bne.n	8006dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e2c8      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d06:	d106      	bne.n	8006d16 <HAL_RCC_OscConfig+0x24a>
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a0b      	ldr	r2, [pc, #44]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e026      	b.n	8006d64 <HAL_RCC_OscConfig+0x298>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d1e:	d115      	bne.n	8006d4c <HAL_RCC_OscConfig+0x280>
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a02      	ldr	r2, [pc, #8]	; (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e014      	b.n	8006d64 <HAL_RCC_OscConfig+0x298>
 8006d3a:	bf00      	nop
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	0800b748 	.word	0x0800b748
 8006d44:	20000000 	.word	0x20000000
 8006d48:	20000004 	.word	0x20000004
 8006d4c:	4ba0      	ldr	r3, [pc, #640]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a9f      	ldr	r2, [pc, #636]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	4b9d      	ldr	r3, [pc, #628]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a9c      	ldr	r2, [pc, #624]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d013      	beq.n	8006d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6c:	f7fc f93c 	bl	8002fe8 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d74:	f7fc f938 	bl	8002fe8 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b64      	cmp	r3, #100	; 0x64
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e284      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d86:	4b92      	ldr	r3, [pc, #584]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x2a8>
 8006d92:	e014      	b.n	8006dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fc f928 	bl	8002fe8 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fc f924 	bl	8002fe8 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	; 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e270      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dae:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0x2d0>
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d060      	beq.n	8006e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d005      	beq.n	8006ddc <HAL_RCC_OscConfig+0x310>
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b0c      	cmp	r3, #12
 8006dd4:	d119      	bne.n	8006e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d116      	bne.n	8006e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ddc:	4b7c      	ldr	r3, [pc, #496]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_OscConfig+0x328>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e24d      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df4:	4b76      	ldr	r3, [pc, #472]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	061b      	lsls	r3, r3, #24
 8006e02:	4973      	ldr	r1, [pc, #460]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e08:	e040      	b.n	8006e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d023      	beq.n	8006e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e12:	4b6f      	ldr	r3, [pc, #444]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6e      	ldr	r2, [pc, #440]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1e:	f7fc f8e3 	bl	8002fe8 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e26:	f7fc f8df 	bl	8002fe8 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e22b      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e38:	4b65      	ldr	r3, [pc, #404]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e44:	4b62      	ldr	r3, [pc, #392]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	495f      	ldr	r1, [pc, #380]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
 8006e58:	e018      	b.n	8006e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5a:	4b5d      	ldr	r3, [pc, #372]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a5c      	ldr	r2, [pc, #368]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e66:	f7fc f8bf 	bl	8002fe8 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e6e:	f7fc f8bb 	bl	8002fe8 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e207      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e80:	4b53      	ldr	r3, [pc, #332]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d03c      	beq.n	8006f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01c      	beq.n	8006eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea0:	4b4b      	ldr	r3, [pc, #300]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea6:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb0:	f7fc f89a 	bl	8002fe8 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb8:	f7fc f896 	bl	8002fe8 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1e2      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eca:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0ef      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x3ec>
 8006ed8:	e01b      	b.n	8006f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eda:	4b3d      	ldr	r3, [pc, #244]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee0:	4a3b      	ldr	r2, [pc, #236]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fc f87d 	bl	8002fe8 <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef2:	f7fc f879 	bl	8002fe8 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e1c5      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f04:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1ef      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80a6 	beq.w	800706c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f20:	2300      	movs	r3, #0
 8006f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10d      	bne.n	8006f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f30:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f34:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f3c:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_RCC_OscConfig+0x508>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d118      	bne.n	8006f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <HAL_RCC_OscConfig+0x508>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1d      	ldr	r2, [pc, #116]	; (8006fd4 <HAL_RCC_OscConfig+0x508>)
 8006f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f64:	f7fc f840 	bl	8002fe8 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6c:	f7fc f83c 	bl	8002fe8 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e188      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f7e:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <HAL_RCC_OscConfig+0x508>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d108      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4d8>
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	4a0d      	ldr	r2, [pc, #52]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fa2:	e029      	b.n	8006ff8 <HAL_RCC_OscConfig+0x52c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d115      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x50c>
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	4a07      	ldr	r2, [pc, #28]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006fb4:	f043 0304 	orr.w	r3, r3, #4
 8006fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fbc:	4b04      	ldr	r3, [pc, #16]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	4a03      	ldr	r2, [pc, #12]	; (8006fd0 <HAL_RCC_OscConfig+0x504>)
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fcc:	e014      	b.n	8006ff8 <HAL_RCC_OscConfig+0x52c>
 8006fce:	bf00      	nop
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40007000 	.word	0x40007000
 8006fd8:	4b91      	ldr	r3, [pc, #580]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	4a90      	ldr	r2, [pc, #576]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fe8:	4b8d      	ldr	r3, [pc, #564]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	4a8c      	ldr	r2, [pc, #560]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8006ff0:	f023 0304 	bic.w	r3, r3, #4
 8006ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d016      	beq.n	800702e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007000:	f7fb fff2 	bl	8002fe8 <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007006:	e00a      	b.n	800701e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007008:	f7fb ffee 	bl	8002fe8 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f241 3288 	movw	r2, #5000	; 0x1388
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e138      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701e:	4b80      	ldr	r3, [pc, #512]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ed      	beq.n	8007008 <HAL_RCC_OscConfig+0x53c>
 800702c:	e015      	b.n	800705a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702e:	f7fb ffdb 	bl	8002fe8 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007034:	e00a      	b.n	800704c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fb ffd7 	bl	8002fe8 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f241 3288 	movw	r2, #5000	; 0x1388
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e121      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800704c:	4b74      	ldr	r3, [pc, #464]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1ed      	bne.n	8007036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d105      	bne.n	800706c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007060:	4b6f      	ldr	r3, [pc, #444]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007064:	4a6e      	ldr	r2, [pc, #440]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800706a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 810c 	beq.w	800728e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	2b02      	cmp	r3, #2
 800707c:	f040 80d4 	bne.w	8007228 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007080:	4b67      	ldr	r3, [pc, #412]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f003 0203 	and.w	r2, r3, #3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d130      	bne.n	80070f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	3b01      	subs	r3, #1
 80070a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d127      	bne.n	80070f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d11f      	bne.n	80070f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070c0:	2a07      	cmp	r2, #7
 80070c2:	bf14      	ite	ne
 80070c4:	2201      	movne	r2, #1
 80070c6:	2200      	moveq	r2, #0
 80070c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d113      	bne.n	80070f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	3b01      	subs	r3, #1
 80070dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d109      	bne.n	80070f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	3b01      	subs	r3, #1
 80070f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d06e      	beq.n	80071d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d069      	beq.n	80071d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070fc:	4b48      	ldr	r3, [pc, #288]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007108:	4b45      	ldr	r3, [pc, #276]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0bb      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007118:	4b41      	ldr	r3, [pc, #260]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a40      	ldr	r2, [pc, #256]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800711e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007122:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007124:	f7fb ff60 	bl	8002fe8 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800712c:	f7fb ff5c 	bl	8002fe8 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e0a8      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800713e:	4b38      	ldr	r3, [pc, #224]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800714a:	4b35      	ldr	r3, [pc, #212]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	4b35      	ldr	r3, [pc, #212]	; (8007224 <HAL_RCC_OscConfig+0x758>)
 8007150:	4013      	ands	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800715a:	3a01      	subs	r2, #1
 800715c:	0112      	lsls	r2, r2, #4
 800715e:	4311      	orrs	r1, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007164:	0212      	lsls	r2, r2, #8
 8007166:	4311      	orrs	r1, r2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800716c:	0852      	lsrs	r2, r2, #1
 800716e:	3a01      	subs	r2, #1
 8007170:	0552      	lsls	r2, r2, #21
 8007172:	4311      	orrs	r1, r2
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007178:	0852      	lsrs	r2, r2, #1
 800717a:	3a01      	subs	r2, #1
 800717c:	0652      	lsls	r2, r2, #25
 800717e:	4311      	orrs	r1, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007184:	0912      	lsrs	r2, r2, #4
 8007186:	0452      	lsls	r2, r2, #17
 8007188:	430a      	orrs	r2, r1
 800718a:	4925      	ldr	r1, [pc, #148]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800718c:	4313      	orrs	r3, r2
 800718e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007190:	4b23      	ldr	r3, [pc, #140]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a22      	ldr	r2, [pc, #136]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800719a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800719c:	4b20      	ldr	r3, [pc, #128]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071a8:	f7fb ff1e 	bl	8002fe8 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b0:	f7fb ff1a 	bl	8002fe8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e066      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071c2:	4b17      	ldr	r3, [pc, #92]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071ce:	e05e      	b.n	800728e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e05d      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d156      	bne.n	800728e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4a0b      	ldr	r2, [pc, #44]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 80071f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071f8:	f7fb fef6 	bl	8002fe8 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007200:	f7fb fef2 	bl	8002fe8 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e03e      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <HAL_RCC_OscConfig+0x754>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x734>
 800721e:	e036      	b.n	800728e <HAL_RCC_OscConfig+0x7c2>
 8007220:	40021000 	.word	0x40021000
 8007224:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b0c      	cmp	r3, #12
 800722c:	d02d      	beq.n	800728a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a19      	ldr	r2, [pc, #100]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 8007234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007238:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800723a:	4b17      	ldr	r3, [pc, #92]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d105      	bne.n	8007252 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 800724c:	f023 0303 	bic.w	r3, r3, #3
 8007250:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4a10      	ldr	r2, [pc, #64]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 8007258:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800725c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007260:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fb fec1 	bl	8002fe8 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726a:	f7fb febd 	bl	8002fe8 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e009      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <HAL_RCC_OscConfig+0x7cc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCC_OscConfig+0x79e>
 8007288:	e001      	b.n	800728e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40021000 	.word	0x40021000

0800729c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0c8      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072b0:	4b66      	ldr	r3, [pc, #408]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d910      	bls.n	80072e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b63      	ldr	r3, [pc, #396]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f023 0207 	bic.w	r2, r3, #7
 80072c6:	4961      	ldr	r1, [pc, #388]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ce:	4b5f      	ldr	r3, [pc, #380]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0b0      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d04c      	beq.n	8007386 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d107      	bne.n	8007304 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072f4:	4b56      	ldr	r3, [pc, #344]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d121      	bne.n	8007344 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e09e      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d107      	bne.n	800731c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800730c:	4b50      	ldr	r3, [pc, #320]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d115      	bne.n	8007344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e092      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d107      	bne.n	8007334 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007324:	4b4a      	ldr	r3, [pc, #296]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e086      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007334:	4b46      	ldr	r3, [pc, #280]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e07e      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007344:	4b42      	ldr	r3, [pc, #264]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 0203 	bic.w	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	493f      	ldr	r1, [pc, #252]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007356:	f7fb fe47 	bl	8002fe8 <HAL_GetTick>
 800735a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735c:	e00a      	b.n	8007374 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800735e:	f7fb fe43 	bl	8002fe8 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	f241 3288 	movw	r2, #5000	; 0x1388
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e066      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 020c 	and.w	r2, r3, #12
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	429a      	cmp	r2, r3
 8007384:	d1eb      	bne.n	800735e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007392:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	492c      	ldr	r1, [pc, #176]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a4:	4b29      	ldr	r3, [pc, #164]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d210      	bcs.n	80073d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 0207 	bic.w	r2, r3, #7
 80073ba:	4924      	ldr	r1, [pc, #144]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c2:	4b22      	ldr	r3, [pc, #136]	; (800744c <HAL_RCC_ClockConfig+0x1b0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d001      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e036      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073e0:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4918      	ldr	r1, [pc, #96]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4910      	ldr	r1, [pc, #64]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 800740e:	4313      	orrs	r3, r2
 8007410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007412:	f000 f825 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 8007416:	4602      	mov	r2, r0
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <HAL_RCC_ClockConfig+0x1b4>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	490c      	ldr	r1, [pc, #48]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 8007424:	5ccb      	ldrb	r3, [r1, r3]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	4a0a      	ldr	r2, [pc, #40]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_RCC_ClockConfig+0x1c0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f7fb fd86 	bl	8002f48 <HAL_InitTick>
 800743c:	4603      	mov	r3, r0
 800743e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007440:	7afb      	ldrb	r3, [r7, #11]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40022000 	.word	0x40022000
 8007450:	40021000 	.word	0x40021000
 8007454:	0800b748 	.word	0x0800b748
 8007458:	20000000 	.word	0x20000000
 800745c:	20000004 	.word	0x20000004

08007460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	; 0x24
 8007464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	2300      	movs	r3, #0
 800746c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800746e:	4b3e      	ldr	r3, [pc, #248]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007478:	4b3b      	ldr	r3, [pc, #236]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_GetSysClockFreq+0x34>
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b0c      	cmp	r3, #12
 800748c:	d121      	bne.n	80074d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d11e      	bne.n	80074d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007494:	4b34      	ldr	r3, [pc, #208]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d107      	bne.n	80074b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80074a0:	4b31      	ldr	r3, [pc, #196]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 80074a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	e005      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80074bc:	4a2b      	ldr	r2, [pc, #172]	; (800756c <HAL_RCC_GetSysClockFreq+0x10c>)
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074d0:	e00a      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d102      	bne.n	80074de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <HAL_RCC_GetSysClockFreq+0x110>)
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e004      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074e4:	4b23      	ldr	r3, [pc, #140]	; (8007574 <HAL_RCC_GetSysClockFreq+0x114>)
 80074e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b0c      	cmp	r3, #12
 80074ec:	d134      	bne.n	8007558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074ee:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_GetSysClockFreq+0xa6>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d003      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0xac>
 8007504:	e005      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007506:	4b1a      	ldr	r3, [pc, #104]	; (8007570 <HAL_RCC_GetSysClockFreq+0x110>)
 8007508:	617b      	str	r3, [r7, #20]
      break;
 800750a:	e005      	b.n	8007518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800750c:	4b19      	ldr	r3, [pc, #100]	; (8007574 <HAL_RCC_GetSysClockFreq+0x114>)
 800750e:	617b      	str	r3, [r7, #20]
      break;
 8007510:	e002      	b.n	8007518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	617b      	str	r3, [r7, #20]
      break;
 8007516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	fb03 f202 	mul.w	r2, r3, r2
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800753e:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <HAL_RCC_GetSysClockFreq+0x108>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	0e5b      	lsrs	r3, r3, #25
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	3301      	adds	r3, #1
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007558:	69bb      	ldr	r3, [r7, #24]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3724      	adds	r7, #36	; 0x24
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
 800756c:	0800b760 	.word	0x0800b760
 8007570:	00f42400 	.word	0x00f42400
 8007574:	007a1200 	.word	0x007a1200

08007578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800757c:	4b03      	ldr	r3, [pc, #12]	; (800758c <HAL_RCC_GetHCLKFreq+0x14>)
 800757e:	681b      	ldr	r3, [r3, #0]
}
 8007580:	4618      	mov	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20000000 	.word	0x20000000

08007590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007594:	f7ff fff0 	bl	8007578 <HAL_RCC_GetHCLKFreq>
 8007598:	4602      	mov	r2, r0
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	4904      	ldr	r1, [pc, #16]	; (80075b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075a6:	5ccb      	ldrb	r3, [r1, r3]
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40021000 	.word	0x40021000
 80075b8:	0800b758 	.word	0x0800b758

080075bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80075c0:	f7ff ffda 	bl	8007578 <HAL_RCC_GetHCLKFreq>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	0adb      	lsrs	r3, r3, #11
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	4904      	ldr	r1, [pc, #16]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075d2:	5ccb      	ldrb	r3, [r1, r3]
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40021000 	.word	0x40021000
 80075e4:	0800b758 	.word	0x0800b758

080075e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80075f4:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007600:	f7fe fd20 	bl	8006044 <HAL_PWREx_GetVoltageRange>
 8007604:	6178      	str	r0, [r7, #20]
 8007606:	e014      	b.n	8007632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760c:	4a24      	ldr	r2, [pc, #144]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800760e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007612:	6593      	str	r3, [r2, #88]	; 0x58
 8007614:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007620:	f7fe fd10 	bl	8006044 <HAL_PWREx_GetVoltageRange>
 8007624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762a:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800762c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007638:	d10b      	bne.n	8007652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d919      	bls.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2ba0      	cmp	r3, #160	; 0xa0
 8007644:	d902      	bls.n	800764c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007646:	2302      	movs	r3, #2
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	e013      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800764c:	2301      	movs	r3, #1
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	e010      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b80      	cmp	r3, #128	; 0x80
 8007656:	d902      	bls.n	800765e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007658:	2303      	movs	r3, #3
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	e00a      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b80      	cmp	r3, #128	; 0x80
 8007662:	d102      	bne.n	800766a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007664:	2302      	movs	r3, #2
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	e004      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d101      	bne.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007670:	2301      	movs	r3, #1
 8007672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 0207 	bic.w	r2, r3, #7
 800767c:	4909      	ldr	r1, [pc, #36]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	429a      	cmp	r2, r3
 8007690:	d001      	beq.n	8007696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40022000 	.word	0x40022000

080076a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076b0:	2300      	movs	r3, #0
 80076b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076b4:	2300      	movs	r3, #0
 80076b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d041      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076cc:	d02a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80076ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076d2:	d824      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d8:	d008      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80076da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076de:	d81e      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80076e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e8:	d010      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076ea:	e018      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80076ec:	4b86      	ldr	r3, [pc, #536]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a85      	ldr	r2, [pc, #532]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076f8:	e015      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3304      	adds	r3, #4
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f001 f829 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800770a:	e00c      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3320      	adds	r3, #32
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f001 f914 	bl	8008940 <RCCEx_PLLSAI2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	74fb      	strb	r3, [r7, #19]
      break;
 8007722:	e000      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007726:	7cfb      	ldrb	r3, [r7, #19]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800772c:	4b76      	ldr	r3, [pc, #472]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773a:	4973      	ldr	r1, [pc, #460]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007742:	e001      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	7cfb      	ldrb	r3, [r7, #19]
 8007746:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d041      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007758:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800775c:	d02a      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800775e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007762:	d824      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007768:	d008      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800776a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800776e:	d81e      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007778:	d010      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800777a:	e018      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800777c:	4b62      	ldr	r3, [pc, #392]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a61      	ldr	r2, [pc, #388]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007788:	e015      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f000 ffe1 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800779a:	e00c      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3320      	adds	r3, #32
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 f8cc 	bl	8008940 <RCCEx_PLLSAI2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	74fb      	strb	r3, [r7, #19]
      break;
 80077b2:	e000      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80077b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b6:	7cfb      	ldrb	r3, [r7, #19]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077bc:	4b52      	ldr	r3, [pc, #328]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ca:	494f      	ldr	r1, [pc, #316]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80077d2:	e001      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	7cfb      	ldrb	r3, [r7, #19]
 80077d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a0 	beq.w	8007926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077e6:	2300      	movs	r3, #0
 80077e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077ea:	4b47      	ldr	r3, [pc, #284]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007800:	4b41      	ldr	r3, [pc, #260]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007804:	4a40      	ldr	r2, [pc, #256]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780a:	6593      	str	r3, [r2, #88]	; 0x58
 800780c:	4b3e      	ldr	r3, [pc, #248]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007818:	2301      	movs	r3, #1
 800781a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800781c:	4b3b      	ldr	r3, [pc, #236]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a3a      	ldr	r2, [pc, #232]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007828:	f7fb fbde 	bl	8002fe8 <HAL_GetTick>
 800782c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800782e:	e009      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007830:	f7fb fbda 	bl	8002fe8 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d902      	bls.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	74fb      	strb	r3, [r7, #19]
        break;
 8007842:	e005      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007844:	4b31      	ldr	r3, [pc, #196]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ef      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007850:	7cfb      	ldrb	r3, [r7, #19]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d15c      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007856:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007860:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01f      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	429a      	cmp	r2, r3
 8007872:	d019      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007880:	4b21      	ldr	r3, [pc, #132]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007886:	4a20      	ldr	r2, [pc, #128]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007890:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007896:	4a1c      	ldr	r2, [pc, #112]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800789c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b2:	f7fb fb99 	bl	8002fe8 <HAL_GetTick>
 80078b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078b8:	e00b      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ba:	f7fb fb95 	bl	8002fe8 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d902      	bls.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	74fb      	strb	r3, [r7, #19]
            break;
 80078d0:	e006      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078d2:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0ec      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80078e0:	7cfb      	ldrb	r3, [r7, #19]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10c      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f6:	4904      	ldr	r1, [pc, #16]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80078fe:	e009      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007900:	7cfb      	ldrb	r3, [r7, #19]
 8007902:	74bb      	strb	r3, [r7, #18]
 8007904:	e006      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007906:	bf00      	nop
 8007908:	40021000 	.word	0x40021000
 800790c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	7cfb      	ldrb	r3, [r7, #19]
 8007912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007914:	7c7b      	ldrb	r3, [r7, #17]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d105      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800791a:	4b9e      	ldr	r3, [pc, #632]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	4a9d      	ldr	r2, [pc, #628]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007932:	4b98      	ldr	r3, [pc, #608]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f023 0203 	bic.w	r2, r3, #3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	4994      	ldr	r1, [pc, #592]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007954:	4b8f      	ldr	r3, [pc, #572]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f023 020c 	bic.w	r2, r3, #12
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	498c      	ldr	r1, [pc, #560]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007976:	4b87      	ldr	r3, [pc, #540]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	4983      	ldr	r1, [pc, #524]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007998:	4b7e      	ldr	r3, [pc, #504]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	497b      	ldr	r1, [pc, #492]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079ba:	4b76      	ldr	r3, [pc, #472]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c8:	4972      	ldr	r1, [pc, #456]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079dc:	4b6d      	ldr	r3, [pc, #436]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ea:	496a      	ldr	r1, [pc, #424]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079fe:	4b65      	ldr	r3, [pc, #404]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0c:	4961      	ldr	r1, [pc, #388]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a20:	4b5c      	ldr	r3, [pc, #368]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	4959      	ldr	r1, [pc, #356]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a42:	4b54      	ldr	r3, [pc, #336]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a50:	4950      	ldr	r1, [pc, #320]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a64:	4b4b      	ldr	r3, [pc, #300]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	4948      	ldr	r1, [pc, #288]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a86:	4b43      	ldr	r3, [pc, #268]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	493f      	ldr	r1, [pc, #252]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d028      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007aa8:	4b3a      	ldr	r3, [pc, #232]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab6:	4937      	ldr	r1, [pc, #220]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ac8:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	4a31      	ldr	r2, [pc, #196]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad2:	60d3      	str	r3, [r2, #12]
 8007ad4:	e011      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ade:	d10c      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fe36 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007af0:	7cfb      	ldrb	r3, [r7, #19]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007af6:	7cfb      	ldrb	r3, [r7, #19]
 8007af8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d028      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b06:	4b23      	ldr	r3, [pc, #140]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	491f      	ldr	r1, [pc, #124]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b24:	d106      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b30:	60d3      	str	r3, [r2, #12]
 8007b32:	e011      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fe07 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d02b      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b72:	4908      	ldr	r1, [pc, #32]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b82:	d109      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	4a02      	ldr	r2, [pc, #8]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b8e:	60d3      	str	r3, [r2, #12]
 8007b90:	e014      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007b92:	bf00      	nop
 8007b94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ba0:	d10c      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fdd5 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bb2:	7cfb      	ldrb	r3, [r7, #19]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007bb8:	7cfb      	ldrb	r3, [r7, #19]
 8007bba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d02f      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bd6:	4928      	ldr	r1, [pc, #160]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be6:	d10d      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3304      	adds	r3, #4
 8007bec:	2102      	movs	r1, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fdb2 	bl	8008758 <RCCEx_PLLSAI1_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bf8:	7cfb      	ldrb	r3, [r7, #19]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d014      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007bfe:	7cfb      	ldrb	r3, [r7, #19]
 8007c00:	74bb      	strb	r3, [r7, #18]
 8007c02:	e011      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3320      	adds	r3, #32
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fe93 	bl	8008940 <RCCEx_PLLSAI2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c1e:	7cfb      	ldrb	r3, [r7, #19]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c24:	7cfb      	ldrb	r3, [r7, #19]
 8007c26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c34:	4b10      	ldr	r3, [pc, #64]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c42:	490d      	ldr	r1, [pc, #52]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c66:	4904      	ldr	r1, [pc, #16]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40021000 	.word	0x40021000

08007c7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c8e:	d13e      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c90:	4bb2      	ldr	r3, [pc, #712]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca2:	d028      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007caa:	f200 8542 	bhi.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb4:	d005      	beq.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cbc:	d00e      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007cbe:	f000 bd38 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cc2:	4ba6      	ldr	r3, [pc, #664]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	f040 8532 	bne.w	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8007cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd6:	61fb      	str	r3, [r7, #28]
      break;
 8007cd8:	f000 bd2d 	b.w	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007cdc:	4b9f      	ldr	r3, [pc, #636]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	f040 8527 	bne.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8007cec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007cf0:	61fb      	str	r3, [r7, #28]
      break;
 8007cf2:	f000 bd22 	b.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cf6:	4b99      	ldr	r3, [pc, #612]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d02:	f040 851c 	bne.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8007d06:	4b96      	ldr	r3, [pc, #600]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007d08:	61fb      	str	r3, [r7, #28]
      break;
 8007d0a:	f000 bd18 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d0e:	4b93      	ldr	r3, [pc, #588]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d036      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d840      	bhi.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d003      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d020      	beq.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007d30:	e039      	b.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007d32:	4b8a      	ldr	r3, [pc, #552]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d116      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007d3e:	4b87      	ldr	r3, [pc, #540]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007d4a:	4b84      	ldr	r3, [pc, #528]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	091b      	lsrs	r3, r3, #4
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	e005      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007d56:	4b81      	ldr	r3, [pc, #516]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5c:	0a1b      	lsrs	r3, r3, #8
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	4a80      	ldr	r2, [pc, #512]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d6a:	e01f      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61bb      	str	r3, [r7, #24]
      break;
 8007d70:	e01c      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d72:	4b7a      	ldr	r3, [pc, #488]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7e:	d102      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007d80:	4b79      	ldr	r3, [pc, #484]	; (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007d82:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d84:	e012      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
      break;
 8007d8a:	e00f      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d8c:	4b73      	ldr	r3, [pc, #460]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d98:	d102      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007d9a:	4b74      	ldr	r3, [pc, #464]	; (8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007d9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d9e:	e005      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
      break;
 8007da4:	e002      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61bb      	str	r3, [r7, #24]
      break;
 8007daa:	bf00      	nop
    }

    switch(PeriphClk)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007db2:	f000 80dd 	beq.w	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dbc:	f200 84c1 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc6:	f000 80d3 	beq.w	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd0:	f200 84b7 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dda:	f000 835f 	beq.w	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de4:	f200 84ad 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dee:	f000 847e 	beq.w	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df8:	f200 84a3 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e02:	f000 82cd 	beq.w	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e0c:	f200 8499 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e16:	f000 80ab 	beq.w	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e20:	f200 848f 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2a:	f000 8090 	beq.w	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	f200 8485 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3e:	d07f      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e46:	f200 847c 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	f000 8403 	beq.w	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	f200 8472 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e64:	f000 83af 	beq.w	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6e:	f200 8468 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e78:	f000 8379 	beq.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	f200 845e 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	f000 8344 	beq.w	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	f200 8456 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d84b      	bhi.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 844f 	beq.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b1f      	cmp	r3, #31
 8007eaa:	f200 844a 	bhi.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	0800809d 	.word	0x0800809d
 8007eb8:	0800810b 	.word	0x0800810b
 8007ebc:	08008743 	.word	0x08008743
 8007ec0:	0800819f 	.word	0x0800819f
 8007ec4:	08008743 	.word	0x08008743
 8007ec8:	08008743 	.word	0x08008743
 8007ecc:	08008743 	.word	0x08008743
 8007ed0:	08008225 	.word	0x08008225
 8007ed4:	08008743 	.word	0x08008743
 8007ed8:	08008743 	.word	0x08008743
 8007edc:	08008743 	.word	0x08008743
 8007ee0:	08008743 	.word	0x08008743
 8007ee4:	08008743 	.word	0x08008743
 8007ee8:	08008743 	.word	0x08008743
 8007eec:	08008743 	.word	0x08008743
 8007ef0:	0800829d 	.word	0x0800829d
 8007ef4:	08008743 	.word	0x08008743
 8007ef8:	08008743 	.word	0x08008743
 8007efc:	08008743 	.word	0x08008743
 8007f00:	08008743 	.word	0x08008743
 8007f04:	08008743 	.word	0x08008743
 8007f08:	08008743 	.word	0x08008743
 8007f0c:	08008743 	.word	0x08008743
 8007f10:	08008743 	.word	0x08008743
 8007f14:	08008743 	.word	0x08008743
 8007f18:	08008743 	.word	0x08008743
 8007f1c:	08008743 	.word	0x08008743
 8007f20:	08008743 	.word	0x08008743
 8007f24:	08008743 	.word	0x08008743
 8007f28:	08008743 	.word	0x08008743
 8007f2c:	08008743 	.word	0x08008743
 8007f30:	0800831f 	.word	0x0800831f
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	f000 82c1 	beq.w	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007f3c:	f000 bc01 	b.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007f40:	69b9      	ldr	r1, [r7, #24]
 8007f42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f46:	f000 fdd9 	bl	8008afc <RCCEx_GetSAIxPeriphCLKFreq>
 8007f4a:	61f8      	str	r0, [r7, #28]
      break;
 8007f4c:	e3fa      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007f4e:	69b9      	ldr	r1, [r7, #24]
 8007f50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007f54:	f000 fdd2 	bl	8008afc <RCCEx_GetSAIxPeriphCLKFreq>
 8007f58:	61f8      	str	r0, [r7, #28]
      break;
 8007f5a:	e3f3      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	0003d090 	.word	0x0003d090
 8007f64:	0800b760 	.word	0x0800b760
 8007f68:	00f42400 	.word	0x00f42400
 8007f6c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007f70:	4ba9      	ldr	r3, [pc, #676]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f82:	d00c      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f8a:	d87f      	bhi.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f92:	d04e      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f9a:	d01d      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8007f9c:	e076      	b.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007f9e:	4b9e      	ldr	r3, [pc, #632]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d172      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007faa:	4b9b      	ldr	r3, [pc, #620]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8007fb6:	4b98      	ldr	r3, [pc, #608]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	091b      	lsrs	r3, r3, #4
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	e005      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8007fc2:	4b95      	ldr	r3, [pc, #596]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	4a93      	ldr	r2, [pc, #588]	; (800821c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd4:	61fb      	str	r3, [r7, #28]
          break;
 8007fd6:	e05b      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007fd8:	4b8f      	ldr	r3, [pc, #572]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fe4:	d156      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007fe6:	4b8c      	ldr	r3, [pc, #560]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ff2:	d14f      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ff4:	4b88      	ldr	r3, [pc, #544]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffe:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	fb03 f202 	mul.w	r2, r3, r2
 8008008:	4b83      	ldr	r3, [pc, #524]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	3301      	adds	r3, #1
 8008014:	fbb2 f3f3 	udiv	r3, r2, r3
 8008018:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800801a:	4b7f      	ldr	r3, [pc, #508]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	0d5b      	lsrs	r3, r3, #21
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	3301      	adds	r3, #1
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	61fb      	str	r3, [r7, #28]
          break;
 8008030:	e030      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008032:	4b79      	ldr	r3, [pc, #484]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800803a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800803e:	d12b      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008040:	4b75      	ldr	r3, [pc, #468]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800804c:	d124      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800804e:	4b72      	ldr	r3, [pc, #456]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008058:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	fb03 f202 	mul.w	r2, r3, r2
 8008062:	4b6d      	ldr	r3, [pc, #436]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	091b      	lsrs	r3, r3, #4
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	3301      	adds	r3, #1
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008074:	4b68      	ldr	r3, [pc, #416]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	0d5b      	lsrs	r3, r3, #21
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	3301      	adds	r3, #1
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	61fb      	str	r3, [r7, #28]
          break;
 800808a:	e005      	b.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800808c:	bf00      	nop
 800808e:	e359      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008090:	bf00      	nop
 8008092:	e357      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008094:	bf00      	nop
 8008096:	e355      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008098:	bf00      	nop
        break;
 800809a:	e353      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800809c:	4b5e      	ldr	r3, [pc, #376]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d827      	bhi.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080cd 	.word	0x080080cd
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080e9 	.word	0x080080e9
          frequency = HAL_RCC_GetPCLK2Freq();
 80080c4:	f7ff fa7a 	bl	80075bc <HAL_RCC_GetPCLK2Freq>
 80080c8:	61f8      	str	r0, [r7, #28]
          break;
 80080ca:	e01d      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80080cc:	f7ff f9c8 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80080d0:	61f8      	str	r0, [r7, #28]
          break;
 80080d2:	e019      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080d4:	4b50      	ldr	r3, [pc, #320]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e0:	d10f      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80080e2:	4b4f      	ldr	r3, [pc, #316]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80080e4:	61fb      	str	r3, [r7, #28]
          break;
 80080e6:	e00c      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080e8:	4b4b      	ldr	r3, [pc, #300]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d107      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80080f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080fa:	61fb      	str	r3, [r7, #28]
          break;
 80080fc:	e003      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80080fe:	bf00      	nop
 8008100:	e320      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008102:	bf00      	nop
 8008104:	e31e      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008106:	bf00      	nop
        break;
 8008108:	e31c      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800810a:	4b43      	ldr	r3, [pc, #268]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b0c      	cmp	r3, #12
 800811a:	d83a      	bhi.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008159 	.word	0x08008159
 8008128:	08008193 	.word	0x08008193
 800812c:	08008193 	.word	0x08008193
 8008130:	08008193 	.word	0x08008193
 8008134:	08008161 	.word	0x08008161
 8008138:	08008193 	.word	0x08008193
 800813c:	08008193 	.word	0x08008193
 8008140:	08008193 	.word	0x08008193
 8008144:	08008169 	.word	0x08008169
 8008148:	08008193 	.word	0x08008193
 800814c:	08008193 	.word	0x08008193
 8008150:	08008193 	.word	0x08008193
 8008154:	0800817d 	.word	0x0800817d
          frequency = HAL_RCC_GetPCLK1Freq();
 8008158:	f7ff fa1a 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800815c:	61f8      	str	r0, [r7, #28]
          break;
 800815e:	e01d      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008160:	f7ff f97e 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 8008164:	61f8      	str	r0, [r7, #28]
          break;
 8008166:	e019      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008168:	4b2b      	ldr	r3, [pc, #172]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d10f      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008176:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008178:	61fb      	str	r3, [r7, #28]
          break;
 800817a:	e00c      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800817c:	4b26      	ldr	r3, [pc, #152]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b02      	cmp	r3, #2
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	61fb      	str	r3, [r7, #28]
          break;
 8008190:	e003      	b.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8008192:	bf00      	nop
 8008194:	e2d6      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008196:	bf00      	nop
 8008198:	e2d4      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800819a:	bf00      	nop
        break;
 800819c:	e2d2      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800819e:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80081a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b30      	cmp	r3, #48	; 0x30
 80081ae:	d021      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b30      	cmp	r3, #48	; 0x30
 80081b4:	d829      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d011      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d823      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2b10      	cmp	r3, #16
 80081cc:	d004      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80081ce:	e01c      	b.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7ff f9de 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 80081d4:	61f8      	str	r0, [r7, #28]
          break;
 80081d6:	e01d      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80081d8:	f7ff f942 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80081dc:	61f8      	str	r0, [r7, #28]
          break;
 80081de:	e019      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d10f      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80081ee:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80081f0:	61fb      	str	r3, [r7, #28]
          break;
 80081f2:	e00c      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081f4:	4b08      	ldr	r3, [pc, #32]	; (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d107      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8008202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008206:	61fb      	str	r3, [r7, #28]
          break;
 8008208:	e003      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800820a:	bf00      	nop
 800820c:	e29a      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800820e:	bf00      	nop
 8008210:	e298      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008212:	bf00      	nop
        break;
 8008214:	e296      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008216:	bf00      	nop
 8008218:	40021000 	.word	0x40021000
 800821c:	0800b760 	.word	0x0800b760
 8008220:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008224:	4b9b      	ldr	r3, [pc, #620]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2bc0      	cmp	r3, #192	; 0xc0
 8008234:	d021      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2bc0      	cmp	r3, #192	; 0xc0
 800823a:	d829      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b80      	cmp	r3, #128	; 0x80
 8008240:	d011      	beq.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b80      	cmp	r3, #128	; 0x80
 8008246:	d823      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d004      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8008254:	e01c      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008256:	f7ff f99b 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800825a:	61f8      	str	r0, [r7, #28]
          break;
 800825c:	e01d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800825e:	f7ff f8ff 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 8008262:	61f8      	str	r0, [r7, #28]
          break;
 8008264:	e019      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008266:	4b8b      	ldr	r3, [pc, #556]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008272:	d10f      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8008274:	4b88      	ldr	r3, [pc, #544]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008276:	61fb      	str	r3, [r7, #28]
          break;
 8008278:	e00c      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800827a:	4b86      	ldr	r3, [pc, #536]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800827c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b02      	cmp	r3, #2
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8008288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828c:	61fb      	str	r3, [r7, #28]
          break;
 800828e:	e003      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8008290:	bf00      	nop
 8008292:	e257      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008294:	bf00      	nop
 8008296:	e255      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008298:	bf00      	nop
        break;
 800829a:	e253      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800829c:	4b7d      	ldr	r3, [pc, #500]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ae:	d025      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b6:	d82c      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082be:	d013      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c6:	d824      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d4:	d004      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80082d6:	e01c      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7ff f95a 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 80082dc:	61f8      	str	r0, [r7, #28]
          break;
 80082de:	e01d      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80082e0:	f7ff f8be 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80082e4:	61f8      	str	r0, [r7, #28]
          break;
 80082e6:	e019      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082e8:	4b6a      	ldr	r3, [pc, #424]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d10f      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80082f6:	4b68      	ldr	r3, [pc, #416]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80082f8:	61fb      	str	r3, [r7, #28]
          break;
 80082fa:	e00c      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082fc:	4b65      	ldr	r3, [pc, #404]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d107      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	61fb      	str	r3, [r7, #28]
          break;
 8008310:	e003      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8008312:	bf00      	nop
 8008314:	e216      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008316:	bf00      	nop
 8008318:	e214      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800831a:	bf00      	nop
        break;
 800831c:	e212      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800831e:	4b5d      	ldr	r3, [pc, #372]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008330:	d025      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008338:	d82c      	bhi.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008340:	d013      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008348:	d824      	bhi.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008356:	d004      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8008358:	e01c      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800835a:	f7ff f919 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800835e:	61f8      	str	r0, [r7, #28]
          break;
 8008360:	e01d      	b.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8008362:	f7ff f87d 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 8008366:	61f8      	str	r0, [r7, #28]
          break;
 8008368:	e019      	b.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800836a:	4b4a      	ldr	r3, [pc, #296]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008376:	d10f      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008378:	4b47      	ldr	r3, [pc, #284]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800837a:	61fb      	str	r3, [r7, #28]
          break;
 800837c:	e00c      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800837e:	4b45      	ldr	r3, [pc, #276]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b02      	cmp	r3, #2
 800838a:	d107      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800838c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008390:	61fb      	str	r3, [r7, #28]
          break;
 8008392:	e003      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8008394:	bf00      	nop
 8008396:	e1d5      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008398:	bf00      	nop
 800839a:	e1d3      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800839c:	bf00      	nop
        break;
 800839e:	e1d1      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083a0:	4b3c      	ldr	r3, [pc, #240]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083b2:	d00c      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083ba:	d864      	bhi.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c2:	d008      	beq.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ca:	d030      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80083cc:	e05b      	b.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80083ce:	f7ff f847 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80083d2:	61f8      	str	r0, [r7, #28]
          break;
 80083d4:	e05c      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083e2:	d152      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80083e4:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d04c      	beq.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	fb03 f202 	mul.w	r2, r3, r2
 8008404:	4b23      	ldr	r3, [pc, #140]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	091b      	lsrs	r3, r3, #4
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	3301      	adds	r3, #1
 8008410:	fbb2 f3f3 	udiv	r3, r2, r3
 8008414:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008416:	4b1f      	ldr	r3, [pc, #124]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	0e5b      	lsrs	r3, r3, #25
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	3301      	adds	r3, #1
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	fbb2 f3f3 	udiv	r3, r2, r3
 800842a:	61fb      	str	r3, [r7, #28]
          break;
 800842c:	e02d      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843a:	d128      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800843c:	4b15      	ldr	r3, [pc, #84]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	0a1b      	lsrs	r3, r3, #8
 800844e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008452:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	fb03 f202 	mul.w	r2, r3, r2
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	3301      	adds	r3, #1
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	0e5b      	lsrs	r3, r3, #25
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	3301      	adds	r3, #1
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	61fb      	str	r3, [r7, #28]
          break;
 8008484:	e003      	b.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008486:	bf00      	nop
 8008488:	e15c      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800848a:	bf00      	nop
 800848c:	e15a      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800848e:	bf00      	nop
        break;
 8008490:	e158      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8008492:	bf00      	nop
 8008494:	40021000 	.word	0x40021000
 8008498:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800849c:	4b9d      	ldr	r3, [pc, #628]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084a6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80084ae:	f7ff f885 	bl	80075bc <HAL_RCC_GetPCLK2Freq>
 80084b2:	61f8      	str	r0, [r7, #28]
        break;
 80084b4:	e146      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80084b6:	f7fe ffd3 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80084ba:	61f8      	str	r0, [r7, #28]
        break;
 80084bc:	e142      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084be:	4b95      	ldr	r3, [pc, #596]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d0:	d013      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d8:	d819      	bhi.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e6:	d004      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80084e8:	e011      	b.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084ea:	f7ff f851 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 80084ee:	61f8      	str	r0, [r7, #28]
          break;
 80084f0:	e010      	b.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80084f2:	f7fe ffb5 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80084f6:	61f8      	str	r0, [r7, #28]
          break;
 80084f8:	e00c      	b.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084fa:	4b86      	ldr	r3, [pc, #536]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008506:	d104      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8008508:	4b83      	ldr	r3, [pc, #524]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800850a:	61fb      	str	r3, [r7, #28]
          break;
 800850c:	e001      	b.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800850e:	bf00      	nop
 8008510:	e118      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008512:	bf00      	nop
        break;
 8008514:	e116      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008516:	4b7f      	ldr	r3, [pc, #508]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008528:	d013      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008530:	d819      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800853e:	d004      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8008540:	e011      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008542:	f7ff f825 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 8008546:	61f8      	str	r0, [r7, #28]
          break;
 8008548:	e010      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800854a:	f7fe ff89 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800854e:	61f8      	str	r0, [r7, #28]
          break;
 8008550:	e00c      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008552:	4b70      	ldr	r3, [pc, #448]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855e:	d104      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8008560:	4b6d      	ldr	r3, [pc, #436]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008562:	61fb      	str	r3, [r7, #28]
          break;
 8008564:	e001      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8008566:	bf00      	nop
 8008568:	e0ec      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800856a:	bf00      	nop
        break;
 800856c:	e0ea      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800856e:	4b69      	ldr	r3, [pc, #420]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008578:	613b      	str	r3, [r7, #16]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008580:	d013      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008588:	d819      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008596:	d004      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8008598:	e011      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800859a:	f7fe fff9 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800859e:	61f8      	str	r0, [r7, #28]
          break;
 80085a0:	e010      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80085a2:	f7fe ff5d 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 80085a6:	61f8      	str	r0, [r7, #28]
          break;
 80085a8:	e00c      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085aa:	4b5a      	ldr	r3, [pc, #360]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b6:	d104      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80085b8:	4b57      	ldr	r3, [pc, #348]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80085ba:	61fb      	str	r3, [r7, #28]
          break;
 80085bc:	e001      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80085be:	bf00      	nop
 80085c0:	e0c0      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80085c2:	bf00      	nop
        break;
 80085c4:	e0be      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80085c6:	4b53      	ldr	r3, [pc, #332]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085d8:	d02c      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085e0:	d833      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085e8:	d01a      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085f0:	d82b      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085fe:	d004      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8008600:	e023      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fe ffc5 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 8008606:	61f8      	str	r0, [r7, #28]
          break;
 8008608:	e026      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800860a:	4b42      	ldr	r3, [pc, #264]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800860c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d11a      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8008618:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800861c:	61fb      	str	r3, [r7, #28]
          break;
 800861e:	e016      	b.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008620:	4b3c      	ldr	r3, [pc, #240]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862c:	d111      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800862e:	4b3a      	ldr	r3, [pc, #232]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008630:	61fb      	str	r3, [r7, #28]
          break;
 8008632:	e00e      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008634:	4b37      	ldr	r3, [pc, #220]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	d109      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8008642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008646:	61fb      	str	r3, [r7, #28]
          break;
 8008648:	e005      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800864a:	bf00      	nop
 800864c:	e07a      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800864e:	bf00      	nop
 8008650:	e078      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008652:	bf00      	nop
 8008654:	e076      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008656:	bf00      	nop
        break;
 8008658:	e074      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800865a:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800865c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008660:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800866c:	d02c      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008674:	d833      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800867c:	d01a      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008684:	d82b      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008692:	d004      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8008694:	e023      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008696:	f7fe ff7b 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800869a:	61f8      	str	r0, [r7, #28]
          break;
 800869c:	e026      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80086a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d11a      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80086ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80086b0:	61fb      	str	r3, [r7, #28]
          break;
 80086b2:	e016      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c0:	d111      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80086c4:	61fb      	str	r3, [r7, #28]
          break;
 80086c6:	e00e      	b.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086c8:	4b12      	ldr	r3, [pc, #72]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d109      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80086d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086da:	61fb      	str	r3, [r7, #28]
          break;
 80086dc:	e005      	b.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80086de:	bf00      	nop
 80086e0:	e030      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80086e2:	bf00      	nop
 80086e4:	e02e      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80086e6:	bf00      	nop
 80086e8:	e02c      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80086ea:	bf00      	nop
        break;
 80086ec:	e02a      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80086f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008706:	d009      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8008708:	e012      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800870a:	f7fe ff41 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800870e:	61f8      	str	r0, [r7, #28]
          break;
 8008710:	e00e      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8008712:	bf00      	nop
 8008714:	40021000 	.word	0x40021000
 8008718:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008728:	d101      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800872a:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800872c:	61fb      	str	r3, [r7, #28]
          break;
 800872e:	bf00      	nop
        break;
 8008730:	e008      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008732:	bf00      	nop
 8008734:	e006      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008736:	bf00      	nop
 8008738:	e004      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008742:	bf00      	nop
    }
  }

  return(frequency);
 8008744:	69fb      	ldr	r3, [r7, #28]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40021000 	.word	0x40021000
 8008754:	00f42400 	.word	0x00f42400

08008758 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008766:	4b75      	ldr	r3, [pc, #468]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d018      	beq.n	80087a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008772:	4b72      	ldr	r3, [pc, #456]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f003 0203 	and.w	r2, r3, #3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d10d      	bne.n	800879e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
       ||
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800878a:	4b6c      	ldr	r3, [pc, #432]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	091b      	lsrs	r3, r3, #4
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
       ||
 800879a:	429a      	cmp	r2, r3
 800879c:	d047      	beq.n	800882e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
 80087a2:	e044      	b.n	800882e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d018      	beq.n	80087de <RCCEx_PLLSAI1_Config+0x86>
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d825      	bhi.n	80087fc <RCCEx_PLLSAI1_Config+0xa4>
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d002      	beq.n	80087ba <RCCEx_PLLSAI1_Config+0x62>
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d009      	beq.n	80087cc <RCCEx_PLLSAI1_Config+0x74>
 80087b8:	e020      	b.n	80087fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ba:	4b60      	ldr	r3, [pc, #384]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d11d      	bne.n	8008802 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ca:	e01a      	b.n	8008802 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087cc:	4b5b      	ldr	r3, [pc, #364]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d116      	bne.n	8008806 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087dc:	e013      	b.n	8008806 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087de:	4b57      	ldr	r3, [pc, #348]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10f      	bne.n	800880a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087ea:	4b54      	ldr	r3, [pc, #336]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087fa:	e006      	b.n	800880a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008800:	e004      	b.n	800880c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008802:	bf00      	nop
 8008804:	e002      	b.n	800880c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800880a:	bf00      	nop
    }

    if(status == HAL_OK)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10d      	bne.n	800882e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008812:	4b4a      	ldr	r3, [pc, #296]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6819      	ldr	r1, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	3b01      	subs	r3, #1
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	430b      	orrs	r3, r1
 8008828:	4944      	ldr	r1, [pc, #272]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 800882a:	4313      	orrs	r3, r2
 800882c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d17d      	bne.n	8008930 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008834:	4b41      	ldr	r3, [pc, #260]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a40      	ldr	r2, [pc, #256]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 800883a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800883e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008840:	f7fa fbd2 	bl	8002fe8 <HAL_GetTick>
 8008844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008846:	e009      	b.n	800885c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008848:	f7fa fbce 	bl	8002fe8 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d902      	bls.n	800885c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	73fb      	strb	r3, [r7, #15]
        break;
 800885a:	e005      	b.n	8008868 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800885c:	4b37      	ldr	r3, [pc, #220]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1ef      	bne.n	8008848 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d160      	bne.n	8008930 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d111      	bne.n	8008898 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008874:	4b31      	ldr	r3, [pc, #196]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800887c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6892      	ldr	r2, [r2, #8]
 8008884:	0211      	lsls	r1, r2, #8
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	68d2      	ldr	r2, [r2, #12]
 800888a:	0912      	lsrs	r2, r2, #4
 800888c:	0452      	lsls	r2, r2, #17
 800888e:	430a      	orrs	r2, r1
 8008890:	492a      	ldr	r1, [pc, #168]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]
 8008896:	e027      	b.n	80088e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d112      	bne.n	80088c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800889e:	4b27      	ldr	r3, [pc, #156]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80088a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6892      	ldr	r2, [r2, #8]
 80088ae:	0211      	lsls	r1, r2, #8
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6912      	ldr	r2, [r2, #16]
 80088b4:	0852      	lsrs	r2, r2, #1
 80088b6:	3a01      	subs	r2, #1
 80088b8:	0552      	lsls	r2, r2, #21
 80088ba:	430a      	orrs	r2, r1
 80088bc:	491f      	ldr	r1, [pc, #124]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	610b      	str	r3, [r1, #16]
 80088c2:	e011      	b.n	80088e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088c4:	4b1d      	ldr	r3, [pc, #116]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6892      	ldr	r2, [r2, #8]
 80088d4:	0211      	lsls	r1, r2, #8
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6952      	ldr	r2, [r2, #20]
 80088da:	0852      	lsrs	r2, r2, #1
 80088dc:	3a01      	subs	r2, #1
 80088de:	0652      	lsls	r2, r2, #25
 80088e0:	430a      	orrs	r2, r1
 80088e2:	4916      	ldr	r1, [pc, #88]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088e8:	4b14      	ldr	r3, [pc, #80]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a13      	ldr	r2, [pc, #76]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f4:	f7fa fb78 	bl	8002fe8 <HAL_GetTick>
 80088f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088fa:	e009      	b.n	8008910 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088fc:	f7fa fb74 	bl	8002fe8 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d902      	bls.n	8008910 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	73fb      	strb	r3, [r7, #15]
          break;
 800890e:	e005      	b.n	800891c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0ef      	beq.n	80088fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	4904      	ldr	r1, [pc, #16]	; (800893c <RCCEx_PLLSAI1_Config+0x1e4>)
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40021000 	.word	0x40021000

08008940 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800894e:	4b6a      	ldr	r3, [pc, #424]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d018      	beq.n	800898c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800895a:	4b67      	ldr	r3, [pc, #412]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f003 0203 	and.w	r2, r3, #3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d10d      	bne.n	8008986 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
       ||
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008972:	4b61      	ldr	r3, [pc, #388]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	091b      	lsrs	r3, r3, #4
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
       ||
 8008982:	429a      	cmp	r2, r3
 8008984:	d047      	beq.n	8008a16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	73fb      	strb	r3, [r7, #15]
 800898a:	e044      	b.n	8008a16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d018      	beq.n	80089c6 <RCCEx_PLLSAI2_Config+0x86>
 8008994:	2b03      	cmp	r3, #3
 8008996:	d825      	bhi.n	80089e4 <RCCEx_PLLSAI2_Config+0xa4>
 8008998:	2b01      	cmp	r3, #1
 800899a:	d002      	beq.n	80089a2 <RCCEx_PLLSAI2_Config+0x62>
 800899c:	2b02      	cmp	r3, #2
 800899e:	d009      	beq.n	80089b4 <RCCEx_PLLSAI2_Config+0x74>
 80089a0:	e020      	b.n	80089e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089a2:	4b55      	ldr	r3, [pc, #340]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d11d      	bne.n	80089ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089b2:	e01a      	b.n	80089ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089b4:	4b50      	ldr	r3, [pc, #320]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d116      	bne.n	80089ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089c4:	e013      	b.n	80089ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089c6:	4b4c      	ldr	r3, [pc, #304]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089d2:	4b49      	ldr	r3, [pc, #292]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089e2:	e006      	b.n	80089f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	e004      	b.n	80089f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10d      	bne.n	8008a16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089fa:	4b3f      	ldr	r3, [pc, #252]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	4939      	ldr	r1, [pc, #228]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d167      	bne.n	8008aec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a35      	ldr	r2, [pc, #212]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a28:	f7fa fade 	bl	8002fe8 <HAL_GetTick>
 8008a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a2e:	e009      	b.n	8008a44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a30:	f7fa fada 	bl	8002fe8 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d902      	bls.n	8008a44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	73fb      	strb	r3, [r7, #15]
        break;
 8008a42:	e005      	b.n	8008a50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1ef      	bne.n	8008a30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d14a      	bne.n	8008aec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d111      	bne.n	8008a80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a5c:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6892      	ldr	r2, [r2, #8]
 8008a6c:	0211      	lsls	r1, r2, #8
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68d2      	ldr	r2, [r2, #12]
 8008a72:	0912      	lsrs	r2, r2, #4
 8008a74:	0452      	lsls	r2, r2, #17
 8008a76:	430a      	orrs	r2, r1
 8008a78:	491f      	ldr	r1, [pc, #124]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	614b      	str	r3, [r1, #20]
 8008a7e:	e011      	b.n	8008aa4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a80:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6892      	ldr	r2, [r2, #8]
 8008a90:	0211      	lsls	r1, r2, #8
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6912      	ldr	r2, [r2, #16]
 8008a96:	0852      	lsrs	r2, r2, #1
 8008a98:	3a01      	subs	r2, #1
 8008a9a:	0652      	lsls	r2, r2, #25
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	4916      	ldr	r1, [pc, #88]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008aa4:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab0:	f7fa fa9a 	bl	8002fe8 <HAL_GetTick>
 8008ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ab6:	e009      	b.n	8008acc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ab8:	f7fa fa96 	bl	8002fe8 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d902      	bls.n	8008acc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	73fb      	strb	r3, [r7, #15]
          break;
 8008aca:	e005      	b.n	8008ad8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0ef      	beq.n	8008ab8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ae0:	695a      	ldr	r2, [r3, #20]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4904      	ldr	r1, [pc, #16]	; (8008af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40021000 	.word	0x40021000

08008afc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	; 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b18:	d10c      	bne.n	8008b34 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008b1a:	4b6e      	ldr	r3, [pc, #440]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b20:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008b24:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b2c:	d112      	bne.n	8008b54 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b2e:	4b6a      	ldr	r3, [pc, #424]	; (8008cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	e00f      	b.n	8008b54 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3a:	d10b      	bne.n	8008b54 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008b3c:	4b65      	ldr	r3, [pc, #404]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008b46:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b4e:	d101      	bne.n	8008b54 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008b50:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008b52:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f040 80b4 	bne.w	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b66:	d003      	beq.n	8008b70 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b6e:	d135      	bne.n	8008bdc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b70:	4b58      	ldr	r3, [pc, #352]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7c:	f040 80a1 	bne.w	8008cc2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008b80:	4b54      	ldr	r3, [pc, #336]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 809a 	beq.w	8008cc2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b8e:	4b51      	ldr	r3, [pc, #324]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	091b      	lsrs	r3, r3, #4
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	3301      	adds	r3, #1
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ba2:	4b4c      	ldr	r3, [pc, #304]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008bb4:	4b47      	ldr	r3, [pc, #284]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008bc0:	2311      	movs	r3, #17
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	e001      	b.n	8008bca <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8008bc6:	2307      	movs	r3, #7
 8008bc8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	fb03 f202 	mul.w	r2, r3, r2
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008bda:	e072      	b.n	8008cc2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d133      	bne.n	8008c4a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008be2:	4b3c      	ldr	r3, [pc, #240]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bee:	d169      	bne.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008bf0:	4b38      	ldr	r3, [pc, #224]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d063      	beq.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bfc:	4b35      	ldr	r3, [pc, #212]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	3301      	adds	r3, #1
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c10:	4b30      	ldr	r3, [pc, #192]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	0a1b      	lsrs	r3, r3, #8
 8008c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008c22:	4b2c      	ldr	r3, [pc, #176]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8008c2e:	2311      	movs	r3, #17
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	e001      	b.n	8008c38 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008c34:	2307      	movs	r3, #7
 8008c36:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	fb03 f202 	mul.w	r2, r3, r2
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e03c      	b.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c50:	d003      	beq.n	8008c5a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c58:	d134      	bne.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008c5a:	4b1e      	ldr	r3, [pc, #120]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c66:	d12d      	bne.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008c68:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d027      	beq.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c74:	4b17      	ldr	r3, [pc, #92]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	091b      	lsrs	r3, r3, #4
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	3301      	adds	r3, #1
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008c88:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c92:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008c9a:	4b0e      	ldr	r3, [pc, #56]	; (8008cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008ca6:	2311      	movs	r3, #17
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	e001      	b.n	8008cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8008cac:	2307      	movs	r3, #7
 8008cae:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	fb03 f202 	mul.w	r2, r3, r2
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	61fb      	str	r3, [r7, #28]
 8008cc0:	e000      	b.n	8008cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008cc2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3724      	adds	r7, #36	; 0x24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	001fff68 	.word	0x001fff68

08008cdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d06c      	beq.n	8008dc8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7f8 fe96 	bl	8001a34 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	22ca      	movs	r2, #202	; 0xca
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2253      	movs	r2, #83	; 0x53
 8008d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f87c 	bl	8008e1e <RTC_EnterInitMode>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d14b      	bne.n	8008dc8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d42:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6899      	ldr	r1, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68d2      	ldr	r2, [r2, #12]
 8008d6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6919      	ldr	r1, [r3, #16]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	041a      	lsls	r2, r3, #16
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f87f 	bl	8008e84 <RTC_ExitInitMode>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11b      	bne.n	8008dc8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0203 	bic.w	r2, r2, #3
 8008d9e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69da      	ldr	r2, [r3, #28]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	22ff      	movs	r2, #255	; 0xff
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008de8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008dea:	f7fa f8fd 	bl	8002fe8 <HAL_GetTick>
 8008dee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008df0:	e009      	b.n	8008e06 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008df2:	f7fa f8f9 	bl	8002fe8 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e00:	d901      	bls.n	8008e06 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e007      	b.n	8008e16 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0ee      	beq.n	8008df2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d120      	bne.n	8008e7a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e42:	f7fa f8d1 	bl	8002fe8 <HAL_GetTick>
 8008e46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e48:	e00d      	b.n	8008e66 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e4a:	f7fa f8cd 	bl	8002fe8 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e58:	d905      	bls.n	8008e66 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2203      	movs	r2, #3
 8008e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d102      	bne.n	8008e7a <RTC_EnterInitMode+0x5c>
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d1e7      	bne.n	8008e4a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008e90:	4b1a      	ldr	r3, [pc, #104]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4a19      	ldr	r2, [pc, #100]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e9a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e9c:	4b17      	ldr	r3, [pc, #92]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10c      	bne.n	8008ec2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ff92 	bl	8008dd2 <HAL_RTC_WaitForSynchro>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01e      	beq.n	8008ef2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	73fb      	strb	r3, [r7, #15]
 8008ec0:	e017      	b.n	8008ef2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ec2:	4b0e      	ldr	r3, [pc, #56]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	4a0d      	ldr	r2, [pc, #52]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008ec8:	f023 0320 	bic.w	r3, r3, #32
 8008ecc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ff7f 	bl	8008dd2 <HAL_RTC_WaitForSynchro>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2203      	movs	r2, #3
 8008ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	4a04      	ldr	r2, [pc, #16]	; (8008efc <RTC_ExitInitMode+0x78>)
 8008eec:	f043 0320 	orr.w	r3, r3, #32
 8008ef0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40002800 	.word	0x40002800

08008f00 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d904      	bls.n	8008f1e <HAL_SAI_InitProtocol+0x1e>
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3b03      	subs	r3, #3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d812      	bhi.n	8008f42 <HAL_SAI_InitProtocol+0x42>
 8008f1c:	e008      	b.n	8008f30 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fc9f 	bl	8009868 <SAI_InitI2S>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2e:	e00b      	b.n	8008f48 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fd48 	bl	80099cc <SAI_InitPCM>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f40:	e002      	b.n	8008f48 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
      break;
 8008f46:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 f808 	bl	8008f64 <HAL_SAI_Init>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e155      	b.n	8009222 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7f8 fe78 	bl	8001c80 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fe21 	bl	8009bd8 <SAI_Disable>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e140      	b.n	8009222 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d00c      	beq.n	8008fca <HAL_SAI_Init+0x66>
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d80d      	bhi.n	8008fd0 <HAL_SAI_Init+0x6c>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_SAI_Init+0x5a>
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d003      	beq.n	8008fc4 <HAL_SAI_Init+0x60>
 8008fbc:	e008      	b.n	8008fd0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61fb      	str	r3, [r7, #28]
      break;
 8008fc2:	e008      	b.n	8008fd6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	61fb      	str	r3, [r7, #28]
      break;
 8008fc8:	e005      	b.n	8008fd6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008fca:	2320      	movs	r3, #32
 8008fcc:	61fb      	str	r3, [r7, #28]
      break;
 8008fce:	e002      	b.n	8008fd6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]
      break;
 8008fd4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d81d      	bhi.n	800901a <HAL_SAI_Init+0xb6>
 8008fde:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <HAL_SAI_Init+0x80>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08008ff5 	.word	0x08008ff5
 8008fe8:	08008ffb 	.word	0x08008ffb
 8008fec:	08009003 	.word	0x08009003
 8008ff0:	0800900b 	.word	0x0800900b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	617b      	str	r3, [r7, #20]
      break;
 8008ff8:	e012      	b.n	8009020 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffe:	617b      	str	r3, [r7, #20]
      break;
 8009000:	e00e      	b.n	8009020 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009006:	617b      	str	r3, [r7, #20]
      break;
 8009008:	e00a      	b.n	8009020 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800900a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800900e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
      break;
 8009018:	e002      	b.n	8009020 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
      break;
 800901e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a81      	ldr	r2, [pc, #516]	; (800922c <HAL_SAI_Init+0x2c8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d004      	beq.n	8009034 <HAL_SAI_Init+0xd0>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a80      	ldr	r2, [pc, #512]	; (8009230 <HAL_SAI_Init+0x2cc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d103      	bne.n	800903c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8009034:	4a7f      	ldr	r2, [pc, #508]	; (8009234 <HAL_SAI_Init+0x2d0>)
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e002      	b.n	8009042 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800903c:	4a7e      	ldr	r2, [pc, #504]	; (8009238 <HAL_SAI_Init+0x2d4>)
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d041      	beq.n	80090ce <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a77      	ldr	r2, [pc, #476]	; (800922c <HAL_SAI_Init+0x2c8>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d004      	beq.n	800905e <HAL_SAI_Init+0xfa>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a75      	ldr	r2, [pc, #468]	; (8009230 <HAL_SAI_Init+0x2cc>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d105      	bne.n	800906a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800905e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009062:	f7fe fe0b 	bl	8007c7c <HAL_RCCEx_GetPeriphCLKFreq>
 8009066:	6138      	str	r0, [r7, #16]
 8009068:	e004      	b.n	8009074 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800906a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800906e:	f7fe fe05 	bl	8007c7c <HAL_RCCEx_GetPeriphCLKFreq>
 8009072:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	461a      	mov	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	025b      	lsls	r3, r3, #9
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4a6b      	ldr	r2, [pc, #428]	; (800923c <HAL_SAI_Init+0x2d8>)
 8009090:	fba2 2303 	umull	r2, r3, r2, r3
 8009094:	08da      	lsrs	r2, r3, #3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	4b67      	ldr	r3, [pc, #412]	; (800923c <HAL_SAI_Init+0x2d8>)
 800909e:	fba3 2301 	umull	r2, r3, r3, r1
 80090a2:	08da      	lsrs	r2, r3, #3
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	1aca      	subs	r2, r1, r3
 80090ae:	2a08      	cmp	r2, #8
 80090b0:	d904      	bls.n	80090bc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d104      	bne.n	80090ce <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	085a      	lsrs	r2, r3, #1
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_SAI_Init+0x17a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d109      	bne.n	80090f2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_SAI_Init+0x186>
 80090e6:	2300      	movs	r3, #0
 80090e8:	e001      	b.n	80090ee <HAL_SAI_Init+0x18a>
 80090ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ee:	61bb      	str	r3, [r7, #24]
 80090f0:	e008      	b.n	8009104 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d102      	bne.n	8009100 <HAL_SAI_Init+0x19c>
 80090fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fe:	e000      	b.n	8009102 <HAL_SAI_Init+0x19e>
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6819      	ldr	r1, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b4c      	ldr	r3, [pc, #304]	; (8009240 <HAL_SAI_Init+0x2dc>)
 8009110:	400b      	ands	r3, r1
 8009112:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009128:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	431a      	orrs	r2, r3
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800913c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009148:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	051b      	lsls	r3, r3, #20
 8009150:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009168:	f023 030f 	bic.w	r3, r3, #15
 800916c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6859      	ldr	r1, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699a      	ldr	r2, [r3, #24]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6899      	ldr	r1, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <HAL_SAI_Init+0x2e0>)
 8009198:	400b      	ands	r3, r1
 800919a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6899      	ldr	r1, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80091b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80091b8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	3b01      	subs	r3, #1
 80091c0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80091c2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68d9      	ldr	r1, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80091da:	400b      	ands	r3, r1
 80091dc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68d9      	ldr	r1, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80091f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fa:	3b01      	subs	r3, #1
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40015404 	.word	0x40015404
 8009230:	40015424 	.word	0x40015424
 8009234:	40015400 	.word	0x40015400
 8009238:	40015800 	.word	0x40015800
 800923c:	cccccccd 	.word	0xcccccccd
 8009240:	ff05c010 	.word	0xff05c010
 8009244:	fff88000 	.word	0xfff88000

08009248 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009258:	f7f9 fec6 	bl	8002fe8 <HAL_GetTick>
 800925c:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_SAI_Transmit+0x22>
 8009264:	88fb      	ldrh	r3, [r7, #6]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e0ee      	b.n	800944c <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b01      	cmp	r3, #1
 8009278:	f040 80e7 	bne.w	800944a <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_SAI_Transmit+0x42>
 8009286:	2302      	movs	r3, #2
 8009288:	e0e0      	b.n	800944c <HAL_SAI_Transmit+0x204>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	88fa      	ldrh	r2, [r7, #6]
 800929e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2212      	movs	r2, #18
 80092ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f040 80b1 	bne.w	800942a <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fc01 	bl	8009ad0 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80092dc:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 80092de:	e0a4      	b.n	800942a <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80092ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092ee:	d06b      	beq.n	80093c8 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d10f      	bne.n	8009318 <HAL_SAI_Transmit+0xd0>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10b      	bne.n	8009318 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	665a      	str	r2, [r3, #100]	; 0x64
 8009316:	e04e      	b.n	80093b6 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	2b80      	cmp	r3, #128	; 0x80
 800931e:	d819      	bhi.n	8009354 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	4313      	orrs	r3, r2
 800933e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	61da      	str	r2, [r3, #28]
 8009352:	e030      	b.n	80093b6 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	4313      	orrs	r3, r2
 8009372:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	041b      	lsls	r3, r3, #16
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	665a      	str	r2, [r3, #100]	; 0x64
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	665a      	str	r2, [r3, #100]	; 0x64
          hsai->Instance->DR = temp;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80093c6:	e030      	b.n	800942a <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 80093c8:	f7f9 fe0e 	bl	8002fe8 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <HAL_SAI_Transmit+0x196>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d125      	bne.n	800942a <HAL_SAI_Transmit+0x1e2>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d021      	beq.n	800942a <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295
 80093fe:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 fbe9 	bl	8009bd8 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e010      	b.n	800944c <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f af55 	bne.w	80092e0 <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	e000      	b.n	800944c <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800944a:	2302      	movs	r3, #2
  }
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009466:	2b01      	cmp	r3, #1
 8009468:	d101      	bne.n	800946e <HAL_SAI_Abort+0x1a>
 800946a:	2302      	movs	r3, #2
 800946c:	e053      	b.n	8009516 <HAL_SAI_Abort+0xc2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009484:	d125      	bne.n	80094d2 <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009494:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b12      	cmp	r3, #18
 80094a0:	d108      	bne.n	80094b4 <HAL_SAI_Abort+0x60>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fb fb8a 	bl	8004bc8 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b22      	cmp	r3, #34	; 0x22
 80094be:	d108      	bne.n	80094d2 <HAL_SAI_Abort+0x7e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d004      	beq.n	80094d2 <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fb fb7b 	bl	8004bc8 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2200      	movs	r2, #0
 80094d8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fb77 	bl	8009bd8 <SAI_Disable>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0208 	orr.w	r2, r2, #8
 8009502:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8192 	beq.w	800985a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f003 0308 	and.w	r3, r3, #8
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_SAI_IRQHandler+0x4c>
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
 800956a:	e176      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01e      	beq.n	80095b4 <HAL_SAI_IRQHandler+0x94>
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d019      	beq.n	80095b4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2201      	movs	r2, #1
 8009586:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b22      	cmp	r3, #34	; 0x22
 8009592:	d101      	bne.n	8009598 <HAL_SAI_IRQHandler+0x78>
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <HAL_SAI_IRQHandler+0x7a>
 8009598:	2302      	movs	r3, #2
 800959a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f8 fb55 	bl	8001c5c <HAL_SAI_ErrorCallback>
 80095b2:	e152      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d011      	beq.n	80095e2 <HAL_SAI_IRQHandler+0xc2>
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00c      	beq.n	80095e2 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2202      	movs	r2, #2
 80095ce:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8140 	beq.w	800985a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095de:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80095e0:	e13b      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d055      	beq.n	8009698 <HAL_SAI_IRQHandler+0x178>
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d050      	beq.n	8009698 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2220      	movs	r2, #32
 80095fc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009604:	f043 0204 	orr.w	r2, r3, #4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d038      	beq.n	800968a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d016      	beq.n	800964e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009624:	4a8f      	ldr	r2, [pc, #572]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962c:	4618      	mov	r0, r3
 800962e:	f7fb fb09 	bl	8004c44 <HAL_DMA_Abort_IT>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800963e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7f8 fb07 	bl	8001c5c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80fc 	beq.w	8009850 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965c:	4a81      	ldr	r2, [pc, #516]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	4618      	mov	r0, r3
 8009666:	f7fb faed 	bl	8004c44 <HAL_DMA_Abort_IT>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80ef 	beq.w	8009850 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f8 faea 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009688:	e0e2      	b.n	8009850 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff fee2 	bl	8009454 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7f8 fae3 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009696:	e0db      	b.n	8009850 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d055      	beq.n	800974e <HAL_SAI_IRQHandler+0x22e>
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d050      	beq.n	800974e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2240      	movs	r2, #64	; 0x40
 80096b2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ba:	f043 0208 	orr.w	r2, r3, #8
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d038      	beq.n	8009740 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d016      	beq.n	8009704 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096da:	4a62      	ldr	r2, [pc, #392]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fb faae 	bl	8004c44 <HAL_DMA_Abort_IT>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f8 faac 	bl	8001c5c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 80a3 	beq.w	8009854 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	4a54      	ldr	r2, [pc, #336]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 8009714:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	4618      	mov	r0, r3
 800971c:	f7fb fa92 	bl	8004c44 <HAL_DMA_Abort_IT>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 8096 	beq.w	8009854 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800972e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7f8 fa8f 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800973e:	e089      	b.n	8009854 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fe87 	bl	8009454 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7f8 fa88 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800974c:	e082      	b.n	8009854 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d061      	beq.n	800981c <HAL_SAI_IRQHandler+0x2fc>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	d05c      	beq.n	800981c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2204      	movs	r2, #4
 8009768:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009770:	f043 0220 	orr.w	r2, r3, #32
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d036      	beq.n	80097f2 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d016      	beq.n	80097ba <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009790:	4a34      	ldr	r2, [pc, #208]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 8009792:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009798:	4618      	mov	r0, r3
 800979a:	f7fb fa53 	bl	8004c44 <HAL_DMA_Abort_IT>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00a      	beq.n	80097ba <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7f8 fa51 	bl	8001c5c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d04a      	beq.n	8009858 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c6:	4a27      	ldr	r2, [pc, #156]	; (8009864 <HAL_SAI_IRQHandler+0x344>)
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fb fa38 	bl	8004c44 <HAL_DMA_Abort_IT>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d03e      	beq.n	8009858 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f8 fa36 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80097f0:	e032      	b.n	8009858 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7f8 fa21 	bl	8001c5c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800981a:	e01d      	b.n	8009858 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b00      	cmp	r3, #0
 8009824:	d019      	beq.n	800985a <HAL_SAI_IRQHandler+0x33a>
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b00      	cmp	r3, #0
 800982e:	d014      	beq.n	800985a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2210      	movs	r2, #16
 8009836:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800983e:	f043 0210 	orr.w	r2, r3, #16
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7f8 fa07 	bl	8001c5c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800984e:	e004      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009850:	bf00      	nop
 8009852:	e002      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009854:	bf00      	nop
 8009856:	e000      	b.n	800985a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009858:	bf00      	nop
}
 800985a:	bf00      	nop
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	08009c4d 	.word	0x08009c4d

08009868 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <SAI_InitI2S+0x2e>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d103      	bne.n	800989e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	63da      	str	r2, [r3, #60]	; 0x3c
 800989c:	e002      	b.n	80098a4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80098aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098b2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e077      	b.n	80099be <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50
 80098e2:	e006      	b.n	80098f2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80098ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d84f      	bhi.n	8009998 <SAI_InitI2S+0x130>
 80098f8:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <SAI_InitI2S+0x98>)
 80098fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fe:	bf00      	nop
 8009900:	08009911 	.word	0x08009911
 8009904:	08009933 	.word	0x08009933
 8009908:	08009955 	.word	0x08009955
 800990c:	08009977 	.word	0x08009977
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2280      	movs	r2, #128	; 0x80
 8009914:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	011a      	lsls	r2, r3, #4
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2240      	movs	r2, #64	; 0x40
 800992e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009930:	e035      	b.n	800999e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2280      	movs	r2, #128	; 0x80
 8009936:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	085b      	lsrs	r3, r3, #1
 800993c:	019a      	lsls	r2, r3, #6
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2280      	movs	r2, #128	; 0x80
 8009950:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009952:	e024      	b.n	800999e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	22c0      	movs	r2, #192	; 0xc0
 8009958:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	085b      	lsrs	r3, r3, #1
 800995e:	019a      	lsls	r2, r3, #6
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2280      	movs	r2, #128	; 0x80
 8009972:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009974:	e013      	b.n	800999e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	22e0      	movs	r2, #224	; 0xe0
 800997a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	019a      	lsls	r2, r3, #6
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	085b      	lsrs	r3, r3, #1
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009996:	e002      	b.n	800999e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	75fb      	strb	r3, [r7, #23]
      break;
 800999c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d10b      	bne.n	80099bc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d102      	bne.n	80099b0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2210      	movs	r2, #16
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d102      	bne.n	80099bc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2208      	movs	r2, #8
 80099ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop

080099cc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <SAI_InitPCM+0x2e>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d103      	bne.n	8009a02 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8009a00:	e002      	b.n	8009a08 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a30:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d103      	bne.n	8009a40 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44
 8009a3e:	e002      	b.n	8009a46 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	220d      	movs	r2, #13
 8009a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d837      	bhi.n	8009abc <SAI_InitPCM+0xf0>
 8009a4c:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <SAI_InitPCM+0x88>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009a7b 	.word	0x08009a7b
 8009a5c:	08009a91 	.word	0x08009a91
 8009a60:	08009aa7 	.word	0x08009aa7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2280      	movs	r2, #128	; 0x80
 8009a68:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	011a      	lsls	r2, r3, #4
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2240      	movs	r2, #64	; 0x40
 8009a76:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009a78:	e023      	b.n	8009ac2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2280      	movs	r2, #128	; 0x80
 8009a7e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009a8e:	e018      	b.n	8009ac2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	22c0      	movs	r2, #192	; 0xc0
 8009a94:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2280      	movs	r2, #128	; 0x80
 8009aa2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009aa4:	e00d      	b.n	8009ac2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	22e0      	movs	r2, #224	; 0xe0
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8009aba:	e002      	b.n	8009ac2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac0:	bf00      	nop
  }

  return status;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 8009ad8:	e06a      	b.n	8009bb0 <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d10f      	bne.n	8009b02 <SAI_FillFifo+0x32>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	665a      	str	r2, [r3, #100]	; 0x64
 8009b00:	e04e      	b.n	8009ba0 <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b06:	2b80      	cmp	r3, #128	; 0x80
 8009b08:	d819      	bhi.n	8009b3e <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	61da      	str	r2, [r3, #28]
 8009b3c:	e030      	b.n	8009ba0 <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	041b      	lsls	r3, r3, #16
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	061b      	lsls	r3, r3, #24
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	665a      	str	r2, [r3, #100]	; 0x64
      hsai->Instance->DR = temp;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bbe:	d004      	beq.n	8009bca <SAI_FillFifo+0xfa>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d187      	bne.n	8009ada <SAI_FillFifo+0xa>
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009be0:	4b18      	ldr	r3, [pc, #96]	; (8009c44 <SAI_Disable+0x6c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a18      	ldr	r2, [pc, #96]	; (8009c48 <SAI_Disable+0x70>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	0b1b      	lsrs	r3, r3, #12
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c02:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8009c1e:	e009      	b.n	8009c34 <SAI_Disable+0x5c>
    }
    count--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e7      	bne.n	8009c04 <SAI_Disable+0x2c>

  return status;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000000 	.word	0x20000000
 8009c48:	95cbec1b 	.word	0x95cbec1b

08009c4c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009c68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d00a      	beq.n	8009c9c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff ffa6 	bl	8009bd8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0208 	orr.w	r2, r2, #8
 8009c9a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7f7 ffd5 	bl	8001c5c <HAL_SAI_ErrorCallback>
#endif
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e040      	b.n	8009d4e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d106      	bne.n	8009ce2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7f7 fedb 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2224      	movs	r2, #36	; 0x24
 8009ce6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 0201 	bic.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f82d 	bl	8009d58 <UART_SetConfig>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d101      	bne.n	8009d08 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e022      	b.n	8009d4e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fad9 	bl	800a2c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f042 0201 	orr.w	r2, r2, #1
 8009d44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fb60 	bl	800a40c <UART_CheckIdleState>
 8009d4c:	4603      	mov	r3, r0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d5c:	b08a      	sub	sp, #40	; 0x28
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	431a      	orrs	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4ba4      	ldr	r3, [pc, #656]	; (800a018 <UART_SetConfig+0x2c0>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	6812      	ldr	r2, [r2, #0]
 8009d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a99      	ldr	r2, [pc, #612]	; (800a01c <UART_SetConfig+0x2c4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a90      	ldr	r2, [pc, #576]	; (800a020 <UART_SetConfig+0x2c8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d126      	bne.n	8009e30 <UART_SetConfig+0xd8>
 8009de2:	4b90      	ldr	r3, [pc, #576]	; (800a024 <UART_SetConfig+0x2cc>)
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d81b      	bhi.n	8009e28 <UART_SetConfig+0xd0>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <UART_SetConfig+0xa0>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e11 	.word	0x08009e11
 8009e04:	08009e21 	.word	0x08009e21
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e0e:	e116      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e10:	2302      	movs	r3, #2
 8009e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e16:	e112      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e1e:	e10e      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e26:	e10a      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e2e:	e106      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a7c      	ldr	r2, [pc, #496]	; (800a028 <UART_SetConfig+0x2d0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d138      	bne.n	8009eac <UART_SetConfig+0x154>
 8009e3a:	4b7a      	ldr	r3, [pc, #488]	; (800a024 <UART_SetConfig+0x2cc>)
 8009e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e40:	f003 030c 	and.w	r3, r3, #12
 8009e44:	2b0c      	cmp	r3, #12
 8009e46:	d82d      	bhi.n	8009ea4 <UART_SetConfig+0x14c>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0xf8>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009ea5 	.word	0x08009ea5
 8009e58:	08009ea5 	.word	0x08009ea5
 8009e5c:	08009ea5 	.word	0x08009ea5
 8009e60:	08009e95 	.word	0x08009e95
 8009e64:	08009ea5 	.word	0x08009ea5
 8009e68:	08009ea5 	.word	0x08009ea5
 8009e6c:	08009ea5 	.word	0x08009ea5
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009ea5 	.word	0x08009ea5
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009e9d 	.word	0x08009e9d
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e8a:	e0d8      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e92:	e0d4      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e9a:	e0d0      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ea2:	e0cc      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eaa:	e0c8      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a5e      	ldr	r2, [pc, #376]	; (800a02c <UART_SetConfig+0x2d4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d125      	bne.n	8009f02 <UART_SetConfig+0x1aa>
 8009eb6:	4b5b      	ldr	r3, [pc, #364]	; (800a024 <UART_SetConfig+0x2cc>)
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ec0:	2b30      	cmp	r3, #48	; 0x30
 8009ec2:	d016      	beq.n	8009ef2 <UART_SetConfig+0x19a>
 8009ec4:	2b30      	cmp	r3, #48	; 0x30
 8009ec6:	d818      	bhi.n	8009efa <UART_SetConfig+0x1a2>
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	d00a      	beq.n	8009ee2 <UART_SetConfig+0x18a>
 8009ecc:	2b20      	cmp	r3, #32
 8009ece:	d814      	bhi.n	8009efa <UART_SetConfig+0x1a2>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <UART_SetConfig+0x182>
 8009ed4:	2b10      	cmp	r3, #16
 8009ed6:	d008      	beq.n	8009eea <UART_SetConfig+0x192>
 8009ed8:	e00f      	b.n	8009efa <UART_SetConfig+0x1a2>
 8009eda:	2300      	movs	r3, #0
 8009edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ee0:	e0ad      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ee8:	e0a9      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009eea:	2304      	movs	r3, #4
 8009eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ef0:	e0a5      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009ef2:	2308      	movs	r3, #8
 8009ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ef8:	e0a1      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009efa:	2310      	movs	r3, #16
 8009efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f00:	e09d      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a4a      	ldr	r2, [pc, #296]	; (800a030 <UART_SetConfig+0x2d8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d125      	bne.n	8009f58 <UART_SetConfig+0x200>
 8009f0c:	4b45      	ldr	r3, [pc, #276]	; (800a024 <UART_SetConfig+0x2cc>)
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f16:	2bc0      	cmp	r3, #192	; 0xc0
 8009f18:	d016      	beq.n	8009f48 <UART_SetConfig+0x1f0>
 8009f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f1c:	d818      	bhi.n	8009f50 <UART_SetConfig+0x1f8>
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	d00a      	beq.n	8009f38 <UART_SetConfig+0x1e0>
 8009f22:	2b80      	cmp	r3, #128	; 0x80
 8009f24:	d814      	bhi.n	8009f50 <UART_SetConfig+0x1f8>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <UART_SetConfig+0x1d8>
 8009f2a:	2b40      	cmp	r3, #64	; 0x40
 8009f2c:	d008      	beq.n	8009f40 <UART_SetConfig+0x1e8>
 8009f2e:	e00f      	b.n	8009f50 <UART_SetConfig+0x1f8>
 8009f30:	2300      	movs	r3, #0
 8009f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f36:	e082      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f3e:	e07e      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f46:	e07a      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f4e:	e076      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f56:	e072      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a35      	ldr	r2, [pc, #212]	; (800a034 <UART_SetConfig+0x2dc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d12a      	bne.n	8009fb8 <UART_SetConfig+0x260>
 8009f62:	4b30      	ldr	r3, [pc, #192]	; (800a024 <UART_SetConfig+0x2cc>)
 8009f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f70:	d01a      	beq.n	8009fa8 <UART_SetConfig+0x250>
 8009f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f76:	d81b      	bhi.n	8009fb0 <UART_SetConfig+0x258>
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d00c      	beq.n	8009f98 <UART_SetConfig+0x240>
 8009f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f82:	d815      	bhi.n	8009fb0 <UART_SetConfig+0x258>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <UART_SetConfig+0x238>
 8009f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8c:	d008      	beq.n	8009fa0 <UART_SetConfig+0x248>
 8009f8e:	e00f      	b.n	8009fb0 <UART_SetConfig+0x258>
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f96:	e052      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f9e:	e04e      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fa6:	e04a      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009fa8:	2308      	movs	r3, #8
 8009faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fae:	e046      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fb6:	e042      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a17      	ldr	r2, [pc, #92]	; (800a01c <UART_SetConfig+0x2c4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d13a      	bne.n	800a038 <UART_SetConfig+0x2e0>
 8009fc2:	4b18      	ldr	r3, [pc, #96]	; (800a024 <UART_SetConfig+0x2cc>)
 8009fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fd0:	d01a      	beq.n	800a008 <UART_SetConfig+0x2b0>
 8009fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fd6:	d81b      	bhi.n	800a010 <UART_SetConfig+0x2b8>
 8009fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fdc:	d00c      	beq.n	8009ff8 <UART_SetConfig+0x2a0>
 8009fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe2:	d815      	bhi.n	800a010 <UART_SetConfig+0x2b8>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <UART_SetConfig+0x298>
 8009fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fec:	d008      	beq.n	800a000 <UART_SetConfig+0x2a8>
 8009fee:	e00f      	b.n	800a010 <UART_SetConfig+0x2b8>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ff6:	e022      	b.n	800a03e <UART_SetConfig+0x2e6>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ffe:	e01e      	b.n	800a03e <UART_SetConfig+0x2e6>
 800a000:	2304      	movs	r3, #4
 800a002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a006:	e01a      	b.n	800a03e <UART_SetConfig+0x2e6>
 800a008:	2308      	movs	r3, #8
 800a00a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a00e:	e016      	b.n	800a03e <UART_SetConfig+0x2e6>
 800a010:	2310      	movs	r3, #16
 800a012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a016:	e012      	b.n	800a03e <UART_SetConfig+0x2e6>
 800a018:	efff69f3 	.word	0xefff69f3
 800a01c:	40008000 	.word	0x40008000
 800a020:	40013800 	.word	0x40013800
 800a024:	40021000 	.word	0x40021000
 800a028:	40004400 	.word	0x40004400
 800a02c:	40004800 	.word	0x40004800
 800a030:	40004c00 	.word	0x40004c00
 800a034:	40005000 	.word	0x40005000
 800a038:	2310      	movs	r3, #16
 800a03a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a9f      	ldr	r2, [pc, #636]	; (800a2c0 <UART_SetConfig+0x568>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d17a      	bne.n	800a13e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d824      	bhi.n	800a09a <UART_SetConfig+0x342>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <UART_SetConfig+0x300>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a07d 	.word	0x0800a07d
 800a05c:	0800a09b 	.word	0x0800a09b
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a09b 	.word	0x0800a09b
 800a068:	0800a08b 	.word	0x0800a08b
 800a06c:	0800a09b 	.word	0x0800a09b
 800a070:	0800a09b 	.word	0x0800a09b
 800a074:	0800a09b 	.word	0x0800a09b
 800a078:	0800a093 	.word	0x0800a093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a07c:	f7fd fa88 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800a080:	61f8      	str	r0, [r7, #28]
        break;
 800a082:	e010      	b.n	800a0a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a084:	4b8f      	ldr	r3, [pc, #572]	; (800a2c4 <UART_SetConfig+0x56c>)
 800a086:	61fb      	str	r3, [r7, #28]
        break;
 800a088:	e00d      	b.n	800a0a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a08a:	f7fd f9e9 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800a08e:	61f8      	str	r0, [r7, #28]
        break;
 800a090:	e009      	b.n	800a0a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a096:	61fb      	str	r3, [r7, #28]
        break;
 800a098:	e005      	b.n	800a0a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a0a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80fb 	beq.w	800a2a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d305      	bcc.n	800a0ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d903      	bls.n	800a0d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a0d0:	e0e8      	b.n	800a2a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	461c      	mov	r4, r3
 800a0d8:	4615      	mov	r5, r2
 800a0da:	f04f 0200 	mov.w	r2, #0
 800a0de:	f04f 0300 	mov.w	r3, #0
 800a0e2:	022b      	lsls	r3, r5, #8
 800a0e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a0e8:	0222      	lsls	r2, r4, #8
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	6849      	ldr	r1, [r1, #4]
 800a0ee:	0849      	lsrs	r1, r1, #1
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	4688      	mov	r8, r1
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	eb12 0a08 	adds.w	sl, r2, r8
 800a0fa:	eb43 0b09 	adc.w	fp, r3, r9
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a10c:	4650      	mov	r0, sl
 800a10e:	4659      	mov	r1, fp
 800a110:	f7f6 fcd8 	bl	8000ac4 <__aeabi_uldivmod>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4613      	mov	r3, r2
 800a11a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a122:	d308      	bcc.n	800a136 <UART_SetConfig+0x3de>
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12a:	d204      	bcs.n	800a136 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	60da      	str	r2, [r3, #12]
 800a134:	e0b6      	b.n	800a2a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a13c:	e0b2      	b.n	800a2a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a146:	d15e      	bne.n	800a206 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d828      	bhi.n	800a1a2 <UART_SetConfig+0x44a>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x400>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a17d 	.word	0x0800a17d
 800a15c:	0800a185 	.word	0x0800a185
 800a160:	0800a18d 	.word	0x0800a18d
 800a164:	0800a1a3 	.word	0x0800a1a3
 800a168:	0800a193 	.word	0x0800a193
 800a16c:	0800a1a3 	.word	0x0800a1a3
 800a170:	0800a1a3 	.word	0x0800a1a3
 800a174:	0800a1a3 	.word	0x0800a1a3
 800a178:	0800a19b 	.word	0x0800a19b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a17c:	f7fd fa08 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800a180:	61f8      	str	r0, [r7, #28]
        break;
 800a182:	e014      	b.n	800a1ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a184:	f7fd fa1a 	bl	80075bc <HAL_RCC_GetPCLK2Freq>
 800a188:	61f8      	str	r0, [r7, #28]
        break;
 800a18a:	e010      	b.n	800a1ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a18c:	4b4d      	ldr	r3, [pc, #308]	; (800a2c4 <UART_SetConfig+0x56c>)
 800a18e:	61fb      	str	r3, [r7, #28]
        break;
 800a190:	e00d      	b.n	800a1ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a192:	f7fd f965 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800a196:	61f8      	str	r0, [r7, #28]
        break;
 800a198:	e009      	b.n	800a1ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a19e:	61fb      	str	r3, [r7, #28]
        break;
 800a1a0:	e005      	b.n	800a1ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a1ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d077      	beq.n	800a2a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	005a      	lsls	r2, r3, #1
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	085b      	lsrs	r3, r3, #1
 800a1be:	441a      	add	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b0f      	cmp	r3, #15
 800a1ce:	d916      	bls.n	800a1fe <UART_SetConfig+0x4a6>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d6:	d212      	bcs.n	800a1fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f023 030f 	bic.w	r3, r3, #15
 800a1e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	085b      	lsrs	r3, r3, #1
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	8afb      	ldrh	r3, [r7, #22]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	8afa      	ldrh	r2, [r7, #22]
 800a1fa:	60da      	str	r2, [r3, #12]
 800a1fc:	e052      	b.n	800a2a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a204:	e04e      	b.n	800a2a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	d827      	bhi.n	800a25e <UART_SetConfig+0x506>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <UART_SetConfig+0x4bc>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a241 	.word	0x0800a241
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	0800a25f 	.word	0x0800a25f
 800a224:	0800a24f 	.word	0x0800a24f
 800a228:	0800a25f 	.word	0x0800a25f
 800a22c:	0800a25f 	.word	0x0800a25f
 800a230:	0800a25f 	.word	0x0800a25f
 800a234:	0800a257 	.word	0x0800a257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a238:	f7fd f9aa 	bl	8007590 <HAL_RCC_GetPCLK1Freq>
 800a23c:	61f8      	str	r0, [r7, #28]
        break;
 800a23e:	e014      	b.n	800a26a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a240:	f7fd f9bc 	bl	80075bc <HAL_RCC_GetPCLK2Freq>
 800a244:	61f8      	str	r0, [r7, #28]
        break;
 800a246:	e010      	b.n	800a26a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a248:	4b1e      	ldr	r3, [pc, #120]	; (800a2c4 <UART_SetConfig+0x56c>)
 800a24a:	61fb      	str	r3, [r7, #28]
        break;
 800a24c:	e00d      	b.n	800a26a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24e:	f7fd f907 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800a252:	61f8      	str	r0, [r7, #28]
        break;
 800a254:	e009      	b.n	800a26a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a25a:	61fb      	str	r3, [r7, #28]
        break;
 800a25c:	e005      	b.n	800a26a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a268:	bf00      	nop
    }

    if (pclk != 0U)
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d019      	beq.n	800a2a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	085a      	lsrs	r2, r3, #1
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	441a      	add	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d909      	bls.n	800a29e <UART_SetConfig+0x546>
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a290:	d205      	bcs.n	800a29e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	b29a      	uxth	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	e002      	b.n	800a2a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a2b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3728      	adds	r7, #40	; 0x28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2be:	bf00      	nop
 800a2c0:	40008000 	.word	0x40008000
 800a2c4:	00f42400 	.word	0x00f42400

0800a2c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00a      	beq.n	800a2f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	f003 0308 	and.w	r3, r3, #8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00a      	beq.n	800a37a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01a      	beq.n	800a3de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3c6:	d10a      	bne.n	800a3de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af02      	add	r7, sp, #8
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a41c:	f7f8 fde4 	bl	8002fe8 <HAL_GetTick>
 800a420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d10e      	bne.n	800a44e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f82d 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e023      	b.n	800a496 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d10e      	bne.n	800a47a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a45c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f817 	bl	800a49e <UART_WaitOnFlagUntilTimeout>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e00d      	b.n	800a496 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b09c      	sub	sp, #112	; 0x70
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ae:	e0a5      	b.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b6:	f000 80a1 	beq.w	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ba:	f7f8 fd95 	bl	8002fe8 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d302      	bcc.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a4ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d13e      	bne.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4e4:	667b      	str	r3, [r7, #100]	; 0x64
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e6      	bne.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	f023 0301 	bic.w	r3, r3, #1
 800a518:	663b      	str	r3, [r7, #96]	; 0x60
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a522:	64ba      	str	r2, [r7, #72]	; 0x48
 800a524:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e5      	bne.n	800a502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e067      	b.n	800a61e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d04f      	beq.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a56a:	d147      	bne.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a574:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a58a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
 800a596:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a59a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a5c8:	623a      	str	r2, [r7, #32]
 800a5ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	69f9      	ldr	r1, [r7, #28]
 800a5ce:	6a3a      	ldr	r2, [r7, #32]
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e5      	bne.n	800a5a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e010      	b.n	800a61e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69da      	ldr	r2, [r3, #28]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	bf0c      	ite	eq
 800a60c:	2301      	moveq	r3, #1
 800a60e:	2300      	movne	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	429a      	cmp	r2, r3
 800a618:	f43f af4a 	beq.w	800a4b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3770      	adds	r7, #112	; 0x70
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <__libc_init_array>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4d0d      	ldr	r5, [pc, #52]	; (800a660 <__libc_init_array+0x38>)
 800a62c:	4c0d      	ldr	r4, [pc, #52]	; (800a664 <__libc_init_array+0x3c>)
 800a62e:	1b64      	subs	r4, r4, r5
 800a630:	10a4      	asrs	r4, r4, #2
 800a632:	2600      	movs	r6, #0
 800a634:	42a6      	cmp	r6, r4
 800a636:	d109      	bne.n	800a64c <__libc_init_array+0x24>
 800a638:	4d0b      	ldr	r5, [pc, #44]	; (800a668 <__libc_init_array+0x40>)
 800a63a:	4c0c      	ldr	r4, [pc, #48]	; (800a66c <__libc_init_array+0x44>)
 800a63c:	f001 f86a 	bl	800b714 <_init>
 800a640:	1b64      	subs	r4, r4, r5
 800a642:	10a4      	asrs	r4, r4, #2
 800a644:	2600      	movs	r6, #0
 800a646:	42a6      	cmp	r6, r4
 800a648:	d105      	bne.n	800a656 <__libc_init_array+0x2e>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a650:	4798      	blx	r3
 800a652:	3601      	adds	r6, #1
 800a654:	e7ee      	b.n	800a634 <__libc_init_array+0xc>
 800a656:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65a:	4798      	blx	r3
 800a65c:	3601      	adds	r6, #1
 800a65e:	e7f2      	b.n	800a646 <__libc_init_array+0x1e>
 800a660:	0800b9b8 	.word	0x0800b9b8
 800a664:	0800b9b8 	.word	0x0800b9b8
 800a668:	0800b9b8 	.word	0x0800b9b8
 800a66c:	0800b9bc 	.word	0x0800b9bc

0800a670 <memset>:
 800a670:	4402      	add	r2, r0
 800a672:	4603      	mov	r3, r0
 800a674:	4293      	cmp	r3, r2
 800a676:	d100      	bne.n	800a67a <memset+0xa>
 800a678:	4770      	bx	lr
 800a67a:	f803 1b01 	strb.w	r1, [r3], #1
 800a67e:	e7f9      	b.n	800a674 <memset+0x4>

0800a680 <sin>:
 800a680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a682:	ec53 2b10 	vmov	r2, r3, d0
 800a686:	4828      	ldr	r0, [pc, #160]	; (800a728 <sin+0xa8>)
 800a688:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a68c:	4281      	cmp	r1, r0
 800a68e:	dc07      	bgt.n	800a6a0 <sin+0x20>
 800a690:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a720 <sin+0xa0>
 800a694:	2000      	movs	r0, #0
 800a696:	b005      	add	sp, #20
 800a698:	f85d eb04 	ldr.w	lr, [sp], #4
 800a69c:	f000 be6c 	b.w	800b378 <__kernel_sin>
 800a6a0:	4822      	ldr	r0, [pc, #136]	; (800a72c <sin+0xac>)
 800a6a2:	4281      	cmp	r1, r0
 800a6a4:	dd09      	ble.n	800a6ba <sin+0x3a>
 800a6a6:	ee10 0a10 	vmov	r0, s0
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	f7f5 fd90 	bl	80001d0 <__aeabi_dsub>
 800a6b0:	ec41 0b10 	vmov	d0, r0, r1
 800a6b4:	b005      	add	sp, #20
 800a6b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ba:	4668      	mov	r0, sp
 800a6bc:	f000 f838 	bl	800a730 <__ieee754_rem_pio2>
 800a6c0:	f000 0003 	and.w	r0, r0, #3
 800a6c4:	2801      	cmp	r0, #1
 800a6c6:	d00c      	beq.n	800a6e2 <sin+0x62>
 800a6c8:	2802      	cmp	r0, #2
 800a6ca:	d011      	beq.n	800a6f0 <sin+0x70>
 800a6cc:	b9f0      	cbnz	r0, 800a70c <sin+0x8c>
 800a6ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d2:	ed9d 0b00 	vldr	d0, [sp]
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	f000 fe4e 	bl	800b378 <__kernel_sin>
 800a6dc:	ec51 0b10 	vmov	r0, r1, d0
 800a6e0:	e7e6      	b.n	800a6b0 <sin+0x30>
 800a6e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6e6:	ed9d 0b00 	vldr	d0, [sp]
 800a6ea:	f000 fa2d 	bl	800ab48 <__kernel_cos>
 800a6ee:	e7f5      	b.n	800a6dc <sin+0x5c>
 800a6f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6f4:	ed9d 0b00 	vldr	d0, [sp]
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	f000 fe3d 	bl	800b378 <__kernel_sin>
 800a6fe:	ec53 2b10 	vmov	r2, r3, d0
 800a702:	ee10 0a10 	vmov	r0, s0
 800a706:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a70a:	e7d1      	b.n	800a6b0 <sin+0x30>
 800a70c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a710:	ed9d 0b00 	vldr	d0, [sp]
 800a714:	f000 fa18 	bl	800ab48 <__kernel_cos>
 800a718:	e7f1      	b.n	800a6fe <sin+0x7e>
 800a71a:	bf00      	nop
 800a71c:	f3af 8000 	nop.w
	...
 800a728:	3fe921fb 	.word	0x3fe921fb
 800a72c:	7fefffff 	.word	0x7fefffff

0800a730 <__ieee754_rem_pio2>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	ed2d 8b02 	vpush	{d8}
 800a738:	ec55 4b10 	vmov	r4, r5, d0
 800a73c:	4bca      	ldr	r3, [pc, #808]	; (800aa68 <__ieee754_rem_pio2+0x338>)
 800a73e:	b08b      	sub	sp, #44	; 0x2c
 800a740:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a744:	4598      	cmp	r8, r3
 800a746:	4682      	mov	sl, r0
 800a748:	9502      	str	r5, [sp, #8]
 800a74a:	dc08      	bgt.n	800a75e <__ieee754_rem_pio2+0x2e>
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	ed80 0b00 	vstr	d0, [r0]
 800a754:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a758:	f04f 0b00 	mov.w	fp, #0
 800a75c:	e028      	b.n	800a7b0 <__ieee754_rem_pio2+0x80>
 800a75e:	4bc3      	ldr	r3, [pc, #780]	; (800aa6c <__ieee754_rem_pio2+0x33c>)
 800a760:	4598      	cmp	r8, r3
 800a762:	dc78      	bgt.n	800a856 <__ieee754_rem_pio2+0x126>
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	4ec2      	ldr	r6, [pc, #776]	; (800aa70 <__ieee754_rem_pio2+0x340>)
 800a768:	2b00      	cmp	r3, #0
 800a76a:	ee10 0a10 	vmov	r0, s0
 800a76e:	a3b0      	add	r3, pc, #704	; (adr r3, 800aa30 <__ieee754_rem_pio2+0x300>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	4629      	mov	r1, r5
 800a776:	dd39      	ble.n	800a7ec <__ieee754_rem_pio2+0xbc>
 800a778:	f7f5 fd2a 	bl	80001d0 <__aeabi_dsub>
 800a77c:	45b0      	cmp	r8, r6
 800a77e:	4604      	mov	r4, r0
 800a780:	460d      	mov	r5, r1
 800a782:	d01b      	beq.n	800a7bc <__ieee754_rem_pio2+0x8c>
 800a784:	a3ac      	add	r3, pc, #688	; (adr r3, 800aa38 <__ieee754_rem_pio2+0x308>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd21 	bl	80001d0 <__aeabi_dsub>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9ca 2300 	strd	r2, r3, [sl]
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 fd19 	bl	80001d0 <__aeabi_dsub>
 800a79e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa38 <__ieee754_rem_pio2+0x308>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd14 	bl	80001d0 <__aeabi_dsub>
 800a7a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7ac:	f04f 0b01 	mov.w	fp, #1
 800a7b0:	4658      	mov	r0, fp
 800a7b2:	b00b      	add	sp, #44	; 0x2c
 800a7b4:	ecbd 8b02 	vpop	{d8}
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa40 <__ieee754_rem_pio2+0x310>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	f7f5 fd05 	bl	80001d0 <__aeabi_dsub>
 800a7c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x318>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	f7f5 fcfe 	bl	80001d0 <__aeabi_dsub>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	e9ca 2300 	strd	r2, r3, [sl]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f7f5 fcf6 	bl	80001d0 <__aeabi_dsub>
 800a7e4:	a398      	add	r3, pc, #608	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x318>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	e7db      	b.n	800a7a4 <__ieee754_rem_pio2+0x74>
 800a7ec:	f7f5 fcf2 	bl	80001d4 <__adddf3>
 800a7f0:	45b0      	cmp	r8, r6
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	460d      	mov	r5, r1
 800a7f6:	d016      	beq.n	800a826 <__ieee754_rem_pio2+0xf6>
 800a7f8:	a38f      	add	r3, pc, #572	; (adr r3, 800aa38 <__ieee754_rem_pio2+0x308>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f5 fce9 	bl	80001d4 <__adddf3>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	e9ca 2300 	strd	r2, r3, [sl]
 800a80a:	4620      	mov	r0, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	f7f5 fcdf 	bl	80001d0 <__aeabi_dsub>
 800a812:	a389      	add	r3, pc, #548	; (adr r3, 800aa38 <__ieee754_rem_pio2+0x308>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 fcdc 	bl	80001d4 <__adddf3>
 800a81c:	f04f 3bff 	mov.w	fp, #4294967295
 800a820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a824:	e7c4      	b.n	800a7b0 <__ieee754_rem_pio2+0x80>
 800a826:	a386      	add	r3, pc, #536	; (adr r3, 800aa40 <__ieee754_rem_pio2+0x310>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fcd2 	bl	80001d4 <__adddf3>
 800a830:	a385      	add	r3, pc, #532	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x318>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	4604      	mov	r4, r0
 800a838:	460d      	mov	r5, r1
 800a83a:	f7f5 fccb 	bl	80001d4 <__adddf3>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	e9ca 2300 	strd	r2, r3, [sl]
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f5 fcc1 	bl	80001d0 <__aeabi_dsub>
 800a84e:	a37e      	add	r3, pc, #504	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x318>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	e7e0      	b.n	800a818 <__ieee754_rem_pio2+0xe8>
 800a856:	4b87      	ldr	r3, [pc, #540]	; (800aa74 <__ieee754_rem_pio2+0x344>)
 800a858:	4598      	cmp	r8, r3
 800a85a:	f300 80d9 	bgt.w	800aa10 <__ieee754_rem_pio2+0x2e0>
 800a85e:	f000 fe49 	bl	800b4f4 <fabs>
 800a862:	ec55 4b10 	vmov	r4, r5, d0
 800a866:	ee10 0a10 	vmov	r0, s0
 800a86a:	a379      	add	r3, pc, #484	; (adr r3, 800aa50 <__ieee754_rem_pio2+0x320>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fe65 	bl	8000540 <__aeabi_dmul>
 800a876:	4b80      	ldr	r3, [pc, #512]	; (800aa78 <__ieee754_rem_pio2+0x348>)
 800a878:	2200      	movs	r2, #0
 800a87a:	f7f5 fcab 	bl	80001d4 <__adddf3>
 800a87e:	f7f6 f8f9 	bl	8000a74 <__aeabi_d2iz>
 800a882:	4683      	mov	fp, r0
 800a884:	f7f5 fdf2 	bl	800046c <__aeabi_i2d>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	ec43 2b18 	vmov	d8, r2, r3
 800a890:	a367      	add	r3, pc, #412	; (adr r3, 800aa30 <__ieee754_rem_pio2+0x300>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fe53 	bl	8000540 <__aeabi_dmul>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4620      	mov	r0, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7f5 fc95 	bl	80001d0 <__aeabi_dsub>
 800a8a6:	a364      	add	r3, pc, #400	; (adr r3, 800aa38 <__ieee754_rem_pio2+0x308>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	ec51 0b18 	vmov	r0, r1, d8
 800a8b4:	f7f5 fe44 	bl	8000540 <__aeabi_dmul>
 800a8b8:	f1bb 0f1f 	cmp.w	fp, #31
 800a8bc:	4604      	mov	r4, r0
 800a8be:	460d      	mov	r5, r1
 800a8c0:	dc0d      	bgt.n	800a8de <__ieee754_rem_pio2+0x1ae>
 800a8c2:	4b6e      	ldr	r3, [pc, #440]	; (800aa7c <__ieee754_rem_pio2+0x34c>)
 800a8c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8cc:	4543      	cmp	r3, r8
 800a8ce:	d006      	beq.n	800a8de <__ieee754_rem_pio2+0x1ae>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	462b      	mov	r3, r5
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f7f5 fc7a 	bl	80001d0 <__aeabi_dsub>
 800a8dc:	e00f      	b.n	800a8fe <__ieee754_rem_pio2+0x1ce>
 800a8de:	462b      	mov	r3, r5
 800a8e0:	4622      	mov	r2, r4
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fc73 	bl	80001d0 <__aeabi_dsub>
 800a8ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a8f8:	f1b8 0f10 	cmp.w	r8, #16
 800a8fc:	dc02      	bgt.n	800a904 <__ieee754_rem_pio2+0x1d4>
 800a8fe:	e9ca 0100 	strd	r0, r1, [sl]
 800a902:	e039      	b.n	800a978 <__ieee754_rem_pio2+0x248>
 800a904:	a34e      	add	r3, pc, #312	; (adr r3, 800aa40 <__ieee754_rem_pio2+0x310>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	ec51 0b18 	vmov	r0, r1, d8
 800a90e:	f7f5 fe17 	bl	8000540 <__aeabi_dmul>
 800a912:	4604      	mov	r4, r0
 800a914:	460d      	mov	r5, r1
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	f7f5 fc57 	bl	80001d0 <__aeabi_dsub>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4680      	mov	r8, r0
 800a928:	4689      	mov	r9, r1
 800a92a:	4630      	mov	r0, r6
 800a92c:	4639      	mov	r1, r7
 800a92e:	f7f5 fc4f 	bl	80001d0 <__aeabi_dsub>
 800a932:	4622      	mov	r2, r4
 800a934:	462b      	mov	r3, r5
 800a936:	f7f5 fc4b 	bl	80001d0 <__aeabi_dsub>
 800a93a:	a343      	add	r3, pc, #268	; (adr r3, 800aa48 <__ieee754_rem_pio2+0x318>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	4604      	mov	r4, r0
 800a942:	460d      	mov	r5, r1
 800a944:	ec51 0b18 	vmov	r0, r1, d8
 800a948:	f7f5 fdfa 	bl	8000540 <__aeabi_dmul>
 800a94c:	4622      	mov	r2, r4
 800a94e:	462b      	mov	r3, r5
 800a950:	f7f5 fc3e 	bl	80001d0 <__aeabi_dsub>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4604      	mov	r4, r0
 800a95a:	460d      	mov	r5, r1
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f5 fc36 	bl	80001d0 <__aeabi_dsub>
 800a964:	9a03      	ldr	r2, [sp, #12]
 800a966:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	2b31      	cmp	r3, #49	; 0x31
 800a96e:	dc24      	bgt.n	800a9ba <__ieee754_rem_pio2+0x28a>
 800a970:	e9ca 0100 	strd	r0, r1, [sl]
 800a974:	4646      	mov	r6, r8
 800a976:	464f      	mov	r7, r9
 800a978:	e9da 8900 	ldrd	r8, r9, [sl]
 800a97c:	4630      	mov	r0, r6
 800a97e:	4642      	mov	r2, r8
 800a980:	464b      	mov	r3, r9
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fc24 	bl	80001d0 <__aeabi_dsub>
 800a988:	462b      	mov	r3, r5
 800a98a:	4622      	mov	r2, r4
 800a98c:	f7f5 fc20 	bl	80001d0 <__aeabi_dsub>
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a998:	f6bf af0a 	bge.w	800a7b0 <__ieee754_rem_pio2+0x80>
 800a99c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a9a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9a8:	f8ca 8000 	str.w	r8, [sl]
 800a9ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800a9b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a9b4:	f1cb 0b00 	rsb	fp, fp, #0
 800a9b8:	e6fa      	b.n	800a7b0 <__ieee754_rem_pio2+0x80>
 800a9ba:	a327      	add	r3, pc, #156	; (adr r3, 800aa58 <__ieee754_rem_pio2+0x328>)
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	ec51 0b18 	vmov	r0, r1, d8
 800a9c4:	f7f5 fdbc 	bl	8000540 <__aeabi_dmul>
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	f7f5 fbfc 	bl	80001d0 <__aeabi_dsub>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f5 fbf4 	bl	80001d0 <__aeabi_dsub>
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	f7f5 fbf0 	bl	80001d0 <__aeabi_dsub>
 800a9f0:	a31b      	add	r3, pc, #108	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x330>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	ec51 0b18 	vmov	r0, r1, d8
 800a9fe:	f7f5 fd9f 	bl	8000540 <__aeabi_dmul>
 800aa02:	4622      	mov	r2, r4
 800aa04:	462b      	mov	r3, r5
 800aa06:	f7f5 fbe3 	bl	80001d0 <__aeabi_dsub>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	e75f      	b.n	800a8d0 <__ieee754_rem_pio2+0x1a0>
 800aa10:	4b1b      	ldr	r3, [pc, #108]	; (800aa80 <__ieee754_rem_pio2+0x350>)
 800aa12:	4598      	cmp	r8, r3
 800aa14:	dd36      	ble.n	800aa84 <__ieee754_rem_pio2+0x354>
 800aa16:	ee10 2a10 	vmov	r2, s0
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fbd6 	bl	80001d0 <__aeabi_dsub>
 800aa24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa28:	e9ca 0100 	strd	r0, r1, [sl]
 800aa2c:	e694      	b.n	800a758 <__ieee754_rem_pio2+0x28>
 800aa2e:	bf00      	nop
 800aa30:	54400000 	.word	0x54400000
 800aa34:	3ff921fb 	.word	0x3ff921fb
 800aa38:	1a626331 	.word	0x1a626331
 800aa3c:	3dd0b461 	.word	0x3dd0b461
 800aa40:	1a600000 	.word	0x1a600000
 800aa44:	3dd0b461 	.word	0x3dd0b461
 800aa48:	2e037073 	.word	0x2e037073
 800aa4c:	3ba3198a 	.word	0x3ba3198a
 800aa50:	6dc9c883 	.word	0x6dc9c883
 800aa54:	3fe45f30 	.word	0x3fe45f30
 800aa58:	2e000000 	.word	0x2e000000
 800aa5c:	3ba3198a 	.word	0x3ba3198a
 800aa60:	252049c1 	.word	0x252049c1
 800aa64:	397b839a 	.word	0x397b839a
 800aa68:	3fe921fb 	.word	0x3fe921fb
 800aa6c:	4002d97b 	.word	0x4002d97b
 800aa70:	3ff921fb 	.word	0x3ff921fb
 800aa74:	413921fb 	.word	0x413921fb
 800aa78:	3fe00000 	.word	0x3fe00000
 800aa7c:	0800b7d8 	.word	0x0800b7d8
 800aa80:	7fefffff 	.word	0x7fefffff
 800aa84:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aa88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aa8c:	ee10 0a10 	vmov	r0, s0
 800aa90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aa94:	ee10 6a10 	vmov	r6, s0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	f7f5 ffeb 	bl	8000a74 <__aeabi_d2iz>
 800aa9e:	f7f5 fce5 	bl	800046c <__aeabi_i2d>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aaae:	f7f5 fb8f 	bl	80001d0 <__aeabi_dsub>
 800aab2:	4b23      	ldr	r3, [pc, #140]	; (800ab40 <__ieee754_rem_pio2+0x410>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	f7f5 fd43 	bl	8000540 <__aeabi_dmul>
 800aaba:	460f      	mov	r7, r1
 800aabc:	4606      	mov	r6, r0
 800aabe:	f7f5 ffd9 	bl	8000a74 <__aeabi_d2iz>
 800aac2:	f7f5 fcd3 	bl	800046c <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aad2:	f7f5 fb7d 	bl	80001d0 <__aeabi_dsub>
 800aad6:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <__ieee754_rem_pio2+0x410>)
 800aad8:	2200      	movs	r2, #0
 800aada:	f7f5 fd31 	bl	8000540 <__aeabi_dmul>
 800aade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aae2:	ad04      	add	r5, sp, #16
 800aae4:	f04f 0803 	mov.w	r8, #3
 800aae8:	46a9      	mov	r9, r5
 800aaea:	2600      	movs	r6, #0
 800aaec:	2700      	movs	r7, #0
 800aaee:	4632      	mov	r2, r6
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aaf6:	46c3      	mov	fp, r8
 800aaf8:	3d08      	subs	r5, #8
 800aafa:	f108 38ff 	add.w	r8, r8, #4294967295
 800aafe:	f7f5 ff87 	bl	8000a10 <__aeabi_dcmpeq>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1f3      	bne.n	800aaee <__ieee754_rem_pio2+0x3be>
 800ab06:	4b0f      	ldr	r3, [pc, #60]	; (800ab44 <__ieee754_rem_pio2+0x414>)
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	4622      	mov	r2, r4
 800ab10:	465b      	mov	r3, fp
 800ab12:	4651      	mov	r1, sl
 800ab14:	4648      	mov	r0, r9
 800ab16:	f000 f8df 	bl	800acd8 <__kernel_rem_pio2>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	4683      	mov	fp, r0
 800ab20:	f6bf ae46 	bge.w	800a7b0 <__ieee754_rem_pio2+0x80>
 800ab24:	e9da 2100 	ldrd	r2, r1, [sl]
 800ab28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab2c:	e9ca 2300 	strd	r2, r3, [sl]
 800ab30:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ab34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab38:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ab3c:	e73a      	b.n	800a9b4 <__ieee754_rem_pio2+0x284>
 800ab3e:	bf00      	nop
 800ab40:	41700000 	.word	0x41700000
 800ab44:	0800b858 	.word	0x0800b858

0800ab48 <__kernel_cos>:
 800ab48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	ec57 6b10 	vmov	r6, r7, d0
 800ab50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ab58:	ed8d 1b00 	vstr	d1, [sp]
 800ab5c:	da07      	bge.n	800ab6e <__kernel_cos+0x26>
 800ab5e:	ee10 0a10 	vmov	r0, s0
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 ff86 	bl	8000a74 <__aeabi_d2iz>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f000 8088 	beq.w	800ac7e <__kernel_cos+0x136>
 800ab6e:	4632      	mov	r2, r6
 800ab70:	463b      	mov	r3, r7
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fce3 	bl	8000540 <__aeabi_dmul>
 800ab7a:	4b51      	ldr	r3, [pc, #324]	; (800acc0 <__kernel_cos+0x178>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	f7f5 fcdd 	bl	8000540 <__aeabi_dmul>
 800ab86:	a340      	add	r3, pc, #256	; (adr r3, 800ac88 <__kernel_cos+0x140>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	468b      	mov	fp, r1
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 fcd4 	bl	8000540 <__aeabi_dmul>
 800ab98:	a33d      	add	r3, pc, #244	; (adr r3, 800ac90 <__kernel_cos+0x148>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fb19 	bl	80001d4 <__adddf3>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fccb 	bl	8000540 <__aeabi_dmul>
 800abaa:	a33b      	add	r3, pc, #236	; (adr r3, 800ac98 <__kernel_cos+0x150>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f7f5 fb0e 	bl	80001d0 <__aeabi_dsub>
 800abb4:	4622      	mov	r2, r4
 800abb6:	462b      	mov	r3, r5
 800abb8:	f7f5 fcc2 	bl	8000540 <__aeabi_dmul>
 800abbc:	a338      	add	r3, pc, #224	; (adr r3, 800aca0 <__kernel_cos+0x158>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	f7f5 fb07 	bl	80001d4 <__adddf3>
 800abc6:	4622      	mov	r2, r4
 800abc8:	462b      	mov	r3, r5
 800abca:	f7f5 fcb9 	bl	8000540 <__aeabi_dmul>
 800abce:	a336      	add	r3, pc, #216	; (adr r3, 800aca8 <__kernel_cos+0x160>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	f7f5 fafc 	bl	80001d0 <__aeabi_dsub>
 800abd8:	4622      	mov	r2, r4
 800abda:	462b      	mov	r3, r5
 800abdc:	f7f5 fcb0 	bl	8000540 <__aeabi_dmul>
 800abe0:	a333      	add	r3, pc, #204	; (adr r3, 800acb0 <__kernel_cos+0x168>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 faf5 	bl	80001d4 <__adddf3>
 800abea:	4622      	mov	r2, r4
 800abec:	462b      	mov	r3, r5
 800abee:	f7f5 fca7 	bl	8000540 <__aeabi_dmul>
 800abf2:	4622      	mov	r2, r4
 800abf4:	462b      	mov	r3, r5
 800abf6:	f7f5 fca3 	bl	8000540 <__aeabi_dmul>
 800abfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	f7f5 fc9b 	bl	8000540 <__aeabi_dmul>
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7f5 fadd 	bl	80001d0 <__aeabi_dsub>
 800ac16:	4b2b      	ldr	r3, [pc, #172]	; (800acc4 <__kernel_cos+0x17c>)
 800ac18:	4598      	cmp	r8, r3
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	dc10      	bgt.n	800ac42 <__kernel_cos+0xfa>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4650      	mov	r0, sl
 800ac26:	4659      	mov	r1, fp
 800ac28:	f7f5 fad2 	bl	80001d0 <__aeabi_dsub>
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4926      	ldr	r1, [pc, #152]	; (800acc8 <__kernel_cos+0x180>)
 800ac30:	4602      	mov	r2, r0
 800ac32:	2000      	movs	r0, #0
 800ac34:	f7f5 facc 	bl	80001d0 <__aeabi_dsub>
 800ac38:	ec41 0b10 	vmov	d0, r0, r1
 800ac3c:	b003      	add	sp, #12
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	4b22      	ldr	r3, [pc, #136]	; (800accc <__kernel_cos+0x184>)
 800ac44:	4920      	ldr	r1, [pc, #128]	; (800acc8 <__kernel_cos+0x180>)
 800ac46:	4598      	cmp	r8, r3
 800ac48:	bfcc      	ite	gt
 800ac4a:	4d21      	ldrgt	r5, [pc, #132]	; (800acd0 <__kernel_cos+0x188>)
 800ac4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ac50:	2400      	movs	r4, #0
 800ac52:	4622      	mov	r2, r4
 800ac54:	462b      	mov	r3, r5
 800ac56:	2000      	movs	r0, #0
 800ac58:	f7f5 faba 	bl	80001d0 <__aeabi_dsub>
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	4680      	mov	r8, r0
 800ac60:	4689      	mov	r9, r1
 800ac62:	462b      	mov	r3, r5
 800ac64:	4650      	mov	r0, sl
 800ac66:	4659      	mov	r1, fp
 800ac68:	f7f5 fab2 	bl	80001d0 <__aeabi_dsub>
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	f7f5 faae 	bl	80001d0 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	e7da      	b.n	800ac34 <__kernel_cos+0xec>
 800ac7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800acb8 <__kernel_cos+0x170>
 800ac82:	e7db      	b.n	800ac3c <__kernel_cos+0xf4>
 800ac84:	f3af 8000 	nop.w
 800ac88:	be8838d4 	.word	0xbe8838d4
 800ac8c:	bda8fae9 	.word	0xbda8fae9
 800ac90:	bdb4b1c4 	.word	0xbdb4b1c4
 800ac94:	3e21ee9e 	.word	0x3e21ee9e
 800ac98:	809c52ad 	.word	0x809c52ad
 800ac9c:	3e927e4f 	.word	0x3e927e4f
 800aca0:	19cb1590 	.word	0x19cb1590
 800aca4:	3efa01a0 	.word	0x3efa01a0
 800aca8:	16c15177 	.word	0x16c15177
 800acac:	3f56c16c 	.word	0x3f56c16c
 800acb0:	5555554c 	.word	0x5555554c
 800acb4:	3fa55555 	.word	0x3fa55555
 800acb8:	00000000 	.word	0x00000000
 800acbc:	3ff00000 	.word	0x3ff00000
 800acc0:	3fe00000 	.word	0x3fe00000
 800acc4:	3fd33332 	.word	0x3fd33332
 800acc8:	3ff00000 	.word	0x3ff00000
 800accc:	3fe90000 	.word	0x3fe90000
 800acd0:	3fd20000 	.word	0x3fd20000
 800acd4:	00000000 	.word	0x00000000

0800acd8 <__kernel_rem_pio2>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	ed2d 8b02 	vpush	{d8}
 800ace0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ace4:	f112 0f14 	cmn.w	r2, #20
 800ace8:	9308      	str	r3, [sp, #32]
 800acea:	9101      	str	r1, [sp, #4]
 800acec:	4bc4      	ldr	r3, [pc, #784]	; (800b000 <__kernel_rem_pio2+0x328>)
 800acee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800acf0:	900b      	str	r0, [sp, #44]	; 0x2c
 800acf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800acfe:	bfa8      	it	ge
 800ad00:	1ed4      	subge	r4, r2, #3
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	bfb2      	itee	lt
 800ad06:	2400      	movlt	r4, #0
 800ad08:	2318      	movge	r3, #24
 800ad0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad0e:	f06f 0317 	mvn.w	r3, #23
 800ad12:	fb04 3303 	mla	r3, r4, r3, r3
 800ad16:	eb03 0a02 	add.w	sl, r3, r2
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	9a06      	ldr	r2, [sp, #24]
 800ad1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800aff0 <__kernel_rem_pio2+0x318>
 800ad22:	eb03 0802 	add.w	r8, r3, r2
 800ad26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ad28:	1aa7      	subs	r7, r4, r2
 800ad2a:	ae22      	add	r6, sp, #136	; 0x88
 800ad2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad30:	2500      	movs	r5, #0
 800ad32:	4545      	cmp	r5, r8
 800ad34:	dd13      	ble.n	800ad5e <__kernel_rem_pio2+0x86>
 800ad36:	9b08      	ldr	r3, [sp, #32]
 800ad38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800aff0 <__kernel_rem_pio2+0x318>
 800ad3c:	aa22      	add	r2, sp, #136	; 0x88
 800ad3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ad42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ad46:	f04f 0800 	mov.w	r8, #0
 800ad4a:	9b02      	ldr	r3, [sp, #8]
 800ad4c:	4598      	cmp	r8, r3
 800ad4e:	dc2f      	bgt.n	800adb0 <__kernel_rem_pio2+0xd8>
 800ad50:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ad58:	462f      	mov	r7, r5
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	e01b      	b.n	800ad96 <__kernel_rem_pio2+0xbe>
 800ad5e:	42ef      	cmn	r7, r5
 800ad60:	d407      	bmi.n	800ad72 <__kernel_rem_pio2+0x9a>
 800ad62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad66:	f7f5 fb81 	bl	800046c <__aeabi_i2d>
 800ad6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad6e:	3501      	adds	r5, #1
 800ad70:	e7df      	b.n	800ad32 <__kernel_rem_pio2+0x5a>
 800ad72:	ec51 0b18 	vmov	r0, r1, d8
 800ad76:	e7f8      	b.n	800ad6a <__kernel_rem_pio2+0x92>
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad80:	f7f5 fbde 	bl	8000540 <__aeabi_dmul>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad8c:	f7f5 fa22 	bl	80001d4 <__adddf3>
 800ad90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad94:	3601      	adds	r6, #1
 800ad96:	9b06      	ldr	r3, [sp, #24]
 800ad98:	429e      	cmp	r6, r3
 800ad9a:	f1a7 0708 	sub.w	r7, r7, #8
 800ad9e:	ddeb      	ble.n	800ad78 <__kernel_rem_pio2+0xa0>
 800ada0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ada4:	f108 0801 	add.w	r8, r8, #1
 800ada8:	ecab 7b02 	vstmia	fp!, {d7}
 800adac:	3508      	adds	r5, #8
 800adae:	e7cc      	b.n	800ad4a <__kernel_rem_pio2+0x72>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	aa0e      	add	r2, sp, #56	; 0x38
 800adb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adb8:	930d      	str	r3, [sp, #52]	; 0x34
 800adba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800adbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adc0:	9c02      	ldr	r4, [sp, #8]
 800adc2:	930c      	str	r3, [sp, #48]	; 0x30
 800adc4:	00e3      	lsls	r3, r4, #3
 800adc6:	930a      	str	r3, [sp, #40]	; 0x28
 800adc8:	ab9a      	add	r3, sp, #616	; 0x268
 800adca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800add2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800add6:	ab72      	add	r3, sp, #456	; 0x1c8
 800add8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800addc:	46c3      	mov	fp, r8
 800adde:	46a1      	mov	r9, r4
 800ade0:	f1b9 0f00 	cmp.w	r9, #0
 800ade4:	f1a5 0508 	sub.w	r5, r5, #8
 800ade8:	dc77      	bgt.n	800aeda <__kernel_rem_pio2+0x202>
 800adea:	ec47 6b10 	vmov	d0, r6, r7
 800adee:	4650      	mov	r0, sl
 800adf0:	f000 fc0a 	bl	800b608 <scalbn>
 800adf4:	ec57 6b10 	vmov	r6, r7, d0
 800adf8:	2200      	movs	r2, #0
 800adfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800adfe:	ee10 0a10 	vmov	r0, s0
 800ae02:	4639      	mov	r1, r7
 800ae04:	f7f5 fb9c 	bl	8000540 <__aeabi_dmul>
 800ae08:	ec41 0b10 	vmov	d0, r0, r1
 800ae0c:	f000 fb7c 	bl	800b508 <floor>
 800ae10:	4b7c      	ldr	r3, [pc, #496]	; (800b004 <__kernel_rem_pio2+0x32c>)
 800ae12:	ec51 0b10 	vmov	r0, r1, d0
 800ae16:	2200      	movs	r2, #0
 800ae18:	f7f5 fb92 	bl	8000540 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4630      	mov	r0, r6
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 f9d4 	bl	80001d0 <__aeabi_dsub>
 800ae28:	460f      	mov	r7, r1
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	f7f5 fe22 	bl	8000a74 <__aeabi_d2iz>
 800ae30:	9004      	str	r0, [sp, #16]
 800ae32:	f7f5 fb1b 	bl	800046c <__aeabi_i2d>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	f7f5 f9c7 	bl	80001d0 <__aeabi_dsub>
 800ae42:	f1ba 0f00 	cmp.w	sl, #0
 800ae46:	4606      	mov	r6, r0
 800ae48:	460f      	mov	r7, r1
 800ae4a:	dd6d      	ble.n	800af28 <__kernel_rem_pio2+0x250>
 800ae4c:	1e62      	subs	r2, r4, #1
 800ae4e:	ab0e      	add	r3, sp, #56	; 0x38
 800ae50:	9d04      	ldr	r5, [sp, #16]
 800ae52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ae56:	f1ca 0118 	rsb	r1, sl, #24
 800ae5a:	fa40 f301 	asr.w	r3, r0, r1
 800ae5e:	441d      	add	r5, r3
 800ae60:	408b      	lsls	r3, r1
 800ae62:	1ac0      	subs	r0, r0, r3
 800ae64:	ab0e      	add	r3, sp, #56	; 0x38
 800ae66:	9504      	str	r5, [sp, #16]
 800ae68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae6c:	f1ca 0317 	rsb	r3, sl, #23
 800ae70:	fa40 fb03 	asr.w	fp, r0, r3
 800ae74:	f1bb 0f00 	cmp.w	fp, #0
 800ae78:	dd65      	ble.n	800af46 <__kernel_rem_pio2+0x26e>
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	3301      	adds	r3, #1
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	4615      	mov	r5, r2
 800ae84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae88:	4294      	cmp	r4, r2
 800ae8a:	f300 809c 	bgt.w	800afc6 <__kernel_rem_pio2+0x2ee>
 800ae8e:	f1ba 0f00 	cmp.w	sl, #0
 800ae92:	dd07      	ble.n	800aea4 <__kernel_rem_pio2+0x1cc>
 800ae94:	f1ba 0f01 	cmp.w	sl, #1
 800ae98:	f000 80c0 	beq.w	800b01c <__kernel_rem_pio2+0x344>
 800ae9c:	f1ba 0f02 	cmp.w	sl, #2
 800aea0:	f000 80c6 	beq.w	800b030 <__kernel_rem_pio2+0x358>
 800aea4:	f1bb 0f02 	cmp.w	fp, #2
 800aea8:	d14d      	bne.n	800af46 <__kernel_rem_pio2+0x26e>
 800aeaa:	4632      	mov	r2, r6
 800aeac:	463b      	mov	r3, r7
 800aeae:	4956      	ldr	r1, [pc, #344]	; (800b008 <__kernel_rem_pio2+0x330>)
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f7f5 f98d 	bl	80001d0 <__aeabi_dsub>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	460f      	mov	r7, r1
 800aeba:	2d00      	cmp	r5, #0
 800aebc:	d043      	beq.n	800af46 <__kernel_rem_pio2+0x26e>
 800aebe:	4650      	mov	r0, sl
 800aec0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800aff8 <__kernel_rem_pio2+0x320>
 800aec4:	f000 fba0 	bl	800b608 <scalbn>
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	ec53 2b10 	vmov	r2, r3, d0
 800aed0:	f7f5 f97e 	bl	80001d0 <__aeabi_dsub>
 800aed4:	4606      	mov	r6, r0
 800aed6:	460f      	mov	r7, r1
 800aed8:	e035      	b.n	800af46 <__kernel_rem_pio2+0x26e>
 800aeda:	4b4c      	ldr	r3, [pc, #304]	; (800b00c <__kernel_rem_pio2+0x334>)
 800aedc:	2200      	movs	r2, #0
 800aede:	4630      	mov	r0, r6
 800aee0:	4639      	mov	r1, r7
 800aee2:	f7f5 fb2d 	bl	8000540 <__aeabi_dmul>
 800aee6:	f7f5 fdc5 	bl	8000a74 <__aeabi_d2iz>
 800aeea:	f7f5 fabf 	bl	800046c <__aeabi_i2d>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	ec43 2b18 	vmov	d8, r2, r3
 800aef6:	4b46      	ldr	r3, [pc, #280]	; (800b010 <__kernel_rem_pio2+0x338>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	f7f5 fb21 	bl	8000540 <__aeabi_dmul>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 f963 	bl	80001d0 <__aeabi_dsub>
 800af0a:	f7f5 fdb3 	bl	8000a74 <__aeabi_d2iz>
 800af0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af12:	f84b 0b04 	str.w	r0, [fp], #4
 800af16:	ec51 0b18 	vmov	r0, r1, d8
 800af1a:	f7f5 f95b 	bl	80001d4 <__adddf3>
 800af1e:	f109 39ff 	add.w	r9, r9, #4294967295
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	e75b      	b.n	800ade0 <__kernel_rem_pio2+0x108>
 800af28:	d106      	bne.n	800af38 <__kernel_rem_pio2+0x260>
 800af2a:	1e63      	subs	r3, r4, #1
 800af2c:	aa0e      	add	r2, sp, #56	; 0x38
 800af2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800af32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800af36:	e79d      	b.n	800ae74 <__kernel_rem_pio2+0x19c>
 800af38:	4b36      	ldr	r3, [pc, #216]	; (800b014 <__kernel_rem_pio2+0x33c>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	f7f5 fd86 	bl	8000a4c <__aeabi_dcmpge>
 800af40:	2800      	cmp	r0, #0
 800af42:	d13d      	bne.n	800afc0 <__kernel_rem_pio2+0x2e8>
 800af44:	4683      	mov	fp, r0
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 fd5f 	bl	8000a10 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	f000 80c0 	beq.w	800b0d8 <__kernel_rem_pio2+0x400>
 800af58:	1e65      	subs	r5, r4, #1
 800af5a:	462b      	mov	r3, r5
 800af5c:	2200      	movs	r2, #0
 800af5e:	9902      	ldr	r1, [sp, #8]
 800af60:	428b      	cmp	r3, r1
 800af62:	da6c      	bge.n	800b03e <__kernel_rem_pio2+0x366>
 800af64:	2a00      	cmp	r2, #0
 800af66:	f000 8089 	beq.w	800b07c <__kernel_rem_pio2+0x3a4>
 800af6a:	ab0e      	add	r3, sp, #56	; 0x38
 800af6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800af70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 80ad 	beq.w	800b0d4 <__kernel_rem_pio2+0x3fc>
 800af7a:	4650      	mov	r0, sl
 800af7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800aff8 <__kernel_rem_pio2+0x320>
 800af80:	f000 fb42 	bl	800b608 <scalbn>
 800af84:	ab9a      	add	r3, sp, #616	; 0x268
 800af86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af8a:	ec57 6b10 	vmov	r6, r7, d0
 800af8e:	00ec      	lsls	r4, r5, #3
 800af90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800af94:	46aa      	mov	sl, r5
 800af96:	f1ba 0f00 	cmp.w	sl, #0
 800af9a:	f280 80d6 	bge.w	800b14a <__kernel_rem_pio2+0x472>
 800af9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800aff0 <__kernel_rem_pio2+0x318>
 800afa2:	462e      	mov	r6, r5
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	f2c0 8104 	blt.w	800b1b2 <__kernel_rem_pio2+0x4da>
 800afaa:	ab72      	add	r3, sp, #456	; 0x1c8
 800afac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800afb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b018 <__kernel_rem_pio2+0x340>
 800afb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800afb8:	f04f 0800 	mov.w	r8, #0
 800afbc:	1baf      	subs	r7, r5, r6
 800afbe:	e0ea      	b.n	800b196 <__kernel_rem_pio2+0x4be>
 800afc0:	f04f 0b02 	mov.w	fp, #2
 800afc4:	e759      	b.n	800ae7a <__kernel_rem_pio2+0x1a2>
 800afc6:	f8d8 3000 	ldr.w	r3, [r8]
 800afca:	b955      	cbnz	r5, 800afe2 <__kernel_rem_pio2+0x30a>
 800afcc:	b123      	cbz	r3, 800afd8 <__kernel_rem_pio2+0x300>
 800afce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800afd2:	f8c8 3000 	str.w	r3, [r8]
 800afd6:	2301      	movs	r3, #1
 800afd8:	3201      	adds	r2, #1
 800afda:	f108 0804 	add.w	r8, r8, #4
 800afde:	461d      	mov	r5, r3
 800afe0:	e752      	b.n	800ae88 <__kernel_rem_pio2+0x1b0>
 800afe2:	1acb      	subs	r3, r1, r3
 800afe4:	f8c8 3000 	str.w	r3, [r8]
 800afe8:	462b      	mov	r3, r5
 800afea:	e7f5      	b.n	800afd8 <__kernel_rem_pio2+0x300>
 800afec:	f3af 8000 	nop.w
	...
 800affc:	3ff00000 	.word	0x3ff00000
 800b000:	0800b9a0 	.word	0x0800b9a0
 800b004:	40200000 	.word	0x40200000
 800b008:	3ff00000 	.word	0x3ff00000
 800b00c:	3e700000 	.word	0x3e700000
 800b010:	41700000 	.word	0x41700000
 800b014:	3fe00000 	.word	0x3fe00000
 800b018:	0800b960 	.word	0x0800b960
 800b01c:	1e62      	subs	r2, r4, #1
 800b01e:	ab0e      	add	r3, sp, #56	; 0x38
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b028:	a90e      	add	r1, sp, #56	; 0x38
 800b02a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b02e:	e739      	b.n	800aea4 <__kernel_rem_pio2+0x1cc>
 800b030:	1e62      	subs	r2, r4, #1
 800b032:	ab0e      	add	r3, sp, #56	; 0x38
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b03c:	e7f4      	b.n	800b028 <__kernel_rem_pio2+0x350>
 800b03e:	a90e      	add	r1, sp, #56	; 0x38
 800b040:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b044:	3b01      	subs	r3, #1
 800b046:	430a      	orrs	r2, r1
 800b048:	e789      	b.n	800af5e <__kernel_rem_pio2+0x286>
 800b04a:	3301      	adds	r3, #1
 800b04c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b050:	2900      	cmp	r1, #0
 800b052:	d0fa      	beq.n	800b04a <__kernel_rem_pio2+0x372>
 800b054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b056:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b05a:	446a      	add	r2, sp
 800b05c:	3a98      	subs	r2, #152	; 0x98
 800b05e:	920a      	str	r2, [sp, #40]	; 0x28
 800b060:	9a08      	ldr	r2, [sp, #32]
 800b062:	18e3      	adds	r3, r4, r3
 800b064:	18a5      	adds	r5, r4, r2
 800b066:	aa22      	add	r2, sp, #136	; 0x88
 800b068:	f104 0801 	add.w	r8, r4, #1
 800b06c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	4543      	cmp	r3, r8
 800b076:	da04      	bge.n	800b082 <__kernel_rem_pio2+0x3aa>
 800b078:	461c      	mov	r4, r3
 800b07a:	e6a3      	b.n	800adc4 <__kernel_rem_pio2+0xec>
 800b07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b07e:	2301      	movs	r3, #1
 800b080:	e7e4      	b.n	800b04c <__kernel_rem_pio2+0x374>
 800b082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b084:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b088:	f7f5 f9f0 	bl	800046c <__aeabi_i2d>
 800b08c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b092:	46ab      	mov	fp, r5
 800b094:	461c      	mov	r4, r3
 800b096:	f04f 0900 	mov.w	r9, #0
 800b09a:	2600      	movs	r6, #0
 800b09c:	2700      	movs	r7, #0
 800b09e:	9b06      	ldr	r3, [sp, #24]
 800b0a0:	4599      	cmp	r9, r3
 800b0a2:	dd06      	ble.n	800b0b2 <__kernel_rem_pio2+0x3da>
 800b0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b0aa:	f108 0801 	add.w	r8, r8, #1
 800b0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b0:	e7df      	b.n	800b072 <__kernel_rem_pio2+0x39a>
 800b0b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b0b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b0ba:	f7f5 fa41 	bl	8000540 <__aeabi_dmul>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	f7f5 f885 	bl	80001d4 <__adddf3>
 800b0ca:	f109 0901 	add.w	r9, r9, #1
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	e7e4      	b.n	800b09e <__kernel_rem_pio2+0x3c6>
 800b0d4:	3d01      	subs	r5, #1
 800b0d6:	e748      	b.n	800af6a <__kernel_rem_pio2+0x292>
 800b0d8:	ec47 6b10 	vmov	d0, r6, r7
 800b0dc:	f1ca 0000 	rsb	r0, sl, #0
 800b0e0:	f000 fa92 	bl	800b608 <scalbn>
 800b0e4:	ec57 6b10 	vmov	r6, r7, d0
 800b0e8:	4ba0      	ldr	r3, [pc, #640]	; (800b36c <__kernel_rem_pio2+0x694>)
 800b0ea:	ee10 0a10 	vmov	r0, s0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 fcab 	bl	8000a4c <__aeabi_dcmpge>
 800b0f6:	b1f8      	cbz	r0, 800b138 <__kernel_rem_pio2+0x460>
 800b0f8:	4b9d      	ldr	r3, [pc, #628]	; (800b370 <__kernel_rem_pio2+0x698>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	4639      	mov	r1, r7
 800b100:	f7f5 fa1e 	bl	8000540 <__aeabi_dmul>
 800b104:	f7f5 fcb6 	bl	8000a74 <__aeabi_d2iz>
 800b108:	4680      	mov	r8, r0
 800b10a:	f7f5 f9af 	bl	800046c <__aeabi_i2d>
 800b10e:	4b97      	ldr	r3, [pc, #604]	; (800b36c <__kernel_rem_pio2+0x694>)
 800b110:	2200      	movs	r2, #0
 800b112:	f7f5 fa15 	bl	8000540 <__aeabi_dmul>
 800b116:	460b      	mov	r3, r1
 800b118:	4602      	mov	r2, r0
 800b11a:	4639      	mov	r1, r7
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7f5 f857 	bl	80001d0 <__aeabi_dsub>
 800b122:	f7f5 fca7 	bl	8000a74 <__aeabi_d2iz>
 800b126:	1c65      	adds	r5, r4, #1
 800b128:	ab0e      	add	r3, sp, #56	; 0x38
 800b12a:	f10a 0a18 	add.w	sl, sl, #24
 800b12e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b132:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b136:	e720      	b.n	800af7a <__kernel_rem_pio2+0x2a2>
 800b138:	4630      	mov	r0, r6
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 fc9a 	bl	8000a74 <__aeabi_d2iz>
 800b140:	ab0e      	add	r3, sp, #56	; 0x38
 800b142:	4625      	mov	r5, r4
 800b144:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b148:	e717      	b.n	800af7a <__kernel_rem_pio2+0x2a2>
 800b14a:	ab0e      	add	r3, sp, #56	; 0x38
 800b14c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b150:	f7f5 f98c 	bl	800046c <__aeabi_i2d>
 800b154:	4632      	mov	r2, r6
 800b156:	463b      	mov	r3, r7
 800b158:	f7f5 f9f2 	bl	8000540 <__aeabi_dmul>
 800b15c:	4b84      	ldr	r3, [pc, #528]	; (800b370 <__kernel_rem_pio2+0x698>)
 800b15e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b162:	2200      	movs	r2, #0
 800b164:	4630      	mov	r0, r6
 800b166:	4639      	mov	r1, r7
 800b168:	f7f5 f9ea 	bl	8000540 <__aeabi_dmul>
 800b16c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b170:	4606      	mov	r6, r0
 800b172:	460f      	mov	r7, r1
 800b174:	e70f      	b.n	800af96 <__kernel_rem_pio2+0x2be>
 800b176:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b17a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b17e:	f7f5 f9df 	bl	8000540 <__aeabi_dmul>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18a:	f7f5 f823 	bl	80001d4 <__adddf3>
 800b18e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b192:	f108 0801 	add.w	r8, r8, #1
 800b196:	9b02      	ldr	r3, [sp, #8]
 800b198:	4598      	cmp	r8, r3
 800b19a:	dc01      	bgt.n	800b1a0 <__kernel_rem_pio2+0x4c8>
 800b19c:	45b8      	cmp	r8, r7
 800b19e:	ddea      	ble.n	800b176 <__kernel_rem_pio2+0x49e>
 800b1a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b1a4:	ab4a      	add	r3, sp, #296	; 0x128
 800b1a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b1aa:	ed87 7b00 	vstr	d7, [r7]
 800b1ae:	3e01      	subs	r6, #1
 800b1b0:	e6f8      	b.n	800afa4 <__kernel_rem_pio2+0x2cc>
 800b1b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	dc0b      	bgt.n	800b1d0 <__kernel_rem_pio2+0x4f8>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dc35      	bgt.n	800b228 <__kernel_rem_pio2+0x550>
 800b1bc:	d059      	beq.n	800b272 <__kernel_rem_pio2+0x59a>
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	f003 0007 	and.w	r0, r3, #7
 800b1c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b1c8:	ecbd 8b02 	vpop	{d8}
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d1f3      	bne.n	800b1be <__kernel_rem_pio2+0x4e6>
 800b1d6:	ab4a      	add	r3, sp, #296	; 0x128
 800b1d8:	4423      	add	r3, r4
 800b1da:	9306      	str	r3, [sp, #24]
 800b1dc:	461c      	mov	r4, r3
 800b1de:	469a      	mov	sl, r3
 800b1e0:	9502      	str	r5, [sp, #8]
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f1aa 0a08 	sub.w	sl, sl, #8
 800b1ea:	dc6b      	bgt.n	800b2c4 <__kernel_rem_pio2+0x5ec>
 800b1ec:	46aa      	mov	sl, r5
 800b1ee:	f1ba 0f01 	cmp.w	sl, #1
 800b1f2:	f1a4 0408 	sub.w	r4, r4, #8
 800b1f6:	f300 8085 	bgt.w	800b304 <__kernel_rem_pio2+0x62c>
 800b1fa:	9c06      	ldr	r4, [sp, #24]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	3408      	adds	r4, #8
 800b200:	2100      	movs	r1, #0
 800b202:	2d01      	cmp	r5, #1
 800b204:	f300 809d 	bgt.w	800b342 <__kernel_rem_pio2+0x66a>
 800b208:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b20c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b210:	f1bb 0f00 	cmp.w	fp, #0
 800b214:	f040 809b 	bne.w	800b34e <__kernel_rem_pio2+0x676>
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	e9c3 5600 	strd	r5, r6, [r3]
 800b21e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b222:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b226:	e7ca      	b.n	800b1be <__kernel_rem_pio2+0x4e6>
 800b228:	3408      	adds	r4, #8
 800b22a:	ab4a      	add	r3, sp, #296	; 0x128
 800b22c:	441c      	add	r4, r3
 800b22e:	462e      	mov	r6, r5
 800b230:	2000      	movs	r0, #0
 800b232:	2100      	movs	r1, #0
 800b234:	2e00      	cmp	r6, #0
 800b236:	da36      	bge.n	800b2a6 <__kernel_rem_pio2+0x5ce>
 800b238:	f1bb 0f00 	cmp.w	fp, #0
 800b23c:	d039      	beq.n	800b2b2 <__kernel_rem_pio2+0x5da>
 800b23e:	4602      	mov	r2, r0
 800b240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b244:	9c01      	ldr	r4, [sp, #4]
 800b246:	e9c4 2300 	strd	r2, r3, [r4]
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b252:	f7f4 ffbd 	bl	80001d0 <__aeabi_dsub>
 800b256:	ae4c      	add	r6, sp, #304	; 0x130
 800b258:	2401      	movs	r4, #1
 800b25a:	42a5      	cmp	r5, r4
 800b25c:	da2c      	bge.n	800b2b8 <__kernel_rem_pio2+0x5e0>
 800b25e:	f1bb 0f00 	cmp.w	fp, #0
 800b262:	d002      	beq.n	800b26a <__kernel_rem_pio2+0x592>
 800b264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b268:	4619      	mov	r1, r3
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b270:	e7a5      	b.n	800b1be <__kernel_rem_pio2+0x4e6>
 800b272:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b276:	eb0d 0403 	add.w	r4, sp, r3
 800b27a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b27e:	2000      	movs	r0, #0
 800b280:	2100      	movs	r1, #0
 800b282:	2d00      	cmp	r5, #0
 800b284:	da09      	bge.n	800b29a <__kernel_rem_pio2+0x5c2>
 800b286:	f1bb 0f00 	cmp.w	fp, #0
 800b28a:	d002      	beq.n	800b292 <__kernel_rem_pio2+0x5ba>
 800b28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b290:	4619      	mov	r1, r3
 800b292:	9b01      	ldr	r3, [sp, #4]
 800b294:	e9c3 0100 	strd	r0, r1, [r3]
 800b298:	e791      	b.n	800b1be <__kernel_rem_pio2+0x4e6>
 800b29a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b29e:	f7f4 ff99 	bl	80001d4 <__adddf3>
 800b2a2:	3d01      	subs	r5, #1
 800b2a4:	e7ed      	b.n	800b282 <__kernel_rem_pio2+0x5aa>
 800b2a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2aa:	f7f4 ff93 	bl	80001d4 <__adddf3>
 800b2ae:	3e01      	subs	r6, #1
 800b2b0:	e7c0      	b.n	800b234 <__kernel_rem_pio2+0x55c>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	e7c5      	b.n	800b244 <__kernel_rem_pio2+0x56c>
 800b2b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b2bc:	f7f4 ff8a 	bl	80001d4 <__adddf3>
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	e7ca      	b.n	800b25a <__kernel_rem_pio2+0x582>
 800b2c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b2cc:	9b02      	ldr	r3, [sp, #8]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	4632      	mov	r2, r6
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f4 ff7b 	bl	80001d4 <__adddf3>
 800b2de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	f7f4 ff71 	bl	80001d0 <__aeabi_dsub>
 800b2ee:	4632      	mov	r2, r6
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	f7f4 ff6f 	bl	80001d4 <__adddf3>
 800b2f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b2fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2fe:	ed8a 7b00 	vstr	d7, [sl]
 800b302:	e76e      	b.n	800b1e2 <__kernel_rem_pio2+0x50a>
 800b304:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b308:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b30c:	4640      	mov	r0, r8
 800b30e:	4632      	mov	r2, r6
 800b310:	463b      	mov	r3, r7
 800b312:	4649      	mov	r1, r9
 800b314:	f7f4 ff5e 	bl	80001d4 <__adddf3>
 800b318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4640      	mov	r0, r8
 800b322:	4649      	mov	r1, r9
 800b324:	f7f4 ff54 	bl	80001d0 <__aeabi_dsub>
 800b328:	4632      	mov	r2, r6
 800b32a:	463b      	mov	r3, r7
 800b32c:	f7f4 ff52 	bl	80001d4 <__adddf3>
 800b330:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b334:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b338:	ed84 7b00 	vstr	d7, [r4]
 800b33c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b340:	e755      	b.n	800b1ee <__kernel_rem_pio2+0x516>
 800b342:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b346:	f7f4 ff45 	bl	80001d4 <__adddf3>
 800b34a:	3d01      	subs	r5, #1
 800b34c:	e759      	b.n	800b202 <__kernel_rem_pio2+0x52a>
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	601d      	str	r5, [r3, #0]
 800b354:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b358:	605c      	str	r4, [r3, #4]
 800b35a:	609f      	str	r7, [r3, #8]
 800b35c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b360:	60d3      	str	r3, [r2, #12]
 800b362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b366:	6110      	str	r0, [r2, #16]
 800b368:	6153      	str	r3, [r2, #20]
 800b36a:	e728      	b.n	800b1be <__kernel_rem_pio2+0x4e6>
 800b36c:	41700000 	.word	0x41700000
 800b370:	3e700000 	.word	0x3e700000
 800b374:	00000000 	.word	0x00000000

0800b378 <__kernel_sin>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	ed2d 8b04 	vpush	{d8-d9}
 800b380:	eeb0 8a41 	vmov.f32	s16, s2
 800b384:	eef0 8a61 	vmov.f32	s17, s3
 800b388:	ec55 4b10 	vmov	r4, r5, d0
 800b38c:	b083      	sub	sp, #12
 800b38e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b392:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b396:	9001      	str	r0, [sp, #4]
 800b398:	da06      	bge.n	800b3a8 <__kernel_sin+0x30>
 800b39a:	ee10 0a10 	vmov	r0, s0
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 fb68 	bl	8000a74 <__aeabi_d2iz>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d051      	beq.n	800b44c <__kernel_sin+0xd4>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f5 f8c6 	bl	8000540 <__aeabi_dmul>
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4620      	mov	r0, r4
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7f5 f8be 	bl	8000540 <__aeabi_dmul>
 800b3c4:	a341      	add	r3, pc, #260	; (adr r3, 800b4cc <__kernel_sin+0x154>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	4689      	mov	r9, r1
 800b3ce:	4650      	mov	r0, sl
 800b3d0:	4659      	mov	r1, fp
 800b3d2:	f7f5 f8b5 	bl	8000540 <__aeabi_dmul>
 800b3d6:	a33f      	add	r3, pc, #252	; (adr r3, 800b4d4 <__kernel_sin+0x15c>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f4 fef8 	bl	80001d0 <__aeabi_dsub>
 800b3e0:	4652      	mov	r2, sl
 800b3e2:	465b      	mov	r3, fp
 800b3e4:	f7f5 f8ac 	bl	8000540 <__aeabi_dmul>
 800b3e8:	a33c      	add	r3, pc, #240	; (adr r3, 800b4dc <__kernel_sin+0x164>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f4 fef1 	bl	80001d4 <__adddf3>
 800b3f2:	4652      	mov	r2, sl
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	f7f5 f8a3 	bl	8000540 <__aeabi_dmul>
 800b3fa:	a33a      	add	r3, pc, #232	; (adr r3, 800b4e4 <__kernel_sin+0x16c>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 fee6 	bl	80001d0 <__aeabi_dsub>
 800b404:	4652      	mov	r2, sl
 800b406:	465b      	mov	r3, fp
 800b408:	f7f5 f89a 	bl	8000540 <__aeabi_dmul>
 800b40c:	a337      	add	r3, pc, #220	; (adr r3, 800b4ec <__kernel_sin+0x174>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 fedf 	bl	80001d4 <__adddf3>
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	4606      	mov	r6, r0
 800b41a:	460f      	mov	r7, r1
 800b41c:	b9eb      	cbnz	r3, 800b45a <__kernel_sin+0xe2>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f5 f88b 	bl	8000540 <__aeabi_dmul>
 800b42a:	a325      	add	r3, pc, #148	; (adr r3, 800b4c0 <__kernel_sin+0x148>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f4 fece 	bl	80001d0 <__aeabi_dsub>
 800b434:	4642      	mov	r2, r8
 800b436:	464b      	mov	r3, r9
 800b438:	f7f5 f882 	bl	8000540 <__aeabi_dmul>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f4 fec6 	bl	80001d4 <__adddf3>
 800b448:	4604      	mov	r4, r0
 800b44a:	460d      	mov	r5, r1
 800b44c:	ec45 4b10 	vmov	d0, r4, r5
 800b450:	b003      	add	sp, #12
 800b452:	ecbd 8b04 	vpop	{d8-d9}
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <__kernel_sin+0x150>)
 800b45c:	ec51 0b18 	vmov	r0, r1, d8
 800b460:	2200      	movs	r2, #0
 800b462:	f7f5 f86d 	bl	8000540 <__aeabi_dmul>
 800b466:	4632      	mov	r2, r6
 800b468:	ec41 0b19 	vmov	d9, r0, r1
 800b46c:	463b      	mov	r3, r7
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f5 f865 	bl	8000540 <__aeabi_dmul>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	ec51 0b19 	vmov	r0, r1, d9
 800b47e:	f7f4 fea7 	bl	80001d0 <__aeabi_dsub>
 800b482:	4652      	mov	r2, sl
 800b484:	465b      	mov	r3, fp
 800b486:	f7f5 f85b 	bl	8000540 <__aeabi_dmul>
 800b48a:	ec53 2b18 	vmov	r2, r3, d8
 800b48e:	f7f4 fe9f 	bl	80001d0 <__aeabi_dsub>
 800b492:	a30b      	add	r3, pc, #44	; (adr r3, 800b4c0 <__kernel_sin+0x148>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	4606      	mov	r6, r0
 800b49a:	460f      	mov	r7, r1
 800b49c:	4640      	mov	r0, r8
 800b49e:	4649      	mov	r1, r9
 800b4a0:	f7f5 f84e 	bl	8000540 <__aeabi_dmul>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f4 fe92 	bl	80001d4 <__adddf3>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f4 fe8a 	bl	80001d0 <__aeabi_dsub>
 800b4bc:	e7c4      	b.n	800b448 <__kernel_sin+0xd0>
 800b4be:	bf00      	nop
 800b4c0:	55555549 	.word	0x55555549
 800b4c4:	3fc55555 	.word	0x3fc55555
 800b4c8:	3fe00000 	.word	0x3fe00000
 800b4cc:	5acfd57c 	.word	0x5acfd57c
 800b4d0:	3de5d93a 	.word	0x3de5d93a
 800b4d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b4d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b4dc:	57b1fe7d 	.word	0x57b1fe7d
 800b4e0:	3ec71de3 	.word	0x3ec71de3
 800b4e4:	19c161d5 	.word	0x19c161d5
 800b4e8:	3f2a01a0 	.word	0x3f2a01a0
 800b4ec:	1110f8a6 	.word	0x1110f8a6
 800b4f0:	3f811111 	.word	0x3f811111

0800b4f4 <fabs>:
 800b4f4:	ec51 0b10 	vmov	r0, r1, d0
 800b4f8:	ee10 2a10 	vmov	r2, s0
 800b4fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b500:	ec43 2b10 	vmov	d0, r2, r3
 800b504:	4770      	bx	lr
	...

0800b508 <floor>:
 800b508:	ec51 0b10 	vmov	r0, r1, d0
 800b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b510:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b514:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b518:	2e13      	cmp	r6, #19
 800b51a:	ee10 5a10 	vmov	r5, s0
 800b51e:	ee10 8a10 	vmov	r8, s0
 800b522:	460c      	mov	r4, r1
 800b524:	dc32      	bgt.n	800b58c <floor+0x84>
 800b526:	2e00      	cmp	r6, #0
 800b528:	da14      	bge.n	800b554 <floor+0x4c>
 800b52a:	a333      	add	r3, pc, #204	; (adr r3, 800b5f8 <floor+0xf0>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f4 fe50 	bl	80001d4 <__adddf3>
 800b534:	2200      	movs	r2, #0
 800b536:	2300      	movs	r3, #0
 800b538:	f7f5 fa92 	bl	8000a60 <__aeabi_dcmpgt>
 800b53c:	b138      	cbz	r0, 800b54e <floor+0x46>
 800b53e:	2c00      	cmp	r4, #0
 800b540:	da57      	bge.n	800b5f2 <floor+0xea>
 800b542:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b546:	431d      	orrs	r5, r3
 800b548:	d001      	beq.n	800b54e <floor+0x46>
 800b54a:	4c2d      	ldr	r4, [pc, #180]	; (800b600 <floor+0xf8>)
 800b54c:	2500      	movs	r5, #0
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	e025      	b.n	800b5a0 <floor+0x98>
 800b554:	4f2b      	ldr	r7, [pc, #172]	; (800b604 <floor+0xfc>)
 800b556:	4137      	asrs	r7, r6
 800b558:	ea01 0307 	and.w	r3, r1, r7
 800b55c:	4303      	orrs	r3, r0
 800b55e:	d01f      	beq.n	800b5a0 <floor+0x98>
 800b560:	a325      	add	r3, pc, #148	; (adr r3, 800b5f8 <floor+0xf0>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7f4 fe35 	bl	80001d4 <__adddf3>
 800b56a:	2200      	movs	r2, #0
 800b56c:	2300      	movs	r3, #0
 800b56e:	f7f5 fa77 	bl	8000a60 <__aeabi_dcmpgt>
 800b572:	2800      	cmp	r0, #0
 800b574:	d0eb      	beq.n	800b54e <floor+0x46>
 800b576:	2c00      	cmp	r4, #0
 800b578:	bfbe      	ittt	lt
 800b57a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b57e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b582:	19a4      	addlt	r4, r4, r6
 800b584:	ea24 0407 	bic.w	r4, r4, r7
 800b588:	2500      	movs	r5, #0
 800b58a:	e7e0      	b.n	800b54e <floor+0x46>
 800b58c:	2e33      	cmp	r6, #51	; 0x33
 800b58e:	dd0b      	ble.n	800b5a8 <floor+0xa0>
 800b590:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b594:	d104      	bne.n	800b5a0 <floor+0x98>
 800b596:	ee10 2a10 	vmov	r2, s0
 800b59a:	460b      	mov	r3, r1
 800b59c:	f7f4 fe1a 	bl	80001d4 <__adddf3>
 800b5a0:	ec41 0b10 	vmov	d0, r0, r1
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b0:	fa23 f707 	lsr.w	r7, r3, r7
 800b5b4:	4207      	tst	r7, r0
 800b5b6:	d0f3      	beq.n	800b5a0 <floor+0x98>
 800b5b8:	a30f      	add	r3, pc, #60	; (adr r3, 800b5f8 <floor+0xf0>)
 800b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5be:	f7f4 fe09 	bl	80001d4 <__adddf3>
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f7f5 fa4b 	bl	8000a60 <__aeabi_dcmpgt>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0bf      	beq.n	800b54e <floor+0x46>
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	da02      	bge.n	800b5d8 <floor+0xd0>
 800b5d2:	2e14      	cmp	r6, #20
 800b5d4:	d103      	bne.n	800b5de <floor+0xd6>
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	ea25 0507 	bic.w	r5, r5, r7
 800b5dc:	e7b7      	b.n	800b54e <floor+0x46>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b5e4:	fa03 f606 	lsl.w	r6, r3, r6
 800b5e8:	4435      	add	r5, r6
 800b5ea:	4545      	cmp	r5, r8
 800b5ec:	bf38      	it	cc
 800b5ee:	18e4      	addcc	r4, r4, r3
 800b5f0:	e7f2      	b.n	800b5d8 <floor+0xd0>
 800b5f2:	2500      	movs	r5, #0
 800b5f4:	462c      	mov	r4, r5
 800b5f6:	e7aa      	b.n	800b54e <floor+0x46>
 800b5f8:	8800759c 	.word	0x8800759c
 800b5fc:	7e37e43c 	.word	0x7e37e43c
 800b600:	bff00000 	.word	0xbff00000
 800b604:	000fffff 	.word	0x000fffff

0800b608 <scalbn>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	ec55 4b10 	vmov	r4, r5, d0
 800b60e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b612:	4606      	mov	r6, r0
 800b614:	462b      	mov	r3, r5
 800b616:	b99a      	cbnz	r2, 800b640 <scalbn+0x38>
 800b618:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b61c:	4323      	orrs	r3, r4
 800b61e:	d036      	beq.n	800b68e <scalbn+0x86>
 800b620:	4b39      	ldr	r3, [pc, #228]	; (800b708 <scalbn+0x100>)
 800b622:	4629      	mov	r1, r5
 800b624:	ee10 0a10 	vmov	r0, s0
 800b628:	2200      	movs	r2, #0
 800b62a:	f7f4 ff89 	bl	8000540 <__aeabi_dmul>
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <scalbn+0x104>)
 800b630:	429e      	cmp	r6, r3
 800b632:	4604      	mov	r4, r0
 800b634:	460d      	mov	r5, r1
 800b636:	da10      	bge.n	800b65a <scalbn+0x52>
 800b638:	a32b      	add	r3, pc, #172	; (adr r3, 800b6e8 <scalbn+0xe0>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	e03a      	b.n	800b6b6 <scalbn+0xae>
 800b640:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b644:	428a      	cmp	r2, r1
 800b646:	d10c      	bne.n	800b662 <scalbn+0x5a>
 800b648:	ee10 2a10 	vmov	r2, s0
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f4 fdc0 	bl	80001d4 <__adddf3>
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	e019      	b.n	800b68e <scalbn+0x86>
 800b65a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b65e:	460b      	mov	r3, r1
 800b660:	3a36      	subs	r2, #54	; 0x36
 800b662:	4432      	add	r2, r6
 800b664:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b668:	428a      	cmp	r2, r1
 800b66a:	dd08      	ble.n	800b67e <scalbn+0x76>
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	a120      	add	r1, pc, #128	; (adr r1, 800b6f0 <scalbn+0xe8>)
 800b670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b674:	da1c      	bge.n	800b6b0 <scalbn+0xa8>
 800b676:	a120      	add	r1, pc, #128	; (adr r1, 800b6f8 <scalbn+0xf0>)
 800b678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67c:	e018      	b.n	800b6b0 <scalbn+0xa8>
 800b67e:	2a00      	cmp	r2, #0
 800b680:	dd08      	ble.n	800b694 <scalbn+0x8c>
 800b682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b68a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b68e:	ec45 4b10 	vmov	d0, r4, r5
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b698:	da19      	bge.n	800b6ce <scalbn+0xc6>
 800b69a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b69e:	429e      	cmp	r6, r3
 800b6a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b6a4:	dd0a      	ble.n	800b6bc <scalbn+0xb4>
 800b6a6:	a112      	add	r1, pc, #72	; (adr r1, 800b6f0 <scalbn+0xe8>)
 800b6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e2      	bne.n	800b676 <scalbn+0x6e>
 800b6b0:	a30f      	add	r3, pc, #60	; (adr r3, 800b6f0 <scalbn+0xe8>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 ff43 	bl	8000540 <__aeabi_dmul>
 800b6ba:	e7cb      	b.n	800b654 <scalbn+0x4c>
 800b6bc:	a10a      	add	r1, pc, #40	; (adr r1, 800b6e8 <scalbn+0xe0>)
 800b6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d0b8      	beq.n	800b638 <scalbn+0x30>
 800b6c6:	a10e      	add	r1, pc, #56	; (adr r1, 800b700 <scalbn+0xf8>)
 800b6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6cc:	e7b4      	b.n	800b638 <scalbn+0x30>
 800b6ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6d2:	3236      	adds	r2, #54	; 0x36
 800b6d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <scalbn+0x108>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	e7e8      	b.n	800b6b6 <scalbn+0xae>
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	c2f8f359 	.word	0xc2f8f359
 800b6ec:	01a56e1f 	.word	0x01a56e1f
 800b6f0:	8800759c 	.word	0x8800759c
 800b6f4:	7e37e43c 	.word	0x7e37e43c
 800b6f8:	8800759c 	.word	0x8800759c
 800b6fc:	fe37e43c 	.word	0xfe37e43c
 800b700:	c2f8f359 	.word	0xc2f8f359
 800b704:	81a56e1f 	.word	0x81a56e1f
 800b708:	43500000 	.word	0x43500000
 800b70c:	ffff3cb0 	.word	0xffff3cb0
 800b710:	3c900000 	.word	0x3c900000

0800b714 <_init>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	bf00      	nop
 800b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71a:	bc08      	pop	{r3}
 800b71c:	469e      	mov	lr, r3
 800b71e:	4770      	bx	lr

0800b720 <_fini>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr
